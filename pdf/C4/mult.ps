%!PS-Adobe-2.0
%%Creator: dvips(k) 5.999 Copyright 2019 Radical Eye Software
%%Title: /home/fenarius/Travail/Cours/NSITerminale/docs/pdf/C4/mult.dvi
%%CreationDate: Sun Aug 29 07:19:40 2021
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 363 273
%%DocumentFonts: LMSans10-Bold LMSans12-Regular LMSans8-Regular
%%+ LMRomanCaps10-Regular
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o
%+ /home/fenarius/Travail/Cours/NSITerminale/docs/pdf/C4/mult.ps
%+ /home/fenarius/Travail/Cours/NSITerminale/docs/pdf/C4/mult.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2021.08.29:1119
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 872 2018-12-21 20:39:31Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup xGridOffset add y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% $Id: pst-text.pro 891 2018-12-29 19:42:20Z herbert $
%
% PostScript header file pst-text.pro
% Version 1.02, 2018-12-28 (hv)
% For distribution, see pstricks.tex.
%
/tx@TextPathDict 45 dict def
tx@TextPathDict begin
%
% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def
%
/movetoproc { continue { @movetoproc } { pop pop } ifelse } def
%
/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def
%
/linetoproc { continue { @linetoproc } { pop pop } ifelse } def
%
/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def
%
/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def
%
% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def
%
/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def
%
/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def
%
%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint
    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
/warp {
    1 index
    1.4 mul
    cos 2 add
    mul
} def
/warpmove{
    2 index {
        newpath
    } if
    warp moveto
    pop false
} def
/warpline { warp lineto } def
/warpcurve {
    6 2 roll warp
    6 2 roll warp
    6 2 roll warp
    curveto
} def
/warpit {
    true
    { warpmove } { warpline } { warpcurve } { closepath } pathforall
    pop
} def
%
/circle {
    exch neg
    % .5 mul
    90 add
    dup cos 2 index mul
    3 1 roll
    sin mul
} bind def

/circmove{
    2 index { newpath } if
    circle moveto
    pop false
} bind def

/circline { circle lineto } bind def

/circcurve {
    6 2 roll circle
    6 2 roll circle
    6 2 roll circle
    curveto
} bind def

/circit { true { circmove } { circline } { circcurve } { closepath } pathforall pop } bind def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.03 2020/01/09
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 }
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% calculate the line coefficents Ax+By+C=0
%% x1 y1 x2 y2 -> A B C
/LineCoefABC {
  0 index 3 index sub % A=y2-y1
  4 index 3 index sub % B=x1-x2
  3 index 5 index mul 6 index 4 index mul sub % C=x2y1-x1y2
  7 3 roll pop pop pop pop
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% calculate the 2-order determinant
%% |a11 a12|
%% |a21 a22|
%% a11 a12, a21 a22 -> X
/DeterminantTwo {
  4 1 roll mul 3 1 roll mul exch sub
} def
%% calculate the 3-order determinant
%% |a11 a12 a13|
%% |a21 a22 a23|
%% |a31 a32 a33|
%%   8   7   6    5   4   3    2   1   0
%% a11 a12 a13, a21 a22 a23, a31 a32 a33 -> X
/DeterminantThree {
  % |a22 a23, a32 a33| * (-1)^(1+1)a11
  8 index abs 1E-5 lt { %a11=0
    0
  } {
    4 index 4 index 3 index 3 index DeterminantTwo
    9 index mul
  } ifelse
  % |a12 a13, a32 a33| * (-1)^(1+2)a21
  6 index abs 1E-5 lt { %a12=0
    0 sub
  } {
    8 index 8 index 4 index 4 index DeterminantTwo
    7 index mul sub
  } ifelse
  % |a12 a13, a22 a23| * (-1)^(1+3)a31
  3 index abs 1E-5 lt { %a13=0
    0 add
  } {
    8 index 8 index 7 index 7 index DeterminantTwo
    4 index mul add
  } ifelse
  10 1 roll pop pop pop pop pop pop pop pop pop
} def
%% calculate the 4-order determinant
%% |a11 a12 a13 a14|
%% |a21 a22 a23 a24|
%% |a31 a32 a33 a34|
%% |a41 a42 a43 a44|
%%  15  14  13  12   11  10   9   8    7   6   5   4    3   2   1   0
%% a11 a12 a13 a14, a21 a22 a23 a24, a31 a32 a33 a34, a41 a42 a43 a44 -> X
/DeterminantFour {
  % |a22 a23 a24, a32 a33 a34, a42 a43 a44| * (-1)^(1+1)a11
  15 index abs 1E-5 lt { %a11=0
    0
  } {
    10 index 10 index 10 index 9 index 9 index 9 index 8 index 8 index 8 index DeterminantThree
    16 index mul
  } ifelse
  % |a12 a13 a14, a32 a33 a34, a42 a43 a44| * (-1)^(1+2)a21
  12 index abs 1E-5 lt { %a21=0
    0 sub
  } {
    15 index 15 index 15 index 10 index 10 index 10 index 9 index 9 index 9 index DeterminantThree
    13 index mul sub
  } ifelse
  % |a12 a13 a14, a22 a23 a24, a42 a43 a44| * (-1)^(1+3)a31
  8 index abs 1E-5 lt { %a31=0
    0 add
  } {
    15 index 15 index 15 index 14 index 14 index 14 index 9 index 9 index 9 index DeterminantThree
    9 index mul add
  } ifelse
  % |a12 a13 a14, a22 a23 a24, a32 a33 a34| * (-1)^(1+4)a41
  4 index abs 1E-5 lt { %a41=0
    0 sub
  } {
    15 index 15 index 15 index 14 index 14 index 14 index 13 index 13 index 13 index DeterminantThree
    5 index mul sub
  } ifelse
  17 1 roll pop pop pop pop pop pop pop pop
  pop pop pop pop pop pop pop pop
} def
%% calculate the 5-order determinant
%% |a11 a12 a13 a14 a15|
%% |a21 a22 a23 a24 a25|
%% |a31 a32 a33 a34 a35|
%% |a41 a42 a43 a44 a45|
%% |a51 a52 a53 a54 a55|
%%  24  23  22  21  20   19  18  17  16  15   14  13  12  11  10    9   8   7   6   5    4   3   2   1   0
%% a11 a12 a13 a14 a15, a21 a22 a23 a24 a25, a31 a32 a33 a34 a35, a41 a42 a43 a44 a45, a51 a52 a53 a54 a55-> X
/DeterminantFive {
  % |a22 a23 a24 a25, a32 a33 a34 a35, a42 a43 a44 a45, a52 a53 a54 a55| * (-1)^(1+1)a11
  24 index abs 1E-5 lt { %a11=0
    0
  } {
    18 index 18 index 18 index 18 index 17 index 17 index 17 index 17 index 16 index 16 index 16 index 16 index 15 index 15 index 15 index 15 index DeterminantFour
    25 index mul
  } ifelse
  % |a12 a13 a14 a15, a32 a33 a34 a35, a42 a43 a44 a45, a52 a53 a54 a55| * (-1)^(1+2)a21
  20 index abs 1E-5 lt { %a21=0
    0 sub
  } {
    24 index 24 index 24 index 24 index 18 index 18 index 18 index 18 index 17 index 17 index 17 index 17 index 16 index 16 index 16 index 16 index DeterminantFour
    21 index mul sub
  } ifelse
  % |a12 a13 a14 a15, a22 a23 a24 a25, a42 a43 a44 a45, a52 a53 a54 a55| * (-1)^(1+3)a31
  15 index abs 1E-5 lt { %a31=0
    0 add
  } {
    24 index 24 index 24 index 24 index 23 index 23 index 23 index 23 index 17 index 17 index 17 index 17 index 16 index 16 index 16 index 16 index DeterminantFour
    16 index mul add
  } ifelse
  % |a12 a13 a14 a15, a22 a23 a24 a25, a32 a33 a34 a35, a52 a53 a54 a55| * (-1)^(1+4)a41
  10 index abs 1E-5 lt { %a41=0
    0 sub
  } {
    24 index 24 index 24 index 24 index 23 index 23 index 23 index 23 index 22 index 22 index 22 index 22 index 16 index 16 index 16 index 16 index DeterminantFour
    11 index mul sub
  } ifelse
  % |a12 a13 a14 a15, a22 a23 a24 a25, a32 a33 a34 a35, a42 a43 a44 a45| * (-1)^(1+5)a51
  5 index abs 1E-5 lt { %a51=0
    0 add
  } {
    24 index 24 index 24 index 24 index 23 index 23 index 23 index 23 index 22 index 22 index 22 index 22 index 21 index 21 index 21 index 21 index DeterminantFour
    6 index mul add
  } ifelse
  26 1 roll pop pop pop pop pop pop pop pop pop pop
  pop pop pop pop pop pop pop pop pop pop
  pop pop pop pop pop
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 1990-2020 The LaTeX3 Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
true setglobal
/pdf.globaldict 4 dict def
false setglobal

/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict~
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def product (Ghostscript)
search {pop pop pop revision 927 gt}{pop false} ifelse{/BorderArrayPatch{}
def}{/BorderArrayPatch{[exch{dup dup type/integertype eq exch type/realtype
eq or{BPToDvips}if}forall]}def} ifelse /HyperBorder {1 PDFToDvips}
def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx pdf@lly pdf@urx
pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly exch def dup
DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx exch
def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 4.00005 0.49998 moveto 2.00002 2.00002 lineto 4.00005
3.50003 lineto pgffill 16.0002 0.49998 moveto 18.00021 2.00002 lineto
16.0002 3.50003 lineto pgffill  grestore} bind def

 /pgf2{gsave exec 2.39105 3.38733 8.26909 0.79701 pgfe pgfstr  grestore}
bind def

 /pgf3{gsave exec 4.00005 0.49998 moveto 2.00002 2.00002 lineto 4.00005
3.50003 lineto 16.0002 0.49998 moveto 18.00021 2.00002 lineto 16.0002
3.50003 lineto pgffill  grestore} bind def

 /pgf4{gsave exec 2.39105 3.38733 6.97394 0.0 pgfe 7.80008 2.40001
moveto 7.80008 3.20003 lineto 11.20012 3.20003 lineto 11.20012 0.8
lineto 10.4001 0.8 lineto 8.6001 3.20003 moveto 8.6001 4.00005 lineto
12.00015 4.00005 lineto 12.00015 1.60002 lineto 11.20012 1.60002 lineto
pgfstr  grestore} bind def

 /pgf5{gsave exec 4.00005 0.49998 moveto 2.00002 2.00002 lineto 4.00005
3.50003 lineto 16.0002 0.49998 moveto 18.00021 2.00002 lineto 16.0002
3.50003 lineto pgffill 0.59776 pgfw 8.00009 4.00005 moveto 11.00012
4.00005 lineto 9.00009 2.00002 moveto 12.00015 2.00002 lineto 8.00009
1.0 moveto 11.00012 1.0 lineto 9.00009 0.0 moveto 12.00015 0.0 lineto
pgfstr  grestore} bind def

 /pgf6{gsave exec 0.59776 pgfw 9.00009 3.00003 moveto 12.00015 3.00003
lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 4.00005 0.49998 moveto 2.00002 2.00002 lineto 4.00005
3.50003 lineto 16.0002 0.49998 moveto 18.00021 2.00002 lineto 16.0002
3.50003 lineto pgffill 0.59776 pgfw 8.00009 1.0 moveto 11.00012 1.0
lineto 9.00009 0.0 moveto 12.00015 0.0 lineto pgfstr  grestore} bind
def

 /pgf8{gsave exec 0.59776 pgfw 8.00009 4.00005 moveto 11.00012 4.00005
lineto 9.00009 3.00003 moveto 12.00015 3.00003 lineto 9.00009 2.00002
moveto 12.00015 2.00002 lineto pgfstr  grestore} bind def

 /pgf9{gsave exec 10.0001 -0.49998 moveto 10.0001 4.50003 lineto pgfstr
 grestore} bind def

 /pgf10{gsave exec 0.59776 pgfw 4.00005 4.00005 moveto 7.00008 4.00005
lineto 5.00005 3.00003 moveto 8.00009 3.00003 lineto 5.00005 2.00002
moveto 8.00009 2.00002 lineto 3.00003 1.0 moveto 7.00008 1.0 lineto
5.00005 0.0 moveto 8.00009 0.0 lineto 12.00015 3.00003 moveto 15.00018
3.00003 lineto 13.00015 2.00002 moveto 16.0002 2.00002 lineto 13.00015
1.0 moveto 16.0002 1.0 lineto pgfstr  grestore} bind def

 /pgf11{gsave exec 0.59776 pgfw 8.00009 4.00005 moveto 11.00012 4.00005
lineto 9.00009 3.00003 moveto 12.00015 3.00003 lineto 9.00009 2.00002
moveto 12.00015 2.00002 lineto 8.00009 1.0 moveto 11.00012 1.0 lineto
9.00009 0.0 moveto 12.00015 0.0 lineto pgfstr  grestore} bind def

 /pgf12{gsave exec 0.59776 pgfw 10.4001 1.60002 moveto 12.00015 0.0
lineto pgfstr 0.3985 pgfw 10.66016 2.49069 moveto 10.66016 3.15096
10.1249 3.68622 9.46463 3.68622 curveto 8.80435 3.68622 8.26909 3.15096
8.26909 2.49069 curveto 8.26909 1.83041 8.80435 1.29515 9.46463 1.29515
curveto 10.1249 1.29515 10.66016 1.83041 10.66016 2.49069 curveto closepath
9.46463 2.49069 moveto pgfstr 1 setlinecap 4.00005 0.0 moveto 5.08101
0.0 6.00006 0.9 6.00006 2.00002 curveto 6.00006 3.10002 5.10005 4.00005
4.00005 4.00005 curveto 2.90001 4.00005 2.00002 3.10002 2.00002 2.00002
curveto 3.20003 2.60002 moveto 2.00002 1.60002 lineto 0.8 2.60002 lineto
16.0002 0.0 moveto 14.90016 0.0 14.00017 0.9 14.00017 2.00002 curveto
14.00017 3.10002 14.90016 4.00005 16.0002 4.00005 curveto 17.1002 4.00005
18.00021 3.10002 18.00021 2.00002 curveto 19.20023 2.60002 moveto 18.00021
1.60002 lineto 16.8002 2.60002 lineto pgfstr  grestore} bind def

 /pgf13{gsave exec 1.5 0.49998 moveto 3.50003 2.00002 lineto 1.5 3.50003
lineto pgffill  grestore} bind def

 /pgf14{gsave exec 1.5 0.49998 moveto 3.50003 2.00002 lineto 1.5 3.50003
lineto 3.50003 0.49998 moveto 5.50005 2.00002 lineto 3.50003 3.50003
lineto pgffill  grestore} bind def

 /pgf15{gsave exec 3.50003 0.49998 moveto 1.5 2.00002 lineto 3.50003
3.50003 lineto pgffill  grestore} bind def

 /pgf16{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf17{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf18{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf19{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf20{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf21{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf22{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash
3.00003 0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto
-1.65689 3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689
-1.65689 -3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689
3.00003 0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc
pgfstr grestore newpath  grestore} bind def

 /pgf23{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: LMRomanCaps10-Regular
%!PS-AdobeFont-1.0: LMRomanCaps10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRomanCaps10-Regular known{/LMRomanCaps10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRomanCaps10-Regular)readonly def
/FamilyName(LMRomanCaps10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRomanCaps10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-496 -290 1501 1100}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53E3095EF5AF4F01AA2B5C2934E5345
1D88D311DB46915432DD0F408112AADBDE54032868560673D08129A1793B6FDD
D1D82ACA35A8223DA18ED7A03094DE92156D5D0B42FF6C449A1823CEF7555FCA
B35573829AE5A55A1381600C734661125E28C2C51EAD103F3DD496F6EA7096EE
8FD3BEFA4FBD7391DF4FAAFA38FCC474FC632D8A8C890F5276629AC2552B74C5
3C8C4B1DF8FC58A3050CDF2357DD1F98E83C4D077AEE399C268ED59CDE9DFA68
BFE8629B52E8DC41DEEC0C9E84BDEA39B4AC552839755CBE2DC820864DC9612F
16D1A532150DE0137F647DAE154785D152CEE57AE3FF8F671B20EFA22C5711DC
B9F8AA784F222AE1183B01E2AAC6254D7994624D1B351DFF6CBF3B4F7B1DEC63
CCA90AEB60F15A33F727877927E80AC8722C27C584FB671FEB518D1DE33FAA48
3173C60B382AA1F0B22369BE368CBF749E7559509205B38DF4326DF6A6161C4F
E3553EE51C42032B00F69252E9043B7928B2824FCDB5189B3020CF1D596C59B2
135BC9D16D037D87C31B091D7C4DDDFAAB32D68F9C396CA3BF22BD6824BFE582
93520934A63EB6473935B1EB4801E3ED6475320DBFBA8C2F3F98F03DB06C3F05
B0B06847EA50E8220C87171F32F759EC361701793C97953550ECA6D4B28EC2FD
607D51FF237723D79DF208680711F2DAA6172AEBF28B736756CFE9D56EEF0156
FCC46EA96AFB2A804A3BEE06E0A59EC3652633189E85E68B5F3EFA7CBF91E3E1
D7472E66CCE86A28D2FE799AB043DA1C74EFBEB5C5AE6123A71702861463B56D
7BC98F38D9C0B29C25645142AD8BE57953956B838F815285B8802EE4BD0817BC
404C04D71B0FDFF6DC455B51B305A005DD7796527CD8561337EFB990C47DCC87
E2A042ECD49871111D71785275257C303761638CB0EF14492762F5A1CB7BD472
F0B01BB09FC6863455F33DE4BEF212E60A9021B94F42EE04735AF673E3D24A74
35BBA4EE640862CC2C49FD18BFD4A21FA259DED7A5F13C74E62BB9A4633098E0
15F6E5DD084E687F8909E2288265BB98D64189CEA29065AA87E8BB636C3FA965
32FA00F88F4C98217A140A3162D903EDE2880C3743AE61EA1D3E2DA8EFD0F95E
E88605CF6872260A0C808EB620E9F9156627EEF4B4F07CFF943A70AA730E2B56
3A5912AA256C9519F4F8A46E512BBA9F099FD0A4E11C873E88DFFCD25D0F0805
B0EA04ED10F3D442573A56648C90B3D8C4C44741A535D965E48F0F4AD114076E
79FD9D0DBBC50EDC121CA1ABABDCA567BB9D28CB3E5AE17F756273333E84F341
637A1BDB292EADD055C971FFA94B4E72EE284C44A9C294B2B18D9A2E50D90BEA
A161415478975E25D1E928C5867A495F88565BA02CEBBA62BBF3976782EE4B45
DF434B01660CFF3F89AB4FEF6BC7F7D7F83EED9F947931149B6CFA3CC38B537B
6C89BBCCE6C448AC5C61D17285F9E2E321C96C5501772C32C2B6183CA0BB5DEE
4B7C3C8F0D77EBB70D341E595B5A7BFE2B471EAC3CE6C0BB9A046AFF0D3CDE8F
81C142E70727135017B39A5A1AFBA562AA96BAD4D66958AA329DDE6CAB90B3FE
38E49F75EC083CE28D488E75BBF597DB49E3F42610D596C1D91A878EE680EB84
C857186645C467EC0164AB6086D2C2D95C1BA20D36E2E8C1494640BCF0294FF2
103926BD4D83104F9B660EFF434CCDDC96CC25E9F54CDC9E19D966D068DAEE4E
1255BF293797A1BD1FAAB9AF2BAB48057DE0E3C276E3A5117350E877FFF97EAE
242EFCE7ADE5DAB83C34AC97C66C21F4CE4812FA0F007C12820899207C35F3B0
14133645FB9F8E53A6E2A1CC08CED4D33CE9B69E7A5D0E31726EC3BF9FD98C0A
E5BA1BCF5166779F26081CE1DCF8FCBF985B41005EA0771D91D5727FB447795C
A639A5C9057E97FDC795EE6B7C39AF1AB0338BACA1A1E179F1AF0EABA623864E
553A210AE8C03A525E467DF8744A8B6DB57E04C99BF7F568041BF90B5EEC2B73
9A109B37B07E8A668E68D117A3E0C46B11617838874E7F840DAB45050FC413A5
037107717FB43013DA06FF41184DEF3526C06FD5BAB6F3763BD358D6931EEA4A
860E1A17079A59DEB9C7A4C0FC68AF583ECCBE6FE0329A031820D4D1DA9D11F0
2D650DFEAAD917E7F290E617903792223A2AA23AE7069154690EB370F940BAE2
395473B7C2F70EB4DF0E94468FBA1B6D5F1CCF350E3930ADAE5249B3D5CAE21B
281B22FAE6EE3AF85762C36421F291360670443326A44F1F4EA0E002D8B94CDA
144057B4D5F9FD416ADBAD209422879682A8D0D249CDBAB31345F45FCE24252E
D45316EA9E34A9EA03A6C950682BD7E72A81DC4FB2B9CCCA501761022009926B
5F55C9CB2855D5D049D3C73CBEF771A594437E6E1C6B0F15FB3102DB7A3DDCB5
3BF882D33E5A43EF201EC0B415DC701E8FE4FD3505B993F5CFDB502635117336
387D170AB42F95FFE8C79DD1C5CD4860749F82198FFFDAE1393586EFD3956EE1
0F7A3EC03DBC1045CDBCCCC3950C6C443E1EB25180C92F0640CE6A8AF3AE7EB1
81C2E4C11086C2ADDBAEFF30348287C9C3FA8B34A76654DD7AD692702C462BC8
6360DF3B3C743459AB088BEA49C5D06D6EB67124373543A2C18439DB2227247B
30A41C72B8836026F60961F8EA96BF0A4F3E778B9002DD7488DAD1A42BC257C3
C7149CB99114E73DDD3F9A78BBE152E1BAD8C1A22328682504131249C8468ADA
F74760105E07065AAB5CFCACB826EFB41D1A7A6F59DC8AFFD065CAD27B9EB202
0C908E91E81B07A92AD544D202816662873464594EBF58A0B38A156331EEAA0D
0BC24BB44DFFFCBF4181A86F0A4BD25C3921CD2BA8360AAD322C021122E962CD
756DE48DA93798FBDD034F4304D5EDBBA164DC9E9B3414D00E9F5B712394804B
D4BDA26FE7C2418EEB63B7E393108CADDA24C91C1962272359F2535FA1D1A508
FB5023D07D392FDDDE2AC0E0708B430846E137E6CA0B5436653A968FE24DF8D4
6D2003B45B60BB1B6D62DA735DA6689C2C03F196ADC11B27E608674E546D2074
A3AD2FDED543CBEB81B9271E5EDD5DEAA97BC86C948570063933291D78AB5298
EA92E13430C7CA1FC658FA031AAD0EA5B01D22253D6C26BF3F435E6A6E9147BC
1B68EA135225157DBB906F75C799F437E74F0E185AD518B7E446C30415CE5799
01D43D8E2B08A04783C5E1AB77A3E641BFCD7753EC20A9D8AED089AF77F0C5D8
96228A3AF8A96329A5F0EA14F929D5598F4437AB944A06B5EEC3343EB29A9271
70DB0EA31A11EE7634FD75CAEAA480F411AFB3A933234276082E17993B297043
B2F75674AA08FF419E5CBFB6407856406CC9C52353EAB3C79BAAEFD74B08910F
452C7FD271C1B9BACA52194DCABDB4284B77C573C5A7EEA60AC017A3CBD6BA59
A1AC2BACF1545011EA84CB75B2C5ED13C702870ECCCD60554EE8C5D4B9F2FB5A
92DA2D93B04417CC9240E9C692407250E7D47C97F9B3A11C8CB3EA31F589BDA6
00E115E70395E2E4C0A29284FD2C9A8740851EDC442490FAE8321683AE4A530F
EAC44A63E2B90731652CCDDBEEC58F573951454FE7AFA29CDDEF96E951AAA9B8
EEB3F9BD5F13210AEC71AED98317186244404D4812EB1E27A42058A387726A74
FD74B84CEABDA95CAA798540DFB193A897AEC52D74BB6747FB9CD5A633DF5375
2834D9E6147A844A7DC46DFC69EB7B63E6126545B566CA3099246CC6E5F85E04
5FE750DA4A9B403FD293CC4363897147A165FB658A4E7A74EE6C22C2737A8107
63C405C5DD41D7ADF7112DB70AEF68FF3B8773848FB918BD1D4D4963B96902F3
A84599D73EB3303D7B74883137EA5EEE14B739F60D45D102706C99D92E1CA501
846CC8AB6FB3AD6AC55575E66721F58FC39D634E3C68CB3E2E24D61819BC8515
9520ADC69ACA26ED5D96EF04C2AD0153759083DBE7DA9B89D877992A8DC821FB
5A141A58CC2A46228F2F642101F5B23CE1ED3A79F2C6006E04619B81578C0EA3
C3A72402DFB9B35C8E59BF582621648F48CC413EDED067EF9BEEEA1134788A6F
839F2C2FB22529A38153E830445FFF661BCCCA767DB0BCACA4693DF0370A9804
2E527BD65EC1E77D32A07DD7E1149715178A46263EFFFBE20CF045D1F128CA45
50BA9D6D6DA61B84D00CBC9FAE5924F8209ED49D597C20A0CAD1C2D3424E9CD5
8A179A2BB40AC54D2E45D206928BE43A964D2311F07753D0CE4ED2AD6198A473
F1F9EA821DEE99E27D331F0559477F0CF1D9731533BEFE67747FCBD3460F9E80
3E409065E158DA49560DBF9060489CEEBE735CE28EE4ABC81450157CB7DDACCB
72A0FB560345386569D9DEE8754EBA551B635693EC4FEEA9CDAE3564D5DB1DC8
0645A5DFBEDC32C58223FB032506BA87BA582862CCFE1FD43197B1C7953BD8F4
DA1AEDEC773D5C063965683DCBA5BAA51ED9F1F601F0F088C4C2859090964202
143D72C13B747461135CBEC72D82A7C1602B824629FA3F773B665ADFF0135A65
ACB5311765991CFE59744E7CC201895FC7C2415439EA0112F1804CEFA65F5653
92ECDDDC6641E651C4CAC35F163BC67A18CC18839FDC4EB001A723EE59734A18
EB12CD7C54DBA9F8C47428CFC2B96879AC6792E812426A33CD78A844120B5B67
120BA7884AE4336F3FEBD08B7B93B550CC6D1ED120AC16308B6DD2B9A8F686D6
AA020E49172C02DA888DE03EC12D4EA38E7D327F0F4C117F34AB17610F5D7F76
C207FAF88C8FAEF2476515A41387CA09174006C8F2125DB485D1F37C940A8F4B
3E4DCC91413C3273DAC2A3FD2C49E3C9AB8FF8EFC8DA34C873E57D38B01DF487
3772137582971F3249E6694A24DA005C84176455BA74C8A97447861732DFDA1A
5752B5222EDD9012B45CF0DF0644B2E5B7AE5DA72EFE54D294768DE021DDC1A7
C76EF77C6E740449BEE713B7E40F77F7F6EBB4BF933204D9E5E28D522591D17C
997D66D0491D2D29CFA7F4C88869E2D53DBAB54563CC5357F755C48E49F4F103
4A8645A68D436C42FAE21F2C158167C6BA509BED34E0B0DA099434D7FE957C3D
52C2AE0E9177DB0B86627B9DE43A7CAC25E8A1D8B592CDD4375AD01D63E8F687
46B8029C831A0871A8F9F2E264EC10133C444A86EF7C38608D246A1B4379C45A
7C34D82EBEACACC718F5905E864DD54CA062EA1FF406D9E2E42031876A1CFCE5
8D611A8435A8459CAAD2B618D4BF9115DAC5B425EC8BA4590DD3555C2E4BB601
97FBB232487FD786E57CA1229401BF634D445C93FDC157796BFA5502F105FB79
F31A554D8BF98B8303CFD661ABF9A72CA0629AA65989A7AA9AC8B6930AE574DD
D32FF4BD7C970D933C47EA4515043C418049903E3F36885AD45509FC3CF6F31E
975595338AAC667E1ACC0A3D0AF0B6A0995FA0FA6A1C7BF34A0E25EFB2AD7503
D23492E7E980B2C4324736378E0843451E4D9840AF87F800D3B6E0248AC51AEB
F052E92CDC3ADAD81E2D2AABE09DD98F5AE00F69DACA0535AC90368B31AB3110
CB4EB8D00DF6246BA012FA3416E1EAF822DCAA6C0C4142A552F0D97037FD695F
92137A8CEB212797BBE778DCDB2D0F6726BCF115DA15374CB688BB2F98BDC3B7
21DB34D4C6186E5CB2E597FE2055304950D905D6AFB4390B62A3173B522240F0
D3AB72588D98BAC8AEF2D4837251BBBF065C283B7C7B3BD08D7708CF72309950
D176CFAA1D155312586A9ADC136D9155C3C6ACBDEF8BA575387DD0D73162CDDD
96166F795921D90204DB9F3E3FBE084A2DECAA1964AD31D9D2F4743E73B73557
69B7ED30FCFA10238AB9E263F42C980A603B024C1844C08D06E40C58072E7D12
43257B02B8CAFF2AC2FB7868A7FC61E6AD2CF8C5CA6111D592F4184FABB849A3
676A8D175D44E71B9CEB49676700958F17D09D8B8D37746E5AB46052350D2D3D
6947F4B53D2B14FD50B4CEF4398D2D2BE7E7A3103A10B82E0E27702BF83306A0
C3A89D9AD2A517E03614C8349282F97AF2292BEEF24F886427E846C0BD15A807
62263CD8C96EAA02F137C2134A47241E3F15A881F6A2FE15BD745CE175B92169
7F9D9FF0803559FEA211098B4B45E88443AFB83F96DECD5E0B32C5EA329CB342
00253C789CF8F0CC740618BA5DCDAD4693F4E17363864CC8AB69FF9238E0B18A
F4114B94CDF5DADB44EAF5DB260D8B8BC3027ADFF7DBE2AD88CA3261C59CFC1E
C0418A91E44F1718D13CF485B3CAE0E01B327EE29107319D27F242A8681C2397
F448C46BA164AC7BE0C0A73FB423A2AD05E28D490FE15EBC6A6956477E8B7DAA
F1AE28A6B253A55B77C969975DADE58C1A863D53B67DFFDE2F48652558A2D707
BE5A2C968491730CC85A6FAC2CF9D670F1FB69EB4966334402F76388AD6AB9DB
661A04037C111998C99A0A09C9002478AA31E4240F13D73182F04410A11A88EB
D5278ACEC4A55F1A082D537B3C1EE890A6FD2ECD5F4D5DE99814AD4A07983923
64FE0BEFFF89A5599AA47087D62EBF48C20DCB99FD2BAE6853877991059EA431
7ACD1B3B44D9E5F789B7877ADFBD0F5BF0D86E0DC7B68A3F2D8B66E59BE53EDA
B3DA137D59CC6EFA0F579F8A1C5E4FFF0AF7FF5CCE31B93E4048CFBFCDADF56B
75CC3A9291183CA5F1FCD9BACF833A9D58F384DC27B11B3380AED6F7A6719B66
AA3E4CF7A10D86C2E63BB1BCEFB27E668CB9A72C46083DD42729C37C41DB7347
D16B9C41AAE346617AC1DA9EDB3A2ED55D49DDDEFA61EA1F01DAD0A1CEAB6B77
A4F4A47CB6269D49966E24FE51C7D95B1FBCC83587A2536500DAFBE0CA7772A5
89F8D9CDE0932B5D3A1819CB2732460837EDC62035D7D232AD000EDC4598F22B
950DDB38150538219C18735C6FE1823BC63C569503A4B5CBCCDFEEFC01872476
101D65E487A587BCA95243A1EB5BA0431C918A879828150795CF2BA78D4E55F1
FDBABB8BF813CB9DB27CB44AA47AA0D4E648240D872FB7614B5068382C766444
22AE18999FFE37981189CADA735CF09EBF4678CFABD1A6D3FBBF8357D4DC0524
BC6A4F583F56C127E3666DF8476D5A8A6CC0A5B1420DDB2B7E75B0A8C76AA6C9
98C9AD482CED7C243C9688323D96A3F96517CFF904BA26767486441050388419
88EAA2FE0155EA8DC3F8EA9DB943789A191542089E218EF40FB4942319C28B52
2ABAF817F506EF45F7262128F935F4893B87C2220034C6F979B5B3DE3BA5858C
38C9C1337A638C0E5C575727665665C88AD38E13EB02AC3AE5CF08B53BAB7FD1
3E263C2549247D8DF74C6863D43B0266C927FC0C7682845F3E4266B7D327312E
FB770916FBAA37015011999870F0AD19B5EB1B9D54BBE7593C45B8F41C203368
AB891AA0006AFDE458F28C88624B7CD1FEC7F9EF2C74697D12EF1AC78B34E566
672E71A0A5B53E6FEB67E477C72E6CDA1458BC8DB8E1DA62D42F448933905E64
F93DE35FB61FDFA5A4C78E426D6F68DFE42F76B1CF5F095DCFF46884A1AD7C81
AD55FEE036634EFB88A2B1ED19E37CF0B527D14F008E134FA0711FE40BC8A925
3E5027D8FE5FE873E98EEF621E059DF969C14E19E1CB4EB43B64E6957AEEF5C1
7D832383CC11E5D6419158E6A838BB3106F54CEB953F0C16D9F1CEF47274C469
0FA0620F50E5BB14A0F359C4C172951461E884747D6E5D29114039F59776D65F
0A6D9E5088AD245098A9CFAE5B44CB364AE68381B4DD8789E1D35D4AE06A0511
07EA4D90D3FFD25223604AF01B5F46C739DDC81B47978F0BDBD79F9A6A53DA20
0FB56DC483BBA3EEA535009B3A8AC750DA63EDE128761D164A9843955BBFEC72
13307B78378886F93C1C822EFA66A75E01A68758FD97C5928BB2B1DCDB63CA10
90BA2CDF850F9E1A5C5856D41D8FB730E048E0EA435515BF52FD453207213F3E
13FC83A36F2D86CBF4AAC4ABBFA39688BB222A81685006706434FFEF6D6EE0E7
0900D14EF927A2F0C3A8BE6E4CBC44070FC79D85C273074A7E31F7C63BC4DA2C
8E1C1CEA7000F63CA5BF75389D057C364EB8747A414F55FB4FDEB79A695E89B5
B2C3987863CB4B29ED6BC20B0687BF97346B111AAD8EDD835B26DEE73E360BA2
4603A6B42398895F1F95D5F0D0225D8EDA64581718ADF5FBD7277E57E9919BD1
0558E3A5022F158043BEB6A6820566EAD71325D69BF3460E9C3C7E0C0F1BB457
048ED47325A221E91DC93BC429BB517890A8F857C2F54BA01FAAC221D701C672
36E08C7A56288E339620A52776770935A6A193FA21A3DC25DEE1FF03955E5671
C075DD53A5A82FE7F773815B2AA555BB03CE19B2B72268C40F772CFA2CD7A598
A024222D413287F7481B9AC0E13B169DD71090499B415AD8AAFD99AB5DE2BBC1
1B40ABFB7CE655281EAE4F27B1E027C2A23E63378F5339306A9F79BF2523B16A
083F710C102E07B67194745D7159FCDBB10B6459273EFD03520F2483A9E6C0E5
665B54CFCA5BBE96B39E69D388D9229C1E361D6C47FF84A49AE0C70F71EA41B0
2E1DDF2DE8630CFC5F2C8AE1E5BCD78411D194A831BD263880153BECC873A9C7
1796A7807E2345AD02481ACECEE7243887DBA28E28217389829F4D31CECC14EB
7C948E6E6E104A080B9441E0BC3624493ED50AB68A0B22A779D7D816629D1E36
FBA83C5BD9BC2C57BCEA7F9A6886C9F13EC903E886DCB7291933374888A65847
44692F87A67A218BFBCC8896E57E4DF116E24E0B2C3DACF2BB4D4F11C5FE4243
E79E7B7164A60BC32326C2D36742C0D71D21C63AA4DEC82918F11F62984C5F85
3516C1419DF929D29EAF4490A01F57EEC3A27B18E547B77AB0DD203BA47E66E3
B8932462C277481778614D372B043761D928D66FCB9D760D3096B5CAB2A1DD50
A23E443D8A30572DD2A12550B2D61B5B8D3DA00ECDF9FEBE424C8D607EF6BABA
6D1482E9C494671BB7A2FFB0FFC63B7D9F12B2F4A61E66537C09C6F27C5348D0
4809C49896E18909ECD6892BFD2B0D73A84B6E682E463E69702266FBCF04AC9A
0CAB64076EB9EA884B2F5A13400556D1D07217CE900C16506F570143710E9AEE
87EB93711F2A49C15DD57EA42ECA4E6E8D58BC4A195405629408224D07020749
9DF2F43E7D52E442E951CEB1C926563979CAD433B91341797AC8D4E9842A2025
15A73ADB4AEAA456ACCF3FA9FD5C0D7DE2197E5C96CA1E77BBDA711E73F6CF45
F31613A24A30023BEA9A207E8E4E119B5356CED765F73F6935478D5133B9E761
4922209C25478E0A63F78F3460EDD4F64B4D2A5B3E660B614F62A53AB284FAE1
FEB947C50CE8BE18F24922B066F392E4321F75C42A86C70CC8E4AE8F6F84FC65
3EAE2D03CBEBEDA67F83FA8F1322A68097441DA3511D8FE63394AA5E6B7F441A
D12126999FA71ECFDD70607C4FFA2A1D6C138C8A750A892DDAEF50284D2CEADF
C997B78F9AF18E63822DA479E4279465A6CBD43EB5B5DB8B72E96306900A09C9
002478AA31E4240F13D73182F04410A119C72285F06F1773BAEB6FC8CD2EAC6F
0799C903D18C64FE378916128CCEBF8943967A33F856A40BA5B302782175203C
082BC703ED67F8956F3C757799D61A801701C34E5F0311D00A7FF64F31505AAE
C9170516D38C247C25CC98E436D6B0129745977065519D41FEA05DE277A2B681
6846BF7BEEBF9D323B549CAD581F17DB11717FE745194FD74DDFA29EF38C14A7
D31F074565A14EB60996DCAA0762F3C701390274F4A233B7C21EABC56271E0D2
6F4D8222E82DFAE6D7CBDB0C2F268BB8BFFF2897D51564ABBBFD16D44724C916
7C7F909DCEC3005810B42BD9CA1B33DDC4B3D69A6DDA20E104C5BAB68F3D943A
9B0E24B8327345DBD550F4D3A85FEB2007E09F408B6FB0408AEBF36BB9459C6F
41B3B4EE5B63571F18E7077F1990611E243FB8A327EFE9CBBBE8F9B76ABA9F6F
7335FDFC57213D5D25DAA9FF60D639DE068E6459B14ADFA9FA485D2B692C522B
F8E5FB4531330E02C9A8EBCD6C3AD71A1E40A4D3F1B93134816B1E636A2327F6
240BFF595E24EF8941707987E8E672F486552480FFE3D56EF1EC01FC6D827091
334762A700EE46CCFF0F8222069A239E9C090C056C50ED33CCDF1DC4CD54AF2B
27F3898D35DBACB95E33FD81D89FFDEA459395AEB1FD2A2313C4619C3924D6CB
4C7156FED518164901F83DF3BAA6A0ED3E1145BF13B94FD26442237EE2121C14
F116A1114838B333EF11ACBCEC26CB9945AA4F8F616FCC76E4B0D7BA8C76364C
F343FDCB3945F586BFB542B229FECFCD917788FCB6F16B6C1C40E3E00F45773D
C20480C8D6BB75756FFD8F5C7A6D66A69276CF920B7BEC2E368A095DC1E3A421
F0C532042E003906F07403A54AAA87A7CC1465CB48ABFD9A879E5B8A847E9323
2C034664E2C43DF499BE3810C38A4BA01A31B5C80138263B8E0DA1FCC4238D71
517DA16343332416C4BFE510F180C63CD039D399B1D9C4208BDE9F2A8208512E
1E9EB36A96421288D8A846DA9F3D3B8DC89359340E6D6E4BB80425136F59F84D
8B2D3548C5EA909142D33AE8B2BDCC9705D1EC8848293ECD9599CAADB700A176
76B96C607DC49759734D8F1EBBF10A7E363AFBA180CC2897C588A09FDB14647F
570BBEE55DC7F2AED3E75B7AAE70ADAA461BAE73B4CBBA029A5BD8AB7E658340
5263C510185BC34AAC67226177133AA7CD431BB67C5261595CA2A18E0FD97413
5F38D540014D38ED97AC4F6058C1B834BD195096C9A61145921EBA98A70B52C5
BCA89089361DA0D7AB8B979BD91DBF43FB52495F20DFBF159A58F3D4BCCF3638
857C25C73B78F5C35FF0DD1AE8036C3620836DA8BB5CE31BAA722DDB36BA5642
CE4110C57A3A4D95D4D5188EBD111ADAF13004B95BB6A1F91C919C28F67F64AA
534A2AF512C1F2BC5BEE9F21801512D2455DD4B94E0C5EF66E5F4252E5511A19
172AE7E16B6E84C13265E7A78843F80CD719C44633862B102690CA956190CC61
CEF424A54E62107D2ADA1C19405B9CB4C39694E52AAA56E56F82678A4327EB6C
A34EB5A6A8B1C41ECCB9418C1094CBAB96EE405DCF58E3A569DF07092225A683
511770EAC39ED55DADB32778CAE943CE6E928D5C8A44F0B691350DC0E4B38E4B
5B5868A34E643E6075C7A82C17F569049E4A119632C47683095845CE5281573D
CCA18F596C2A638DFA3A2A0E4088072A3C9E36431D9A9656D60135F7B7941CCD
EA0BC0168ADAE8A1716BCAB61A1FBE56DE145488C0306C6EE589C2E71F0433B9
B8200015BEE977FEA781C3B8034170F9FCF6324AECC2554A56897CBF7F8B7139
ADF77EC4DA414C2CC5424CBACBFF09AB4F4962A697CA30668A1809DD72B71A4B
BF6C618A4EE64F0673FBCDF58BAD19C9CFA9D528D104702E4AD8F19711F44C14
87A8A062B0E7D307423CF2852AD05690FE1912DDF6CFDCB995609788A176928B
EB2B6E6007ACE26260537E178406C35173ADA131F8880C15E753D7BF2E4BC089
2953EAD550817FB700822EB157C4BE8DE18B2AC08FBC05291063120165B4379B
1A4DC9D967DBF6AE8C59B9584224CD65C6361095861A84EA1B7A991DD837F2E3
96EA1B598CDC2B459A81B19A090AA25E8D0036616784228ACBA46F5DDF43D3CA
439B4506CCFE90F24ED9CA8B3498FEDD429B1B1B8550F2219E7EF9CC64983581
38BF2645040109A3D2D98CB563D4CEB5C030A7D2F6DBF55063AB7EEC2FC100F1
26DBD977068AC186C94D6BDC3E849EABF685A634431D9FCCDFCB4A1195C76A6A
D5138A35588B794EF9FE03CDD26508432F9ACEEC0C86CE8744277F5C32166AB5
39082917BFF7EF652D589681C60B99DD4F132248742876953526D119551A8B29
CCFE9D9B35C9A04CDB15B160C3E2B285BBCFE14C06C490185488510704D87E32
41AB1B0AE52F898A234931F910D5DFE85FE2218C80C58E34DF3EA0718B7C8E2D
6511B059092391D17C997D66D0491D2D29CFA7F4C88869E2D53DB8DE6F4258E1
A49C6B865B75EAA21C02F7007978FF715C0E3EF03E39BD49697D30B8BCE8B934
1D2DAA72F7FDE1FCA3BF72DB85657F4A3558D4585AD1918E86DAACB86231F261
EBA0BB60C59D40F48DF92AF2EB6EC67815D27BA9BB672751D8A658C45E07B955
8E776E94EC0991B31A4BE92420B6D9F5E6FA1855513B7131C7A04B00038E48F3
936442CB14BD2C5658C938BC685FADEC8C6514A728C83D7E00DFD4EDBF4044F0
E247D957956045B16131155F4296C5D97BC3D1F1C93A6E82767543FEF3277C1D
AC4869CFA865B49FAFAEE9506D2F10DEE673E177D6279ABFFF8E757851AA4497
5855AB9D1E3310DC01B08B5CAB5346609FCB048910F3D70211659CDBCE05F073
3AF96804623A11636472F5845AF507C8EBA6518215D75034119AF4A4A9D8A9F9
24028ED77937B477662CCCE77BADAA08B20B9392171DBF9964BBEC03013F324B
D4B1E3053E4E12EF73AD5B6DC764101CD4CBC3FC2A4F1010CC1DE442DDC48044
4449DB76A321ED1517E750F551AAC934621B52AC90EE56F9DEE0666C2484BBCE
C64AC7004C28C6681794C0E2CA89BB581FF57DDBFF7865063A2AFC57C76819BE
9B78D0F4DD3B3B23D69A58E2C82C1981EB8E18B5EE80058433952B6985256120
82298F0E6E36968C8C0932BA0E02AA42C71D9E27302A88E52BB8B1924F057B9A
498D69CCFBFE7E3062895E706E20DE8096399754FB32677CFC456E5CBE116BC3
DFC67B18E95621D03FAEE1831A15D5205891AF008F869D7AF5E4EF1989FD377E
9724F1BD2A06FC203245246BE57408FCC7B3586AEF5F4BDD49CBC31AA72B65C3
BBEF8EDD9B4EEC32CD7D3C7C2FEC51FE0DA9A33F1C12A392750F3D1D4FE99AF4
D9A1772129A3C3490B8B4529805E0E306E95001663F0EE156891E1537A7E03BD
98EE97FA23D768F48EA462E9C8ADE136814E40E9494038C8C4146D9E400A2CF7
0467645A2898C551E43963ACD7E7868CAA4488EE815D40E28CA54BDEF9122801
8A6DF526D5C66A9F11AEC07A100C7CCF00A1BBB7177AD139137E1E992023356C
5C546DEE5401E08A00FD38A70551FF9C8A68CEEEC3E24A8A8D78F1B9CA757727
B2A7D3A46798F5F975A2784717BCE6E4D0B66E0000BA7FDB864CFE04BD7CE607
0FC5EF576B1DE985AAAC8126AEABC40B64A430C0AA868759E4C0A2689D828D2B
468A3858BB337F0E6842EC5D9C0D5D2596ACBE7E4BB9B5198903BEE40A9F1FEE
2CE3375D67D77D11B92C07A9CE1FFEC4FD57B0891FBA2E75BD5D5D17618A9ADD
DA75ABA8C339C5AAB51AB884232E9D200A40A68E4799E5E842BFA51FFFCEAE9E
1A97661A47326B6308D41B37E844E66954DA9032B1333396FD545000E364E7E6
A79BD95977419E006D51A92C2CF0046A5F542DBC264C611E8BD569D4E7894668
52BDABAADD6B9E6E1B71655C46DE2F505615AB470D93AC31E7FC99288D9FB5EB
919A1D92B466676E57429E6BD74FFC6257A2E0CE1910FF41A7B70BE8A29332C5
DA24457DF7F2AFBA61F8B754C7582A8C089F5553B7617187C50EE0D0D7941F08
41112068656190221491CAE0922A3C733FB9D45F81757CFC8ED6BAB5630EDD86
4ECFE0D6959D5114EAAF1612C970CAA2C9472CA9736B50613961F9E542A99E1E
9EAB27BEF2BCF74FB40E6263AD649C32D00F99B504DD1602FBCC202CC8046C60
9E8D29EB8FCDA4F0323901508EC6D0D3A034E320755C9FBA42428460AC283786
C0E4C0F45DA2C8C78EE355C3B5C349CFAD8F885A3D4CA30C74613E0205AF23AA
2719BC14013E7859D68CDF0BDCFE954601924C473B761EA72FE8B82C2A961083
82D4DE8073A483A2C65E3AACDF4106A11D6366AF685F88D99F32705FFB5C3190
91904AA6F8C52B2F1E9E66AD9E7C3C3C96F6FD1D2A69856DE6ACF6E51395ED67
AD441581D7A43EC3324CFF3DAB7E17D9D291D0CF9CB9086D116D56152BCE3296
95FE8A830CCF318CF0DDD078FF2E319A37EB5CEFDBF36492D265A24D538031F5
D1B00F3C41E627B1DB9876EE658C50AB2BD9D2B92C897D83ABBA76105BFF7E79
29B8B36A0F3C3F8378B427A87086EA10A597E1623529F8734C0E096F1BCE149F
8B0F4C80FD9ED2073D21FF50B841774BC20AA8870AA9DB4ED19128C657C8098E
D5BB7691BBF8C1F6ED0358B085054144022BE6620E3BE3BCFF07C029D465A074
684244F63F8367906C7C4648EF33244ECEF4405FCD839685C2BD7D5FC1353416
8DDBA44083519C586F6BCA610DA67BCBB18285BD9C0C838711A76C5B5D57F356
EA414904DCBB1C1FF12E5BFED5253156E3A76B45CE938395E129746ACA103A34
C38A7E6808E1BA082060EE975BBEE0EE2360D53A6C2EB0393A21C2984E95892F
8AB221D586720A71FAFBE2C80951B24AAACDF129B2BB843A35372A2FAE18AFAC
C74586D3DD54067F7779D9DA069D7897314C617685D05AE401C710E8EC03A64D
8C462D8E458ED29A12F56A9D3FC1A5A59BB391F99ED1BC64F8850BD7F2551F3C
144EC0BFA8529787A6F7E7F29C2C9D31F4094F9E218E053ED37FBC0EB204AAD2
53FF338FEC59B284251A985F7377BEAA49275B5E62BC871BCFAE9AB64224D592
847AE57C85675CF04BFD1410B56E616F68C39FF5608FEAEC6E72A40B22AB733D
F071D6B92B62F165192F48C0198F2957A103CB2F0D1F55AA122628853277D256
C2107390CC3E2D2BBEB1220329E86A68680D1F9DA963B401CDD3C429BD4CC3F9
6584C065FAFEA3EEC98A137AEAE50529E1F15174DF4AE9067EC4E67725672D65
4D5081FCF2663644C985191135F0156722F0BF1DFACDE24649CA49CBA47F93F0
201678944115499724D8B9052FB4F6E0375B8F8640A75773638943DE96B8C4EA
EC254CBA1E05D8C31B9C3178133782ACD3465C5CA2D45C688F3CDDED343F64C6
CAC65D8218E75ECDA7292A0F2FBB4F6B9DA8379C3AADF23AB9DC687ACA989BF8
6F24F23F6F74F71AD0561F50EAD7CB37952D1A0E9F744FBE8041D1C3EDBAED08
9845046259EA79899713DD1E567F28531E7B25EEE41EAC3D35A3AAF9348E13F1
671DB099C4BA1079D778A6FA8FA13E04D067B55F84954495EA3D40E2620204AD
69A42D29B4D95429C7651244276269FA385532E9B57F1C2D2652933D4F316B85
7DD80D0BF6EC0333F920B9031F7626389BD3E392CFB2EEDE173452C0642741F3
C72D84A0DB18152D56A72ECE236FD3A3914574309A3384CE66C909B7040538B5
E7DE80B6DE055DC28C1B394FBCEA0BDDFC44213AD960278AA498A967D890C295
77ED868877C03C1100D8EBF3CECA4AADE5DCBB3F0CFEA4E8A5DAE149F6483523
881EDF02DAEDAE3EE928160342AE6170A01E13666A84DFEBC5A5DC04BFB1D49B
F5BEB4A8F19D264A7F4B1C259E4B1010AC355CD9D1DD0C6F18999CC47EB3AAC7
B89EEEB9E2F9CFC6BCDFD9A438C10C8C604E64AB2F9488EA7B1344329A6DE47F
D59BF4A2987AD80BF0054F72ED0CA0451E5D8A813AD6697E53A43ACACCADDACB
20AB6BFCBDD95D322B8478B7485BE9C86F055D7217D0F46FDC29D08D6CD71B9E
1DE1C50C1C3C85C14940A830DDD392F93F6CE1294B62411E6DF77D4A4A4D889F
D9D7A6AC1A896380F2762679E60FA6E763176E1B2512B04580233972D9211954
9CBE53B0896667EC7ED9C97F909B8B374E4975E93D9FD32DFA0AE84699D182CF
6C029A8E6564460CBE4D5EE06C24C4F502E4EB602446673621049928B01E78C6
FC5FC52B1CB9BBE02BB81F2886C558B9F2EB0504A2F8002B1B13E2A496759FF4
2496772170C511EE704B4308A3727F64393E392FB6E0369BEFA855C8CF4E76AE
27517A9B3ACEEE42F3101F44998749B33FFFB35AD715BB0DCDBB2D35B51730CB
8CC9D14A39917EA3055C85D171C0378299712D1177AA7469F470279E73A0EB1F
BE7B70C8CE0AE57426572795B0826AC0D3E445C98DBCFBB63EAE33B6E75C7E71
157123DE44DE684057683F923A2126FE2A788552F7A3483384B6E646EC0415CF
6D4002CD9FA8779392B0A780E97EEBD2450DDD1ABDBA993B98A90E50CBF66121
08A4F43DBE0FE09467C33DA6A1C61F02BC5847C65C187E5B23DEC4C625C286EB
9AC7E30F0BEE1991402F2BC62D606C038AF2B098A79351897E7B6222B6D73635
3AC4E3D4C203CC50342491D2F70A528226650D38258FE2EADA6E4E1D582F4723
F2143CD07E0E6958254B6D96C9E5485E26B07047B80849C0A77BEDA560ECAE3F
CD7FF41BA0AFCC480F261D7CE694477F749F82E5B4AFFE12BA90C032157C7688
7E325784917AE505A158C5B3D37C1041ECCA0BA811777B5019CCAC36997DFE14
2D7DD000A0E766DFE0F272E311047B6227781696AD545FBE5A80E2A32D7F8462
912966E9E97A67D036FCC3FC5375A979B78F473EE7AF6AFC189BF5E14FD0D21D
656B3EF50D47E923F43BEA1BE16CC04EB2A966CBF4FE707BC7472D56ED0C13A9
66448345074B1F2C00C537A79FFCBB1A784959B43E58965C260A89E7E3BB7ADE
BA9C882AAEE60A026DA25D51A46651A1EE03A2CA61DE42D78AEF016749873529
5CFFA292D5B7A1FADD93BD3CC207D8623EB59F6B3FDF302403A9C2D794743851
18652EB37CB7021F80792262A4D2F354389D1ADE3C1E4BA1EB8855BBFECA191D
4B80212DECEE21CB16BE0DD2A5B6AE12B959415091545A96B78F6F4DDB5CDAB0
611B3248836DD9E54650EE2D2F3EB92489594667525BAF1656DE0175464EE264
860B6E310854C80BEC744D529624024E35566FF0EF71D60ABD9581F43AFD7EE4
A7099844282972DDAB121A040D3D7CC97870F88C3874BD5C497F391141F2094F
8EAB4CC90B12E10F8AE6DC2081CC4C4860CBC1DC3427060C9118E755156C02A9
9A7EF38084D649289E4600F5A67256788F406EFD36886F531DB9D7ECA48701B5
D4511FF86644AE56F46392D5804039C0FF5C49D1AD996A67AB0914D83D859C06
AA049CA26AAE7F316592E7DE134F775A835D46A69D1C4BBD6B53124D7433EEB4
4C724ED69C8697D06A5246DF0C49444B5390076A43C82C91B982B19D7AA8B615
16F4BE3585A899E98988CAFF8DCCEBF494D5676912D5E868E3877779F910B174
AF933326ABB47935AC900487A2273F6AA2BF735C312FEA9A1AC7289E4B43B953
D2EC568761231C3119E073DB7DEED7DC4A04968B69F792644FA8B627CF923CFD
F8CAF8B9C8FB9AC27C8F2C2F86FEEE11AA06BBC0027C40E0F9DE9385F79D5989
98FCADE704A1035C780BD03AF71BAE6A930CD02B6C4D07D6D0998EA18EC7CBE2
73105CE6378A2ED913F14D20C272D14060533ADF2FAB44A60E6395AF687EC88E
429815282D632366039F37D3D55E93A63A397B46FBB2B6757DD564C0BF55E0AC
8EC66E031CE51B2D7D27AB41A21D646C236DDEEF1A23DA64A61F0DBF36B86A59
893F277DDD906E28FFFDFAD7E4B7610E6A108DE7F71F178FC7448D4C2E985072
E0811881511DDFA4A3C730DD7CF5C1E29104673D7270F35D580E8F3BA9BC94F1
31ED0110C946D421B42532E5BD4FE3D8B242EDF647251781ED6CE249DEDCA4A1
FC94E0ACCAB225D733E123302C0C9B054E97386886E8AB5D03167D702466832B
32DC035DFAF601E2EB6615E116FA9A44B8D0586FACDA34A0D0DC74662C3F4FA1
736A4D67CE0650766E29A79AD6ACAE003485A4C21B389F45F8022593DF513D31
54E07738A2E39D6AC9429F1A359112CA28BD92DC4EDA5C72C6F813D53F1E9C37
34B81C2CB5207702A9A0194F0DA8D335635EE2174E2DB99DAE9AF89BEE304763
BBA1AA81F9D74B24FA7EACEFBCAC72DA4AF7C3A7C06483A7FE49E9118C94F79A
DB280E5CC383595D57C51F4C969C464C1CB1712283C42A77AE7874BD4EE0AB63
64E2FA747EE9A89161F93F178D7A24AB2C747B80BDF0816DA99795CA28792796
8E85C3FE71046BF6F87A97CD03FB8CB1FA267164742287C9F05BAB96F90F2374
8B2DA4315C703763D6B35A4836A2AA71B39B7AF614B09A3D9FE54E8B1AADF323
785074E2F023CF26547355053A5B40A0BE90965C2C34C42797BA6CD6DB3BEC3E
2ECFC061F2F9BAAF636F17EB88960EA70F1F0F037DDF2061921A72E46589CC08
EA87EECFDF36B819B07306C00D700345CA2E6113E992D2BE44DD9B12DA394FF3
5F44EFD4D133019C4ADC916AA6F4F5FE8A642DA2E54F42220C01688C94717B2F
1204BBE9A32B02C569FE47B75784AF1D9300E4D8EC13C0B542DB50991CB26D44
DFA0957D4DD0665F0BB9EFD60F9D0ACCDE739B576500ADBDD6E0D981C2149AB5
368FF41481D6B8DE8662E73CAE558AC3FDD6C48D353FC68A77014365407D48C1
350E58ECA8C0532F762F64A11900664ED4E6D4DAFDF0C64F9446C356216312C5
F614AAEE0D8590A3A26854ED51C4A9A1C13E40363B10533A8BE1080729D86FEA
A2193FA6D6C34422C34643DA9557ADE417810A48AA2D73D0E0E9674BD4C83958
81C15ACFCEBD5772A959E2C99D13BA11BFAFF1112E2CCB84677CE03DA00972FD
3106F8FB5AEA60ACB194FB8FD49395A70058C942F80C2313118CDFEFF258E569
E39372E34E3FF5AD87298C696722D1D562D4A8478555769EC2C44150D849A0C7
D966B2EE653CDBDBE9C8F352887F8DB03D70F9E692F0A5A3160110CD4097E3E1
FFD0B18758DF9ADE231B76140270F0A05D53FD964DF5CB87A377ADBF202718B9
E47B1DB784435B7EDEA4BD19388DDF3C5B474F5374D80D469AED90BA08D8A04E
A2CF32810C68ABDAE536D95D46BCDAAFAA5A8301F7DDCD3BFE10B6C23F1C7ACA
39A6117CE4DB91E197AE348634BF44B2108CE10CCBFA1B838169A4577A9B225A
BF538D4B10A9C5FDC801B144AF82BBCCC3E63B027A4C3070D38586C67E8A16C5
60DBC0D4941CB6DF6A0D1E7492A6DE009C0F464678859A03070758C38629FC34
410FAEDB24E5DA8ABA2868658526B74727FCB164F21405F988059A1BCCE6038D
184DC74E2E186A664391B7B84E2281ABBAB44B8B81D92F63481CCEFBF4264ED8
900D17D9632421541DC60BB39BB060ED6495AE98F6798010F76FBF67CA47E5CE
09E60F0839874318C8389E298F554671CE327B099B0AB9BDB8192271B478CE0B
38151243D996CA5AEF4354211E3953CD7AD90239C1FFCA061A21652100B8E2F3
DCA6DAAB758BD7FA7D29C266129C91A2A5804ABE9DBD230FB37711C0E606B1CD
01AF00122F9A948F54FDFAC13A9C437607321D3E4C10059C1091823B03DC61BD
809BB14C7D4FD2C4E6057BE5F5C51A242002726250A2AB4E8AC7F70BCD0AEE3C
4CCE6E1793589423B942DFF7E8267BE5FCB0B209B090009718A49C6D7256EBE0
D843690DF3AF3420D94859E53AEFC9D1DD75BF4A02A4E2C44D18720A9F9D707C
9D341698A75314282E4770738AE96FBE5811DD097EB0065B1E01ABF5E2D8428D
248B16047FD72F0059E35DFEF5A8F444C41D300E540D53723F45F0E20277695C
CC2E54A25041A959AC738AB6CDEA6486B7EB9914CE42558ABC90B623AFF1FA2C
B3EE64202FB703CBE8249A14C37B54C54CD69DAD2A5C2183103109D6F82129B1
301EE091D9F7A4D345114235F4BA289528C04940A830DDD392F93F6CE1294B62
411E6DF77D4A4B7EEDDB6330756507D8BDB3F97266E6A31040AE138A8469E758
4D0670E527BC95332D13B3980549FA02073BC0A45FD5AD5AA0468323052D1205
BBE6E794D7FC7861CC42DCDDDD4A4A3EA5B0A1FA84E55ECA7617A4112459597B
716E81960CC0321BF3AC8193758B4610EF33F894F09C9ADB7C4531253BFAD318
0DBDF8DEA31BD5BB3282B15C22014FBA359AB5BFF346F5DDB0BD589A54893931
D3F46EC04582CAC86BBA5E5E515335B3ACA75A5A7E5F16E27E8CBF4128859E2E
97D48C02844AB8D43C84FB19D8B311E2E8146C7D3D076F43B3F9EA8A848D7E8D
0E219B61F71B5D50F4DFB79975EAD0E794E842C213CB237B187A7B54F41B5443
3526B5BCF13D2DF1472686B200B23FCE6AC13FAE056EA1B304C5FA713A88B4EB
663FD7959C6D491010F976D4C7EA2FA6C18E22DD503E8981DB670CF5CBD09E17
6E265CF148A20091BA8B06B993088E210C91279AAD5922A3546551F93A076B39
3E4219E0EF172C72ADE99EA91ED60447A31981F8F13BDB8CCAC4361557D938FC
4AEAEA9E88AA0FF61ED04C6C105F0258CE2084F898D7571091B18B212D48B43D
6007AF07A0FDB7C9FBC784A1C9E0506142709DA99718F36F909299F3C570E743
FBB19F4F841939609B3A3D2D388DA4DB9FFD25C55A4F377E53B352830FA336B8
CDA7B5752C68FC0637C661E3ECCBB47543C20271E2233F7FBDA8094346C06AF0
1FF1D4784AD33491DBFB17AA6A4C7C8B2518C12DD5F849263DA8B6B2C38E4741
21239515E3E3BC6B36475154CACD25A07C74FEAA2928802611B05C9CA0ECCDCD
40CE7AC49715D8BD0A6803D8B14E755118F43CE13E54945B0A6BCB5633B1D580
346D913BACDF1DA8EE9EDC8540FA56F817D5C135D554004829A6E4566D3C3D4F
50453B4C997ED2C8725BFB415A30E47844548A823BCD7D0D5F3A1B0B5789DB78
6BD92416107B1E59084B5F758E509DE66F112F49E63A16F60B6795CF0D93839A
E2FB6D0B74207F0434C9599D055D786DC25523AF3CDCD9D834D54D210461A17D
F138F3D9F5C7AF9CED4243271A1FE1B018462BEBE17138AA07373412B44023BA
4E204AF4BF3AD6DC4CF005D393672AF65F0D015C86E975DA6622238B837FDE02
71B310BDB076E1E5D2187136E1E88EEDCACC0DC5B4F3268A8831F3391A7B2A17
E1A8397AD1D30455CE9BCFB29BFE08071774366804FA232E4AE9688E40E61987
035623AB8DDEC101D55543FB93BA5928AAADEC03C130570142D6849BC5B3D044
5B30D984FBAF9F56E6FACF7C07F249FC058275A863D921A182DC7C205A93ADC9
40D3EDD5D675EE14CA60D33D1C57855BBEF5F5B024656B80578308ADA3B73C7D
92DFFA19F1A79AC9BDD3F2F88D9725FCEA44A75FEA44CE4C991729C5792E1052
A4216B17742ED304B2996DC77BEA528DD00039AA51261D5401AB2ABD3C25D5C9
A2FA8C392A82F8DC836C8E33A5B5A2FE1B6C18912CECB8E244A91E1AD8064357
046BF2F498400D6D7DC137A904C96EB7B3CA2E65F64E840DCF69234B15780303
EFD10F9B6887E40A5D78E6B1EF8305A4FCE9C00A5845D1C7E8F51710B4F1A4DB
D8E6BC200679470F5503B71479FD9AC22E7818EF7BA80719844ED6735C3EB876
E244D5CDFE745A089F2679B720C105764DA0F3744E683F88050A9CC76AD73A11
DD873632665A06A2D13141E35806D8F53E8F34D70DF5C324DEB566724FCB712F
E0BF7EC9416F02C2C3116926FBA26021B38D6E21AB7875CCA19E45CF37211113
56D1F3E208CC54E7684A70232F0EF82F448559F8CB85DD9909A74AD694DD99A2
3A6BF1BBDD51D96BA4A5207AF1044E917186B01F946EE08ECE7455EDEA610D0F
B69A58D32F41B39AF49EB624CAA6C346A08DBE65B1C054C0587AFB35100BC76C
C64E05B36DD4226A16A7822E6D523A4B3970F587F38A0E89A05611B3A13BD144
BDFA564DABA6CEAF8A444AA157E95381808E974D7CD402B571D2CD823D1E7014
31809B56C504BDB1B7D50B99310A0DAF0C020C04EF94D0D2D096B734CE3721C3
71C213B6AFA0E73C0622E2AA49C4DE54A05AFB1AA6C7CCFBD9F72150DE24DFA0
F0D5FF99461F3A9DA8509E7EE6AB98B4BB88F67796EF2B133E9F6AAE0CDA18F2
428EACE52EE14B5FE74DE6D3E114246049948C187FABF401324F9989DB792F77
814729157208E3B37B9CE3F1D0C616D951BA702DBBFC2C1B953BFC6CCA78DB0C
094BC82EC4F0BC92833AEBC6E11B70E1C0F3A18E54817F7BDD3895DF79E9BE61
9F55E9CEE03B1AAC8C7642DA07EF2F28988112405F80F2BC8A63F2CF41C075C4
DF19A0F0AD8A46F5BCC2BA12C4D68D803B840ACF32FFBFD9E8DC6ED9FA9FF379
C70C8E439578725B3F51746691838E600146F6C88E1BE994C9B91F45C562A5BE
309D5D926AE5C673625845E1981A3316F98A77F4D100499847E1102CC075FA12
10881D95D6EB2E7C492BC58C366F903F717C1A9A37719070DB1E340FB5AE3AB8
F380A19F5FDCDCFB687120DD2BE5305363019BEC0F407C2D4DA38EA432F0E7A6
D8221F23B7C33CFA77D83480566E36545DAB1BB0423C34755F88AD24878354F7
52B9EA1278E210D305677B9A4739C67ACF82AAC653B48D8D7589DAF8148D380D
77F8E7DE4DAE00D18C95C7E50A7AD744042B565746C211F30813630C7EE7DC31
054612907A0811E8EC4075D24EB0682E7602CC252BA8AC0287850F9073E30FAC
A80736C0BF828DC7E5A8F8F4569CBA4C2C3F91912C485C5DAC43C435E2F5527D
647EFABA9D63753FAB6F4BF4D7B35D01E3A198153B354914BA8E4C0BAC128B7D
4D61C2AA87093F0D9188350856B6E34E1109B826A3F23AEBD548E10C71A93759
6710EBCD5651DFA0566AF29195C653FA085F712258B8A1B9AABB8A860492155A
DDA8E704EC5CFDF86D3B00CA7934C295363D8ADB04340CB71315D89A0A06D4C8
C61AEF51A2BD2410FF027C40E0F9DE9385F79D598998FCADE704A100379B7D9E
02960F7C0D013CCE063154E006EC3DBFD9106F331F128C794D9D6EF7E18E8301
0405CAA3AF558B2772A5EB6C07862D3090AC8A81D8019BF968EE312103282494
D6472D885F3CFAD49B63B96DA5105CEC17F4DE04D7DB69822968706EB94D1720
FB2879E596D3A7EF942D50173D24763E96F2C385B9F9C34E0382F02EB8C8BF9D
3BACA0FAB8F42D90434A48E3F4993DDF5FDF93C9E21FAF162C920C27726380FB
D329D29ADDF290883487CA328A0102AF3247216D8F96EBD8D1EC18D48FEB29E9
68BEDA93F92B4398FA2E1D6CE1F398ACBABDB5DEEFFFF4DA29E095CCD0114C8B
49875196489903BAEB958166DA9C2088BF9C76C921024B55FC6D5DB5BCCCF772
26C214AE81832A9157AF1175AB47229D0F348EA969DF366D3E164E497528F422
DFFD3B72A168E84519D138C233FED4D468568036B06C33F7273ADF8875EA0E53
899CAA8CCD652C4D5F26A7E0A25B9C7C4F5C4199F13DACC7D8F943E964B009D7
64D79C3C26CF9EFBA94B4FBF6CFE9C75C0F505BE6261EB9A2CB750BE2E146ECB
DD16A1584F3EA2AB3D9A3783D8743C3597C357ABD25D6B8DCB78E81FB5B8D5C7
0217AA3648ADD641A983CA3BCD930955DFBE0DA8B9619E7108A8EAA94000C80C
AB2AD7ACA1D2D0827EFFDD05D4EDE9C2B589686F3F263BC002C8884F38F3BB6E
09768DA7EB3BC1496E363543F04DE5B6F6A9812C7757E990268FFAEFB175466B
422BCC69E8B69400CDE8AE2CF394292067CCAF4F4E32669BE217C096E518A781
20259FE222179A0B410CEF30DD249F2A5D23E5E47C9ECD23288E6C069F496C57
3ED18C446A9892616611F8E6172063E0FCB7C1518524619525DAD95ED33B70A2
CB2356886E9B27AFB10DB195E5EDDB1006AE12755599CF67E27E753AD25C1FC7
5E2D35E33B794FD8F19F03162747FB4086DE7B1C1C800BFD4F229399392038EF
1BF9E659792F783316889221A826EC20ACFEE1E14ED854D3DED0148890086099
5F1623CF43A1C00109AF4F59B91B71B9682CE60E17947EB7915938EEC8A66836
140F02D324C7B4B70BED56A8FF4C1A2EAAAFDAE8BBB5E8E952B17C07E69BBE73
C205BC659E191366CDCFD2BD52526414BE2E70272CE823A43FB0D77B53B2866E
7F21C96896DA4DEE11C94AB03CA1A32018C4B034272D9B8876DAF47EF08D2DB5
D2936909F3E8BA0936E751B73E754A73DF6685DE51FD6A9989881AC4465318DB
FF9E0E5E13435B4A830B5E77C42EE8E41CD5CA9BD0C6E714DAA34F8DC7594332
E895054E5FD3DF1EA44126CCC0345812AFE08FC784E7C4C4287D887EBAC1683A
8CE358ED73989053E0F420D2D4A09E9CFB29726F821A7787E5F817FB905AB350
D466B4D20EE18B679FC1AA857C307C4D2AB54597F47496C8889CF6CF6C6E377D
41AA9E983FF07D8B6356917744AFA6F67477386B69D3DE885AE1F8B52B0FC756
5D358E8D01FC5A9066DBE8E1FE86726B646E864416CF2B7E1E9366A136B9837C
80FB068B3D2290FDC35C286E35763A02A8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMSans8-Regular
%!PS-AdobeFont-1.0: LMSans8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMSans8-Regular known{/LMSans8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMSans8-Regular)readonly def
/FamilyName(LMSans8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMSans8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-446 -314 1510 1154}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123833081E024C973A102E5EBE9986
D95806FBDB9DD41BBEC9E98875643E43D499FFB2E48F58EF7FA59843B8CC092D
AFB67604D9EE4CF2B87CD20222F6DC988B80418F8EBCBA06EB7577DC5FD0473A
55FC62B9B4DBABB8776941636268C7D4F704AFF1C85927E2D0C03585B60D5DDC
D07A1FE61288043CFE477BEC3F1A0BB96666D44F8286474186BD74037C208527
135C090597DEC81C9F985DD84C889A3A32B3805B9A653C816C523D14F6215B89
5E57100A2E43AD20344D45AC8419E928E4DC97E1B1B2285602B23DF89E149B9C
975AAB575A17772D4BD861C8DA1CF693AC37BA57CC51B9CB825607CFDF41347B
D09648E797437823A12DA3ABDAED3E3E1042F4B4BCEC0A9CB2517C0047ECDBDA
507600F57BF0F93B33764E47B5572573253F1439C293C4CBD1F018FCF994A313
30701B46B9E83B3C16E17036EAF2F0072D5CCC8AB293EC15697C72C097565D80
BFDA02AD9357437E60FB57F31BD6E172895D0E1212674C1401A3CE2599E7CED3
EF0A11750E622958C887E58600672A1AF43AEEA1D9BDAF69147E613C610E127C
9C8190A5B3F5F9A3CBC6A9A61D1970F030ED0D623FD6AAE34DD12E7F12B00204
42C239808277550593ADE8004B53B5FC0BB124F58965745A82152F9860FA6FFF
94BFDF287A8FC265B6B0411ACFEFA520E402DA17AA6B6D0904D8DCB1A56E96FC
6A1C7300A4455F6FF98AA6226337D5FC699B1A0900F049453DCF3FCDC8A3E397
C011C9D2E55D0C2845297B4C50597F58C82B0348AC299172DD191715C1FC81E2
BA9F00D26B3D3098006622D2740A0EB0743B1ECEADE8F9697C7F782265A58C4B
7D8B174654EC7F3BB8ACCAD729170D100F5DAC4CB7CC0EEF74D662EEF94702E7
9237CDB6E3DAF2C65E5A10DDD52EB236C227C3DEAB315E5CE479878DD60BCA19
564DA461E2EC66ABD6E7B4952C21C2D3E37C7B97175C5668DB4C64CD1CC23F71
36DE0E644436C67784A3CCE2F3DB601601B011F527AAC3DFA31A51A29C8C564D
794FDAA23AD6B4540055EC4403642C9A62E6138192E19652A050AC81B2D1D4CE
B9E40F7A0C351F8C72E4CBC21733BDE3623932A66FAC82D253D8251331B62150
06FB1CC2CF016E6BCC1D7732019B86C11D799B79F33BB09CB6771F637BEE71E6
FA1A18E90331A61A3162ED7589B05BF937ADBEC739FD624F6763A3B951E33C7E
F5F1AB73604DFCC2AAE3C9DAB3E303F8B56D1161CAF14DC202B636DB484CCA84
03197D7542BC10E7F9CF2FDDFE83B006FE1A6D13C6312FFAE07D32B62AEA32B5
8B8D127C00F3B953CDA49BBEB1B913570A51B2F96D302EF8913C6BB60B5D3924
78A32E11CECAEAFB7D4C6127C4A26EAC47FC77E895E36ECD8881C06314B93496
2984C7FE400CCA5A5007E9E2A5E16116D8483EC235D20B206326C7E4FB54256D
88CC4BD4DC84B5EEFE217BE0B436583B1D92B5C563266755B07C1E9658B8DA9F
48C8E10FB7F29D1EAE6A5E1AB2F9C2FBE93E979D8C74B1ACB91AA5D9EA54F207
742D31C0B69DDD41BA88727A80869626C7998F17B7D86D4D6F2D1C5324484C73
C05C61C3CCBDF28D048F84AA23178B60E4042034918287418FB5133B36447469
4193A44EE745F76035D5073240736B4F1BCE96F57A97F831842958E6B6517018
BFDBDC3423CF739AC5B38303C3D4DF196C462C8742A5F062F69B935148E81C55
7C4E1B77F5441CDA5FCF63459352EAD6B4A2A666CC5D85855641CB31507D0100
B13895988AD2D1F4DC2FB40840A0CA3622532561939CA66F3375B5C3CC39D956
0C010A1363F725ED71E3442C0A00DD938476920CF67869A9DDF5A299FBC13BD0
1C6450DBD0DE1D9CD163520429734028AA2CB185F711441471ED972022B4D84C
F007C1D9B1D7E625D684C53723CEDC5E42A4D17F35791CD367DFB3078ACB6507
E89B97158EADF677C788A0FFC3EEB38D5ABCA560E04852E7DBC79C2DC8561F80
5C0DA1E125B17E572A8DB0D0565F05E271CF122E3770490B395E4DC4AD00B46C
36448FE2DB35CB45276DFB339097E9EF935AE0DE2D8839376A78D70FA44F1974
ABA413D7143EE4742916BEAE0D21F24A3E4D146DEBD198727ECFF842EF5F146D
57D0287D62D1A34793E173D032F71193B2E2990ECE96EF6D712B4FD780875393
92EA302BFF0EAC108829820238728C6305754EF0BDCC8B7204CBBC597F2F9C95
9B69948674FA133F77935F24EF5D7522B401F3A783BF474B153533C05AF2DF8D
DA960CEED2FF28FF48234265B4759B50D24BD711DAC557EF4F768148C131B265
25D173F07ADFE2C2AAF32AA0B556EEE562106998F7FBFAF7313B1FA589C0DD6C
A9B5A8D9DDD843E6E80330277D6DD2356D80BC6180F2E924BAEABAA6E2628007
B37A2029F3D9F5E1728F408B89D85806D6A6AD7618A93DC4A85C4076A95944ED
748D1BA12F86DCE859F1F48AC037F26DEDB1C48ABA2768E9177E799855334DAC
3760EA1B589B5562F3D48655DACF49BA37A4AE429B79608716438BD99613EC67
5F40200FE34CEC934F99C14E909440B5457AE7487221179B9885F7A063D99B45
1BFD666E82909A1D82572176422757988D43159FD814DAF574818FC2CBB20431
9D5AC85C1B43EB9623DB369D2E0217DE72D65B0B051B0CAF9FBB9BF6FBD49BB6
7E0D942F8A6C4128F6504B102B0745FE0B75AC33767B7F328A8E8E537444EA52
7D0ADCC055264CF38070833FE36F3E9E75ED639A567075C6FD56077C00902CA6
AAF0C12EB5696A397E624F888EB2B5E2F8CD8F21B4A6E6FCABA356F58CA99ED5
3039A1BFEA1C40DC1AEA90C0959232198D1F4E26CA8339782ACB8A908C5E7CE6
98479ABD173B95479825415B084F754454ACBF44DCF4961F68DBB06449776DAF
07138F356959B8327FAA6CD71CE5EC69F97CCC84646C78399E063C0AAF44775E
6D1570F08B3085066DB8C38AFFAB5CBEBC7567A0330E68DBACCE1DBF6D7A0ADE
9BF8F8AC548AFDFF12971C763213CD781D208D0E5BBB31FA3647D2B0AA7E0124
3B0C3964184341D8D1ABFDDAE449FE68185327170B046B27F59EF54E9FB7783C
8A81FCC602CCD47F4BFD25E5D4B24CABEDE1436754701F9823D97F39E01DFCD7
F73BDC4069607F52F09F53B087A3E5284B1C41859808C27C7DFDF4D22DCC6CAD
9D6A335B2BCFA6D000A7C579EA6EFFE9BBC688FC7FB98005BF250E91BF91F719
E5568DA27D69EFC526F59DABA970CB94B8CBACF31A8EBD8AB754A936A7F9A209
8050930339C0DB023D08E568308EA1D4D5663E33173E5C99CB752EB3EEB45A26
663E123B8852CA9D2E0F4A930BEDB6F4CE046EE0A9BB4FDDFA475AD631D13A80
2CB7B6D960A86183FAAAA649948FB3F0D55900D5F58F37B8866DE8F3052007F9
104EED7A5DDFC7AC37A6D9E49F46CA0B3AAE98A934A36CCDE8EDA8362FE97F20
9BA574B5D5D039A77BA46591F6E45F73DCA2513811A6517DBDFD7D818F48E683
5C26FC0C7682845F3E4266B7D327312EFB770916FBA0C65A20305AA1A087B1CC
97528D5088D1E07DE9A23C9D41F23C77C5072809B2819B32478FD58A974363AA
8F4D622C39534F12614E0DF155D72F1EB25082796DC38497B4850BDD181EB8A9
6ABE64730301A06C16A74FE25A3C3068A83A513556D05359A393B6C6929BADBE
97502F351D81614CD73E27F230046F89E913D02B0326F68EDD3146F069085199
CC16681FED2AD0A7B141001A3FC4C5D21126A66592F51AB6DEC1CD3393B65C2B
CC478177F585F15CD2912847D0F53FF2986C63691FDB76EAD40D9798E28E803B
BDDE19EB95FB140A227DF24CCB36C662C7BB5E8F7DA664D1CEC437E17D6BF29D
BA2BFA67306C1B77FBCE256EA412CD417BC3BB4B243FC3A0CAE847B3AD58CBE7
B8C5C86283EB434163C89CE51D484F7E49765600A125D6DD423540B78E744459
2036A2427850EBD6C17EF1545EEE457EAEFDAABEAD2039060F8B6BB4C28AB1B9
A5AAFB7FB945AA4671A6A97BD8C6807C21360D0C3F7742F47CBC27562830521A
7BE2EF1D993F75619EAC1B3A7A43761856730BA49A3260BA0E094D9116F8D9C6
46740F45157716658C23144649A72A043685E0A6F25531307FA0CB5148358692
A287F5074A8C01BA5518911789F7767BD4551B1A301528C4F0C5008F19618E63
B50C60FBA08F6449B676DDFF2B9DAB14A41206C3350B9DFC1DEC1CA57547928E
BF55EC09503BF1AFD89227A574BD8D6F6283BF7C4A30E256A366A29BE5ABE787
9DB7FFB127700DFE7357E50376A9CE8E4B6C4211CBFCF9709AA29144F3A40000
E75FBC7E5D5A2A65C07D4FBCBB8FB94BE05DFF2B3FBD09F11CA9C72A278C045B
1D2572EC08DE1424D242091780720E28A4055091ED6C0F733B035CCAC9A2CAA2
8BC0DF33C013CBF06EDF7DF34EAFE36D3104DADE5D30F2104A0C54D49D520611
165AAF3711B005AD3DFBE56FD60E89A4C5C968742603F4FDB0B0B6D446B29F4A
0504DC2F9B420111821EAC567FC09B4517D9443FD0145DD7514B2E09AB2960F8
D54E965C4D8F99DE6CD69EFF58A2B6AC9AF7769E0A6E389AD0B2A5D10CD4C41A
40097EF75607A937A95839A181E6E55835DA3E81C8846980EC5C16651039C0C1
ED728808427CE96611D1F832FA6DB2B8783BB484E18505891086618044B4EE0F
4C3D3AB7CC8FCC4707DE223E7620AD1E77F2C9F7045257D254633BBD96D5D6F4
5696C589BC74CA556158DA32EAD64629BDED7D3AE5205535F92D8DA29782A187
5C6C8E74B0C86C0D3A604CE160F8ED1C2FE09E0AF9A45096060911999B94126D
B0DA5E108DFE59AE74C66857C7516D99DD1DB170A10E67FAEB5FCF007BAAB24E
5088794F62025380E1B1985AA631AA151879B37FEFB6F84B7EB6D57CDE9993D2
AD4F956BCABA7F25705254707445E43F11298F2B2836FC9F145DC459ADFD7815
41EA03A5D6704780155DE7E7B00A8B99E733AA64B78236F752DCA4D16C84E03F
22C9C61D0EF5C2431DEEC9C12A440FC332666E5F5A99C9ACC79B6952D59C46B1
586141301B6535236B09184689D672FB302CDA74DB0C43A77A643142F5804346
C1264135E15756B43D90E252FD16B3D1D07C190A30D72F4DC185613B31DF5DDE
2713384F4A9810BF94FA7E0D033E338E149518B5493D7E3500577099B505E655
9BB8E9664CFA5CB68AA71040D5DC521E1CDCBD27F6AFE6B8BD4E941D2FC154BE
A826E96D9C215ADDF45C88DEB19A25ADF96AA92AED7E26BBB3BBAD087C4DBD66
34637DCCE4848D2BF6E4764ACF0D6D5F26D6B5DE97BBDD74252B3DDB8CBD26D3
8BCBF23B4CC377A5BCFC19948EF5E45DAA4B5A860155B96B4CD17D25C1F69186
16CE476C12B33F2388C1E140DA4004919027257F2186CF716C685176C94E1A15
8E799D50610BA45F2003568AF44E2EE4DC9904BCB4CBA088D3922EEE7150107E
3A46EAF7928ABBBF6F2EAAA1C54F2F501AA172055892C47614A9035E79B01536
93796F91BFA1DDEC196549ABE28871B49AAF2BFD4E836BE55BACB3C737A5C73C
170B6563DA6A0785D44A92E180DD7550442AE3E0F8C1178EFEEB5152EB512122
E9A215EBDC5652B555D498479D289A015F8545F681333A6EAC4EECDB1B8AFA3C
E22F8B07A8C48FDD4D1333898953AEE8244542BFD2849D497F9F8E166005CDD3
ADE33F6D4B2E9C167ADCE832575A237C9637BC3A58D7BB96AFD1BD3F1808F707
5FE193F6C8EFA3CB01B31B63E3DE2D592079B66CFBFD74E98EAD3245271BCF81
1FAFEB8B4AF97E8EBEF4ED0334BF03EFA1554980E13B37FEC33DF3B23FC7BFED
A3E15BCD8494AEB75615C7A8F64D13FDBD4FB5AE98A4AFF2CEB1F92DC495B23E
AB87B339CD87B09F18BB72913812F041D5C00E90C1BB3D58C1A115B39B76EF79
2F7CCB492E4F71538878B4522D1AEE2980FC421B2977AF4C08DB2DC98289D2EC
32B466D21C9B802FF1810458E2756AEA1FD732B806286039E75042D590F24D8F
E9F50D35EC6D1C9950AB0402644E83479EA265192B41D8F3E81B4761EEEFBDEF
7E850602B6815EBCF3E19A3AD3094F5C09C98519210AAAE8AE94F744C02BF2E3
4544BBB19D1B5F87B2B89BE7CBEB6ECC8848D17A70BA8DB8DD6E5B41F5D52781
B40457D3C1C200483C0CDAFE837D984A761286C76125B491DCE3489FA322F968
E512AC8A5FB7C4DADB75C72FF726049E86265687368420C97F3A415D53BCD1CC
19ACBFC6867B4BAB0208DB3C5DD474D8829CFB026CD1F9D4B7A5B18F88BC747D
C2510E822259DDA43D30C33E916524C5E3561BDFF89136385827B7980C2FE0AC
B1C470121D9FCEFBFD625B7348402BEE59368220EB2EC57A6F5DF049C399BB8E
5B26813C6054B0EFD355444F1EFA69BE5A72B52D8380C5112F4CBCCB78C3DF9F
8D82D9EA22FC46617AC1DA9EDB3A2ED55D49DDDEFA61EA1F01DADF99A7D2E492
2E00C3EE943AFDB0739F75F0F1D250DE5B233FBB1B124C8D80AC2794EDB253BF
AD5DEDF0222EB7D72274BC7E475C56DABAD14F32804F0747A3C6E7330B156AA1
E3C01687A658F558B8F61516680DB3C059EECF1C3FDF8417EB931EC402CA0F24
50CC18B4D22872FD58121FEE981541B50456D7D18E788D2DF9753691F4823461
92B463FA2680A5A1E7FED1E46283199D5A2682BE207E04BD4B435A2949159C47
091A0832D4CEDA6CF0852CD2FF4B5719114C0DA6D1B0AD44E8FDB48008504174
7A1895896B8F275D9423DBE3730633BB053B59020B7AFA82C7CD159DC7C72517
CAE1994A0A790E475C4970EC656B89AD428BF4E1035E92E55FB21E639AF66E6A
3A571A8250C9716F9F265E0F76FFF660C54AC08131B56DF060B63E750342AC61
5286E4AC04B289D3EDBE86B8052D096C5864CA94CD5BA274FD97632C6C0F0067
967A1A308B96D5816166A81DF85561DF48DAC4C5DB5A2AA6B01BD0ADBEE35AFF
BD0A14469DBE041582D8B1BA5D736869A1DF71D59811D25FDA43865CAB8E8A20
A9326D2B50B9700E88FD90913D77B6417FEE8C039C12D8CCF516AA5DD9CA48DB
26F515B6576AE85A29BA65112121E1DEDF8153AF59E1B079468F08130FF077F6
6ACC0449643C295D82C70EF177EC0C2D3AAD49BD2A0BF511A722FDCCD19348FF
FB8CC7A4CFE322EBEEE15E3395B062B933EB55FA52E425B02401C79FF0F48D18
32E838472A8F1A94A91A8330634BB7968281E22133A947416DA2238038CC1475
89C36C8196F901BF6D9816FFA07969DD0CEA6C9669890092316F6A01DA7224B0
6AAD1687DBC419EFE2BDAA0F4D090D274A7CB5AC380B1B2006B28BD56725C287
44060877B73087CDACE34651547823DA7503D50E7C2E9451C8658FEB205E020B
27F5307E54B6F4A4858CEF9F21FDECDE3DC0B24BBE34AD7B572EDF436436EB7F
ED0BABD23AD8FCBD71934F0597C65122BD563F761BA4732E96D5BF346C211267
BEED7075B675167872F7A506F4B9E4896A4AA5AB5B5B58046899C9C5993E7302
C870678DEBEB07503EDE0435F57FCCEE637518F5812EB351B6558151AE0B43E0
25D14171FA920BEDF8462A59235F808BFBFB410C50E43A1EC101E5DAF2E71827
28B38441B5B6FE9AE8268540A9FF11ADA29B5A795C29AF1758A378BBED7FC315
2013534861328A5E4673A4B180A8AE1BEA97194C88BA5E67BF880AB2CBFB7909
B93FBE74BEE6955D3E495130BB3D28B42945DA4A9455103CC33474390660C14B
978158418AEC18D647A6DA9DBCF5A10C5007ADBE32E5D0E412FC23069DF8D162
A2B400EDE05DF412F5D3AF80887D36894E21A64F50AA7D53090F61EB25B9FD9B
CCEF9933F75C879222847F855960CC952649426FBD46FBB44432D9D6D92DDE4B
0DA61C03BF4360FEA49064FDE911D20A240ED2B4513467DD2E9F214E625FA0CD
4248B15A936034060334D2136641C1AA345C7642D1913555EA13D1678752CBB9
7A140C81DB516E544E04813437A0B89432E2929DC4A9F5B183E06D2DE8EE9FB8
3985B96CA9D8FDB132881DDB7B0ECCFFCE5E082CD7FF922805C21AB9435E2DEA
D0690379DD5578A156314BC78AA750E91BAC03948D44CE6AA5B6D92365D2EBD0
B357D962770F37D4A4C27A17BEFFE96B9154CF9B9E70BE65FBCF5161148E1C76
4E93EF4D2B88C75F569346AC2B878782D12F909516F74D56C5A927A2E7001730
D7CE823CA5968AE062DA5A54C5CF9AD095E0BD9530D515129F59FC510A6ED785
9DCC5747C69296B7999229531B651E4C98B0BD07C1AA85C261C55F6D7C5ADF69
1D4C163883BB2994826A94CA34D9E5B9B0965C52B191AE01721D88A03BF5FAA2
C6D0FA6444C3920853346594F0D3026F4900770B39B288622172E4D6171BD9AA
3BEA81915B81C56CD5055CD7F5232CBAF282AF59619638A93EC62A029471B607
8CFFD8AFD7D9B25F63CD8CC50A4FC59C2F3F6FD9963174FF863B57D85D994B25
A9E343F133B43FBA30C52CA8A503F3F93E3AB7AF6043F860D5D548B166C25921
D8DDAD33982A420DA8B0FBCED45414AD2285ABCE7D352FBDE6EB1E0F52B0D234
F2618EBCA323CC1B73E3AB241E4E95C8D833871AC8EB9E6A94AC62BB8D3E8500
6332DC7EA4CBCF5EB59A95A2B515DA86A293CD507153759C247901EBA8C4D36B
5C5E989B17A3A72248A138A3CA8622749CD748154EFD706AEBA91893597A866F
289B75B6C623DDC0E21C7E6920076B0AEAD03AB485F43DD669E9F6D78F7F3A3A
F0E163589DCDB652FF0580BE54FC52BD298B1DE626D7398E8DFC0C7BA115D338
8CD49E15D50DF45AB5BE763310556E5D82BB9E05390DEEC769C63967F79359D1
B292A2B968186C25AD5CE0BDA86D6C602F27D4D17370D21B4429ADC336A4AFAC
6A910A6B158DC42E97769D57AB2898FA62921A8D17FA331966743BB807BC62EC
CE310D8DD33666152E7DA26D679ED4D87F89B2D3FF1A88AEC672999B6FDBDE53
381FB28546087A7B8E3203B60A8DB8357CF639B2B4830DA2FFDD7B721978DD64
1CDF0C0459112C4AEC29A28E43DDFECF131E27A82FC1B8BBE36315E41967D1E0
1B09FE682EE128C28E930169DBAF16CB022D5D7BDB13E2A460620B8ED0372A76
B058E4BC1F616F6CFB2E9A0EF9AD85DAF560741A702B11CE084913296F4A3C5D
27DFBB1F3D0BE971812A7A83450DC0675C45C27A1010CBB79A5BCE21BFA46CCF
D6B4158BE06C768C73F344A107706B36EB97D9202C5763599B3C05E1464BA145
F368FAE4C9D1BB679CBABE4996D7829CA57157A0C21ACC8EF55F8E9FF435AFF8
3A7BFEF9BEEC854EC912ABB90EA785DED842C2A0642F862E14B66919AFD491F9
8D841A2DB2F981BFA79544B1A2F756D81ACAE235A58C64DC17B47C1C7C3A820E
A12732D95E3C21CAA8F9B9C27FEE8DA4DC31DACC0163FCEAC4FA882EB97C8739
69EFA04EE0627DD4C2D071F1C8E049E657F5F14377D75506A96CEEE43E33140F
8E91CE236EBFA996C51679100212026FEEE44CC3409440737FCCF58A9899769E
BE684B749A1D5C37CBFF72C7EB5AEBA5C7A3D9BDDCD1ABD7F3AE4C917B3A01F8
83767E8A5D9EB331968579C3DEBB3E382BC15B2751BC21E2E5AACC0CA211F50A
13075ABCF9F440C99FD25A8FEB3C0FB8C09606DF50490C7CAFCE844147A025DA
F903C17E5B0BC25F89AE84006216080ECAF450D8F1E3D7ABD94719F604EA68B1
108EBB5BEBC3EF465BDED4C73738D894770AD27F2BAA1A8AC49D55D311D7B27D
B7CB8AD061C3DC60016EE1F4848CA1A8533BE7D472D0AF407DD9F6C4238A71C1
F3511F227119F68C6EE144530AE8BD1FA0531017D74B47E173553F7727CAB5EA
16F460023E48C20D335FFE5E7239FF72332FA245BB59D385B940205426B2517F
B74FF8E56107FDF9585A1A1DFECFC086DD0D6D414ED8BA6E0D92A29E25918B5B
56C2935B4622F20B9A0C4CD3F80103A6459421C53711953FB5D85F36DDE63115
3EFBD5D42216945BBD05647ED068DCD0074F3A2B08A4CFEDFBB907B363DD79AD
C98AB074AA1C50EDDC6EB68C5B4DC1328B9E56BC0BC1104FF39EFB2360FD3BE0
34FFF6E650B0D9C5050670ABA64C062B5BB10DAE3331C3E3C1B56AB328435C99
64D0D5394345768F4A78E26D7BF1AC08BDBB8351C7F5C1C666E4E0987446F1B4
2166292D0CFAB1AAE6541A3DB6A5707CE98CADD70F81D892B4D2DAB0BABA6621
75C52E526A643F7FA4217D853967AF5E3659D9628533AE56E657371F3508EAFB
FA1E8FE0EE6A8E816CB79B2B26E424A78CFB02CECC37A2BF35D037B2C2EAE5F7
0642658A3C3543EFFD0999E7B2EE12E26D4E4C1998280DA60236796D84A935AD
41A3573879103DF7CE5F167720F3A7F94F2720FF757C2D2BFAF8B3DA862DA1E5
E48C0CF13D0BD5FAC207B7C7FC5AB1BAA9B3A11D34FDA62658B43CBCBC5E8F5A
A03947553BAECD57F4EBDAA673AD0E3ED5F7E7086C53B79066834B3766930924
14F780C2504096C1090865B9E036CC99A4EEC434992490906571E52F477395C5
C5040492FE6426FEDCC330BDFB5B09ECC3EA37300DD4FA4F7BBF2B252A533157
512E649A7B7F199EC63345AAE11DB0D025D8AD3593577DFB0B52B5ECEE8F47E6
C1D8A30C4E5E880AA0EEBB2A053C893FF1AA912ECBDE9B49AF18F66D1BD7BF73
82F89FE9492B2928C308C0373A7CAC1D612C9F3A9ADCFCF2099128D1C3565C6F
5FC2D898DF5C1E59CBDCAF4903835F153170BAD72480247EE13CC0281DC3FCB3
860E9ACAEC0BF95204DBF32AFA9DB2C058F11BC061D8BC48CC05727B71589342
370F8A366E11B3623E4443766368B5169A98B504DD1602FBCC202CC8046A8A60
AA24F57CFA5CCB8485932F527838C9E2F1889D11BA06271BB84AC9AAC072FF6D
5AFDC5A833E61CE4EDBF5868EE0A5930150D0AB4682B25D8FBBB10124FFCE47F
7C93CE9C3F929B0536AE7B9E288A7EB26E63EA1E98F44C92FB6074006BA0A1E1
A4A307BD9015DA3F03FDCA07EBDF9B71492C4F03427D0C1ED063847FD3945335
DCBEE971834F0AD7CE43DC88D5C9BAA5FA0F4D62066C0B7064578316C7C7DF63
49878E52C52E1051BD8785CA07029D855CDF298982AAC5EE9BD88BA864E1A1C1
86C7A2A8C8C70BC438F87957BFEEE5BC5752A4AD500E86ABF0FC0FCF15D09DF7
5C25F8B99BC1146D1509513ADF1CF627BC4C0D8984D01EEF7E17116174B74694
0DAB65039011AD4C5F22986EA0FC188FA30CB08809DA9EE88D490FE15EBC6A69
56477E8B7DAAF1AE28A6B251C5305E493D7A642A63F8C286FC69F1DE5A80C4C8
B98AEF06344921545DD99DB567D5486DF8C29864621BB2A03EA4F70B7ADBB35E
0F1641F668817E64481B4479C7387C9F8F912458C1965BF8BED4AA857E62B7BD
008DCC0B7951B385F7A70A6C3D6D39AB0BDE4E8A048DE4026A9AC527109FB09B
ABE1DE6A9F210B590563EA94F930201DB615B7373759BE4A62F1370FEDE056CE
E265838696FA0D3113738E35732216736F12E3E76D416DE431823060F980576C
90A5A37C5AD57E9AEB2A8717F653103DCAFB4E169855DA91D630F30DF34012DE
1F4C98E20602B36EB9C4EB49C7683B7056EE108F5296FF68DCD3E59302B013FD
FB3268047B4C03A37A680D1F806296BBF9424289AF41637F1864CE423FDF8BF9
B3AF739FC73D34077A744AA6D4D4E5B2BF51908ACA6489430DC92FFFE690A0DB
944262EF894985B1EF68F2EAA7AF9A3574C30D1D4FF53CA84EA834BC8DBBC201
865DD685BF133F7881BA8822D56C27388B0EC125B64BE6317C9BF4DBCE888278
926234B1A806B6DDA724D58044898340527DC91EC9A9A4D22ECD9BA6C4DB5C68
869E97698478CF49C2FA073AAB78D5EEB828B2BA0301AF9FAAF86D736602AF9D
374A8D11CB5F883B5FD6AE51F45362FE19DD066DDFCA49FD3906B7D32C787DE0
6908B02C5F6A9E36799C7822398C82C22A635BAB5D9FB381736C401936521879
1DA09A09C7AB12BE2E64A6DA55B6D50CE1CCEC0FE6ED74FCE37B42320F08639C
21E2A9455CDB01575A2180793394A0E1030EEB320FE1885A52A9BA8F613CF40D
D5AEE9976DD7E75F82C089119BAEC60CB65F11381291193A712212A6425836BF
B7BA7B0C86C87BA65742504DB1CF7C854DD6C6680E12CE77ACE2F4D31C0D4E1E
F83C805ACD94C2BD0401740C0E41DBEFE21209DD13BB4A5D5BF7E2981B87B73D
560A8E6EE0BEE3408D38C8E6AB4C1C7ED9F52818FAC02AC17A1D5484A8ACAE90
2CE9F5395204A7BA3D11006B763ED08B3EABCA1644E74824B92728B491DCE348
9FA322F968E512AC8A5FB7C4DADB77BFE2F3DCA6DAAB758BD7FA7D29C266129C
91A2A5804C165BAA2937974DBEB542E195EAF9D49EDF6190BCA5556700F11CBF
727B0E325EB254CF8F155C6EEA98CA31FA41117D53898BC4C53F469D84294458
62B0D901E4C6095A0F31CFB809A7ECB96980A5074D286ED71A9C482E00FA6412
F6D7A5FF13619795D13D4D739EC41CB885A482238364C123D24E6BF1F85A176D
DA23594D09824B51DF140157FD9954B3CE4C9FE714783E7391DE33C0C05B40BC
ED90CD07200665630896637DFFF8E3C3BE03C7C33CB54FCE37F1FD33C37C611A
FCBF59B67AD80F8F4D376E1B46A28A6E16C1D0A47C331FB855E174EFE813A62B
E4F0FD65715A7B15F3D0B586BE098465B7C1DCD5C9E3B84E1234A199A350D10A
B59AD65E34657555D9DBF091329A4C04DBDC48BE59495C29181964C7D81988B9
2091EB13E2F1277BA6BB7B0772E386CED36FD33CF7539004D4ACBC940EAF782A
3DD97E9D9C38B45594AD68EE45E874625229E7C4090734C7DEF2979422B6513C
C7C19248096BA7FAEA6747165330E085296C2C6FA393DA5D5EEBD9F1716EDCEC
7F291B0F56627438BDF3F29A4D69733BBF3FDCBF836FD5BAE7AE33C0D20B9B4C
E333CFF4D1EDD10BD74E5473A41499E485AE308B92650A286628FE70E07414F4
11C092F1DDB6F6D0887A85E30966A059B1636E4B1AEC751061030E9698C16AD6
D07C9A198489AA1D0FA3717BF3CD52E7FC86C8FE3C7977A14DF4431DB3E8171F
50DD33D78020E9575406D4032E09092A9C413C838DBAE1E76D2BBB2ED50CBC41
2A90190C806D5A035A04E3CF0FE3A71921ACE8D9BBBCC1F8A5D0D4CD7AD9F3C6
EA65504D9B742F99AF7F5AE6138953A982A7A78D7EB862446733B7CA2FAB2836
0724E0928C85C21A9F5D5DF7C234CCD1C14AE308A9DE8E06E047C76391ED93D9
810AC8F694B7DA252B4BABEF2C617F5933E0247210E7507788879E11A2D878FB
2541B561AEC1AFB3BD19017BF75A3E989BB3D1C77BF9ECE6A91142D95593EF9F
D51E9849C7380B4F6D6DA2E75BA9995538603D1E43CD12C950ECDE7E71917C4A
1E8A0D4EA9E7891EDCA725CE52A4AFE9A5E03C0141CF551118083D4CCCDBC9FD
23877034BC39F53BCD2B1D5E20C42CC6EE9775B7BBB561A00DDE1103847082CF
3058E645DA10A428178BA48DF74D54DDF7FBD46D78D457CD1912F93210F98194
A7DC809B6620C88AC1B10B7BFACC1EFAFD38D3EDDA0F89CDDCB653B8EEFB1214
87E9161E9A091684715B666D74F575E694983CDD4CDD976F16FA6AC990433A43
0B06E78424C90FF18A0243A8972172915ADB7131F254AD9E2C534A411593D10A
71D7D05EFFAFF37F9AF74561741AA5E41C758944B9AEF8D40818F06E21855D7B
A2A5D8C022B7F5F331994740A0BD185DB9D94F068D73C4E7576C59C296CB3001
3397EA8FF770AC4F62CB3AF8B17490893712912790B41EF43230CA91E2599B2F
6F443D3D7C8DBEB9FECFEFFFADBDE676D98DD6204B3EAD5002C29FE6D7A8605C
B9B576F4A07C53B4CB1B91F60C618B3560823A7386A25CF46386D6975B70E300
02CEB0144F2AC22C3BB66A51D65D864AA64B5B352D305553A14C59508C8DC825
E8B2EFB8E2803754084084CF308B047CD4389C12B3A1FC467F98A7E2F4511DEB
9FBAB2FEDC321C77CF13B21204776A715DE0C28F61B1C5B1B6CDE7CEF529A009
1209B70BA56CBBC8F894B06AB69A867B1C0322F16D016E992C7DACD8026D7F4C
5AC1E5D796C0E5A79C6083ACE132AEE5BDF71E90DA34D547ACCA61BE6D41EC37
F649CEA273F000F765D1CB762C01F0925CC899206487D69B87184F081BE4FC92
0915ADD1CAF234CCEE71ACB008439D7E0ED44D117E1C942F56B51E615267D9FF
C193186EEDFA412F2A917B97A920878315D488D1E15CCB1D18E9F76104D76978
B921AAF1E522B0134527426997D44471EB75304F9A5C8286AC95FD505FFFCE93
1B60115AFA35544EFEC21F1B21DAB103F2ECD03C45978D34A9AF4898439450F1
21F0DEC0F06B38C966A0AB56FB40FD3C6C4A6F1B92489BC74B93B7D7BED04206
674BCC38AA86F074419F816A5CCE657A26E927CAB2BFFBF4CC1A24A90064BB2E
0CA34E3C531D23DBC3035A95679F52ADC07DCB0BD1F9221EE576454A86A0C2BD
F0AE6914D6F36FA04AD771517929814BAB6CA2E090BC14049FD0BE5940E6A86B
1414F36C25B48A14382CA331926819999E1A5C2FA63104188731A458EFDACBAA
48397E97284B8A8C849D61C1D7D1A30D35C693B9AD261C3CF603FCB87651205D
6CF7D2AECDB5133E5A5D0B5019F9E1D426843264201C49B5F005D081B1C32432
485155F92D59DD66907ADFA1F18B28A8F1795FE08342FB4FA5F83392B4B54E43
ABAEC2B611954E2DE8DF3B36DB44DA46BB19EA1EAF0425B8B8CBF768BE5811DD
097EB0065B1E01ABF5E2D8428D248B1063727C5A6AF81F6238F1912F06CE23D9
B929E7E8CC2459C0E78A7B2FFB41C4992C8CA30CE5024BC62C59AE5F15A7C165
1CF31D319EC3E946CFF341E7B705B7CA5811F503F1E23A866648B75738A5C893
0A07DC64E8794EF123B66C212B7041AAC2F7A021930A6E91115F2FEAE306D1F1
C5ACF4307384369A00AADCE668ED7E814E32669BC829EF1B7EC98568A720100C
C4C8079BADFD302EADA542E45E04E10A6045F46D432299F879232E98F9FFBC32
6D9D0B73DA2804A813D9B83BA91C2B1EA4B102EC16763EE0F5092CAD9090F5C7
F6703D1EF5AC4FF555D8366BEFD891834EE0CCF512FC14D9AC7341D5046C96E9
8C17C37FF5841624BACC8EE6C44899633FD2E401CF66BCB8365EF29A3AD76A07
B35273CDCE50516A57F191028439EC8E5B8122A9C4B58D6C1A9D5A4E40821EE8
089BF5521A19117A0EA41112EA832CFF38AE62A7C42F405EBB4BE70A441D30A0
9C7A64A9C4CF1D411322A0A37992E6EBE6321C5E5B586AA1E12E4D9F314D84F4
FF5E0C0D729CD6C400E312293CD84D7FCD0058393BF81943537DFDEAB03839B3
A0481192391FACD2C83BBB9AC9E5E6BC6F373161076941FBE23CA6E81B848B33
A5D05FEA4DECE4EA88FDA3670AA71ED77DFFD3BAB2373B27FB482E06C093E9EB
E22F3B9FD5B28AB8931F1C96E4584559D47C3240B0D4A30A382DED5AF585C938
A804FC0854BA5F4ECA8379F7F7BFD9CD497E66CBE3728B69B85EB75D9B390B0F
B0E5C3F4CB0D2C1D1430C83390D90697DD4ADA95093D064B0E699C59892B661E
5A0CF700ED157AB521513CD600F052831A924C5DC9771CB880E017A30E64F2A8
7F902F283615BA37673DFAF9E0D2ECB5FBD10BFDA804BD47C3D4933E3B443D47
65DB43B2BD1433C8BCF47A40B72A0344627DA12399A086B6202987510581B57E
EA86ED95F3811AD256DFFE665809102BA715F8EC188EFEAE13FA319E5F388B89
BF950C292C152AE9B95A04D585E6AE259EA0C1E060B1C495ED215C9E3B5A7285
FE3568F5F91EE275365769916EF1BF70C062A45334FE88CFDEFF949914C4B69F
50F6628F9EEC6842B798950DA2A5A6416617A6D6AFDF832B4DBBEE2065A7C30B
63CB9340C50778EDDB5E0A218C79625498AFDDA452036F05A697FDD95DEF8B2D
573EFC2CBFB7C4F51848BFE652FFEB23AF2E20702F9888B531CABC31F73E1809
D29542B8B5D24ED5D673E26A25811D4BCA9D693EF8ABE7814BE8007BEC5BA79B
849449A58453935004FFFC8F5B183F7A4B9DE98FCF9B0FDA17BB2C917239849F
A8B3641B901E5A41C07518C027E399132512240CA99B02A0410974AB1197F948
7981AFBB4D5126B16E72D95B28D1EED1B4040E98E8A74B22C7D8CD3FF06B9FBF
62FB1443AC776F44F0AF34047C9A780F3B520A8E750230D501CCA84CB279D57D
905123FC23D46286CDBD70C1E35DA15F1BBB8EDF5FEBD36C6E600300261D453E
F3794BEF64528D7B4B91515E5442156C41984984E051B9F413865ED26E38CC6C
2563591CE129FDFC7520C5D5CA51DE48C5300CAE606605E951148BE1B66C45BA
04871565797EC537E26B24A4CA076109F2381E24C381185CDE9E231A78C23918
DFDCAECA2B8B7F8EAC363D0D75730D6DEBDCBF85188B95F8E5E17BD5C1FEFF38
2FA7B9B0B46073D4F6665C658431E7FFCC75FE1811BD701298F763AA466B7843
7709A5EC0784A852A32989A63805EEEA8B14A64CFECA4BE02BA114A4CF5869C1
6F750F4788B6B3C3C2776D4DDE23DFA1490CFA3B4C7D0B8794E078FF15A4159F
644CC8DD9EBFD8ABD8ABFBA9D53C42A61026E5BDAF59973977739CCF0FBE3A63
A34884DA9097C0F903F0F05E0F77EA5E07867117D1908D958AD0EFBD5C6CBE68
4E8993B9C485D8B4476F2EF2991878E11F38FF36D1F1D67E0A154F2D264D9813
78A969A5999E0F8A20B81D18E1961AE265B3F086969B4128A52251DB3EBDFA8F
59FFCA5E7FC82E25FA551CCF5E9DD8D6D3A5DB1E28A4B5BEDCF9AF7F4409C627
5E034FEB45E9425DBEF583887879AD93C362A37F0C069E6E22EB77ED0EE9E3E1
0459B9AA355E912CE927A1AED4B962FBD95ECBC414640CD8456E04A5E6F024E0
1294FB6906739CE1B4567C1C777D47A7F2D78950A8F84091E541E0DB8CFB173D
518F9C51019EB4FED063631D168D1A00B9B346B62199A1AAA40D8B35AC2F519F
A7ABF395C0BCAA522AB5851F8574ADB710CCB3FF48D54FE2C65A237E02A7621A
CE732ACF123824D61FFBB85FDC03D7B779BCD8BD13107973003A71F5147CA479
EFC1134966E442A2EEF5D51BE02AC50855B9158840F97FA94CC03969B2DDBC38
390BE7F6F9768E584BE5D3E02209C9F5C6398DB9A763F1BA3386E051BBC1C7FB
8B5CBE3D295F3E94C6484CD39D18A81F7389979EF408D778E57338EDAA1C658F
9C1F6BF01E8C05290B07F87D83C4498EB6B53E33D46BACA453D38B476C7B79AA
3A0EBFCE8A593AF6595410F0F59A79448D44E92E5A691F651E0B095682492BC3
5BB71CE21A3E9C1D1AB20BD6C6CAA328BF57F4FBEA068F1CF5B88FBEF9974213
7438E51623CE0E21C27ABA2D3805F093A069196BAE8DB7E6581F81C57C6E5CCB
B5BB7DC49648D46F2741B3A91D9032F24ED8F7853E8878C5315B93F0F0DCAF80
757EE1EA8A78049B8A9E998818F09E1B5E8D34EB46F04E8ABC5F4D367639B421
6AC785C142CE42FFB593697B786ECFEA320CD49838B5DAD7F3FA0DA3AF073C9D
ED0369646F6B36693E9A3C0BE4919F409768372CC0E84BCA86276BDBA1914660
83845E147A52D5DFD4043ED3AC4DB1DA120971ABC83477E84B2BD3E91C105784
6B76616532B79C929723445D51E55F2C97F1189BA69836D76D228AB453597E80
B7D3FD49E1D3663256360E4DA56184BE9677D3547C4F2765665237408FB4D1D0
7C190A30D72F4DC185613B31DF5DDE27133DB26720E36FF2D28374CFAD56A12B
00C3D409420B491B625E4C43A33EA29CBE2AB98CD0305DD935D8F0F5EE34E73F
44E9909CD4A49E4600DBC7FE9A727D18EA999ED7618E33DC61135BA3E5397F55
DF844F9EFE1E760903FBC228B55B1CF4B2482D465B5835341350E215B0D55DDB
690E1502018D0F42D2C05275C5EE7AC03CDA298908B414007BCC5CCBC4A7C3D0
AD578D0B0451F2767A6BF81979E99EBD6CB8017A27E311AE62FE08BEE58F2B33
AD6C2859059D8D3F20870038B6EA3C5E41A3E6E6EAE70E659701CCC2256A7CEC
A22D415F21FA095C1BDD305F557FA21DA361255FA634F5428046582F1894DE3C
9CF2E56BAD8A834ABCFD39A3CCE63CECBC5962EB3A03C8EDF831D63D2A5F4F9A
5ACF9D140BB42BDF2B5683587B8F7263E4C2C43A4C530DB3EA06EF9672983138
D713933F6760E2C0D9E3811F6D24F00B3EE58C56CC7E9CF8704FFCA8D35C141A
58CC2A46228F2F642101F5B23CE1ED3A79FF543B60E9DC22081E65320BCF3099
187ACC0F680A66AFFE0840D63870B38E4100D67ACF9EB4C072D3196F99F999C9
5A21641634CA6C9B6C1CEFBE4CE4B59F9895ECD8ECAA56D0136C16C2109C8762
7A1CFEA2A6707D6B09A9278F772433F92EE844A6DC01584B8219388C5D8C2630
E1D39F3430FD313C4E64190E98B0FE3A2FED197C64A2F173D67B96DEF8498BCC
17589A700E889B5EDFA8FF2A7CC570159B5621D374878E63B56C35023AFCEB53
97728E52E86616FE3023CDF8F2E3205A114D00FC4CF71B706FE7BAEC876CC50F
A0C3717E91F68E6E2C6DA9D1EB523DF48D10D441ABFA40086967CF3CEDE338D3
76450FAC53777A02A6CC5310ECA24348652BF62276DFED27FA15B47B5D48BDE5
E74F96C82774AF2512D837DB53D1C4791C4A31C1486D6B0646AFBEE8172CD48E
FD8B73CE708704378306780B31793DC3588A170E5A20B20B7C7E7B727D0620E6
F45BD57DB169FD3568C8E044865DE7308E8CBFA87DCB0FD9A4D39EC820E0B658
1A24EB1391BB3DC52178B378B00586F8A890443897F479F5C27BAC92012E8C26
625EDA3D3CE4E46821457498301C03ACF66F2F7EC5CA2D541D3617439C0069B5
5CCBE8D1F0523ECFF6004882B93CF5618D139605D06B8EF066B8FDFF0A4DF05F
CE76504BD81147F35D8989D2CA44BEDE6B8BA09F5117C4480EAD193A55D17766
E680F2D445758324D4264B34CD6D2643914BF569EA1F9CA8277788FADE52905B
6910E32ECBE6E8710E44EA188EAFBF5EA958EF011BE0E24D0F88BD44B30C8B42
88CD98CC5E56DC4D1333DBA8FDACC0DB85515E1096B1240EDC18A0F3BE451E29
C23A32A806529BD07349064CD9EF73D7A938B5AD3D1304F2C6FB438EAC993894
2455FD2F90BDE47DED116F3966B7915695F9EAFE5579F3C80495B6BDB1F24037
096741E04B3165928EC4FE7BD46E4F1C6B9C57378D414E6D7DB7466631822AF1
182EED5055418B4541E469969E60C53858FBDEBE4F725F66138B7C516819F0B5
991B1EFCFFD98E6D7F086B8DCD10391532F33C17437827D857FD477BA5042250
CED0BBFC6FD9825A5826DF34CE0B2C78229F24FFA4A3217EE0DAD89D3D58ACDA
20FF3FFAE1A1D2A73BB74858A015BAAF10F06E1384C1114F45BB3411F870A452
3AE84487D44CF7EA1D07131A8A62E3E9DD828C4C431A7B8BB078F8E328439E6B
8AB2B752FB49612F0D1A7126B450FAF7E16B807ADFEC622AF603CA211390BFF4
8AE9CC71BA9B8CEA1FEB0155DB9C23B3F8FAA8E0D93AD351171C1178E5F66BC4
73B74C3E6292079C2B2D43A59F09A158994B6F2DEC606802157CB31F7C7B524F
D9A7A57E3881A280D8F3EAC2E25EE41E58BC96B9FFA3B04C17065B1C34F194BE
EF98DDD55CA31A58924EAED8F7E8BEAD5304B355ECF4767A0950858BE19002D2
B4CB6DD56D0731B7552E12FBDA45AA1538B9DF9EFFE960AA42FD34136C401767
858310E8CD7276AA1FCA90514C00CD97FC5A09CD8B8D4A3A66DC9C5296DF3A93
ECFA6B76DC3B8C7FB8EA1F69471EF9B5F8628FDCFA2CC3A34B4A5413722E3A76
CC09A48F9C05C8EB145A9713BA7BC97CB557A128D43EC7119599BA999663E0D7
4313CE89766F8BE3C491BC98FB025C7AAFC2022271FE620574767E479BB2314E
0A20F00CAB37A9220ACCFD3BEA219CE217CA917354CD7B5811BCC4EA6D8BCD52
72A11099E6503AE6B47A9A116672553401B7157D0AE9F18D7CB8E40CD6C4FA69
1BE19493F58C953237B311F58B834EFC7A6196D4252CAB7B02B423D0DD2BCD7E
98FD7C35F7D446C5CAD90C19A1E7897D17E6E87BF17577C8E3A8A30165033249
D533856A2CB6E9C1AA0239CDAFB33902020D6EA45A8BA60731A9CFF651E03F1A
E3C2418EC2351DB956BB402DD25D0A48DEAAA63DC1CA574B8577BC542F76EB3F
DFD8004AE796D430B275395D75A99A2C14F47C5FC32202DAB656204D19FBD837
A6EC010C42084701F5770B0BF36DC8E39AE8C87D07ED9337F0F86C9551C6207F
BBFE3E8592626675EB20610C4C3F89BEFB3F1D0975F73FBE95C38FF0132F2F9E
C4932A19D7626D401865C3F32F4D178711861E7CFF54796B9DA96AAEB0ABAAD4
EAFD50EF789E313A3F52526390A48FDBEA688E80115FBB6BA8125BC7045B9ED7
2403B1EA544EA643B82782C150E294DA02F9F2C3BB0375BBA603EDC932F1F72E
59199FF3A48D907D3DE17655C8C8061B079BA8C845935E4E49F0CC9FF306C34B
1F3B56DA90A7697E1BF0A3553661CDA92CF3A581073A646B2EC998E8A7467630
91CAE08357D2B9C13593EDCC27B258C07FB0E279174A3265A1E2F6B63FF82311
62793416FC043D3DA7176DC3676B0D95192C772C129FCD2C9A9E58AF13DAEC63
1E8741BCDF96D62F37E7DEC262DD87B8D34C8DD3C20EBA6483DD41D48A5197F9
8F35348F25E9021FE50176E44F6203BE984312E98FDDA72D2D82687F527E0B67
9C0D5FE02EB2949453CA6ABCEE1E618D485E9895A8E8E5AF35CB731918D2EB4F
21CBE7759D3911F1DA71D12F4202E63A250F94457FBB6951722214D357292DE3
4AD59D0E96C7EE077EFD2CB107838CF298CE66E65983EA86332F8FC11BBBEBB7
199C057AA13B3DA10F76CF915257B58BC533356B6BAF578D802622B5BC8DDAEB
815F9DAB9D6B648631B5538BC3B05B2C9FF37E8805F8F1CAA95A3E493F5BE74F
817F95F102DDCB48C8B666E79D29824774274E960E1B6A2CF26C93F0A2756348
052AE1A2CD4C3A0653
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMSans10-Bold
%!PS-AdobeFont-1.0: LMSans10-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMSans10-Bold known{/LMSans10-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMSans10-Bold)readonly def
/FamilyName(LMSans10)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 83 def
end readonly def
/FontName /LMSans10-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-460 -297 1761 1134}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFA25B3D2E21970B61BEF6BD441C0
853BA8F00600E933C80C0916170925A5E999AE3F4523441CBE8209ED95298D28
7897FD39E60633B3341F7B1EE39A74B7CFCA379A6C2390E7C26A4B9C8C556F25
96A90868B428CDFF58080D414AFBA9B90E752A5C7F4EEF6EAED9684DCA7DB0CC
268AB1DF914EEFDF740F44F538F1E841659F02898565FE3B1F13BC87C5713FE4
FB373864385E506D1C0BB65A3CB8E10A78C20E5BE320989BC3E8C8E8E399FC24
E0BD4271E70E8D7A8F7683A4756AA988C5E78DEE26995F197F2360620656FEEA
739826F54E14481B446F1D7F68111FFA8C859137AB1F8E90583B98BFAF5C6329
59CCC441D095D44570B010FEFDC0DAA465ADDF3CBAB31B8A5E7672C9EEAEA7B7
A345AFB8889D3C53E0F9619B8F0C11FCFA80839B0574D91CE6AD50613E12BAA0
115864303556F3EBF5B786035121016A72100BD90BB46818BE2E8AA15252FA00
9F20B1F01EC0EC35CBF7D6C9684AF91F00880B4F0721698DD568E1B3D09641C0
58E5856E324DB2E378120A56ED141762775C5AB88AE8BB5B6B18158A7A9202E8
651774A479D4308E7F29052733CD2724314AF8C61999D544071407B7774A5610
C7A8F6EFB5792C23498F7D5347CABBA2DA469A957BF2BF33E8E3045016270416
4B71642412D880A7601B66C002B4EEA76041F2746847EC01F5EB5744F1EA82F4
163BE681F7F568158C214BBB58CF2BED8BA9B4030D081D755D41B0F8DE4AD0E1
F33A1CE6E38EBEE8CEC6203C2474727309D75E85A83DD36CA1A05A37C9D1FAF7
E1AD48F23A222889F92F15AE9C33A8B3E343774FA496C5BFD6D9C1328E16F748
4D6390CDDA8EA19D086DC2E49DAFC1535299AF0F42A16E89B2D395B183098334
286F4678662DDD87FE71DAC85B1BEA9546CDC788FE623C0EC28B6F1208F01B4C
5956B9402DCD2BA235EA01291DE436B80388FE6B31D225383E1054FDC6AF7600
608EF8DD116B8443675F86A09522E784197B8AF0E94FB9D58D6EF8B8C752134C
3B5FC003D7BFAECE7BB284767DAFF3330B7E1043CD9D69AD01A15A0B5D83C1D3
2DBFBCD3D6403B7CBA0A80BCA7E7802E46ACED08661305470160FFA5A9FD9048
06262F049E69436E357C0BD2F8200C5E93BC86B961B8BD5451F2BAC4AF890526
66E690F8ACD132C6B29FDF83DD29AB5E98A4B4085FB5E86AC8167AB442F340CC
BD71BA5EFFA052FF07008ABC73E686EEBC2C10645F2CC8E86EFF0602581EEEDD
6C8F062E3E6783AD762482408DC3124A9CC2E373ED1F6F3EAEBD1C8C533E9439
77AC6B4C6445370A3F1E0AE7F74F1BB33955864E47054BCCF70EAAF9F8C37D31
577E8C0D68A4B89535FF072A48007E9EAFAFCD3C82A8CA364714F7CF503D849B
0C466DA9C531E1F1D1F093F794EA44C40A9D5726B1B2A974E898F62BFE90F132
A37E2DCA4F43E13DB13F00576F77D4DA319B068FFB6060AAF40EB540CD52B008
67FBDFCFD3062E20E83FA69D9B4BA8A2016A9B257B71FBB12FD0D0C256B298DA
8C6CE68DAE295DE900E4BCE7F0FB33F4C1AB8E43790762CC7D2F2B08DE329926
4CE02983116E19A103C3E9A071256151DA64A9DAE6040C150F8FCEE87A7483F9
2277B32B4863BE9EDEAC86E741340C841085053B84D3EFEB0AE280268130D2B8
FDB828986367E2C4F0243B2FEC24DAF9F891A8903EF51E091BEACB8ED266CB65
288944A535147E6C4E5A68F5DF71FC609F11AF528652EB3D0DDBD6A1288C686D
3DA1F50B8E4CD81A47C1E5A3997AC78F4B7C19F8DAF17D45D9824FEFAB3C3002
61DD35FD5523502BB45324B1DC329E73E5FA2DF2837F563BDA8BF9A831ECA28E
1110862C783931111D2A9DAC0C40AE7B7B34824A7D11DCD5168A7A13539C7C8D
DB7BB495531BB99D04FEB88B6DE54F3245753FC550C7F6DDFA33D2E01A6D58C4
D46476815F98C8B106FD26F95949B682DB56A88D5400C8D857738570EB8036B2
55BF4A5DA66AAB8B2568DA5051F0BDA8CE6C8BDDB68BEA3F0A5EBEC25E048C24
3CC216AD82933080F74E7FF4F584A19588BA2944BF5068D2F6B9321AD914EA4E
82B5B1D8C4C44741A535D965E48F0F4AD114076E79FD99C671E8F54D5A460DD5
DE00CE7D6380CA9584EAB41A4804DDEFD817355D4F877256023ADE33D6EE10BE
2831C738C6F23CF4F34A9CED84942968B40D4D871D7B5058690C0F8B43A4F9D0
21F86FFB32A00B2A97ED6065ACC2B5EAB9F109C36C9122359A60190E6C42C715
08CCC0A15C2DEE572BDA14D8BDDFCF2743A15F8A9645B36ECD96CEB82DB4F150
E0826E153180D394B56AA8FDEB4022640582C972655ECB16686869E6DA641319
103DA708F2393AD051D68085AD21C982C71F0ED96B0A1170816ED400EFD373D2
63AA62AC5F6B51795C073CC134930B868DD9FC36A722247FA319629153846464
87656C1A822C24636E6FD8026C79AC276D5AFCF835432DD84B8E4AEC46F19180
2A97B0542A5CFD6BF7576B90A6C4DAD6D6C8EE07AF682F925F01D0B260D49B74
149C5F5242D3CB253C36A84CC837D76B2BA7A231CAC3F1A53833DEEA43BE551A
26129AFA9DF18BB97F4D3D2A68B2366102ABAD3D8ABE1CFB0A9DE45A2887C2BC
9484005A11A8D4F968E95FDE6C8C6BA09043056CCA77FAA27A113345C9C161A2
8C5A324D31BD262F948B6886F383A7EA6968F4D04A2E3CEE4A15BDF322BD9618
E23C7FD95CDB02DC661ACA0D9FA5DA0B393399BCFCD4EEBBF072C05BB0528537
EDB6EC99C046D3F7A924CD93B97B6A079BBA10E78FFA5A91E9AE24498B98DC42
EB96569E0644A8E59488469DF34ACD60FB0EAE94203BF88AFA8E328CF74D7704
9949C2CE64D9C876462297A0EF40FF882B18A116878F50F7F6578D349627FF4B
C3D6663890400C2F5BC1E1A1E73F61BB2B8842FA5714AFF9E5F519ADF4936D2D
0C1BD1ED89441E890CE5EF1EED2985EC52C26E5B8E62CCB91DCCAC6C165A39EB
148B25F23459D2996A7896CB24A76056A429F54B372902B17D0C404105753FFC
4DCEEFA49DF107A7F4743E37FF5A790ED6B92B62F1651B8E6BEA8BA7A8A2DA13
4401D0ACA9E239449DF4A65E173BEFA5424D243AA8BC7E87176773002363255E
75424DDECC8F7BD3EF0C79354354299C85E1799134822371A15130E0812C23E0
851E4D2218F93467C90460674F8841713DE784371B9FCE178F9A75F3504749F2
02BE3F1DF31CD64AD21688B2FA3BDF5E36CFC585979F8957F5A70AB9F9C732D5
1259D2F95FA6D2DE2B2523656B73B1A1EC29E2AC3B8B7A0430AEF9BF9DFCBFD8
2416870588344D7AF34CE6BC647478C7F346027E518B488FC2B8719A92261A8F
3A9713E3935410065042981D2397B95B3D8EDC0ACD268DE68310F453DE2757E7
DD7C1B142979D80DAF96A3F3517933574B07E7EB0F42B30857EC5CD2FB4EFA5A
8E48AB87BA6E9E9D6A531DC6F43B3E523AA8313C2A4ED52022C5D8E5198D7361
6E0D8B344B3203E5D01E8E0C4212EF567A0B75B815F56FF5DD3AD6FC34DEFA41
35B582C1F02867CB312B030E422825AE97E638E539D1E22D2D4630492CD8479F
D479D9E3C3C95C47088D3CBC8C8A942A8FFFB1AE30C228F2115C76EF1ACD02C1
501537F65F57A542E991655A4E858F0EA546C3A723A3FF1CEC65DE8E0F5AC930
8B32343F2A9CC22EA7D87E512F12491FB2055466C033BBC1FCFE66BF1E368C01
2360EC5FFEB8A7E67AE8CE18FFF62B10812C6E452FA02FE7E5FEDAF9028DA282
22985FAED7B6A1CC891D07185666EC9CB80A4BAA9676EEB9BA4026B9252AD7B5
74C8411EF3316BB2BB3BA9493C94D8E05764EFE7B8C6FFAF9E83B2C925BA9BF6
290324C59F30816B248D320852FD5AEDEE1B58013125B46EEBC992570D2C6951
438E37920B6CB82BFAB5BB2E73ED0578D79771B9D519C1D7CE91C45B8261D9FA
08099BDCC0FBB35FE44DC25B2C58B2A5C1CDE2B37C804F50577B6D1308DD9C41
4C50413D1F8700B04CEAEA603A0833E91FB4A44AC83C454CF3FF6950333AC92A
AC280B543D226AA9DC216151764A650748FFA9A3F5DA590132556490AA61A240
D723124DC4D2168F1C926D8C31F6EA95FD665B591E12E4DBC6C134F4F3B3373C
705FDF1CB3AA28EAD98AF167692B50273442FA852F66E1E2044AEE7A98C72AA0
DF2D07B4C3071BF88AD26FB7EE9A331172C242FCC8E3D582A3A538644C580083
5F4FEF95F93FBB61F865EFA251BBF7CD6B645F9B81BB9F60DAFE12589D767C4A
5C46A1425D4218A60F8B8EC1202C05C19AEE115A46C49A663A888F88A9E9A556
CD20AAC23DBD644F0B3F94722F0A1B4D56F2C2EA4351EBA5A9BC77AB4E4D29D4
00D9F6C5A17C3502AA8220CD1D15987A7716BBFC20EB3DB805CAC99BDB80DDE4
E5B727A71B84639777F936CC6B9222D3D13C1BE4BF6E1EB6DF1DD36642B5A8BA
107BAEA2B7086DC2E483D4EF7F0B0E783C7A56426E4FA821BFD8644501E923A1
17D4F6DE9C0C761E7D5C5329ABE1A153B16C84D37A6A9901BACBCAAD5FEF89E5
722C14B7DED7E9AAE85B0FDDCC04C27F36EE9B552645B83D67BA54D4C2D3463B
82015986B04DC1C56AED7E3E83B767E4E968204B3BAAD1969A76B67C666E2549
38BF6A44706AFC1CC092741BA7F80E3D3334A8479BCAEB272DDD92972ED8E778
9EF9899D34B607DDED01318BC9A9C8A9E8D714B1A1D6BF89D4CE245CC3450F04
73D5983C8671BC0EC4F54A9B7A7F52C5231670E6BBA5CB2B4B5F0FFEBF496FF2
14AF5B0721664A8B8B7182D08C0D5622CDEE56212D57F9F2F1D127C84F5E4AC5
C28C310F15AEA54DD1DDEAC00BC5F1703A6EC5D8A2FCEAFCB4B635CC9D88D8EF
06C084C8DEA328E98E8CEB5B6AF93383BEFFAEBA1CA6C565DB7F48D70E9DBDC1
57F60B0D5EF70270B40D4EFDAA421F4059C474F38CC3D6D2B0D7BFDE4F4EED1D
A153678F9F95A9E825F60381A00615EF14B6DEA21DA0F25E8EB6696DED915B2F
DCAB62AF3DA89831F2E07023FB846DAFD3297DA381474AF81B5584B054A5ED93
038138EB66FB67C22587FC14898051C4FDE207F01863350F095C67FE8A2F9470
3041C705FA23955015EBCD501E3E096EA5DE2BA1F785DA4970B2E86DFA34AAA9
795360C83D53D6D939A730AA3D2708ABD14C5092F60F1C3100C06F6972B27F36
38B59766ACD3887ACFD52420EDA15A597E80B7D3FD49E1D6887595F62F7C5927
FD0E40C8A07B45FEB4ED0C083E3C50792308CDFE2779CA6F2AAB331AE204F3A4
50A0165F894AD136561BF06769FD3C37D6D1ADB555EB22BD634CAD60BB6E39C1
A9F1A8DFC5ED4636F3AD561C22720C0C78F40D46FFD5B2E65606F46E0DFC26A6
00CB272F79AE07698A0018620539FAF5FF0BE8C0EDE2D696E60DFEE5F15D5EA0
92DCC4D49B163ABB8C7939094180813BD2E28A6186CED87E55E5EFF52B94F524
1B4557418A1528BAE9EFA0140545252B0FCF62C11791F8E112853F74C475451E
BD128D0BDE683724E8F81943E10792E4096DCC5BAB8E5CAE0B0ACFCBC6BAF378
BFE8CCD3F6A21C5A0CF54DA689745B877D7ACCD01E2DC03CD003680E92F0D10F
566B7D87C01ED5E6E49D8B4746D12CBCD0A3335CCD7758BB7AD06843E35E0103
FC50713ED2861F781AF45D55D2D83387E9874EA7668E8810F14E701BE121A6E3
C832FDC31C1546BF0855A675432FEA460B197A7814E677EAF5C9BD2D5BC19411
F5C75C9AB35C1CA40B9417A1DB1BC9CFD7A726E5853FD36B3F1214220C12E843
104349B3DDDE8CBDA5AFDB246480661EEEBE8A4703D4D84D1B7B4499E585B500
D54F9D0E6C90513F0911504B583015DA807673416491068203CB09E2F8F7EF85
4960CADD7176090972C5B158A400A02C1699FF58CA2C6701C4D3E39979022FEF
F095DA482A4DEE4347C802D85ECCE0C0F2EFF20DFEC6942E2E9BF906AF268180
DADA2F10655BBF7564E8581E65A89F851C4B52B38D8085015695A4B206D94F9F
BEE46F6B6338DD6A038A797CAA35C737F3DF938004CA4E9EFFF243628AADD2D6
5039CE4A1534233A0FBEC8AE57A7597F604B5C34EC22210D1E4FB511A37227B8
236085547A8B0AC516FC0228173D1578300B5AE51FE74952CDC9D40D9B1A3235
BAF8048578D3C5BA050BE03BCACE325F78FC232393D8A08CEA95E281B0649DCF
CEFD969C7AD4DAACB1EC98E844AA9A259683BA62A5132CF549382EFA09C29290
665D4052D27D19F27B189ACCFA1C6C760DBEFBF5A18E58BC07BA6116420CFAAE
8DE28CFED91459D645C92FFDC31790738CD50C61C96344FCC44005ABF73738C4
0C1D18DB44746F159B035A561C376465F9331E5C7BDD1DA502E875650D2D7C09
2B45D9330265B56B5C8E29F71C9EF548B8ED13A551E3CC27B40D67939C4B12F7
B88D68D27200283AE08FC5EC8F1C085D2EB95A37D46C8398A374BC406DE456C0
747CA26E829800CE4AAD98F6CBCDFBD90B69A408A504499BCF9017D11C9AA761
F3C6F69BD096ED6585353CA190E6D1C023C9E3386A3E035B5D86EECFCA75A1CC
F3AAE36FE01A3E5E6CC49C79CA23DC10ED8071EEA3A86CA2E5957BCA0EE326B9
0C882E7CA0051D10AE4843AA3AA415AC887257D37EECC71576A752939BD09C74
3BE702E2F1348B2F930C2F482F17D107B1AA4C38913798DB634D38019F7DAA35
E82F47CA081C407C638571BE3C68DA214B1AD5EB1B5B430AF25A20A0B636FFEE
11DDC3660ED0396E44A5667B7AD3375595524D22C358B7319E1A8737E0EC21F7
CD596D42A88458B89786C2F6D96876B7FBABD255CF3EFD024DB4C40E929960B5
F0AD71B73642D65547A0EC71D4169ECC5A9AF15C361F4CA0CB8AB5C0D85B8B79
F8673150E70C9BB7F30A18D69C46649DDEEFAFF4909ACEB5FA29F511E4EBC1B7
A6D267FB65BD9B2B3D6CCE7DA625F13D9C504668753AA079E9B24F0C320A3934
A40B91854656AFA604C3EA86261A7E9E44B6DFC2A765E76365F3143D534721A8
FC57B1DDF4FC0C5F9EC9E3819AC38E6DA6E587C23E8CC742441AAF5B0683E951
03D3B7C48B8EFBF6F79EA701C4D2AD083467DFCEBE67E8A558650D61D9EEE8E7
62668F8D8A3F36DCBB5352490FACD6E9EF0C8681CF42F4D1F8727B7F021BCE3F
B62CF3D855FF25F5E0A7974779051CB9421DE1DD7BC5D109B52B7093D785F43D
7170C8A03FE77410A768936DBB1162F16ABBA50F261867592D06086CE3AD3BB9
DDE9851808334DD1510066DFB28A467B15C17D2D0C33C824A507CB2FB6E384BA
8BAFFD11D6AF912DC4ED243A0C650136B8EEC999DA93F9BB608FBD11ED9175D5
C9919AA6516F0E77C57E563C368911AFDBAEFF30348287C9C3FA8B34A76654DD
7AD69277F14B8271D5613B831E9FA76E06A298ABAE1A432799BEDD881C5B3506
76B2C4890EF4B3B29354C0EA28694A1BDACE16DC8850DE6284BF1940F241A22A
09F10267CD693C79517090BE92D4EDC366D10C640E2BEEA25168B07A9DD4B28B
3B0E1CFA30BAF3D8E649F28EA66D111E69BDE51937F71C381E4D26F24F0DF0D4
4204E2524B171BBD1C6AB15A2B0A06DB37A8BE36083562CA8E19101904A29B49
690E7BF4BEB7FD5733825CDF4A716744D3D19D52BAC0FCB37968B8AE1BCADE6B
D8A3BA1009B34137B90E418B6AF130A1DF211A3795A9B5FB934E47F6C48155A2
40CF0677BD28ECC41A6A0A5E89F8D0E8423C17E8A165C5E2CB30B2157A7C6A7D
6FC69E7217C2DB10CADE05ACBC6787BB5EA465FF0CFACD9BD056D4AE64613203
2C4DA87E55DF77AEA448765D626DEAC21CF99146A0B2A0E257CEC93330A149C5
D9572A20B10AE893592A6CE609354C2D51A2321554AF2252858B32B16C60C066
96BB9333FEA9280FC3B8AB50243705F5337A66B458A47AB5FDB14365B551D548
9030C1FE92774757CBD5FEEB9AD584935A58676976DDD2B6E118FD1D459A3958
0C16F60E1CE273350076DA9B152901A965A813188195762A882FD6A3E2F6D6B3
67EAA7D2B13810A80BF15BA05A901D8B991528CC1ED3B30CDE23A07FFBB713B4
A5F17E1A3FAC930A2C3C2BEBA86CD8754FBF01CDFDB14278F607F6E5FF01DEB3
DDC4F78880AB187431B6DED89465A36B79DE786773EA72EDB7BAC84AC54B45CD
206A6E690D7804DE2809825F71D5DD1A1A289CC9216E508F926BB689AC03CA09
3B8670D02EC066E0186EB4EE898B5B9735B6D2645F8EA27F25C4422B243192B9
041EEB802E4AECB69CCD0811185FA0005893ADDD71F0378DCF034823EF5CB09B
FAE54328AE66BA54667AD62FFA63672403EEBDD461895B0CE67EE0F3250A0626
C15B61C06F1348B082040B22F37E8FEBD4E64C12F69C708B0954C987F2B593A0
787ACF533199348D11730EFF7C25DD5ACE36A8BD585F3561FC58B2580B83DC01
02166269AB6A4A69A72C4087386CCDA558F5050025A45A1049C9625FC60E496C
0BF60F1CAC57965589DA26267FA03B2CCF128C499ABD5FCF05778BAA1F71B205
2CB92AA45721DF8F603822DD724C21750D736597A601881043A313A28A9AB030
32FDC93E4F7F38F5287778DD3A5DB8E6475585DDA6351E821E8F2E2D6D8C6AAC
B40A53197ACFED3C707D5C78A22E984B249611BEAEE180A4A48200CA7C3761CB
464F9EE24B9E47DBDF449974F4BF9DA358EBCD3125FEECD45AA66B2C347BE7C6
919C2B5834B520BABBEDCEF16CC73DEA5C69B29620BEBF01FD780E0983100AB7
15FA4F87A8030063C3D390A2674066DBAD1A9C3C1FFEF085A3DF5943A727025E
5B23E9EDFD422C969BFBB8C47A097149955FE1609C8111412825F41ECFCE0BCA
12B0D2FDB97FD5AF2DEBB2EE0FD69336E7070E3EF345D6D1EDF0BF6A09E32B7A
D77F1645EFCF7BA5E07C667227EF142D03170A9DBAB8682DC2477EFB73DB13B4
5BD482CDDFA1C0FF7F615725E850B6C90240601B19CFC0476BB5CDECBABF239A
B8431BBBAA5E86057757808322DF216865D48A3069DD500A80ED96EFFA1CF769
F4A2A6DD033D6A0D689FC7F3919739DB56F4522D02299507F5DF31CA0AF4D05A
E448BF2DC46C219E9E0ACDBAACA1A5B02770BBF217CB8AA006D05396235E0E22
F5A84982C779EC123B45276B7A1384136291D57736A4454923D4B4B28F24BC26
C15A4323B9DEB2FD22CDF770BB77CEA13495326FAF27554F869A2C7FFF041A1E
EFD2F26607BE82827500CCB8A980A825F2D713FD0563BE0EB2B36DD94D1FAB63
AB6E061B9E7EF1487F54EB23A1CE0AB8CB768EDF04DBF511A51FB72F5ECBC9D3
2FD482C74A5387629E03895C5B946112B68A52C9349C362FD595A48C117213B7
502DAE7A2A64207FC855BFC6F0C337A74C44EA1F5DD32CE6183A4F16DCCBF708
EDDB1B5DEA54A92603EF47888C851EEDE9057F63DF2BD3F3C6CBB52E5D75AB74
E830939CEF9EF8ACDCD94B5EF539C729DB9E22F46D677CE0ABC6418B8E91AC8E
1A82794BABD4D8814B53865E03C0C0D6DE7B10CFEC6DFFE2645458F781186DEE
74ADFAD3428690834CBFFBD70AFCCED406694CD0A9F1C745974FEFD29E6344D9
F4D0D77FC21D9B88457317EDFC17691CDECAAAD7879608163AB9DEACD51B8452
58FF0C9116BB0D0045D5133DE058396EEF4B46097F60B95A405DEE9FC1FA04AB
C51B73878E8FAA676F86342D8CB8EF51205C260BBD9280E2EDBD692814569F95
B61F2140D5CF62E07D60348DB768A16AA5DCF2D4A055C8AF1CC348988B8692F1
6652A951089E15F999595D36111F55013932D047B31DC98AA67CA359A1E251C2
60A49D0F9A5A63AA4C67357020BCFA729C275FD32BD38A3141DC62E63DC9E3DE
F647194678B98DB9E26BBD3994F764822CC5AF55C9634684C21B738351E17E68
32CED659CDCDE93654BB87D7EC3CDA499398E43D6F8B5DE4E5B6870E0DB40D2B
141DCC1B6193D5DB33CD78C5ECFD97E103458A2BE2335F485847AE5E7A34772B
B59B248D0FDDE3FB4F9CD60DE04863F47F7A3607969ED4ECDD9EA75A119F2282
B0FD2150D8E88F7B3CC7490350909350C42F6BF7A4521B21554098DCD8F7DA25
492236C72FEE04A350718B7C2A2C0B9BB8973BFBDDFB74A1850B8D0B81214108
3A67AE2001F137F7BBC1C5B6821796D8DFBC5C1783618B011F86C9490704010E
E379908BC7821C48CA79E025C3D54743A3B0CFA14625FBF274F37EBDD056CBA4
0997B3DC348356498766D584654059FA3C28A0739568D681387A61AC54D8C316
DACEF4D0161D26A84321936F13388CE0AC08ADC3134D1F38F37B02530378D9BB
7B63CB86D6663189688C6E5B123733610842E792DCD2FBB63DE146E1AC092E3F
E888245721D1A09936DC501992AD7941AE16EF07E5231112BA37850D2AE40FD4
8620CD1D15987A7716BBFC20EB3DB805CAC99BDB836E164C389D7D9636805CF8
C33334E27B52300EFDB9968D112B0B4ADD1D974400A8C2642147D4B652A8F1A7
E16BAA70C839176E9F7B3ACC64DBAEF3FDCD3A80C0AB9381C6BA08135064785D
B25707F42025C8B07931A1929A41B3288B6905EC04ED310E37BD380A32270F49
81DA77BE696E3A1D026CC64949962CF7922D6E0ADB1F798607424515CCEA5FE4
C0CF761E921D7D2992EB24625547D49BB8F28C1A6B27CFE73425A804B4056AE5
60F15158724A7B04EF1296B760C254F4D5C97FF8BC3F2B9A920AC8FC1EE4EB78
C1A95CFEF5D63253821A866F13CE96048BD5936806C49C1636A77020753AE9AA
57C1CCA7866F65421E96EF46E19E446B8C3075E3829C39B4AC1F1825858DE6EE
222D4B369FC3919EE24B8CB02E12CFFC2AF1BFF4DEC0CF2B8E9FC3FF3B65E9B4
80E59D1FDE2AC1E481A55E1E1FEF8E1ABFAF6486A9DB0A074333B1B48C1243A0
3DF92D4F58062B818702C18E3C64077DED2B0A24E213072F516D09E8B7A7BFAE
C22EB9152ABFA8C30D930D6F42FCF4F9B8788879CCBDA35D2F8822A911247359
0A1B96489B78A8214ABF04C5AB2EE77309B1D0E61853F0E04E16992EDFDA715A
70F7A701141598FE984EA7E3040F6515229FCDB226EC73DBD346DE3E01DA30DF
1A7CF33A7B5905412A63F288F85645B0DE47D1FE5977540E9DDD953DFD01CAEB
A561F028611754F949B830F10B3AF57D9EAE465FBEF66FE82623DBED8135D5D6
D283A312E8BBC82EED3C039908D0061602996C15700CDFE5693B2E8739D9BD57
A4D67E09514EB3A1D2DCF497BCAB8352CD22E77594549E5810ED4B2A01419CC2
450021EC741317E6595BF4236A6381D496925494C15C812323EC834AA6EAAA6A
C1C3C44CD71E21CC2C1E619079CFE286C25AF2E0C86F2AEEF587F7FF90E05A28
234C71C447C78D026D6D6CAB0A90A6891CC6A139CEBFDD923098B09C23D94203
EDFEB2A8899B078698314F0898139733CB0F341F8D147A88D61C5990E609001B
853B273DB140A44FE7A1CBAC44E9B037B6EA815C3D70DAC34AC084B431058DC6
23E531EA276574CAB6FA3D14EC60A2413275A70E84257F52C766EA1C1B863CD2
256C232F8973C6C00519CCD9786F929BFAF65B9F093F66AE0198DB15A1E9FDED
26782C59DF2A8D383A09280F36634BF9DFDB4972E3DDF82F3B9D3F19A0978479
4753076928F9867BDE894E1DDC02351A89F44B6CD666B66DDAE74F5491C011CA
4EAF00D68BF7A4DAF9253DA8F8043F300344F32EFC608B705EDDB100AFDF7D96
F86C73DA6B3B031B0608A638EF278210680952D8626EC38ED66F5BA40968213B
2BC293BFEB9F5002AE1230C4BC5F76AD2134CC4DDB0863CFF55F4AC739B5D1D0
322B08C610708617F736363D15A7BCEAD55D0D712E617802976F8F223C8ADDCA
895309CD39EFD6B47F9998114BF92E9A4D8796FB9DBBA8CDF19F32D90BF0F83B
4EB5D4796E42FB7053D4CD9FEEB842D85EDB16BBB215E47107A17454A4B42345
36BFA1677F9DBC107952F4DB65684D6CD4AE246EA88B6567C07522C69B5B0705
59EB2456676E931E4EA1EE3C44EE4DDC2840244B02576EEEDA01ED6232B5D7E4
959A8CBEA43EF356AA9F30D92CBBEDE059D026A5A2D9B65246D93E36A725F7BC
421AAAFF1052012B1DA153F7095F6E0C2E80C3C9D1EFFDACD080AF068F7A1CDE
18315BD694C60B1DC71F07C27572C1D4B56E2EB23BBF72415D00225EAF9E7324
B4F1BF6138BF547EF45B3D8111AE4E0CBFCF1D5B4E0C938D56DC42009DF9CD5B
6E99AB623487EF308B4437FDACA5322C021122E962CD756DE48DA93798FBDD03
4F46AAAD4D64ACCB9F58366810A54388BEFA8EBCEE63C42486824FD654985D1D
ED29E1B7ACB16EBB96A0A60B69DE15AD0AA12D10B73C29990FDA7947E6F8EF25
45BEF5468B23C504AB95C5232A86199FC1295D8BC52BBA9C5088F2A7AD14D52C
8ADDF2829CC78660199E665BDCF1E6EBD97A81F378D86334C0ECC06DAEAC0914
8E63206AF81E96DE0A9FC1F5DAE96E1A7A9C6023DE05228EC140AFB0DA0757EB
61C47265049EF59628DC8B04C7190BCA2E23A7C4DAC0FDCDECABE30FE2A2A995
6CCC05F24BF94F4DA338BDBC4262A26D679ED4D87F89B2D3FF1A88AEC6734C01
CC70FA943FF9A9F5E8D5716835F17CE3FCD6FC5EF4A6B08B3C2A698E4F95DAE5
39B5E403A0771421FBBD58176495CDB33FB4366285011AFAEB151B1CF06B726F
AB4B2B34FAF8CB61DD5E0BF54F2B8E1C7EA1FEE81E0CA379D72384082A6ABBC6
F62F9D368D0F93C4E2551F1FC0BFD57A16FCFB51D3FBC0B1E1925EE1764C0FDD
B049B9949CC588E29BEA16B3FD22EBFB9D13E7D7EB59D750A2A00AA12D10B73C
29990FDA7947E6F8EF2545BEF5468949751416C9EB562F65C3DB7A4AB69D26B5
BF8D90B7D39CD4D2B1F245E01C1F36626E3819E7DCBA9450A2BFCB9400BA2700
5CD6FDE60CC49B767DD3BF6BA86CC368E9D8B28FA508F31573372865BD27C996
0F0FFE55C2DE36F4FF20C2C04DFC9F36C8253C4346DBC11A9D851DA50D3C9252
69B08B19376CE9DDF854810CAEC564B8FD0DC4D1E4465C96FBE9F655600B8893
EE2C65BB593B873B21552616854D1E757A25D45087B19E408F778E8EFDCC466A
400C0D43F4A0999B39D1D5F9EDAB9FCEE3756BC4F1082EBFB8D8D035A9EAD4C6
89D1C554BC73218607800D0F807BD26DF0FBBEF346A224D073A11E3638F95D05
6129A456CEDC82C054F197229990E895ABB45C025942B750561C360675567594
570C1D1E194D5602761EF93C66B876A3D20B11E908D9C6195D8D3E9BDEFB663D
035D65A785DE8B014AA6FE4866BB1FAB2FDF42E184BCC24B334D79E8F147BDDB
1DC607885E12FBFA7343990A15C649686901564423F1F8A3AB5AEC5A549EA570
7353F509B24942E49DEDC7ACB9E0574E1DA3778C5BAD737B2A2FFF440EA22D12
EC3B15060C553536AFA1AB550740F72F3CE4F24B393985E8DA7768801D9A6515
ED7BFAD3CABFF58900A9F8542C98DB691FB17E10342EFFE68AB51006FACBEB1D
7BC8BDF10C700038FDB23B78F3BB8BC8902858E6635BE37E23FB873E2488086B
A272753E307CC053F8E46BA3673DD434B01E89016AEEE494880B8E01DEEA4179
85B7714002FAD60CB843791CFCA02C244650686DD715B88E20F71C865A3C7B1B
589C0B5BA0C811390F978D112B0B4ADD1D974400A8C2642147D4B652A8F1A7E0
BD1544A36FB4C3A6761D48BE17ECA852F8AF6C2441350571D36BAD40F1C39ADF
1F3636A28B7A4FC8E7CBA25FBA72E4A6D5A9FA4D18A05926998D1D03E2532F63
59346AD6BDE1D7CCD1A973BF297FE6A8821E03A381C468BB09E5315F4B5E508B
A65A489B68544ACD7953AAC7FDD73E68867D0207BD48FE8067168C4412FC80CD
BA62F8B43D2EB15434DC3DB6BB2FF28A98266D9C2FCEBEBAD9436414CA527546
F0599F0977CFDFA594116E4FB1CEC55AB3900199D8F17D48B862BA6A61B8A95F
4B8EC9D803D5C3901AD58FE29E46A3635D2AE3390593FC7EF25EE5C312426F04
7B15A4A96B2772BA8BA179B0D1563E7E3398FD45D95546DB11FA32359BBBA7F8
046B52CB4BE2C7A5C3E710C504360FCB236B33EA5BA6233B2973A1A4A649264F
2AA279B06EBE1DB8826B9C0A9C6D69412B72CC0004E6376EE46E7E218A3868A1
F35192B6A29EBC2AAB1E69A13F83FAC01F1A052E23200E94DCDA8807FC3021A3
4A6AE3174D25DA268200657965D92A6B6AA4BB9B272607EE9EBD6CB8017A27E3
11AE62FE08BEE58F2B33AD6C2E713EB02C980C4A2C3048043FF23BB1B8C34F99
BEDAC99F170BEBC15F22EFE2EE812C36C1E2B485259EA0708E8A33D03140C852
0D7891FA55D331755876F649E4B3DB032BA3FADC2A2BB6582A7BED640DB1A8DC
28B930C4AE3B6C211267BEED7075B675167872F7A506F4B9E48F020F848850FB
9B3B0285C7FADB28A3711C06273B79FE63D3239C57FE699CD9F0CABEEAEFA2A9
7D02C82012C6BE99591AC1624923AE6DB8994DD4DB0D452EE6690A8F31715EDF
E87F760D7200C559944587EAF9A8B5216B3A0C0213616B92B7645170A6A6B6C1
A85D0058926158D22909AD9F95C4F6ADC601C09CDCC0262C6E8C4C3F2D123325
2638CB2582F75CA7F1BA6327B0A39B251E1060674DEB741317E6595BF4236A63
81D496925494C15C8124ED618144B05961497C62E1928A76C33E730F739778BA
19A2B1BC9737DDDB8D941425DE145DA043A710A148BEB8870F45B5B14743D409
366D9B06578A1C23B48A90E7EA244DF91C9B3CCA3AE3F31C1198BF3F62049435
BBF51AA3E2F02732CE58012FD29FE236E71AECD6A1C3551588823DDCCD155753
D01C5DEC0F6D9CA219990298D2144925B6EE0EE9D75EA112DA1C60FD628B806D
89E773968257A2709D6973CE3C2DAB27202B6994A1C8118C5663B4DA27F1D3D5
236EA97982C0D9C902C3D5B2112E08942BBE092854DAA7B54F9E18142403BE85
D1E2F89F7714A905E8C629A51895DDE3615B9F1E6134534A315CF6372CDB4749
E71727BB69D19BB4A978101C0CB1DBC3E3A297B5CAB2A1DD50A23E443D8A3057
2DD2A12550B2D61D3F6C3704BDF21BFFB63A8B9F41583F75A2D1339A463ACC2A
109BF9296C681BB34DFC847994B0639D860F9B415519CD81B39A96D7FDE78F3A
467E537E7C6F5D14B09A19D8D6EC398CC60728D7C950215F7843FD99CB484611
6EE1AC4599B3FCC5AF57C1F3E16541D2EC156142172518C77E18750541D0B1B7
5533C5A9A08B17CCEC0D2F893965A5097D8FF96CE8A5C8F9FCE901131D575196
D4918E28014FC7DA1A9AB3C09DD30928904494416E3DF1D518E69BA26352397C
3DC55A0FCD95276517788B57C333F1C38002828A0B8F207A9F33AD1BCC215922
61A181A97E1ADFEF5F67871FAD992447F76CF16F85D0A04140B7B7AE213F7E64
ABAFDAB5F42B0E4036C2DD237344E592F1B15E968EDE4B8D2EC13F789CF1A4AA
EB28A369B4658AD5F249B4203DB0A98E40A9C419BA24B720DE733E2D7B2BFF0F
9F46C771019311BDA7A9189C3FFDC39DA3D16B06271A374CFFD453817EFA6136
9D50682A921BA059720FD6913F9101D522DA03412A6C4C6B34EEA836994B6B66
803074D86EFA1D7CCD206638F69FFC139BB72D650D3C118B8C09C04174BAEF8D
F1BB4A1E1F848C1A51799FCB7EEC17CE40D0B29B213B17D52165C16C8AEB2DC4
94C24BA795DF6289C9A8490DF490915711FCE65F1E5B57F808582418F93AE4F1
EF661692E37443B69E00A74C853725A3FE184EFED5F7091C9A9B200C8836B997
BA0017D8B89904A846BEB906269EF691B4B66A9FBF2F42F91D77985359956C32
89C70D9C08811A878A19C1C03F5A77E39B0DF425F90DF8FD6B5003D9C6C8787A
337728D2AB679B570FFE82B8EAD68AC55C6313424B8CF1189E3FBBDB13750FA4
B723142BB074DCC9B55E3A49B384006D8DFC2671365FFD357CDAC1DB2BD7A396
2E8472913817F98DFA754C9789DCD73BC1DF740F437DF5F1B361E2AB0062E953
F33CBC743DC0034904248227A65C597DD3DA8B94939B8FF2FD682FC5F4572E7C
ECE7E548847AC429EFD945C74A25AAFF389346BEC4AD125FB66DCA12A967AF0F
1F0321B90C4DCB60A818EE4D33034070935EC99C1522F2095323D07B0B85927A
34AEB7CDCD670DB229D2780BA6781213329980CFCFB18CF7CBE6C7FA3C27329F
EF5AAB0339569338D455D8D355DBB8548F0D58ED841A9FCF36760C06CDDEF250
58065A72AADEBDDCC09B6D128CDEA0A3271C6D709209D8E53BECCB5A4D2443EB
3A0A7C310D67F8BEC315412BA9A18E9744CAC5F1C047BDA8094B294A79DEDC63
A2B3887CF7CA14D36D98547FECA87B380459A8C4DA9C56A0E7FDF5AB5DE3BB01
2A4BB516B4C94FC971D86F6321DF5D41BDE10B57314C784BEE0174AC025FE5E1
0EC5E39BE6798B1C1B70125D110FA68C1A4E3867A0379D12D5B121847FE1FE98
E609E6BDF94B2C16ECC2212F0FD468AA3A8CF8AA023F208B63AF2A8E0905E0E5
43E16D028E46BDA9BAB2618CAEA3A6093170CB03988D94854212C9219CAAEC92
5F4AAA1D574E59572943B2DAC751345E5AA0E5785F2E4A9B0F7E4498F6D20679
37135CFFBC2EDBF29E39BEEC15CA9DE1721D4E69237407497AA5676C08828D7C
F593CECFD951BF6DD21A487C8F05208127F1FC35DB9CD34EBC684818AB259FF9
A4651BB4E92AF0B9183F250A60A7950B3939DD770971218C76C2F58B69F01F23
41AC27750FA1CF1A994E99B0A6F478EEE00BD6616EA0A4161B9030CF28D8B9C6
3B558FC5C1F456C8F786AC97514ECCE80BE54C77342B00433F613FCF588EECDA
CD25533064A51A4ECDB83B64C9DA2989A6FC5A51E7F50385C4A11076467D5A11
AB8455B92CF0702445F618CFECDC45A8D96D7B83073CE78791C4F9ED774D50DF
F8486F20890332071C3280F571B7450BEEDF4D2F6EF0D04B7EDF16EB8849CDBC
2C26CD5282F8F86986CF6D9DCF7F3A34E6AA3CCB13CCC61FCEE7C774A5D9DAA3
116D2B7E450C8F7B16278DE567FB37E8F70F228B627D21164292A62CDA15C49D
C36F749242714C6D08CCE8BD6589B20A16C2E1CE69B430C9E868EBEEAA1E96E6
0A9444EF5548E7BA21E4A1F7313C939938B4FE9F4CAA4671A6A97BD8C6807C21
360D0C3F7742F47CBC2B9892608C27E76C984E054CE25800DD25631C8F220597
5D0F2E0C471258C4D46476815F98C8B106FD26F9594F6D541AF380AF2F253FE4
E3D1E56E3DABD7DF0DA492C3E0CC302317817FC68F6666B58E75BA8B15CF2D11
984200CC52F225ED01447B8D3EE18FECCE913BE9947D2644E765A61AEF018AC9
4CD4D83EE77D2A9A9407C10A7E0D738B8199078C751683D359FA0FF644F29185
25EBCDD829BD0CAF6565DF07A9DA45B4A7FEEDDF8F9C144CA215086037960BD1
1B3717BA32D5089098DA0E29C66AA40E40E8D79CAF88572FC3C510DF2815C789
659585519CEA1443433997ACDAA9FD3ECF6E99FE9DCE9830EA7A9BDF6A07B352
73CDCE50516A57F191028439EC8E5B81241D75C9CB925A84ABECFC00B4212CDF
4E88876C2DD4E7981FE573C039463C85D6D80D2E3F6E3D9B0F29434DB167E4E5
E7B76996E1D85CB9B62BDE07EE8346E30F68FABD1DCFD97654CB959F9AB2CCB8
752C341604BF43CC70EB988951535316E7C3081360CCA521949B0D392F524884
9A29473B2A5288F96E20E544C816860DBB5E0CAEACC53FB357DC0A801EEA6660
722DF339E7B285AB9169F6D124F4AC2C28110A8C858E4C000AEA16439B6C490A
B09852D9E8E60AB1C94D39B66ED960734F8F55B418ABF44D8C362C4B2529A74C
BF4B9E0AB5A5FFEA7428CBEA871FE16A53FABCB45D1F348D5986C1BF862D5F65
8071C0D2B6CFC9199C3E3C5E489773C694246EDA65566C2E118673DCD8B27B7F
A64758D91944E74A32CA1514B3EE8E3FF31DB0E3644BC9E155CC43B0320011EA
28A2E8285D089935564F4BD7CF18486E33C6AD14424873AC449198C9B3C196EF
729BB5BF404B88E88E169AA5732CD54203872E3BB567375F82C2B20D6D893060
B9CB06F8F917B2AB6F72FDCC24EE7F3EF93DB577D2E225B5250B8DC6716DB903
1C70D046059DD207EB35B030B8B165E060B5F5EDA2FAEB418BF5FC0965BF7B27
4782C8D608698A04F654C7962D10FC54D05C9F604BC0BF9C3BFC338C93601F3C
13EFCC8BE299B33BBD923AFC2F0AE54C0459012F2780A64780AA661771105011
2F2098D8D3DCAB2EB1C88A23212FAAA02E4DA5335ECFFCAD74D10C98256868B4
679B4966D8B8F9041C564626D94B23D6B63755279D438C8997049E92A7DF9313
DC12E050920A13610136D6E15340B13DE201E971AF222C24758A9D002CA04DDD
891FFEA40A18EFAB51BA25F77DFA44AC31DEAF4E4A4F014CE358675B96904228
8C855438125BE7B940E0AE7631B5E4B3A24A60F7D0CE0CAD7375E13E761D8D7E
9DEBE27755EBFA5391674BA68E572E13028779C254BF516641EF91893CAB23F6
AB4EE9EF216EBE1E9B0B09749ADB136A35FA63924B43BF6CE43C9140AA5F8FE8
95E4093068661EBA7E1802F2A1A4E4D5FE16E74C8D84E63DE886C1D6FB75406D
9EE7F639C8B27C1CDF04115FA459787E0FE496FADA012BC83E5A3CC04D886FE8
0B70FA4C24ABC8B3E872D1EEADD8D9FDA1D1E91541DDC75E0F42D9B0DB82C6D6
6D5B9049D503AD483B0277BC67A138D099F8809E3AB25B0D75C3BFCBAE81107C
FE9B5E531E080C8FC89CC90403609E20CFB2A9C7AFD28C3BDF89535EB3DC2476
BB624A612CFDBC48D8A436DDAC538DC3CA735E42AB7F446FF14468656C482066
29372A504D9DDBE51A6F6DE5ED6C93E964AD5F33D238660039D6EAD9A62EE061
D2C5490FCFC21CB7024E2D8F4807D027C96D69FDB9BCA980D1A74CB4E7A7CDB7
4ED5E18A4CA2E1F741203C832205E640375A9CAA5245667D057C95F2CA95993A
3F66A9C33829A718741D4BF672675FAE08341A74EBE1639F62C51134B7EF26D1
0EE05685EA4B31E5396C4285F2AD3B9F18F4022B5293001DE70E6840F613E8C5
CD0D060A46E0963399EB3291F47FA0A05D57215EF9299486BB30C1F9979D1EAD
71790CBFB48E5B356409197672300AD513D9E19D42A419FB6AEDFD768F9E302B
EAF96447E35E89749B2C1584805688C232D241585C0A63BD77404BE10EB66D3C
B326F9A7D7E81D067254B49081544127E8BB205F4707A5B3D3629918172DD1D1
29CC7A6E9C331CFCAD7B53870BE67245E0B9352C65BD146C059A13B44455B30A
54817C4CAD7897E72A6D8D31552701A536083DF95E1596CE10A53C3CC1C1630F
FCAD30A25C85EF83649036FBBE34BA9219D082CE150C3FF598A586108E04BAB9
03A27ED406444AF8B04DB5CFFEFA52ED0597A2841500B51C672DDD9181CFAC6D
5546FE7C3445CCFB4ABCB0F054105D73742E37B7836B2B4CF909F629A27AAFD8
76E1D5EB11DEB30BF7A3CC1FC21E72ED84049E4438354CC6B692896971F28513
592B2818D585D84876D3FD2B0A21E719D5677DB0E64C7650DF6FDBCB9958F150
05486CD1B3524B6AE0717B818974CE8171C3CBE2A6D644CA8735A4E96445BA9C
EBB627718F858C136F4C2E3A3743F168DFE505F1E8AA58ECF0D7A456C6764EB9
781F115B15915E5E2A33809D8394DDBC9ED83B70EC4419F3E20418C7AA4D499D
43A8B60D7A0DB9382FE00800F6487CB687830972BFB0D20CE2A288EB98831E98
433F34131776C9B68E5403FD61065D26EFEA3434E39E559B599829376AB867F4
3B2F6320B331A6EA21B519A0114BC5C1902A3A3C1935CE66C4007EDE6965BA42
DC3F3DF5018DA05556BFF71ECC844B2B718598F0825CDE7E3B544EFEC21F1B21
DAB103F2ECD03C45978D34A9A991E8A131F19A7BC912EA7DAC8E354F1CEA9C76
D10F53C521ACB9F1C9CBB82AD5C5134A39347787CA96E2E00A2BD0D30EB70B6B
0E91590635EADD02BC13F010CFFDA44ECC493DD89B49C40BB26726AD671F6625
31465A647BB7C295C99A614B1869F207E6BAFA869CB82B6DDD4DCE3AEED520CD
0E02D3BD8695B3C1D4229FD5F78A6F181407542E7F57DBEB3C0C5724BAEB74A9
F6C44159C42730447FC4E3B64FF75E77E11FE5D50E811096ED908048748CDB5E
47B494565EC8255433C2F1C95528EB4E2FC0138B502BCDC89E406FA36DEC4533
CD0A50EA849F3EFC9E7E0D1F02A00C87824C930916890A7F87C68FDC7940E74F
D1A2F966331B52ACA50DB8C6437C945D1D7CCAB29C9B25B2FE7C11602CB8D4C3
AFAF72544CD891E6D1911824AD8FCCD4AD3E5D9D90235EB33BAED5794A392687
81123FB130D84AB9618A4CA77BC722FA601A6123A48DB47E91B99B8816D5ED80
C3BB5BDA3619E904570286AF4D1745912C929018D4C3503CBED9CE6D260DC546
841B27FE8040387F1D4C2912B3FE793C6BC40C82F3A7EBD95196A73F8308472B
699FE8FFD273A2159F8EE8C9F376DC6613B7373759BE4A62F1370FEDE056CEE2
65838696FCE110CF0F4808BBC4AEA4881748C0A2F1F9A03CCD801C4189767CF9
09DC1249B2200374537635289B228121B4347924DCC582B1430A73587F1FD58F
0E75AE419A2BFBA76BC043DE844726A222F8E7690F4294AFE8B5E7C495F3BCD8
AA5752C845DEDC25045FFDC7FD0F06829558B0B9AF4B2E3BD35634D69BF594B4
985F9921A8F5693E1716D702B7599EC236692775A06F0ED1FA7A4A3BAB2D9FE5
A643739F20CA3AF2491CCFE7D42ADC53F67BB328481BB922FCD1AD8EADCFEE7E
92637D00097377258E81CBA14C8803F18A2569F67BF88C6CAA306AF4B343BB10
D172D1CC1BB1EE4DD1AA03DFC8ACC8BFD0FCCA75F4FC8D5ECAF3C7C84F3D397E
25A739C61C084465A5E6E28BEB76CBB943C4B9D41C4A6A03DF00E2D87F00952D
0388BE20AD70C839176E9F7B3ACC64DBAEF3FDCD3A80C0AB97C2E09983296914
7FAA363C8C06EC0F4D58005511B08697F317A651FDD348DC958934E5B3A8A74E
E58C36E01FAA8AFECB7489DBD42DC2A12028ECAFDB6CEAFCD1246F62D01211DE
4271273CF39110B40FEEF6B961452F14E4C814E404F652EBB6A8AE4DF924A933
08654F1AEE0B9A433E527348574CCF9343ADDA08156FB1E6117FB21C2B080BC3
27702B132335FF288ADF62578F30CDCCCF826946A990837CBE55E8818A643F3F
3F88BB227E90541B124AA933B10F327FA3BE68C541EE8DA5E0A6923FF60DEDA1
F27F0216F4035428C0EF58020562A57F0E4F5DB21369D5C9BADA8760AD44E314
16EE4EA8C182C1D459885977961C53706C4E12C6F43EB57222842B63433141C0
25612167D000AE87A0F2AB99689F12B25A7E3E92666F3B416DA3865EE6C1D1F3
12CD89FC6818FDFCA643042EC3905CC6276EA61AA9465BBB3A56AAC8D14E62B8
3EF68EB69D96CBD0A038B6BA98B6078C9FCA1556AEB8E16DC9E022039A8D4908
5ACB83B160C466909F562BD4C26A232C6D1BB7A2FFB0FFC63B7D9F12B2F4A61E
66537C09C2BC63E56DDA47189AB457D9568950DC3E2369571FD935045039868F
02138047E9722F77F39C29EA6F8251D455AF826C7E91E4D6922ACD09F2EE5497
E8C0A748426DB97E2E44D27D37602FEB4122EC78AA68D237A7CF0FDCC98E5FAD
8E75DFF208727DC428911CB820B9211D2A3C6E0D5FEB936185CED1820BC8C84A
FE01CB0D62649724427891C47EB3AAC7B89EEEB9E2F9CFC6BCDFD9A438C10E64
7BAD82068FB9A44C98405CCF54DE838BFF264A3C97418867E74FB71F2025DB83
B2808CBCF67068F475601ADF0E39312188F9BBFC753A9491E1B70FADDC7800CF
62CE6B2196A64D1206AB59C5FD3D761B784845155F0FDC748097FCF8347448BE
6E53709C51019EB4FED063631F8C2BFA8755702DF94F34D4071E65B199141933
5CF5D13F0C178882FFEE4C84A9A10F63CFF96C4B2E4338930B94E913D52174ED
5C933E8C8525F88E6CE4826618615F1CE1E5B727A71B84639777F936CC6B9222
D3D13C1BE38C976D6F2508D429C62585777EB9E6E9DFCA889F03CA3BEC2EF3F8
3AAAA3F4F68A8E892C3D0529A466C6A313CF38F9ABD46CD3CBEC0C78624CF7BC
577F1363169B5AB54FF26A830558CD47D3C668D629FD1923CC317961CEF6A78F
CD560B3DF5EE5FFD826E4297FB433EF36C4D4C727889BB2EFC1FD3A889B72419
3FCE3DBEF87F560576945F01D9477A7DAC80AF7C8244917DA635EEFA010F63B0
FE6D5ACE6BB9D75F9EFF928D2EBA427A287953A4F789C5E429F423F250EB9E8A
EB5BA66E6FBB5338F24FE65E04E74E8428BBBB487D799F17A28722DDF48A5182
F82247E473C1D5495826470F3A1F450D1AC2C81C876EDB8685E37C799EC63B8F
D94FF5D9A72D8DC565D4EC246A4BDA87A39914AD3DE63CB597CAEE7712A920D1
A1F542DE75C87639FCFDD2D0C3D928471C2065C639FCE1C3E0180D3E1F7947C4
9168E23A66FDA1F9EDE6A6FCC1F86BB0F69CC2D4E00573CE94A0263AFEE43CF0
4F81A4AB3187E61ECF0F89A85BC37B8C10FF3F7C0A84FB8D0F4A7F7AC96DFB2A
0D2146951138D6FA6A92D2DCB49F83986692A576773A98E09E6A816DD71D80C3
D80ABCB0063534E123AA63B2DADEEA8C4193BF94834F9F1A8646DEB04F2CC6F1
5860AFD1DAC1D9EDEBA1A64811CFF78285B9424EE8F3AF9BD5538BD0836F18ED
8D1D7D6AD861FA67276392F6A7BD9C95AAE9978697515116DD49E5B13A29ADCB
B5254998690EE8470AB08192FBC95319B7289A444B3570BBF1A6ECBDC2D18FC8
F3FABED83D9A93810943D04AC52679ED7C3B66FBE5CEC1281F9674E43F44E990
9CD4A49E4600DBC7FE9A727D18EA999ED58FA367591CF5565A0DCA782650D54B
8ECC37EAF5F56DBC7478863DBAACFDE460906281D5BA5ACCD188EDB295DC2160
BE55223C56908D00199B1D2D941076B1C64D9EA032563256509346128EBAAF7D
11ABA3DC2932E9D0E4B88B22EBE619598C6FB61C68169211790027B87A0F000D
00DE5EB05DA5C62E83934C9095647DB2619576A07BD99ACB304C0755B802DD31
E8954584CC933FC342E5C25AC1312A8282CE634513CBB2183C63345148CA6727
11E75B7E6290AB1C4B10165DE8C3E9109949A8FC60CB1ED707470E40B0624E52
F21809704749F6D81E3B829D1133AD73C5F8987CDF2672DF6276A805DFFB0936
772A5D5A8EF4CA0741BBE9B037B6EA815C3D70DAC34AC084B1A0D583189F38A0
A6C8F8F7A09788999967CF3BC505F44C6501A00C49620DA84A7D1D2EE42BC561
4F0744B3D92FB8CDE3633FD159C855C4CC46FA71B56A2DA46A21D23F8A5A9054
0E5FD5922F512C0A83999C07CEB7A37F726E08E7E27DEE035EF7522B4AA4BE52
2FE66353CCF07213C38C2EA7E6A19A68B64EAF236A3468C0F9453189A517F56D
F6E9B62353C3A97B9BC866CFBD491B08704C6E63A287E57B85D56DA207C999CA
EC4C445BB1B0B552EDCECBF51CA7424D972E95B21C824DD0AC0B0B566039A87B
8BF19AA192BB7183E58236D41358AA0F591A6148030DC185AACAB31C33B2E5D1
00589A145E0A93391DA9F6D6F679FDDA7832A7C92524E843E15D2353EEE2BE85
9E6DF11AD2DBE14FE9EE3D83B7A977BB187362FBBE66243E8481A32BEE700616
3F27C153000E975E7513D0156F88B7B7463B16492EC628DBE6D3D608A7BE0B7E
E204C4AAC09F9E64756B4B5F2119B20D5BCFAB27289A93B3119AE28AEAEF8F7D
549E21A4313141CC867DD5980ED1DEB645CDF8C15CC8E2D85D38C5429ECDE1FD
BFC2A74E4F5BAFB685A7B72000C7B2DAFF6236CD773386E362EC7B81EB5366E0
D71E54543FE04BA6F49575728D15009510D6AA642B13AF7C2E28DF5904959122
E200ADEB44D459674CF269BFD4C2DA659C00B09364F5192ED3D2727346F34D01
7CEBA3A38EE6BA2063A650CBC87EB9D1C2DBC417616E550BA31C9E73B10D6CAC
28B34092D88C73154D9AD977164C5F6B43342A87FF745965DC919A12B63D7737
133C7DBC88D99DA041CA7716779D3C541DC2C630A103CD68CC03FAE8A0C82756
B94420EADF6C5BD8BA61BD61B9D7B737B63982514CE4041249E3088A321630BC
1B45F8DE7F3BB2FBA15D02DDF03EDC5726A21888E25B6928C39C8C10D9D6717D
8203BD4ED1BD7AAFCF78B5AD062015A12E05C70B6412C4E4378D0EA7DB19BAE8
A38B7D8978062423EEC29B326C19A0684DBBCF44FEAF613BE20B455552FBC5C4
A8FFAE0D6B157FD406FA22876812040E0B8A7BBF8E4801DA35056CA00B0CEED0
050C709C5F3C9F579E0ABC08466DD6A28B95A611970044F0D6FFF7D3FB1AA54C
887BD6424A4B3C207F0ED2FD18B021DBB4C7C545DB288C6C3B3C1AB46BFCDDA1
90E9E93C8DF81F66B9D98CCC9F5ABFDB71AC67AB7696B479360490EC0B52374F
CADF1F733EC51463B1EFC442741EC3C8E97B274834E7EAF9BD1A62D48FC188E7
3CC53F62822E55A2F629BD83579B2C564DF26EC32C2FCEE435745272FFE8FE3D
126BBC928047119705F8D6639843D08FBCAFE02A4FABFE9E13B8BC0F4C17E64D
6B24BCA2C10687988E9D86E9D1F3307FB0987790B08E110795251CEBE01D7F81
D61317763D0C226C1EACB8558B366A02AD194E29C31962FFED37AA64ABBF57BF
1D2981B95AFC6AD412742960F1B7EA0FDB1228C5AB35253C0BE4656E35FA02FA
F5101E1AE6B7CB286C9DBC82C69174F5A031A854336C4DE2FFC6C0F0BBC5F9CB
A84D3A4719A43C743589C85EFA62396D75D56EFA3BE867E19C6E1760B7B836E2
D9A0B59DC7312A3CD10932FC79F4FEBDE40E5DFBC1A171A7280E8FF4AC0D4C8A
2199EAA1F94A520FFB62433B1B36B3A301DA06FE661A4BD098324EB8D5F3CA63
5184ADA4CCB77AAD095647EB8504232F3FC6ABDFEB2DCCD7C4B742DCBCC90E50
6ABC84AD6B9493DC3BE870077B549D73F18A5ECC308FB3DF35E7FAA669A5D449
D63BF7FEBF2323C750C674154D648B635C1D1B738D0627F2FBF745C26B546E54
9C0178209F3CB0BB32BC5C4E023E202320BF66612FC581F1767D385A6D5A29BB
9819049FB3A63B24AA15B2D2BAA1C3E0ECA0BB60C59D40F48D23207EE51D95C9
0FB5B1356A7D4489D4CA974DAEFC9211CF538E37AF56D684CD20445C5DEBE06C
CD41602AC3F773433689BD4033BCF60A454308AD11DAE5DB81E86A55E07B024D
8B822CEC255B464D55C344008F7B2B756528F96C21EE5D4D358A267105EC2659
340DB70968FAAED1226A949C78D176733CA1427D92076168CB6D42230045E7AA
3F84DC7F506506EDE0A9AE3F77E9261C6E4CABBDE97CEB9F2CD07EB064FA0A0F
0CA046721C136745EEDD97DB9551B092C99FEB3435C58BE5A5268BE5BB760248
3A341A59A1B95EA285C94FA7F967CBA4F5559692B7327B6720BE086562C6CBB4
895D83E552DDC6BEA07E93C31D65640378033A2EFAC8C4615983F7C056FA3661
06E55C70E87C11358DB2D4F72B576E4C71538878B4522D1AEE2980FC421B2977
AF4C08DD86DFA88B4FDFF9A4FFACB66E5DB49804228E74B02B286557E2547707
9E36D67129C17ACDCC65EF25905C86B22289F46E6B4E70C77F8C25D8057F6735
754F041B6B501DB179D88092E01559F0E51A4BA89C1547A41B767259CF565ADA
5011FEA13A7BB0BCAC6ED2CEDE02799D369A01933B7A77D83569453207DAD0D9
287FA97D0495E28CB8E2FE2A4CC0B9DE515E468B10BCB5B93E04FAA62C2147AD
CC67517C05D3140B0608C1E9F9DF9E9129E83B988B18A9BC4C44810607BAF9BE
65BE0416FE1EE4BDA71618D70740BBB31824F930CE9295035BBE5130AB3091BB
069BD5B5D9350DA919E3407AE34366CF3F566E604571D161E1A2A60512975B14
B7F373864DF886BE2C21FF7BB347D45455A0628C7EEEE0D3E208B70A82F3812C
B70902CCC8A0CED4EF40A73C56411AFA10C69AD5034FC9856112429267999EA3
548B4884A53E21DA2320F008BD50F3A7176453B4B7F685777C0D04B4E0B767D2
CD53DEE547D7DA10D5759EAEAC2B87D11B33CD5242B5037208B1CBC9EBF18103
447074EC138E26A015866856D9CE093F65D58AE970F81C66A258C0A3E5CECD30
0F4D8879CA9236099B5E5671CBCDE192AE83408ACE03D1AEF49DA4CD40080D5E
81C0395E893486EEFC49D5A4664A9F621C590DC9F91672443318BAF3BC1FDE13
5C9BD70579D4C678172C2C6262CFA5FE5D8B6F731414798804B18282AC8702B3
AAA9C3299C132709284DEF8EE0F13E9CF1D70516391662003AFC9EC243CB7610
F78B17C4CEA5EBC76C94D6DB8098AFEEDB9891A14ED4BA0D3F112C54B15F6B8F
90660E7CFEFBBFEF27CDE79381BC32E9C8DC4B3B1236DA3DFD04797A8DD688A1
294301AEB2F6F8510242AF91BEDB6D70B1A52B91FB38163D888E7CBAE6925815
63B7D42BA2E6E677B95C8A939161B76B4685B48D97F2A30513BC272A2167ED02
D8D110CF63E51AC2C563B89563D0254194DE000681912B168CAC9EF923002CEF
A1CB9EDE40AB003C822420A9A4C27B2E90BC4E314A0EDBBCCEB0F2C34E70591A
1A14D96F6F240FA6E4A9E942F3C6B70266EDA218C6D2606A4B73E4679151B44E
DDC1EF185F6D79C4D91D269C6E4A2F65B5BDFC5D05FE5E81A7EB8419C1A0139E
11E84F9263FCC1B7EAA1C995B7D1A07FF0F73B0283C8843E9A3001BB96E2315C
9285436E5868E756EFA26237F1F338818258FFE4E7810D69F2428045CD609E23
CE37791362950FB430D0C9B9D63AB7EEDDA82BEDB23912C45C282783F6739638
DCB7C5026CEF9CE1362B6A5CC7045CB0149D885B1958F6CC7FA7155D549F57AE
86DBC9AC5E1C368CFD3ADE42AD0D81599002E066EDFD837C54B7985532A77E7A
BE60B7921ED8BECC6417A81EF0A04613947E06077A4096B014D329A8BA489273
4CA9E01C68BA3E214D7651402D58A0E8D16CAD30ED18B6F832E45704E5A2A51F
C399E81A38DFDCF81DB674AF26BD3389F8ACCDF1DCE3D915F0F973C544B69127
4F7B85695F5F2079000CC6A6A6BA86F15D82F7C7C6CAC5831D08DC20BA9F3DDB
936595259DA1113EE1E28EC8FB46BBC06BFFE286C366E1F387AE1ADB3B8DD700
0E7DD9A2A4421D9EE36B4F0A77AABE0D00E89590942E143A26C67464E6D2CE3F
0D7E23C59D2CE7B911716905C1624923AE6DB8994DD4DB0D452EE6690A8CAF3E
885CB567895A10EDB5A60F2B635A8F0188A64E4D2C100BB685C2140498296402
770DC7262C71EEBF9EEBF9FBA55091EC4E2B95858E61EDD3D283D44C3BAFE9DD
7BE79FC04D479C6F4123EA812EBBBAC6B6F48D530BB431A9230A1B797ACE3837
6DB0321D7D2B33C37AE910E3FF23D841F078106D54A33F97FFD30E36E69B3F43
3357326CE6F02589CE8192748B28520B4499C079D5A6DCF5A0D67CC2A3C34064
F90B5E8A643C8CA2B2F12BBDECD470528A848CE3BC9F4B77EBF56B7A4ECA2869
53C83433D79D02434ACE821D263606A374B64A01E25C9C7B71D1A215AA84D69C
E8C6203A71CB424C72AF75C1818F6A1B51737225B84138B959B5DD39FAF86A1D
BA1C615E69E2A2F8ED79EEDD6FD3B6613D855D5E17D6020D27DC30DCE4FFD6E3
D0DC8157A389BBB3C8C2D91E42A8F3E97D78531D4E0D4119E6587FBB3C5D95FA
AD3BE84747B1A202B3F4DCE3BC7B2624834E5A74AB51DC3721D9E516C844CD97
155C39B17DBE54959D6BD2DEC05240BDAF8F930EC0335FBF11819D1F7D8A8ECE
48B07B394F613A31523F8D6E5378A628913E8F8BB7E6C21DFA3519FD76FA46F2
D2629B939EE1663FD02DDDDD6C6CAED09341D3C6953422FB8C0CD28AEB2134DD
58E23394A399CBD792FE3855487B7E5C56E47E26B27FA7FE8C2AA3454739042A
F6D9F2DDA1D05FAD1CC58265CC8E4F284DDFE2B07E1C5BB164A336B617D6C77D
B75861A19BFF87A54CB5405AAE0C9580CD92C98C07676E7D92BD9916385B4674
355BF24352B0D3CF77765877835A165A7F560738236A4A71081121024E63125F
B0B933E471CD8D54F5D3C3CC78C6A226B071CFE6A4FFBDAEDA836D284F42D34E
BD29630104E4CD7EAEDEE02148363FF9A307656223A0A4399B49DCB00B8CA553
7D3F338E86BB6733E4558B680CAC7EF86BF9ADA173A1FD2E01CB119770644276
5BC230ED45F78C4015B2583BB08D8078FCDE558E8EC89F2455A8381BCF72FBB6
ECBAC5EA42375BB856547B303D5B8393DF7D0957D2973CBD479E42A455CBF2D8
4B47EBDAE5533D1C9B4C4722561AE73A1B809B50D301912BDF9C749DFFD6FB28
8EA3E8E067A80FEA6F7664923CF95A817C86145EEA001378E73237C09CCCDE04
455403CF755A2E2D2CD8BDB55640C28208E575C8EAF956C508366B8C21CBAB2C
4AD74A8353E62D3CEBC4EA20B6D0A4C5046F1F2AB5F8AFB71420D35851361999
D5740142D3CA022D6687313A8C85A3BBC719A3E0B2E10B049BAC6EA5A60F6EE7
DCE21BB2425198FDDF29619D8138E4DF57538677F469C6352DD74B170FC4F951
C97FB77A9B758DC74158D836B3D8D3959AF1F3B2696DFF703F5A39B963C2B77F
2CB42207FA6AB6128CE6D4DEA03F5BC6D5CB7601375BF042CFA29467BD5FA417
88EE957D677B9C325F3CEDED90BDBA9C3B874FEC52B91D4492BB2F3187D75B1E
14A343E7E55391B0EE28DACAFB858842EA310968DCA1E72E04AD94D432392F44
46A58883C15EB02DC7FF87025CD32E049284CFB29CCCC58C2A481BA1E4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMSans12-Regular
%!PS-AdobeFont-1.0: LMSans12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMSans12-Regular known{/LMSans12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMSans12-Regular)readonly def
/FamilyName(LMSans12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMSans12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-411 -308 1407 1154}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123833081E024C973A102D8F460BD9
75ADEB5A09536D6F3C9E0404C494A7531556EFD108E97E770410E56FEFC620A9
58A40E61E443EA13AB10BA1FFC9A8C5A0AE4B3A70B9DDA35CA4FAC9678E39054
2086BDBD692C89708EFFFA5F235831F7A839BBC56C877DB8F713A2D5393994A8
357B4DD54096FEC1724D57F143398862CA36F1C982DF09539CB8C9F0E7CBE7D2
13233BF5F8C425FABD2185591D3722ABE7F23FDC6700C38136752536882D7EF2
65AF1EBCE3D1D0DA11C2DBD4DE61169AD2010446EE632BF9DF6D929733846462
D10A17CDA1BF70BC1B45EF8BDF72CC5BF96901EE0E7FACDC309AD744B803E28D
170937F444782DBF1A9F10FFCA1E96428C339564080B955D616BB9A3E6C6A801
ADF0609EAF23845FC74ED07C0FD09827EA10884C9B6B900F3FC4C2DAA80823C3
52199CAB38314687E16B2402A698EF5C895BF425ED9B2499D4202D0A8D1216A4
E1187557EB50C8249AF9CC836B1B1D9B4A28CCE970EDAEB57538E662AF941CE0
53D88DB0B078DB739F022E2F92A79F2EB23F089A0E3199C3C2FAE7B93A66DB5C
F10E6763DAC5C342EFFB9104ECD0125C6E7D32D5CE68D11C2014A33EADEA70A8
03A83F22CAB36A7EE9AFD9569661D2B65FB216AB8D1FC7A52F1A471D48B5AA41
16746756E0A8DDE70884DB4D1DC78EFCC745E00B803C7496C6FFC65CAE5FF981
CF760C9E8224BB781DB61934E01B2E9197BB6702E6B1A57C454FA5DE2100267F
912D837CCD9A027E9A7B3BEEEBCC3AF72685CA319212891B6D217650738552E1
048F13CD46B6620DC526A8164D1FE7D9D20EBA6F65CF59CA7A611B1DACB00CFE
42BD5BAAF8E4C6076820DB48DEBAE7E5D36969EDD94FF0050D5F880823A40F9B
6601CF5E16B62AC684179510113589997DE43DAAF37144199ADF6D36E3DD98D5
D4B7A8437E6E7F9B01D636671DF223DB8FE2188D1505B5E82FDAF2671D468141
8E63895C1C7A4273E038B4818CCFD045C605A1F6A18D7C643938408AEC4A8149
3384597D7FB81E42CF4FEE224424AFD19C449E201F2911462509CF872FC95647
95D9ED3174665767C0809544F529188A9CA078C85A8400343529469AF0CB54E5
E9D98BD5B3A869BFBDB5B9834EC15C047FDCB4E0CC99AC20DC2E524F29BC7CDA
C928ACF5E79F0F2B8B671BD37E5E4C42D0BB312C627ED639087BF78F14B0E819
D643B659F742EAF18494A5EC108B439C71C6BE51A9C94D9CF8F08C6EAF9957B6
969602161C8FA3B0A8335A4D3AE1C38CDB5F1A9C5E04DC906ADA5253757383F4
01C518141E6BFEE034E2160F15F3A79225FB98E5732484C6FC1C6C18A76B2B18
2FE2035F15CEACC47B532E2A0CD7BD2B14DB5AFA78F7FBBFD71535FEB7049F20
3B46F9E302E610A41FFF797EE8CB26F5F87D22BC1766A6477587111A62DCC9E0
7F228AD470701B0D6560C44DC616FD82663FE8B623E1EA738390CEFBC818F1F7
70E2089F5034B978482F9041012AD781066C37459250D8608BB3841067A0B618
D05A149DFA46587DA67BA7005F57C269221759F4F1124070141F4CD01914C01D
BBD3B2943217A45DC6A679FDB1CE311BB051D5C727C72CEA56CA484AAE98AF60
C2AEF608A1119AA13FB6FA40C5DC4FAAD1CFF3BFEAA81F5D11DD76BADDD8122A
4AA7DBB7A7E8EA484E2B9BC3B4936126CEA5662629D66B89AB79438F28BD4D27
0F57A959F26997929BD1F8879F207C35F3B014133645FB9F8E53A6E2A1CC08CE
D4D15FD538236560F6A9957E713984D516719A53EBB9C43672546AF3EDE43B35
792D80CE15A6BEF1CE581285AF6F51F6FE41350D1EFC9F8D4F2B7C46FFFCF9F7
347956ACA1339E777504775773E5546629028DCA3202677C5D2E1CB0131081D3
174A8651D858AFD0906D608D62E624BC2288BD1556D40E81A3759E13390EBB4B
EC2821B195C3535CCE79DD39B987048E8FBE3468C1DF29B22F885988C306058E
D73421F9D738DBD7BB88A1AB5E0FD14B7DFB4AE346574ACBE4333E0446D2C19C
39260DF18DDAB0BA5A40946D550B7831A2EE249DBE01CD328B332F06CB1DE98A
A4C60583906515E649B33C06F6E50CD5E02F0313BEEF1080B8E63CC1051A62FD
FF275A0A7A86DDD96474F7F7DD350006200F6AF8AD54ADE5803272A4D0BE6281
1BBE508DC0A95A795590E407C2CA961F03D1762ABC486E717CE9A1DB9D4FB000
8BD647A448A8CE29ECAF881590FA30DD99A1DC6D9AF57EA283EE09BBD61FC4AF
42608C6E01E391C58349BEFFC4449F832807549F2403488CF289787EDE461950
5809407145D7148F40B8FA1D9F0DF623BB5131565720F61FF5AC827C2A085375
313DCF0515C0D52B3DE5380630A194F8DD60AD0138F1A3425B08D7C517035EBE
97F26B0B58973EA9B5E0D111D9EACC98414F7457EB664B2262987249C560A78F
87D3790BFA65C25A312852770DAB7D39E1217619DADD5A529A4EEDBC5404E536
6F675032DB812A9694387BC6A7A0892FF937AE52A6F8BC86AA385DBBAA35E3BC
AEF76093FF3A9D7F90080AB112BB219A800CAFD8D18CC2BCFAE364237B712FB3
FB0A027FC92423C555A7BA87D786CF8B609614131EEA9A4B548A3391C523D03D
761C53FBDCA1E23E47BCF2C96A9C58E53950DB59E4322C1644A36FB4C3A6761D
48BE17ECA852F8AF6C24413395128F43F852E00722DB35B1CEC9ED226397F98E
E776FA224A7914720E92784C5E7013ECA0861430BE508E7727EC1FCE4CCE8C13
70012B655C013DDA26E8CEB937D0E26FE1768E05DB3BC25F19D9565043816BD9
4543DAA8E9420BDA882054B68A169C3E54FF99466A90CD1BB0F246FCF1A109CC
D37C2993F63B6A23D4106DBFB3CAD4DA410E69C542CAC64B65F6B829C08A4C30
9A058BEF688E70AC347A16289031F88B223896EB5330E60F7BD257B07D538155
326C5EE8E3238959CFAB64FC2FD52A7DFDC782E94787CAD9B657C53F1978831A
0E202C3F52D34947E0964D0E8E89F6043C0D2BEA4419F3E20418C7AA4D499D43
A8B60D7A0DB9382C5CD9666700C095207E57106950D839087BE28F05EAFC4F0E
2EBBEC84C9D839CF9231D4DE942B7951DF1BA4E7CF22C48D74DD85E83A3C976F
E83802D4CCD92D05BE8C5822318FF299F6967B7B4020B64FF37AE7FF355357C8
0493B3ABABB91118E4A4D90E41ACF5B18B13D928323EB456715826E5A9D4D7B3
DB46DDF9F633A9644CDDAA91F6F0D7111A44A051887C1A67A03BD63DC896F070
CBB6CD14F14655D8EC1DDB74AD2E75440B4FAD19E6C4BB9B10D61824D760F2B8
63F07B9F43FD9871853057080A9B0776D190746533CB272B577AD0616D09DDA2
A16584C8D40E7F673FBA15097B59ECB9ED4D16EFFBCCFF0CF648981BB0F88EE5
BC55D3E78A9CB5BDFFAE7EC801AABE09A13A368B3C042B5D49A971F125238DE1
4F4F908066D56D63BF341B5D69C1D5C2AADF0E960552D2FE27E75213E3B6D4EF
0F44BE480F257C511C3E84DF1D771582834274C86C80A38B22DA623C9FFBDD1F
916DCBBEFBCA48B9D4EBE52F670153C12D459B6D919E9782026DC6A0BD9BA1C3
981F3B8A7AAE82B7642C9DF1E1024D89E142C8B479309AE973BB998BBBFE4C48
6AD89EAB0D0C2BC5998C5F2D3488996A754FB35623406E03B982B7077BF0F044
76C42C0BCE3308F1E5DF5343790F3E7E6A623DF1DC35098DEA7E69B397DE95D8
1DF8AB287F224100046ABD2F6E793C31EBF5C89965E329D5452E029C481F52AE
787815CBF0CC562674B3264DF5FC0C836DEC8D2C8858E58DD524D173A2E79B98
DB9E6748CA1060D30B9407C3D09FFCAD95A1C64FFBC6312A96D3EB1B3F4AD2FB
7E0DD08759F93F78F34ED841FD5E3B7B6609D033D80A82CC481EAD70AADE0E26
76CAC46C9DFBCA02691CF790EB99F57B180C4BC71579F931A671B2D4832F9D1B
482062EA4F43E2110E483CAB7EEF5BD5A0E98313585FF78E1E9626CE3536948A
E2591E20B7C6D8EC60A3B5480C9045F9998AA0FF1D6E80750263A4B86A2F487B
B059DD7A3BD1CE641C8300C59C0506862DAB8EFE4893B9AF7EC84F69B0C95D4F
B12F46E94F04B8A5A08ADE3960EB9D90AC64F9C82C455E0196EC4B4A1BE90C34
36EC6C1A358168848EA6901ADA93F22670C2F1A54555FFFE67565AB5DF23A717
31265CB8F8ACF15B3DDB06C4D7E65503881361091F0E4F77D9957A24D1CAF943
CCF4A65FEA89CBD68DD7C16D0196707A4BB2D9C437BD3011216F3F8AF6256511
CF4FE9B3F0441B464DEC3EBB1E4EFC65AF3CC8F25525205CD1C2242AE68640A8
C3F7D97DC5E94894E1E63A7D80600B9459B786B406DCB59972FFBC57BBBB493F
2C1B5C38F173A69CE6D9FAE31C48BF614B8334D94920C6ED826DADA497239187
184F081BE4FC920915ADD1CAF234CCEE71ACB2EAD88DEF993163433A376BF9DE
637A5B961EFB3A8DCDC8E33F168DC564A9F80B8C7549D22F30A448F1A2A7AB9A
970A0ACDEDD11FBA0EB4B5FCA60EB6C2BC70DE5DADB205271EEE88240C4AC5FD
A25B65AD51D3F9F90AE53EDE7E845D4664D911B0E64203574E588A6F1143DAF2
5E8102DD35DF255B64B2889C780DC45D78DD134257815004017256FE68958664
FD1D7AAD1025FAA42025B278EAB7D7433B35637CF0AB9DFC59F00E558297BCD6
CD33D47A60746598904F052A50EF84D1C46CFE09C77254D069E4ADD4EAC7FAAB
2B6EAE8EDEEDF2704C327E35FB77CEB7C95330607ED4889DFC82FAFCE87DAFD8
58523953FF9BAB40664679E4B884C970AEFA2A2075A1AB8C2DD0269CADE90527
7DAFB8BC1543CC1E8EB8BDB43518BC2CD4AFB8E3D0DC4C2312EC701C2A55C23A
71E12403A44355854F446DAA42FD34136C4017B3FA8DF19A3A4323DD378A6ABB
FD73E0210C1A54B4468938EB51173E04AA8610F6833A7205A402012BE5E3FE8E
6CC190CAF25D9965CF6D47D6564B0C2F3B595C9F8B8A3106AC80DB85CE6635A9
BCB42AE6E5FCA3C6AD820A8ED4978E6E330DA55D302CAE3222572B4DF407490D
64247BCC7730A01122D4453FF2F60214272C9F9FB2DF078043FAFED26C94C59B
CF731338FCE7CC83B5F501E3CFB25425FC56A8D2E421E2A0CCEB2AFA2FDD9383
4089E0C8B29B4B7E332E793EC734534B91EEC5DDE1D8BF68483C3D263C2925DB
B80C3B25D069B2D7B0AE6C673245C688EFD4D2F8C9B323648D1111EBFF818356
31AD6C6FB88D8E7CE37F9B861D786504653919C9D747DD8DEA48E055AE8DE0A5
15C8326461EA7F206C3978E4EFA25AD37DD976AA556A1BD7C66F1DD1922CEC0B
0CFF983D205AA1489DA13932B0D84487B7BBEAD90EE57EEE0289004914281746
483F74BC691BB3406829CBC9375F9935F53073E0D1703CF559DFEB9F2CD9452C
F89BA16E5EC1E16F206873F9867CEE74AD0BC6BFFBE163DE6DD491740660FFF7
22FC12A6445514804C0D1084597F1E5486FD79F660C4DD1906D2C48F6D444048
8AE7C9B57B85DE61CE78FD299609DFCEBAB88C180322714B666A2F5FCBA48BFB
38EFFF232DC53B2A6ECD6224F253AE76ED68FCCB2D803879CDCFDEE58DFA8BC8
85FAE09A9446DFDF923961AE5C0616226809B4820157A9D93B6B6511AB4FF1A4
35EF8D03A4E79914C42AAE92197EEBAB524642B77C830532ECC75487ED4529FE
F6B211BD4356914FF31EF22D4E33B72BD8ED2EA8F70F32F4D03BE9CDFA1C1AFD
08F28E4F0FDB78E0E238293409C469920A5E60BE73C36611705DF0DE767AE387
8DFFC59E4382D77CA2CC650F27FD453BED9574E26A662288C29CE561373FFA66
6F6A4161E6593F9EF18C3CBCC31CC35457264B5C3945D52B74C2634B7D524AE7
93AA90556CD485A15DCFA2866D7CCA73C0F6FEA6D19BAE5353E1B4B548A0EC5A
A55A9FACED611429DADB394ED860B5EFDDDF04A4D7B4A327D228D4B1121B6977
7874A0AAA267E3648BBD1EBF369E7665065ED75AAC6E2C2A969D2207BDDCAAB6
AD9497FE30F301D3BEEAB6F9716275EB86A05E8F774ADA9922B7E3D74EBAF8B0
72345BE26EABB77DD815A2C792DCD79382F68E3993AD0B93A7C03D1020B9FE9F
780D00AA5C1C32CAD1FACCC5955F604F94BA6FB418D6F64BA2DCA3A326B77B81
7ADBF1E5A669A87C3886435AD51ABEDC012374B67D02E99FBA47C206FAB3AE43
3B5CA20612FF313EA573A67B21D64A361CDC50F0E3789B23C32A3B57897CBF7F
8B7139ADF77EC4DA414C2CC5424CBAC9073408193772BEE2854B571F9A985507
EF4ABC1A7FF32BF8007FA4217D853967AF5E3659D9628533AE56E65492805A9D
054A1B2BED399E780DB66D502014608F6D4ECB79D9AFD0DC4CF005D393672A05
3C21DAC14DA16C0654FEE152B8F789FA9EFAF2481B9AC0E13B169DD71090499B
415AD8AAFD99A834CAF0343DAD9AE4036069B8BC4F5A8CE06301E09E10FA7352
30611A6A981DB0C6D6509CBD4D31E445F889CB260A6AAF566752654E81648CE0
1CAE6B824B07416070E71340ED4AEF84057FAC50C227D23DCA95729794727ED5
9795DCEFDB354F6605B75BDCBBF35A0CD2A66E9B63E34B11DFDE03CCC5709F6D
806CFFFDB6FDF9361520D001786AAC50116B04C25A4E5B8E0B0972AC8458B9DF
861E55DD3BD613FE60049BBCC9B483042A2D4B25C77BFE27FB551F3C144EC0BF
A8529787A6F7E7F29C2C9D31F1F7A87A9B1BA4146388D1505662661E4B7DAABA
B61AD241752170C511EE704B4308A3727F64393E392FB6E0337996AC6B9BECF2
190F31C568C908C2A31E6042DBCDBD157E400B0E783C7A56426E4FA821BFD864
4501E923A11EB027C657944A22B273DEAF5C865DEA06501B0FC5300354CBDBFE
ED7D4FA7FBA53D05B1E203A0A2127751EFF486908FAA63F7A90AC16BAD16D41C
CFCB9F98E7642A173C1784108F18DB3ECC698A6A7443C25C291BF7DC9D469510
1863B1CE6E7D800138FDFF7F5B941C7D4C1A6F171215077A8CE5BD7B6F4912D8
BF877A487B252B5C8AF87A85B63D84FFAD9364EA2EADD5C0B0940737ACEB4103
A650734A6FA75DBB849279484E894C01652893337A5580720A71FAFBE2C80951
B24AAACDF129B2BB843A30C4FEFE6D22E975678C98EC8A9069AEC8E237722DBA
50BE9DEFE59FA506F8812F8DA2BE72F0827246FCA44E4D97812DC31D1A75EC14
3818F4C6D89877475BD1510E15B189F2F2C70025E15B198A54215CAD5E2D0400
A2FF1303F328420EBA065CA35AF942E6CFC2646D50949425D15E6FAB19173145
7361624E0EDDB585990593F20A35CD7B1E4DE1C6C63C0ACEAA1B0280C4A7740C
14DA2F7B688D6EA5AC5B5FCF3A211021A15A328C151D5598D5C198E51ABC113A
4110B17E7A2D7E4D7B9F3C55F19F4663A29E559785AAD708B6888C37B603A4E5
4487C65650CD3A536E61387A2AAC32CF65FE36A4DC075DD4821E9C70F42277DD
9EDFE0A913FC4510F990EC8DA8F2D694CECB538A5B82D0B4A6833BACE8D08AE0
1E5697A89A6045A972093BEBB7236B120EF5502844E750853317185E95A7C1A5
EB2CD5BCEEF0235965AEDBF2AAB6D34F4564D288A8C6E70E8C8D9AC87926FEC3
0CE2BA0C6CCCA1241658991043A38E88BDCB7DE042AA827FE25755A808670251
9FD59C62944D027DD0BF7FF0F73B0283C8843E9A3001BE3A476DCFABE8DF63BF
39D4B882FFE5D7E305A01C6207DD9FE07DFCAE1DA5FBE871D8035F777CF21038
4EFC621034B88DDEA6D3A49A83886DB260065E423B426EFCAB132ADCE9B243C7
73862E06BD9EB89855E00FA4F2651EE65F7FF776F1EE9F81371ACB9AF0819EEE
EFF1853D61C53A0EFEAA6C8CE3B066A7C6A2626635CD202D499073369925415B
084F754454ACBF44DCF4961F68DBB0644DB142FC399C46C1426F4FF72A744B8E
ED9375BA41440D27C8AC115252D468CCF773F3D5F482480A69070C62EC32EC68
C6C3AA0F4A29839430F1998DBC99F4E035A4449586122746ED4917BC8493FA53
9B98E93F5B9CC9E1F2E48203BB19E97A02E63F8B30EBEE9FCA1B8B7B45FBB5A3
D203A9F5E0CE1DD74F1C6081D61317763D0C226C1B003F4F90367DD0CFAA01DA
B7A5752742E65D77FEA9864843B27572914CA4189749A74DBB0EA1CFAFCDD853
C30DAE8F7DEFFFFA76B640FC05A08046169186702A68296C34F9D85D052DC85A
50080668D9F648ACE56F31BE567026596AC1DDC11E23572F8A2F5CAB5CA87E7A
66931F8C27992A0CBC0E82213C70F8FAB28C4E998ABFC56EB3670631EC013F69
6F06BBA6E69C74E351C19D61778A0C26187408EA2A22AA7C602BE0B0A43D9D5C
6F50C479A81EDA7EB59197AD64F2E723E14E152D46F20EB109482768DB89F9D8
0B15A0764CB951D16524B621E0A4FA9D650CA87BFDBA7D2F9B0C79E4635A10CF
B39EE250AD0FE7AFA3E00B71FB9FF3F957634501ED2FAB2017C34B786183FAE2
0181ECEBFD26A758579D770399E200761F62011E20C1121A5493374B3357EF1E
884D9AE0CA20D592749784164E51081B57847EB7A96CF69DC3B99D7E681A98A3
34B3EBD99D8110257DD0B832CB4209074A589041EACAE6769B1E1BDD616AAA66
BF5B6754EE7CE90EE8C3B6EC620359A8B6BF01600E4A11FDBAA2689E99E8FA8D
877ED4864A177B0724F860C76601359426E7A7D188067BCDC4B53CF7EA2CCE9B
98E1386A4B21E08EE3469CB1623C5B26B49B21BD4DD5741495206082B647B69C
9C0A95A8E81B3DC5D54F473D67AA4E0B001530F5C1B8AEF5E26425A121D2D3EA
73BAB53FFD35C67AC9C3B91DF9A4D26971897589C1F0806C014F8B9B511C2B34
20A7A62D9F2561458A1ABAAA7CE8CAA45A9CF32034CD2106773B44BF8641403F
E386DFAC2247BE094A885352C70B1CECF3A803D037ACD19E72E02132283C34E1
C1C2771321F8DF446835CEB85520A70B252F935F7CDFB69A1F8A67E100DE4ED2
6442237EE2121C14F116A1114838B333EF11ACB00673B7AB13AFD20D5219A715
6212A7B57DD9965B1658336AEFC575FAEE1B5EC42CDDC027C7AAC514A42B45AD
641BB166A82EFE254436F63898712D63BCE010820E28FAB0056987A9C8301084
AE87065001A8E03F79D063A005EBA683342B306C3691BF4510C724AB326DD8B6
8F8D89E3A21E12FD05D033B7BB01DD0B9469C910B7A7DCBDEF0035946C6E3002
646FCD01738AACB9AD52BCD0D01E058DC7A4E23C0F133241F066096999887AD4
D12DDE20E8116EEC3497D2D84B19F68EBF7125FB02920466AD9D3E2059F46A63
6EEEE6A62B6E1214CE593C8E6A44DA28605224EDE522641BB0C9DC62EE166334
B9919AD6E84C26DFE46FF64199038C006B74DD8D060CE5FE0B0EAAF85F92E225
67DDC967BF400AF513EDEDEBF50C61D9A387F5A1CA41DD1A493A88B3E8BDB15D
32C5B35103B8B35AF058F9C71DCA9348746900FE665375E9C805A494EFAA0254
B8675D83F5D851D392340AED402E9DFC0045FAEC9110B7F695DD49F678A39E12
B39B2397D00BB653C4EACE2D6BB43FEDB7C81DC72B42DD991040DF4E03CF6040
9902439875EF9252089FEAD3867827760F7091469C50CF5A27A0AA6E874293E8
9DC1292F3A57FD6F3A111AF44DABD4D5967C23313AD539AC493305C51E25A0D5
5888AF8405815C5B5497FD0900A840A22B15E6DAC8C7C46F9E1EAE6A5E1AB2F9
C2FBE93E979D8C74B1ACB91AA68A8675D596ED91571E01CFA85CD8E67A35FD16
2D2DB0FDDD53981D2EDA952854D4EA1322A1200FC37425534BEEE2188310DE71
10A48839DED79BE381088BC7191A40BE595589B209749CD85963469855157489
CA429749CFFE6D0ED4F0A5D956F69B4B2ECB5B720B5CEA5B78ED3B2DF39711F4
4C1487A8A062B0E7D307423CF2852AD0574AC458EB60286FC8CBB7109522E57F
5448092DECCB9ECB3FBC2A06A959B629EF7444863CF361D2F7242677C023F1DE
AA05EBDFD7F0B5FFA9569F0CF2DE5F44EE9D9D7E831F55EFE40EB68AD4A74632
4B6128E36279CAB172DF126E78539970EFB2D13C855D11D212CE13ABD5A533BC
5EB6AA75D42A7D2B7664F1F9C153555838831AE0EE13B4D40548A9CC009B8740
4941B1C18BF3AC52BD2CD6D4DF435F118C799C34B50840E0DE2ABB0DAA2463EC
7EEED174E34214371C4541B6645E198D4371916BC846795A5B8A6A1FCEF61CD2
A5097CCF506C626B18E1CC6E4F16641B06A88A03A5801002B9022163FB04B203
745996724D32554E529BFFDCE98C901A79E3E0354517C3D95F7000D5BFB0418A
0E4E57B13B956E26191B12F8E56F06148F472D48F732ACEF5D27A32EB653BD28
B7D7315236F21B61980DDF168A4659E4B9705BFC0D0DFCFDF130BACC35050DD2
BAC23CA90A1B3F48F7BA02A2AD093DD445786844C0DAA6DD5D5492CA1736A52B
8B9D95AE23A9C4B1C3A3A1A1BE80ED8FF0A9C509420006D2229CC525B3909084
19D2D84CE582ED340767DD50BD28E2DD1BE58023600C8526BEDF26F171C5F4C8
0871ACD7CD327CB211E40BAD99E6688DC14EA2D04B43E74E4A4C57F143F1E9A6
D3CFB5134DD46C874040B8B4DFC0DDDDF3EFAB051B04EA7575C35DE27F204267
8B072162124C8155F713FEE442CB7DAB82C4B4329E5CFF8AB0F213E9D5CF55D4
2063D3BC8F1293105D38E74A9B760397A1AC78A54A649A76ABF530420B6517A7
3A255AB977D4F9AED30A343105BB64EAD51158A2BA24C9E0FF6D1D3DE3DEF2F5
2928C8266AD050ED7C5513B0E7960D957E19837FD227B352EE539B47889486E4
F573A87A19E5DA17E070DC8FCED3EB7C009DD79D487A67EA1D9A22A508EEA849
4F7BD45B8B999509162CFBFA860BEDBD7031877FAFDEC945EC19568C086D0E78
01038F92981250C3BDD77F02C296953F4E305EAEE2BEC619DD75BF2679D45629
9A52802A64B2E3573F115B4AF2D9DF46E1E5B36E223885BB7E1E8B28BAA58017
DD0820EFEB02CDE5BF84E5F1E8C8572A5A86DAE6C6BECCB9206CBBABDE8C4E5E
6E6B61FCFD3C2BA11D6E69BD918A9DB9077118A042EB52EB7800276E7502D8CC
B0A68D8348723DAF4A7688F8FA1276B030E8711E2391E8472942E287483E4CF8
7E1719621E73D1924CA501796689D9CE46D200F776ED7996C5EBA0C337251B70
DD7F9B546F4AC7FCA094F32499C0F8AA33D2C7D00283822638DA7EBDF5C56C2B
03F6BAB0D5AC4D24808941E5C6C1219DE884C96BB923B1EC8208BD7DCEAB0FC2
29362B847E6B54D8D996A9C156F99318004EC02D5CD155CA571A287BD8838808
2E54DEA0654438F36357E82DD0F831CB0110519CDB5DF1C3843683898DE0071D
EFE1678546521D2BB80A646A7E8C8F0BEA57F2223762D6D8368847ED1C48CBFA
FE44700EC4BF98029957096037583594684C38B49C8BBA2F807284B877DCC78A
B171815A8DF0CD743A0458269D67C83EA6B9F5351815E66185FEEF6C73AA47A3
580AD2166D5588B87953B6F26F9A59A24C0960E3CD58E8A717B266D35EEA7CE9
A86DF45930BE230E07757F16CA6991ECD1873495FAA5C7CD44201F5886E38026
6EB12FB23E170C19D0071038D6C5794A9849AB7AC220CBBF68A0A6A56D638D48
4F1017AC798B4F6762F4DC6CE43C2CBCA51E231716C5A4549BB21AC8F88E4120
FD2B7E8F25024CD9F8ABCEB54100901BD7EF51D34A01B69F2D97A19DC34E78AE
4FDAB16C93BA62B18176C72B0DE30355264E446406BDC988E8473B9255921B35
B9229B900D8DED34B8A702E96ECDCF28BAE94FE49CA92EFF5B585C4770C89899
376CBE4C3D95D4AFB522477BF854782334244B767EB7651FF0B70681E8AFCB58
6558161A6F2CB0C4BAA5675FC93DE5607B266BFD6DB51948ACB021371432AEAD
F3328894170304038253421DEDEF62B87B5BECED688C38D5AB822DB77434BDC7
9A29F57BA3A58E1A82794BABD4D8814B53865E03C0C0D6DE7B11F34ABF0E3FA1
B3BBBA9B8CA038F113C57B5B2DFA65BE8B59485E40A6FD2DE5B292D97D0335BF
C690BCDC1C208FCF2A3AF2DD6D4E50A9FA8AF67CE3FE823A4E3F9E3045B60628
55A334042E14145F4684AD22D461E740FA8FB3054F520C5AAF132A27B8090116
76A70056DED9C4C8570F425F12AB398D1B9340AC24BC42C1E43A2FB584A1A991
E21517EA9DD8A7757BA31CA0D97D8FA881C188C60EA44D9037CAD68D730C59F8
916DD217E3C33D4819764EFECE680552827DA0314702BD0D2112BB8C77B745B8
314E68E8640F1C9F40AFDFDFE2675996D2093D5595D313AF03731053489CBE03
FADB4F8D2A27BBDA6A4ACB6FAA51913CDB80E10A7A50F10355D47BC8C32E128D
08419BBEEACBABF63BC26BB0F386928D0C8882BB6E5079ECEB290D95CB81DC21
F59D94350F3058DBDBC28B91B1C2488DA5BF0FF3FBB3CDE8FFB3C807215FA15E
294C42865BCF549350CB0F18A3BAE86062EE08D56AD4741F99ED5FA198219640
2619D480125157F10EC2A5B36B8A1F0C6CADA9B905F3246AEC0CFA5F3BAB52C4
8F00B5929F23F5AB024FA740C5E867BF2F70D5B3E0E96C71479FE3A4A5CCD867
E5357A9C218E20DCBEC569D9F80305E6C1C2C634E83B6570EBC5B25A663E8A65
DEA8EC1D37916398FB8CE955E12D8A89ADEB11A41D74D956A9A0270655811051
028B571E39D1A96CCD88021D65D7A97910BAA4B9435FDB5E492EEAF2D045C958
7C0BABA397FBD5656C190AE0A7821337A165454F31F8F103D4556F91E120F41C
A823D68898AFD0107BC09D030C06CAFD54FEE7771655549E925A3849BD0C8B9C
57FA350664D60210F2B54E0034B3E7D0343CA600206FB8D5171BE594561C30EE
79B5732DBBD8AD98F0199B1A881A22F164D54571F7FDCFDC03849CF1918E19B6
EA4D002D251316CE6BD0EE34BEB4C0EF3570BCAA8F5BC021A509F222730CC663
CD99780532C24BC2D66EDD81132E44128EE1BE623EDD5DAEA90228723810DAD7
CE08EB085D29AC7925CE02513B4E676BE59FE1366D7A20F17CDD82F81E1E2491
729B3427CA9578E5B2E05B20D542B7E6459FA2CE8C1C8A16918EC77457B8D8BE
7938866A90C39F3248962614614373B20260660E1D0A45287BA78632487A9E41
6549E8027E972482E4F3061C0B3216E16FD789DC7A21FB68792A9548EBA7E7FE
B13317A441037B9264953B673A3237018897FD0B578F2DC0A589481E50815DCC
AEFB6703EB0AED03452AFCBDA819FB06B3DFFA7DC26197465BC5DA8C0901C093
3ECC7F725839431C54831890233509C6FA6C2124FD165A4CD0689449C6D974A9
7D5AEA4652625C005977FC252EA1A38BE39674341D829D2AB708AC50DAD0ED25
4DF8F741F57619BB5CE3793F3623D4FF89A4A9DA649BCDE96EDE9B2D90AEA945
7D384D1D83E7725EE74229E1379A6DBB8F475B18998AD5ACDA9D35AAE975BB4C
893761E77803817275464DFBE5AA7D885AE680B53D8A3D8F82F699AA9F570CD8
3C74E62BB9A7996A9A918FA6C536D97CA3805B6AF48C7C20E49586FE7802600B
58A83FBC8DB8D654C0B56D514C4F791D4ADCE4E406A534F29DCF33411B194DEE
2EC1B99F36FA1A147BD963F9F9D2796A8A1FBBAF7C9017C7F226D020096C8E43
948E9A9A7276C249E31F1DB40DF9EBE155667B73CDF36D25C8878E0AE2CD2CB6
A8F5D480878EA65EAFB658649157F082AE2BDE83E736F2993D8C048393BD80B7
0466BA35FE4B56D74AD399FEECBA08D54C66435E9182859AAD13D61857519977
DD5BBD317B3402D11CD481B9CC8A9CC948BEF8AC77069D64A294FC4B927E16F3
C2234552749B1FE01EA77F8B138F5317730A33951FBC2E59AEEB7D8C2C8B7EB2
92D0E4ECEB60C79F9DF0F8E92B8910BE7092B6596500AA70F399DC0F72C1F50D
22B1CA77DE83BEBAC1F28D2011FC1FFE6726AE7DE624006CE68A060571CE75AB
A0286FC31EBB7B819AE455CB993EFA4798352E1C66D456E4C5DD727AA41FA5B3
69D5E10CD71AA67CE238A1456BE3627C2D7F29B4A50A79A9C3DFF0D4434FD638
AF9C9E4B9A8A99F13E8E0E1A1C7666BA3370611C314B08D911F1D484563DD0E4
519D1038E26C6D563EEB42B721949828D1A2C150841DF6B432D58D0346C1332C
1D7696574179C24185E3B6ED47BDDC2E609BBD8C37F81D78BE46BBA1A606F7BF
9656A0FE2BFF7603BA3CF4C6B4C95926DF2099D19B442950D7E664EFC9B18C70
02F76150B70E79387F8C338AA7CD178600DBBFEB56F3B9C5A52B60A36EDE79BF
9451CBB1DA3E76F4D1CD45E138CA96F307F59BC1243B45A3FE36DC5BEBCCDAA3
0204CB7959E437397D97A33B2F074217D6A0BF7268900465D114CAFF0FCF6758
5A6BCBE22DA40DBED98D83AA63F7A90AC16BADBD56FEE9AB045CF59CEFC2BB15
7CF238FB48EE04AE7994D32333DB879E6CB61A2B57294B9E838518DBC882CF0E
7CA1B36B02C66505D26611458463E8C58580DA921CC84DCA9C4DE27B68197548
238E6C50DB4598BCDE50B80BD2824DDDA8CF5C7007510CB39595658AB429EEF5
356F7CCD11E4F2FDF3675731D098C68EF3919FE465EB9062FD65FB576024A490
15486CDCAD080F5B1CCDBA678620BBBDE41CF0C04899E17A8779DF343075F34F
63C258AA0F1E42E9C4C5BEDB9FFF8DF58E4FDD4CE2E2EB14C9C997BE5651DE0F
5DDFEC4965D1B5C4C56944521E76439B5DCA7732A29F37A08DBE11A8FEDD636B
EADE3CE20163B38F6CE760A719D1E9B02FFB4BE67A1833D36D09829FA03EE7D5
59D5AA98732F5803130797203C142323DF0F8666D6A0B14F8C33672FFBAE7CB8
8303AA789B6381A818AAD687B5997486B0A2355D57E1181660E7EC9261A296A7
42CF5073AAF79185873180E6B5584FA1EE0C760AC0168ADAE8A1716BCDC1EB3E
867FDC00EC4D156C8595AA55147A388E68FFBFE22938EABCEF94344ACE8D6A0F
557143AEE3EE3CAE1496863E9ADD2BD5FC05D3BD77DA90A733DF8E98FBB11A7E
16D75547F61F66F43106A015B4BECF94937CE559ECC36E66A132347F5F471F11
393C98736262C0F79D55A6A1BE9D309E0A6C1CF559C515EFC5E0AA802E35DA2E
7CAA08B869AB6377B74845B49778158E64EC664CFBB8D1C26669841E4F1AC8F9
A7D09EF8CD084B5F3060EE622984666904BF624D3675E7AC183A540D2F4F23F6
F7EBCF7295F2C229917B9785404865783BE784755194506F35E984A9DCE4EFC7
89DC62ADB82B0A55BD56905DEEBF4BD6F37C2111F4B06818ABDF3337B1391511
6E6563EE5A8F50CD28D96A028BE7C67D1CD148404CE30DE9213FCBAF34AEC76C
7E9268E3BDDC3449B8D34C34ADB130C1366274AAC9214825540B01B34472A56C
5AB4179BA796F2274F8503DDB58EB2B929CE53EB5D706ADE5FA46BD289FB23C6
E6F04912979B3850CAACDA744B25D6FDDD42056E43021301D083753323D1726E
22C04895627F0054CFFDD70B303E2D6010F849FE4E17A69F02E7B4C69CA806A3
000DD5DAFFE353929EE3344130879F2032497580D1B450DC465D3A003CEB00A0
7240B96F47F1E55E05DAFE83411241A1519E550B01053081BEADE92D2E498E88
FC919A8B5F2E4DF2F0E9273EC494E37324F68F2914E2ED36378BD2EF0242021D
85C50EF4F0FA7E8DDAA7E09DE905DCDD4B660B0241841E2F7BF40CAA5DE3A730
48623CBEB5DA817E93232C034664E237E753D13E7297028E5B75E54C66C24559
FEB38ABA8BA8490A4A07A18A0BCFAFF94911B3FDAF51BE396BA0C332F7062CBD
F2E22AA976376DCE77FA94318AC24FD6156EBE5BC93058B9C9039598AB63D805
DDEFAFC5893A57729C1427815484BA6E80A78B0C28C68CAE5A330D8926FE2696
150AE062E40D2CF10D2FA439CD2633CCA613A19BFC2B423322A0AE12786688C1
D5C8740F766D9190D24E62E8591231BE6393730E9182A7E9846B0C9C8DBE9C85
5C049C95D62D8089E4AE7B8D46F33B1E073A873D34BA23D1CAAABD63C49E665E
9E9B22418B330B24A05738F453CD354C554737AD7D5994DF9E857B1CFF1A2046
92D10B03F0FA9C459AF66C82FCB11BEB4FD3EF0BB27F0342CA5D7140923704F9
8B52ECB8830DEE1352019DA8C9A7838F88FA8D857A4EF7605B82852DF995296C
3156B4B5722E1F7FF26748FC5864733816E1508D5C8D60B37A148CE5D2064C9A
99071FBA4C4973E7B8D9D291757F1898CE6808E721F1477A18C5FA931ACAE31C
E6B70C0C19FF70E8B072716DDE16DCA52D49E43890022B9245B023385A6B9E4E
DEC37C7C3968C89EA69B3DFFE6E0FC453B90FEA4A45F76ACDB4D483303C17560
B4222FAF139C90CE7F8D0A42DB8F3988E4A1991FFAE782BABAE8EA35A981C0AC
882F237989F985FD759D74577C6FBE9535A5203A1307077E6AB9A6B340F5BB51
2DC333468FB500D860BEFB092F4B047533D40EB0EB6973E8BA5BB736538520EC
2DEDB5FE3AB19D0EFE83937474321B7E4C63295997DD487BC12E99E30938C5AB
915450BA57E0BEB16DCE1DA35C7647480E71C37957E885E308D4A9414FDF10EB
D25557B85D3EF743323DFF913D8D5F9B31D94A995E77D369B625EFFF98EC49C6
4D3DEB13D303AFE9072318F967F9E979A79EC8D485D93D8209C94E8875065A8D
2F7D8A673AA447E8ECE422402E174C0FEF0F7CCB94004DA5B914E04456DD4742
1233E796CBA94DB00652C28C635379A0716AEA24DEB19596012837CA40EDBAAA
2ACD2B44574480A077FFFF22B32BFC199714C3629512C6A5711DAF0A3F09549F
6D9FF8EE35A93B7E27A9BF39734B53CF410AB3F3A7E425D733F00FED1C052FA2
DD6ED929F2336F1994F814446327D6837CEB894FC54AD1A218DE34716DD5BAC4
84F83C375C410CFB8AC6C99D8665CD7E1CF880F99229A92CBC7901F18B38FBFF
69D3FCB65A973610C405074CE663F6321FDC68CDD7964228AD7A5AA908FB05F6
3FF80863A19CD2F27816A9E869703F94EAC7041BB08566DC1B0E8F3185DEC6C4
F8EF454A0A41DEBAE7BF7A16F17D7275140A5AB5B3E5B2E3A3F114CDBE4AB78C
78A28B33FFD6AC7E578486E73B59ABF40B784187ED4C6A8323B06771F0E674FF
BC77AE08490A2CB947A3C258F61589051951602EDBB23894BC719D68C21A6625
E48518D2E33F823BCD468F5262055B889245BB6661679F7EF91967AF1A69EAAB
3618499582A93468F235A8495ED6FE28B419FD47B10E7D89DCEE471A182A205D
85B6DB655F64D923DFD30708084AC2A4D0FD15EFFAE30AF47621948723B3928B
08747E3252294D52F199F9C7094BF0EAD8152BF74AC25AAD8FF6D402754F0A59
F7B466741F359B651D485E2AA41AE082E4ADC8604D5986CA09E86D08D9470B9A
6F18E79D8A8FFCAE76174518C3C26F3DEF5ED468E6CDB6A4096D0FACC20C8DED
DE1923AAFFB416FB3029ADCFE0D7DF7D506DCD633FF85AB8335BE37225FEDD4A
7A8C477A04A5D130F81567439AF718D3B7B02416DF5DECABA1F01951A6108AC1
864C968DC394CA300DF3C5A3E0FF82A6E38B7EF5CC9B9D0B17C5A2FFBC6CC492
21176A15E67E8556D88A6443513BF22EE8DAC46B440C7190054211930BFD3FD7
FE42F04D18D133EE2768FB6AEFDBE92E6E449BD0E8933C0625142C335D2ABB0A
692F1CE5062648EC8E4FBAEF47BE3700BA5638E8E3F4588E2F1A25D33D2E419C
D72CBDF4EAE3D5BAEDECD6A194E6142FA206A3D8ED0A78E085205665F3880858
39515F0A04B1BCEFB7778B59A5FA8DA61D2CC4A2247218EC017302C9A10B8893
5EB664CFCFF3CC0B052242C1533D2376DF3EE5C4DA9EBA4D72CA4BF8CDF622E9
9CE46FF5A5A0C578162E7EC627FE44DFA7F5C260FC9C1536A6CEDB493976B105
14E8C73A35978D6AC89C5D7D115D20015326BBB45A5A13AD68564EFD275B651B
E40E47DAE192AB59AF4963E1B4AEDDB4C75CCFCD3782A699B8F4E78BC3035452
9BEA5667520340914BBA7C438FE5130439DD96BAC786787D2E4166ACAC092A9C
03E35F117363E6AF8CD15028D54084A307C381C6793D5574AF08AE5A4FC89880
D4A8DB59D791E6BB97C7BEA795B1279647B812D8AB3D92BA5A04E07BF56D5ACE
6BB9D75F9EFF928D2EBA427A287953A4F46027CC0A112E0565D1E1920094A050
9510A0DBD662C605DD8DBF5688AFF3541CA173E13F711FE424013FEB9545A769
C15420318F852377C83331457AA47AC07B6227F0A86A39A9DD54CC812427C841
98AE47E5F9E0807322A746EF25E03AA1D0FAB54AA5821C4CB010AE179F634056
211840299D659144AFEF2C34824615385C77FF85D88D72EB74FC1C83B091EA17
00BD5B069BB7DEEE2BB45A380E27E91EFB8B0C36B3B345AF36290A973BDA7573
5B2FF79EE90459E00A2F7DBF72B2191F8A281E6314A36ABC10E0161CDFBF8BBE
8490F57E53C78E97517EF7FB78C5A36CA0AD4CACBEB2E1DD7F47029E1579A62B
5E34F9F5671B01ED4C112B8E1D0991D0294BB9A13B7E9A88348BF926C658B309
05B56CCEDE37F37167FBCFA2CC9AF2EDC19D40B176A4F5C0278B395CE3A2CB39
AD3BCADC8E130DAFD60AFF762601AC0D694D26A4ECEBF5B2E29A8435644DBDF2
EB65869969F265341938B2C7D6B979342D93BF5D039C24DD75C7A4F038C15E70
07939680912BE1F6DDB3E036DC6EF898745860CC48E55E625906298C09F3519E
885757270E9F21A5B23BC009597BDEA4E71E75BFE731220B8A92BBE5306C4B6F
DD3FFDF715BAD21C522E88ECEC977F9C78F5BB09727EBC06D1830262FBD40793
C78949A8DBB9DDEFD18F912A85FACBD3C584786184DE58DE619CCA431836A466
ED9A84A0E7816068398E090398D30ED7FFF907B9634A3E67B0F7613BD667E77D
C9CB0006F7D6136EAB4EE9BB2612B1FD223DC6C8A48B36B81681FA32B5FAB6FE
A260B384C50C1A2574698D6A2A43888777D20AA5043B8BD242CAA7C7A5AE5240
299623E3941AAEA951525FADEE1CDC8A35E72C9407AEB30F46784FAA3D9E711B
130F6E136712C538944F5C60E652EF743F21C6FB14BE396E177C09467EFAF26F
3773067464CB460F7F1E189F8A8EC00C8BD6EB20AB66BC1FABC48E4ABE10D7B3
92A65808A9585AD95B37C1FB0AFFE4A05112A3BEA2BF88C58A33C57BF883777A
D1B0FFD5C8C14C34C3638DB216EBBED95BB3851BC1CF1B702A0D7427D4CC503E
E46069FEB83710DB33F0AF507137C74FBC44D41BD71F83EA180EFAF286E04ABE
3DAFC8C628EBF668BD3AE4E604E143803C616AA0B493D7D546F95EB7D24C13C0
38917FB064394D2B4AD555ED07E4A3E6E6A2A78B0672FB9E97290AEBD3348B43
69F148C706C928A414FA1FCB4366A8E8C28005291E4D768BAC7378E124713CA1
8F320004AD9F95C4F6ADC601C09CDCC0262C6E8C4C3F2D13FBCAD1571D44ED01
4CB9CC49C5FDF45FEA58F190043C6FAC20DBC872DEDA90B79F113F5A4BE581DB
49C5EB8BEF22C8E6EA08643A72DAA0B686BCD442F64C26CFA494ED16B168927E
4925532684A429F690536B79F694C12D70DC4D538E4FF8BD62AE25DE20A0745D
88EDAB8F6005B42AF332BB54BDBF75316C4B1A39C538312FD649E8C02F14596C
DD2CBCD0A3335CCD77C1B933D2BFD8E419FED8D313C484424E6FCFBA95E31E2B
939B334987D42A5481D024538265EA42327900654DC1760205DEF4B79D4BB6BF
482994A1090247C458B7E0FFCD74774BCD1B04AF6F56684E3F4C8BAFF42460B1
227936AEC6C5740B9C89796797C50C531F1D061B8C2B56049B56147F0A784F0C
5A4E998CAAFE8591B8D9CEB386D4C35DDA926F24CFC1AC719FFB29336B1F5F29
3273580D99C9A4063C184543D6A6020A233F36DDC03EF6E35E8449C7B483E5CE
A95BFC5FF4E1C17F9F386BEA54D8BC4BE22B74FE346D37BB1AFC184C942D882C
B27D114416E1E5EAF04CCA69D6D3DC3B3826339554B23825E56406C5F49457D8
B5690C5BCA6D176A92E0FB4E1C9C5026D5DFE4509C52C13633D53912DF0A7C30
DC0E40C2D8A64DCC37BDB0BBEE1F586C6B5A39A4C45E855F51B88BAB190A41EB
D0CC6D71A236F35CC0C5E969080F50617E7DD6839216EA73FFDFB44B0DA5EFBC
482730207FC43D6BAAE76AE934F93D03235E82B21C1F4C17423BA09A3ABA404F
17DE68A4A91BEA0688DBA45DAF5686EF1EAA705C534D458C34519695EAD030B1
2082A004D681B086A7D20C0546E8EFF72156A37E2FECC8A80E49BB56725A4EAC
934945ADEA6D672E02DD388BA981D1147014078D48BDE02BA58D7C62252099FD
8A37EFDA8AAEC5D295B32020DC5E652B6B33DECF80467B609558AEC21AA2C839
7785B5B9ABA21C47720AF926E0DD5B5C2EA09FB097887301ACEFA388F0954DC2
F990C748D2020B4E1C80A9F9F2DBCDA174D34F10504B85C033529D28D761FD35
CBC0D82D77E870E1281B91FFB4D8ABB7383C69453E479FF3725945F2514811E7
8AB6009101CA929433E1F25000EBA4418046D151964863E8AADF3FB43BF3A9AD
AF9A8D05B0B4299EDC06B9E0C24BBA5E65C769FBE9021D1B31EEB4593E60F5E9
3A0D8525713508B1E892831D8BED145E8A75A79E20718CDBAF55A154C9F387FA
70B172196726F39FE9969B9DAFDB0761B5329462229743A287E305F5E7CCF5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 23867906 17900936 1000 600 600
(/home/fenarius/Travail/Cours/NSITerminale/docs/pdf/C4/mult.dvi)
@start /Fa 137[25 1[25 7[21 2[13 3[23 3[25 18[34 78[{
 enclmec ReEncodeFont }7 41.511 /LMRomanCaps10-Regular
rf /Fb 22[20 111[20 5[17 15 2[22 23 1[11 2[11 3[20 23
20 1[21 18[31 1[24 5[25 4[29 7[22 22 5[22 22 22 22 12
15 3[17 17 40[{ enclmec ReEncodeFont }26 41.511 /LMSans8-Regular
rf /Fc 198[55 1[55 55 55 55 55 55 55 2[30 46[{ enclmec ReEncodeFont }9
99.6264 /LMSans10-Bold rf /Fd 22[52 114[54 60 1[45 40
1[60 59 60 4[28 1[59 1[52 32[84 68[{ enclmec ReEncodeFont }12
119.552 /LMSans12-Regular rf /Fe 188[84 15[66 51[{
 enclmec ReEncodeFont }2 119.552 /LMSans10-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
% dvips-unknown
statusdict /setpageparams known { hsize vsize 0 1 statusdict begin {
setpageparams } stopped end } { true } ifelse { statusdict /setpage known
{ hsize vsize 1 statusdict begin { setpage } stopped pop end } if } if
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -525 -608 a
SDict begin H.S end
 -525 -608
a -525 -608 a
SDict begin H.R end
 -525 -608 a -525 -608 a
SDict begin [/View [/XYZ H.V]/Dest (Navigation1) cvn /DEST pdfmark
end
 -525 -608 a -525
-608 a
SDict begin H.S end
 -525 -608 a -525 -608 a
SDict begin H.R end
 -525 -608 a -525 -608
a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -525 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 1 TeXcolorgray -600 1668 3024 2268 v 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 2424 1668
a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0.2 0.2 0.7
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 1 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 1345 1579 a

 1345 1579 a 1345
1579 a


 pgfo

 save

 0.68 0.68 0.88 setrgbcolor

 0.3985 pgfw

 save

 pgf2

 restore
 0.84 0.84 0.94 TeXcolorrgb
 save

 pgf1

 restore
 0.68 0.68 0.88 TeXcolorrgb
 newpath

 restore

 pgfc



1345 1591 a
SDict begin H.S end
 1345 1591 a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88
TeXcolorrgb 1395 1529 a
SDict begin H.R end
 1395 1529 a 1395 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1395
1591 a 1395 1591 a
SDict begin H.S end
 1395 1591 a 0.68 0.68 0.88 TeXcolorrgb
0.68 0.68 0.88 TeXcolorrgb 1461 1529 a
SDict begin H.R end
 1461 1529 a 1461
1591 a
SDict begin [/H /N/Border [0 0 0]BorderArrayPatch/Color [1 0 0]/Action
<</Subtype/Named/N/GoToPage>>/Subtype /Link H.B /ANN pdfmark end
 1461 1591 a 1461 1591 a
SDict begin H.S end
 1461 1591 a 0.68 0.68 0.88
TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb 1511 1529 a
SDict begin H.R end
 1511
1529 a 1511 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1511 1591 a 1523 1579 a

 1523 1579
a 1523 1579 a


 pgfo

 save

 0.68 0.68 0.88 setrgbcolor

 0.3985 pgfw

 save

 pgf4

 restore
 0.84 0.84 0.94 TeXcolorrgb
 save

 pgf3

 restore
 0.68 0.68 0.88
TeXcolorrgb
 newpath

 restore

 pgfc


 1523 1591 a
SDict begin H.S end
 1523 1591 a 0.68 0.68 0.88 TeXcolorrgb
0.68 0.68 0.88 TeXcolorrgb 1564 1529 a
SDict begin H.R end
 1564 1529 a 1564
1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1564 1591 a 1564 1591 a
SDict begin H.S end
 1564 1591 a 0.68 0.68 0.88
TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb 1606 1529 a
SDict begin H.R end
 1606
1529 a 1606 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1606 1591 a 1606 1591 a
SDict begin H.S end
 1606 1591
a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb
1647 1529 a
SDict begin H.R end
 1647 1529 a 1647 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1647 1591 a 1647
1591 a
SDict begin H.S end
 1647 1591 a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88
TeXcolorrgb 1689 1529 a
SDict begin H.R end
 1689 1529 a 1689 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1689
1591 a 1701 1579 a

 1701 1579 a 1701 1579 a


 pgfo

 save

 0.68 0.68 0.88 setrgbcolor

 0.3985 pgfw

 save

 pgf6

 restore
 0.84 0.84 0.94
TeXcolorrgb
 save

 pgf5

 restore
 0.68 0.68 0.88 TeXcolorrgb
 newpath

 restore

 pgfc


 1701 1591 a
SDict begin H.S end
 1701
1591 a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb
1742 1529 a
SDict begin H.R end
 1742 1529 a 1742 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1742 1591 a 1742
1591 a
SDict begin H.S end
 1742 1591 a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88
TeXcolorrgb 1784 1529 a
SDict begin H.R end
 1784 1529 a 1784 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1784
1591 a 1784 1591 a
SDict begin H.S end
 1784 1591 a 0.68 0.68 0.88 TeXcolorrgb
0.68 0.68 0.88 TeXcolorrgb 1825 1529 a
SDict begin H.R end
 1825 1529 a 1825
1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1825 1591 a 1825 1591 a
SDict begin H.S end
 1825 1591 a 0.68 0.68 0.88
TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb 1867 1529 a
SDict begin H.R end
 1867
1529 a 1867 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1867 1591 a 1878 1579 a

 1878 1579
a 1878 1579 a


 pgfo

 save

 0.68 0.68 0.88 setrgbcolor

 0.3985 pgfw

 save

 pgf8

 restore
 0.84 0.84 0.94 TeXcolorrgb
 save

 pgf7

 restore
 0.68 0.68 0.88
TeXcolorrgb
 newpath

 restore

 pgfc


 1878 1591 a
SDict begin H.S end
 1878 1591 a 0.68 0.68 0.88 TeXcolorrgb
0.68 0.68 0.88 TeXcolorrgb 1920 1529 a
SDict begin H.R end
 1920 1529 a 1920
1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1920 1591 a 1920 1591 a
SDict begin H.S end
 1920 1591 a 0.68 0.68 0.88
TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb 1961 1529 a
SDict begin H.R end
 1961
1529 a 1961 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1961 1591 a 1961 1591 a
SDict begin H.S end
 1961 1591
a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb
2003 1529 a
SDict begin H.R end
 2003 1529 a 2003 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 2003 1591 a 2003
1591 a
SDict begin H.S end
 2003 1591 a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88
TeXcolorrgb 2044 1529 a
SDict begin H.R end
 2044 1529 a 2044 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 2044
1591 a 2056 1579 a

 2056 1579 a 2056 1579 a


 pgfo

 save

 0.68 0.68 0.88 setrgbcolor

 0.3985 pgfw

 save

 pgf11

 restore

 newpath

 restore

 pgfc


 2056 1591
a
SDict begin H.S end
 2056 1591 a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88
TeXcolorrgb 2131 1529 a
SDict begin H.R end
 2131 1529 a 2131 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 2131
1591 a 2131 1591 a
SDict begin H.S end
 2131 1591 a 0.68 0.68 0.88 TeXcolorrgb
0.68 0.68 0.88 TeXcolorrgb 2222 1529 a
SDict begin H.R end
 2222 1529 a 2222
1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 2222 1591 a 2234 1579 a

 2234 1579 a 2234 1579
a


 pgfo

 save

 0.68 0.68 0.88 setrgbcolor

 0.3985 pgfw

 save

 pgf12

 restore

 newpath

 restore

 pgfc


 2234 1591 a
SDict begin H.S end
 2234 1591 a 0.68 0.68 0.88 TeXcolorrgb
0.68 0.68 0.88 TeXcolorrgb 2292 1529 a
SDict begin H.R end
 2292 1529 a 2292
1591 a
SDict begin [/H /N/Border [0 0 0]BorderArrayPatch/Color [1 0 0]/Action
<</Subtype/Named/N/GoBack>>/Subtype /Link H.B /ANN pdfmark end
 2292 1591 a 2292 1591 a
SDict begin H.S end
 2292 1591 a 0.68 0.68 0.88
TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb 2342 1529 a
SDict begin H.R end
 2342
1529 a 2342 1591 a
SDict begin [/H /N/Border [0 0 0]BorderArrayPatch/Color [1 0 0]/Action
<</Subtype/Named/N/Find>>/Subtype /Link H.B /ANN pdfmark end
 2342 1591 a 2342 1591 a
SDict begin H.S end
 2342 1591
a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb
2400 1529 a
SDict begin H.R end
 2400 1529 a 2400 1591 a
SDict begin [/H /N/Border [0 0 0]BorderArrayPatch/Color [1 0 0]/Action
<</Subtype/Named/N/GoForward>>/Subtype /Link H.B /ANN pdfmark end
 2400 1591 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray Black 0
TeXcolorgray -517 -517 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -517 -517 a -517 -517 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -517
-517 a -517 -517 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -517 -517 a -517 -517 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -517 -517
a -517 -517 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -517 -517 a -517 -517 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -517 -517 a -517
-517 a
SDict begin H.S end
 -517 -517 a -517 -517 a
SDict begin 12 H.A end
 -517 -517 a -517 -517
a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -517 -517 a -517 -517 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with Beamer class)/Author (F. Nativel)/Keywords () /DOCINFO
pdfmark end
 -517 -517 a -517 -517 a
SDict begin [ {Catalog} <</PageLabels<</Nums[0<</P(1)>>]>>>> /PUT pdfmark
end
 -517
-517 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray 0.2 0.2 0.7
TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -600 -287 3024 230
v 0.2 0.2 0.7 TeXcolorrgb 1 TeXcolorgray 1 TeXcolorgray
0 0 1 0 TeXcolorcmyk -500 -350 a Fe(C3)p 1 TeXcolorgray
-529 -458 208 5 v -529 -323 5 137 v -325 -323 V -529
-321 208 5 v 68 w Fd(Diviser)37 b(p)s(our)i(r\351gner)p
1 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb 1 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 38 126 a
tx@Dict begin  tx@NodeDict begin {11.8334 3.5 16.93332 8.46666 4.1667
} false /N@C4 16 {InitRnode } /NodeScale {} def NewNode end  end
 38 126 a 0 TeXcolorgray
57 w Fc(4)p 0 TeXcolorgray 38 32 141 5 v 38 153 5 124
v 174 153 V 38 155 141 5 v 288 126 a
tx@Dict begin  tx@NodeDict begin {11.8334 3.5 16.93332 8.46666 4.1667
} false /N@C2 16 {InitRnode } /NodeScale {} def NewNode end  end
 288 126 a 0 TeXcolorgray
57 w Fc(2)p 0 TeXcolorgray 288 32 141 5 v 288 153 5 124
v 424 153 V 288 155 141 5 v 38 472 a
tx@Dict begin  tx@NodeDict begin {11.8334 3.5 16.93332 8.46666 4.1667
} false /N@C3 16 {InitRnode } /NodeScale {} def NewNode end  end
 38 472 a 0 TeXcolorgray
57 w Fc(3)p 0 TeXcolorgray 38 377 141 5 v 38 499 5 124
v 174 499 V 38 501 141 5 v 288 472 a
tx@Dict begin  tx@NodeDict begin {11.8334 3.5 16.93332 8.46666 4.1667
} false /N@C7 16 {InitRnode } /NodeScale {} def NewNode end  end
 288 472 a 0 TeXcolorgray
57 w Fc(7)p 0 TeXcolorgray 288 377 141 5 v 288 499 5
124 v 424 499 V 288 501 141 5 v -517 628 1001 4 v 0 0 1
TeXcolorrgb -155 797 a(2)p 0 TeXcolorgray 0 0 1 TeXcolorrgb
195 w(9)p 0 TeXcolorgray 0 0 1 TeXcolorrgb 195 w(4)p
0 TeXcolorgray 1 0 0 TeXcolorrgb -406 997 a(1)p 0 TeXcolorgray
1 0 0 TeXcolorrgb 196 w(2)p 0 TeXcolorgray 1 0 0 TeXcolorrgb
195 w(6)p 0 TeXcolorgray 1 0 0 TeXcolorrgb 207 w(.)p
0 TeXcolorgray -517 1030 V 0 TeXcolorgray -406 1199 a(1)p
0 TeXcolorgray 0 TeXcolorgray 196 w(5)p 0 TeXcolorgray
0 TeXcolorgray 195 w(5)p 0 TeXcolorgray 0 TeXcolorgray
195 w(4)p 0 TeXcolorgray 511 649 a
tx@Dict begin gsave STV newpath /ArrowA { BeginArrow 1.  1.  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore 0
h a sub moveto   EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.0 SLW 0
0 1  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale  false 0.4 1.4
1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T
1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave  1. .setopacityalpha  fill grestore grestore 0 h a sub moveto
  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave  1. .setopacityalpha  fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict
begin 0.0 0.0 neg 0.0 0.0 0 0 /N@C7 /N@C4 InitNC { NCCoor tx@Dict begin
ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{/ArrowPos
0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul
x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat }
ifelse pop pop lineto pop pop end  } if end  gsave 1.0 SLW 0 0 1  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
 grestore end
 511 649 a 511 649
a
tx@Dict begin gsave STV newpath /ArrowA { BeginArrow 1.  1.  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore 0
h a sub moveto   EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.0 SLW 0
0 1  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale  false 0.4 1.4
1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T
1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave  1. .setopacityalpha  fill grestore grestore 0 h a sub moveto
  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave  1. .setopacityalpha  fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict
begin 0.0 0.0 neg 0.0 0.0 0 0 /N@C7 /N@C2 InitNC { NCCoor tx@Dict begin
ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{/ArrowPos
0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul
x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat }
ifelse pop pop lineto pop pop end  } if end  gsave 1.0 SLW 0 0 1  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
 grestore end
 511 649 a 511 649 a
tx@Dict begin gsave STV newpath /ArrowA { BeginArrow 1.  1.  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore 0
h a sub moveto   EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.0 SLW 1
0 0  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale  false 0.4 1.4
1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T
1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave  1. .setopacityalpha  fill grestore grestore 0 h a sub moveto
  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave  1. .setopacityalpha  fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict
begin 0.0 0.0 neg 0.0 0.0 0 0 /N@C3 /N@C2 InitNC { NCCoor tx@Dict begin
ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{/ArrowPos
0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul
x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat }
ifelse pop pop lineto pop pop end  } if end  gsave 1.0 SLW 1 0 0  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
 grestore end
 511 649 a 511 649 a
tx@Dict begin gsave STV newpath /ArrowA { BeginArrow 1.  1.  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore 0
h a sub moveto   EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.0 SLW 1
0 0  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale  false 0.4 1.4
1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T
1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave  1. .setopacityalpha  fill grestore grestore 0 h a sub moveto
  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave  1. .setopacityalpha  fill grestore grestore 0 h a sub
moveto   EndArrow  } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict
begin 0.0 0.0 neg 0.0 0.0 0 0 /N@C3 /N@C4 InitNC { NCCoor tx@Dict begin
ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{/ArrowPos
0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul
x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat }
ifelse pop pop lineto pop pop end  } if end  gsave 1.0 SLW 1 0 0  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
 grestore end
 511 649 a 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0.09999 0.09999 0.34999
TeXcolorrgb 0.09999 0.09999 0.34999 TeXcolorrgb -600
1751 1008 60 v 0.09999 0.09999 0.34999 TeXcolorrgb 0
TeXcolorgray 1 TeXcolorgray -340 1732 a Fb(F.)16 b Fa(Na)m(tivel)29
b Fb(\(Lyc\351e)14 b(No)o(rd\))p 0 TeXcolorgray 0.09999 0.09999 0.34999
TeXcolorrgb 0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb
0.15 0.15 0.525 TeXcolorrgb 408 1751 V 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 1 TeXcolorgray 912 1732 a
SDict begin H.S end

912 1732 a 1 TeXcolorgray 1 TeXcolorgray 912 1732 a
SDict begin H.R end
 912
1732 a 912 1732 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 912 1732 a 0 TeXcolorgray 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7
TeXcolorrgb 1416 1751 1008 60 v 0.2 0.2 0.7 TeXcolorrgb
0 TeXcolorgray 1 TeXcolorgray 821 w Fb(Ann\351e)g(scolaire)f(2018-2019)
p 1 TeXcolorgray 103 w(1)7 b(/)h(1)p 1 TeXcolorgray 0
TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
