%!PS-Adobe-2.0
%%Creator: dvips(k) 5.999 Copyright 2019 Radical Eye Software
%%Title: /home/fenarius/Travail/Cours/NSITerminale/docs/evaluations/EP blanches/sujet2.dvi
%%CreationDate: Sun Apr 10 06:28:08 2022
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: Dingbats
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o
%+ "/home/fenarius/Travail/Cours/NSITerminale/docs/evaluations/EP blanches/sujet2.ps"
%+ "/home/fenarius/Travail/Cours/NSITerminale/docs/evaluations/EP blanches/sujet2.dvi"
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2022.04.10:1028
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 872 2018-12-21 20:39:31Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup xGridOffset add y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% $Id: pst-text.pro 891 2018-12-29 19:42:20Z herbert $
%
% PostScript header file pst-text.pro
% Version 1.02, 2018-12-28 (hv)
% For distribution, see pstricks.tex.
%
/tx@TextPathDict 45 dict def
tx@TextPathDict begin
%
% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def
%
/movetoproc { continue { @movetoproc } { pop pop } ifelse } def
%
/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def
%
/linetoproc { continue { @linetoproc } { pop pop } ifelse } def
%
/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def
%
/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def
%
% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def
%
/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def
%
/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def
%
%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint
    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
/warp {
    1 index
    1.4 mul
    cos 2 add
    mul
} def
/warpmove{
    2 index {
        newpath
    } if
    warp moveto
    pop false
} def
/warpline { warp lineto } def
/warpcurve {
    6 2 roll warp
    6 2 roll warp
    6 2 roll warp
    curveto
} def
/warpit {
    true
    { warpmove } { warpline } { warpcurve } { closepath } pathforall
    pop
} def
%
/circle {
    exch neg
    % .5 mul
    90 add
    dup cos 2 index mul
    3 1 roll
    sin mul
} bind def

/circmove{
    2 index { newpath } if
    circle moveto
    pop false
} bind def

/circline { circle lineto } bind def

/circcurve {
    6 2 roll circle
    6 2 roll circle
    6 2 roll circle
    curveto
} bind def

/circit { true { circmove } { circline } { circcurve } { closepath } pathforall pop } bind def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.03 2020/01/09
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 }
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% calculate the line coefficents Ax+By+C=0
%% x1 y1 x2 y2 -> A B C
/LineCoefABC {
  0 index 3 index sub % A=y2-y1
  4 index 3 index sub % B=x1-x2
  3 index 5 index mul 6 index 4 index mul sub % C=x2y1-x1y2
  7 3 roll pop pop pop pop
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% calculate the 2-order determinant
%% |a11 a12|
%% |a21 a22|
%% a11 a12, a21 a22 -> X
/DeterminantTwo {
  4 1 roll mul 3 1 roll mul exch sub
} def
%% calculate the 3-order determinant
%% |a11 a12 a13|
%% |a21 a22 a23|
%% |a31 a32 a33|
%%   8   7   6    5   4   3    2   1   0
%% a11 a12 a13, a21 a22 a23, a31 a32 a33 -> X
/DeterminantThree {
  % |a22 a23, a32 a33| * (-1)^(1+1)a11
  8 index abs 1E-5 lt { %a11=0
    0
  } {
    4 index 4 index 3 index 3 index DeterminantTwo
    9 index mul
  } ifelse
  % |a12 a13, a32 a33| * (-1)^(1+2)a21
  6 index abs 1E-5 lt { %a12=0
    0 sub
  } {
    8 index 8 index 4 index 4 index DeterminantTwo
    7 index mul sub
  } ifelse
  % |a12 a13, a22 a23| * (-1)^(1+3)a31
  3 index abs 1E-5 lt { %a13=0
    0 add
  } {
    8 index 8 index 7 index 7 index DeterminantTwo
    4 index mul add
  } ifelse
  10 1 roll pop pop pop pop pop pop pop pop pop
} def
%% calculate the 4-order determinant
%% |a11 a12 a13 a14|
%% |a21 a22 a23 a24|
%% |a31 a32 a33 a34|
%% |a41 a42 a43 a44|
%%  15  14  13  12   11  10   9   8    7   6   5   4    3   2   1   0
%% a11 a12 a13 a14, a21 a22 a23 a24, a31 a32 a33 a34, a41 a42 a43 a44 -> X
/DeterminantFour {
  % |a22 a23 a24, a32 a33 a34, a42 a43 a44| * (-1)^(1+1)a11
  15 index abs 1E-5 lt { %a11=0
    0
  } {
    10 index 10 index 10 index 9 index 9 index 9 index 8 index 8 index 8 index DeterminantThree
    16 index mul
  } ifelse
  % |a12 a13 a14, a32 a33 a34, a42 a43 a44| * (-1)^(1+2)a21
  12 index abs 1E-5 lt { %a21=0
    0 sub
  } {
    15 index 15 index 15 index 10 index 10 index 10 index 9 index 9 index 9 index DeterminantThree
    13 index mul sub
  } ifelse
  % |a12 a13 a14, a22 a23 a24, a42 a43 a44| * (-1)^(1+3)a31
  8 index abs 1E-5 lt { %a31=0
    0 add
  } {
    15 index 15 index 15 index 14 index 14 index 14 index 9 index 9 index 9 index DeterminantThree
    9 index mul add
  } ifelse
  % |a12 a13 a14, a22 a23 a24, a32 a33 a34| * (-1)^(1+4)a41
  4 index abs 1E-5 lt { %a41=0
    0 sub
  } {
    15 index 15 index 15 index 14 index 14 index 14 index 13 index 13 index 13 index DeterminantThree
    5 index mul sub
  } ifelse
  17 1 roll pop pop pop pop pop pop pop pop
  pop pop pop pop pop pop pop pop
} def
%% calculate the 5-order determinant
%% |a11 a12 a13 a14 a15|
%% |a21 a22 a23 a24 a25|
%% |a31 a32 a33 a34 a35|
%% |a41 a42 a43 a44 a45|
%% |a51 a52 a53 a54 a55|
%%  24  23  22  21  20   19  18  17  16  15   14  13  12  11  10    9   8   7   6   5    4   3   2   1   0
%% a11 a12 a13 a14 a15, a21 a22 a23 a24 a25, a31 a32 a33 a34 a35, a41 a42 a43 a44 a45, a51 a52 a53 a54 a55-> X
/DeterminantFive {
  % |a22 a23 a24 a25, a32 a33 a34 a35, a42 a43 a44 a45, a52 a53 a54 a55| * (-1)^(1+1)a11
  24 index abs 1E-5 lt { %a11=0
    0
  } {
    18 index 18 index 18 index 18 index 17 index 17 index 17 index 17 index 16 index 16 index 16 index 16 index 15 index 15 index 15 index 15 index DeterminantFour
    25 index mul
  } ifelse
  % |a12 a13 a14 a15, a32 a33 a34 a35, a42 a43 a44 a45, a52 a53 a54 a55| * (-1)^(1+2)a21
  20 index abs 1E-5 lt { %a21=0
    0 sub
  } {
    24 index 24 index 24 index 24 index 18 index 18 index 18 index 18 index 17 index 17 index 17 index 17 index 16 index 16 index 16 index 16 index DeterminantFour
    21 index mul sub
  } ifelse
  % |a12 a13 a14 a15, a22 a23 a24 a25, a42 a43 a44 a45, a52 a53 a54 a55| * (-1)^(1+3)a31
  15 index abs 1E-5 lt { %a31=0
    0 add
  } {
    24 index 24 index 24 index 24 index 23 index 23 index 23 index 23 index 17 index 17 index 17 index 17 index 16 index 16 index 16 index 16 index DeterminantFour
    16 index mul add
  } ifelse
  % |a12 a13 a14 a15, a22 a23 a24 a25, a32 a33 a34 a35, a52 a53 a54 a55| * (-1)^(1+4)a41
  10 index abs 1E-5 lt { %a41=0
    0 sub
  } {
    24 index 24 index 24 index 24 index 23 index 23 index 23 index 23 index 22 index 22 index 22 index 22 index 16 index 16 index 16 index 16 index DeterminantFour
    11 index mul sub
  } ifelse
  % |a12 a13 a14 a15, a22 a23 a24 a25, a32 a33 a34 a35, a42 a43 a44 a45| * (-1)^(1+5)a51
  5 index abs 1E-5 lt { %a51=0
    0 add
  } {
    24 index 24 index 24 index 24 index 23 index 23 index 23 index 23 index 22 index 22 index 22 index 22 index 21 index 21 index 21 index 21 index DeterminantFour
    6 index mul add
  } ifelse
  26 1 roll pop pop pop pop pop pop pop pop pop pop
  pop pop pop pop pop pop pop pop pop pop
  pop pop pop pop pop
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 1990-2020 The LaTeX3 Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
true setglobal
/pdf.globaldict 4 dict def
false setglobal

/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict~
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def product (Ghostscript)
search {pop pop pop revision 927 gt}{pop false} ifelse{/BorderArrayPatch{}
def}{/BorderArrayPatch{[exch{dup dup type/integertype eq exch type/realtype
eq or{BPToDvips}if}forall]}def} ifelse /HyperBorder {1 PDFToDvips}
def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx pdf@lly pdf@urx
pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly exch def dup
DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx exch
def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: Dingbats
%!PS-AdobeFont-1.0: Dingbats 001.005
%%CreationDate: Tue Oct 19 1999
% Copyright URW Software, Copyright 1997 by URW
% URW Software, Copyright 1997 by URW
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (001.005) readonly def
/Notice (URW Software, Copyright 1997 by URW. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright URW Software, Copyright 1997 by URW) readonly def
/FullName (Dingbats ) readonly def
/FamilyName (Dingbats) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -72 def
/UnderlineThickness 36 def
end readonly def
/FontName /Dingbats def
/PaintType 0 def
/WMode 0 def
/FontBBox {-1 -143 981 819} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 113 /a75 put
readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB737CF9024F3D038DF9A0002D
8FB689C5F5000C3ADDAFE55EDCBC4E54B36A58190743E32FDCA7A24B64F5E7F9
DC901DE44A25E99E322B3D3CBC10C0412B0531B14E81134FD1DEC47BCB7514E4
64E7550B900404A017C92336BC792744F6F38904282AFE8C998D4B9DB7893830
A6A01872E9D6AABF66C4B08716A39BD9E5ACC0641E506B70430524E780517E59
81EAECFCF9798A634318B8D160438435B65CC6910E609F13A4963AEF2B2540DA
DDD64E0E1D15EFDD5D36D4FCD9E4D81E21D52784DD3DBB741AB5FC052F481B1A
A701AB81CF4EB85075726F3FEC0872C02EBF4D62F5DFB8990C1A0CC8161F83A2
D01108B6C4AEC3845BB4F61288F733429B7B558A225D582AC04BEBF127E8DB14
B59F027502AF59E46E0063B792D35B2DA4EE7DC3F2A64DB325318C1CB1A57504
3527B10BDC733305E18032A64A1002439BE13D163AEE778CAAF5A7A8D00CCCCA
673B8FA9A99551594E85F21580733527E4E19743F4C932D443625DB353CA959B
FBB3BC7996F1F3559E8738D7B3FF1FC8AAFD28CE8C9CDF3CC10A8E7DCE003893
8BB497D690310A0380F290601BE482029578B45097DBD56F52352D7F931A1A1C
735A74CA33FC62A04E1D1E1B023877B96EA2AE6E5E42682E9F4BABD109F039E3
CDCC6B0F9404DA157F91B61905B34C39BD0543872FEBA04FADF1DD613E1E9822
560851385E512B3754A099D21B332D2C9547EEE2B94EBC03B2D954DE0D64D28B
5C0305C968BF1EA14529BE16F9E7F147B08D71B9332ABB7B5EF1B8B60A8D19F5
22B497164EA1A20E17E9B45FE94A09D54FA74709C83B0824F96BC972F4FD728A
BEBD57EFF668607F499E1C51E9FB45286F4C13BD0AFA0A508F56824CF0EAA82F
4FE235BBA8D245C937FACAF4DFF3681FBA6D35EEBA001B55704878F22E7A2C86
476C1CCF1FDAD0E29EE5CB818640B6853A362F764E9A5DBE640CA905A9146590
3F8F2CE8881EADDBC6FA9C1505D0EACDA995DA8D00B9EB755B79D90D68B335F9
49FBCE867D0F7DE2076A879038601083B20389216CB01A808CF4069034CD1152
FF9BEFCB0DB36F87FBFFD269DDA23439D738D84DA9C96CC7435484DA8BF6FB1A
34BC1DA8F3FE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600
(/home/fenarius/Travail/Cours/NSITerminale/docs/evaluations/EP blanches/sujet2.dvi)
@start
%DVIPSBitmapFont: Fa ecti1095 10.95 16
/Fa 16 118 df<01E007F00FF80FF80FF80FF80FF80FF807B80030003000300070006000
E000C001C00180038007000E000C001C0038007000E000C0000D1B6CBE1C>39
D<00007E00000001FF80000007C1C380001F80EFC0003F00FFC0007E007FC000FC007F80
01F8003F8003F0003F8003F0003F8007E0003F000FE0003F000FC0003F001FC0007F001F
C0007E003F80007E003F80007E003F8000FE007F8000FC007F0000FC007F0000FC007F00
01FC00FF0001F800FE0001F800FE0001F800FE0003F800FE0003F038FC0003F038FC0003
F038FC0007F038FC0007E078FC000FE0707C000FE0707C001FE0F07E003FE0E03E007FE0
E03E00F3E1E01F01E3E1C00F8781E38003FF00FF0000FC003E00252977A72E>97
D<00001FC00000FFF00003F07C000FC01E001F000E003E000F007C001F00FC007F01F800
7F03F0007F07F0007E07E0007E0FE000381FC000001FC000003F8000003F8000003F8000
007F8000007F0000007F0000007F000000FF000000FE000000FE000000FE000000FE0000
00FE000000FC000000FC000006FC00000E7E00001E7E00003C7E0000783E0000F03F0001
E01F0007C00F800F0007C07E0001FFF000007F8000202977A729>99
D<000000003F800000001FFF800000001FFF000000001FFF00000000007F00000000007F
00000000007E00000000007E0000000000FE0000000000FE0000000000FC0000000000FC
0000000001FC0000000001FC0000000001F80000000001F80000000003F80000000003F8
0000000003F00000000003F00000000007F00000000007F00000000007E00000007E07E0
000001FF8FE0000007C1CFE000001F80EFC000003F00FFC000007E007FC00000FC007FC0
0001F8003F800003F0003F800003F0003F800007E0003F80000FE0003F00000FC0003F00
001FC0007F00001FC0007F00003F80007E00003F80007E00003F8000FE00007F8000FE00
007F0000FC00007F0000FC00007F0001FC0000FF0001FC0000FE0001F80000FE0001F800
00FE0003F80000FE0003F83800FC0003F03800FC0003F03800FC0007F03800FC0007F078
00FC000FE070007C000FE070007C001FE0F0007E003FE0E0003E007FE0E0003E00F3E1E0
001F01E3E1C0000F8781E3800003FF00FF000000FC003E0000294077BE2E>I<00003F00
0001FFE00007C0F0001F0078007E007800FC003C01F8003C03F0003C07F0003C0FE0007C
0FC000781FC000783F8000F83F8001F07F8007E07F001FC07F01FF007FFFF800FFFF8000
FE000000FE000000FE000000FE000000FC000000FC000000FC000000FC000000FC000000
FC000000FC00000CFC00001CFC00003C7C0000787C0000F07E0001E03E0003C01F000F80
0F001E000780FC0003FFE00000FF00001E2976A729>I<0001FC000000FFFC000000FFF8
000000FFF800000003F800000003F800000003F000000003F000000007F000000007F000
000007E000000007E00000000FE00000000FE00000000FC00000000FC00000001FC00000
001FC00000001F800000001F800000003F800000003F800000003F000000003F03F80000
7F0FFE00007F3E0F80007E780FC0007EE007C000FFC007E000FF8007E000FF0007E000FF
0007E001FE0007E001FC0007E001FC0007E001F80007E003F8000FE003F8000FC003F000
0FC003F0000FC007F0001FC007F0001F8007E0001F8007E0001F800FE0003F800FE0003F
000FC0003F000FC0007F001FC0007E001FC000FE071F8000FC071F8000FC073F8001FC0F
3F8001F80E3F0001F80E3F0001F81E7F0001F01C7F0001F01C7E0001F0387E0001F038FE
0001F070FE0000F0E0FC00007FC03800001F0028407ABE2E>104
D<0000700001FC0001FC0001FC0001F80001F80000E00000000000000000000000000000
00000000000000000000000000000000000000000000000000007C0001FF00038F800707
800E07C01E07C01C07C03C0FC0380FC0380FC0781FC0701F80701F80F03F80F03F00003F
00007F00007E0000FE0000FC0000FC0001FC0001F80001F80003F80003F00003F03807F0
3807E0380FE0780FC0700FC0700FC0F00F80E00F80E00F81C00F83C00F838007870003FE
0000F800163D79BB1C>I<0007F003FFF003FFE003FFE0000FE0000FE0000FC0000FC000
1FC0001FC0001F80001F80003F80003F80003F00003F00007F00007F00007E00007E0000
FE0000FE0000FC0000FC0001FC0001FC0001F80001F80003F80003F80003F00003F00007
F00007F00007E00007E0000FE0000FE0000FC0000FC0001FC0001FC0001F80001F80003F
80003F80003F00003F00007F00007F07007E07007E0700FE0F00FE0E00FC0E00FC0E00FC
1E00FC1C00FC1C007C38007C78003C70001FE000078000144079BE17>108
D<01F0003F80007F000007FC01FFE003FFC0000F3E07C1F80F83F0000E1F0F00FC1E01F8
001E1F1C007C3800F8001C1F38007E7000FC003C1FF0007EE000FC00381FF0007FE000FC
00381FE0007FC000FC00783FC0007F8000FC00703FC0007F8000FC00703F80007F0000FC
00703F00007E0000FC00F03F0000FE0001FC00F07F0000FC0001F800007E0000FC0001F8
00007E0000FC0001F800007E0001FC0003F80000FE0001FC0003F00000FC0001F80003F0
0000FC0001F80003F00000FC0003F80007F00001FC0003F80007E00001F80003F00007E0
0001F80003F0000FE00001F80007F0000FC00003F80007F0001FC0E003F00007E0001F80
E003F00007E0001F80E003F0000FE0003F81E007F0000FE0003F01C007E0000FC0003F01
C007E0000FC0003F01C007E0001FC0003E03800FE0001FC0003E03800FC0001F80003E07
000FC0001F80003E07000FC0003F80003E0E001FC0003F80001E1C001F80003F00000FF8
000700000E000003E000432979A74A>I<01F0003F800007FC01FFE0000F3E07C1F8000E
1F0F00FC001E1F1C007C001C1F38007E003C1FF0007E00381FF0007E00381FE0007E0078
3FC0007E00703FC0007E00703F80007E00703F00007E00F03F0000FE00F07F0000FC0000
7E0000FC00007E0000FC00007E0001FC0000FE0001F80000FC0001F80000FC0001F80000
FC0003F80001FC0003F00001F80003F00001F80007F00001F80007E00003F8000FE07003
F0000FC07003F0000FC07003F0001FC0F007F0001F80E007E0001F80E007E0001F81E007
E0001F01C00FE0001F01C00FC0001F03800FC0001F03800FC0001F07001FC0000F0E001F
800007FC0007000001F0002C2979A733>I<00001FC0000000FFF8000003F07C00000FC0
1F00001F801F00003F000F80007E000FC000FC0007C001F80007E003F00007E007F00007
E007E00007E00FE00007F01FC00007F01FC00007F03F800007F03F800007F03F80000FE0
7F80000FE07F00000FE07F00000FE07F00001FE0FF00001FC0FE00001FC0FE00001FC0FE
00003F80FE00003F80FE00007F00FE00007F00FC00007E007C0000FC007E0001FC007E00
01F8007E0003F0003E0007E0001F000FC0001F001F80000F803E000007C0FC000001FFF0
0000003F800000242977A72E>I<00007C00C00001FF03C00007C387C0001F01CF80003E
00EF80007C00FF8000FC007F8001F8007F0003F0007F0003F0007F0007E0007F000FE000
7E000FC0007E001FC0007E001FC000FE003F8000FC003F8000FC003F8000FC007F8001FC
007F0001F8007F0001F8007F0001F800FF0003F800FE0003F000FE0003F000FE0003F000
FE0007F000FC0007E000FC0007E000FC0007E000FC000FE000FC000FC0007C001FC0007C
003FC0007C007FC0003E00FF80003E01FF80001F03DF80000F07BF800007FE3F000001F8
3F000000003F000000007F000000007E000000007E000000007E00000000FE00000000FC
00000000FC00000000FC00000001FC00000001F800000001F800000003F800000007F800
0001FFFFE00001FFFFE00001FFFFE000223A77A729>113 D<01F000FE0007FC03FF800F
3E0F03E00E1F1C01E01E1F3807E01C1F7007F03C1FF00FE0381FE00FE0381FC00FE0783F
C00380703F800000703F800000703F000000F03F000000F07F000000007E000000007E00
0000007E00000000FE00000000FC00000000FC00000000FC00000001FC00000001F80000
0001F800000001F800000003F800000003F000000003F000000003F000000007F0000000
07E000000007E000000007E00000000FE00000000FC00000000FC00000000FC00000001F
C00000001F800000000700000000242979A726>I<00007F800001FFE00007C0F8001E00
3C003C001C003C001E0078000E00F0003E00F0007E00F0007E01F0007C01F0007C01F000
1001F8000001FC000001FF800001FFF80000FFFF0000FFFF80007FFFC0001FFFE00007FF
E000007FF000000FF0000003F0000003F0000001F03E0001F07E0000F07F0001F0FE0001
E0FE0001E0FC0001E0F80003C0F00007807000078078000F003C003C001F00F80007FFE0
0000FF00001F297AA725>I<0001C0000003F0000007F0000007F0000007E0000007E000
000FE000000FE000000FC000000FC000001FC000001FC000001F8000001F8000003F8000
003F8000003F0000003F00007FFFFF80FFFFFF80FFFFFF00007E000000FE000000FE0000
00FC000000FC000001FC000001FC000001F8000001F8000003F8000003F8000003F00000
03F0000007F0000007F0000007E0000007E000000FE000000FE000000FC000000FC00000
1FC000001FC01C001F801C001F801C003F803C003F8038003F0078003F0070003F00F000
3F00E0003F01C0001F03C0001F0780000F0F000007FC000001F00000193A78B81E>I<00
7C0000000001FF00003800038F8000FC0007078000FC000E07C000FC001E07C001FC001C
07C001FC003C0FC001F800380FC001F800380FC003F800781FC003F800701F8003F00070
1F8003F000F03F8007F000F03F0007F000003F0007E000007F0007E000007E000FE00000
7E000FE00000FE000FC00000FC000FC00000FC001FC00001FC001FC00001F8001F800001
F8001F800001F8003F800003F8003F838003F0003F038003F0003F038003F0007F038003
F0007F078003F0007E070003F0007E070003F000FE0F0003F000FE0E0001F001FE0E0001
F803BE1C0000F8073E1C00007C1E1E3800003FF80FF0000007E003E000292979A730>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb ectt1095 10.95 12
/Fb 12 120 df<000003FF8000000007FFC000000007FFC000000007FFC000000007FFC0
00000003FFC0000000000FC0000000000FC0000000000FC0000000000FC0000000000FC0
000000000FC0000000000FC0000000000FC0000000000FC0000000000FC0000003FC0FC0
00001FFF0FC000007FFFCFC00000FFFFEFC00001FFFFFFC00003FFFFFFC00007FE07FFC0
000FF801FFC0001FF0007FC0001FC0003FC0003F80003FC0003F80001FC0007F00001FC0
007F00000FC0007E00000FC000FE00000FC000FE00000FC000FC00000FC000FC00000FC0
00FC00000FC000FC00000FC000FC00000FC000FC00000FC000FC00000FC000FC00000FC0
00FE00000FC0007E00001FC0007E00001FC0007F00001FC0003F80003FC0003F80007FC0
001FC0007FC0001FE000FFC0000FF801FFC00007FE07FFFF0007FFFFFFFF8003FFFFEFFF
8001FFFFCFFF80007FFF8FFF80001FFE07FF000007F800000029397DB72F>100
D<0003FE0000000FFF8000003FFFE00000FFFFF00001FFFFF80003FFFFFC0007FE07FE00
0FF800FF000FF0007F001FC0003F803FC0001F803F80001FC03F00000FC07F00000FC07E
00000FC07E00000FE0FE000007E0FC000007E0FFFFFFFFE0FFFFFFFFE0FFFFFFFFE0FFFF
FFFFE0FFFFFFFFE0FFFFFFFFC0FC00000000FE000000007E000000007E000000007F0000
00003F800003C03F800007E01FC00007E01FE0000FE00FF8001FC007FE003FC007FF80FF
8003FFFFFF8001FFFFFF00007FFFFC00003FFFF800000FFFE0000001FF0000232A7BA82F
>I<000001FF00000007FFC000001FFFE000007FFFE00000FFFFF00000FFFFF00001FF0F
F00003FC0FF00003F807E00007F001800007E000000007E000000007E000000007E00000
0007E000000007E000000007E000000007E000007FFFFFFF80FFFFFFFFC0FFFFFFFFC0FF
FFFFFFC0FFFFFFFFC07FFFFFFF800007E000000007E000000007E000000007E000000007
E000000007E000000007E000000007E000000007E000000007E000000007E000000007E0
00000007E000000007E000000007E000000007E000000007E000000007E000000007E000
000007E000000007E000000007E000000007E000000007E000000007E000000007E00000
0007E000003FFFFFFC007FFFFFFE007FFFFFFE007FFFFFFE007FFFFFFE003FFFFFFC0024
397DB82F>I<7FF000000000FFF800000000FFF800000000FFF800000000FFF800000000
7FF80000000001F80000000001F80000000001F80000000001F80000000001F800000000
01F80000000001F80000000001F80000000001F80000000001F80000000001F80FF00000
01F83FFC000001F8FFFE000001FBFFFF000001FFFFFF800001FFFFFF800001FFF03FC000
01FFC01FC00001FF800FE00001FF000FE00001FE0007E00001FC0007E00001FC0007E000
01FC0007E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007E000
01F80007E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007E000
01F80007E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007E000
01F80007E00001F80007E00001F80007E0007FFFE07FFF80FFFFF0FFFFC0FFFFF0FFFFC0
FFFFF0FFFFC0FFFFF0FFFFC07FFFE07FFF802A387EB72F>104 D<0003800000000FE000
00000FE00000001FF00000001FF00000001FF00000000FE00000000FE000000003800000
000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000003FFFE000007FFFF000007FFFF000007FFFF000007FFFF000003FFF
F000000003F000000003F000000003F000000003F000000003F000000003F000000003F0
00000003F000000003F000000003F000000003F000000003F000000003F000000003F000
000003F000000003F000000003F000000003F000000003F000000003F000000003F00000
0003F000000003F000000003F000000003F000000003F000000003F000007FFFFFFF00FF
FFFFFF00FFFFFFFF80FFFFFFFF80FFFFFFFF007FFFFFFF00213979B82F>I<7FFFF00000
7FFFF80000FFFFF80000FFFFF800007FFFF800007FFFF800000001F800000001F8000000
01F800000001F800000001F800000001F800000001F800000001F800000001F800000001
F800000001F800000001F800000001F800000001F800000001F800000001F800000001F8
00000001F800000001F800000001F800000001F800000001F800000001F800000001F800
000001F800000001F800000001F800000001F800000001F800000001F800000001F80000
0001F800000001F800000001F800000001F800000001F800000001F800000001F8000000
01F800000001F800000001F800000001F800000001F800000001F800007FFFFFFFE07FFF
FFFFE0FFFFFFFFF0FFFFFFFFF07FFFFFFFE07FFFFFFFE024387BB72F>108
D<00000FF000007FF03FFC0000FFF8FFFE0000FFFBFFFF0000FFFFFFFF8000FFFFFFFF80
007FFFF03FC00001FFC01FC00001FF800FE00001FF000FE00001FE0007E00001FC0007E0
0001FC0007E00001FC0007E00001F80007E00001F80007E00001F80007E00001F80007E0
0001F80007E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007E0
0001F80007E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007E0
0001F80007E00001F80007E00001F80007E00001F80007E0007FFFE07FFF80FFFFF0FFFF
C0FFFFF0FFFFC0FFFFF0FFFFC0FFFFF0FFFFC07FFFE07FFF802A287EA72F>110
D<0000000FF0007FFF007FFE007FFF81FFFF00FFFF87FFFF00FFFF8FFFFF807FFF9FFFFF
807FFFBFF87F80001FFFC07F80001FFF003F00001FFE001E00001FFC000000001FF80000
00001FF0000000001FF0000000001FE0000000001FC0000000001FC0000000001FC00000
00001FC0000000001F80000000001F80000000001F80000000001F80000000001F800000
00001F80000000001F80000000001F80000000001F80000000001F80000000001F800000
00001F80000000001F80000000001F80000000001F800000007FFFFFF800007FFFFFFC00
00FFFFFFFC0000FFFFFFFC00007FFFFFFC00007FFFFFF8000029287EA72F>114
D<001FFC0E0001FFFF9F0007FFFFFF000FFFFFFF001FFFFFFF003FFFFFFF007FF007FF00
7F8000FF00FE00007F00FE00007F00FC00003F00FC00003F00FC00003F00FE00003F007F
00001E007FC00000003FFC0000001FFFF000000FFFFF800003FFFFE00000FFFFF800001F
FFFE0000007FFF00000001FF800000007F807800001FC0FC00000FC0FC000007E0FC0000
07E0FE000007E0FE000007E0FF000007E0FF80000FE0FFC0001FC0FFE0003FC0FFFC01FF
80FFFFFFFF80FFFFFFFF00FFFFFFFE00F8FFFFF800F83FFFE0007007FF0000232A7AA82F
>I<000F000000001F800000001F800000001F800000001F800000001F800000001F8000
00001F800000001F800000001F800000001F8000007FFFFFFFC0FFFFFFFFE0FFFFFFFFE0
FFFFFFFFE0FFFFFFFFE07FFFFFFFC0001F800000001F800000001F800000001F80000000
1F800000001F800000001F800000001F800000001F800000001F800000001F800000001F
800000001F800000001F800000001F800000001F800000001F800000001F800000001F80
00F0001F8001F8001F8001F8001F8001F8001F8001F8001F8001F8001FC003F8001FC007
F0000FE00FF0000FF81FE00007FFFFC00007FFFFC00003FFFF800001FFFE0000007FF800
00001FE00025337EB12F>I<7FF001FFC000FFF803FFE000FFF803FFE000FFF803FFE000
FFF803FFE0007FF801FFE00001F80007E00001F80007E00001F80007E00001F80007E000
01F80007E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007E000
01F80007E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007E000
01F80007E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007E000
01F8000FE00001F8000FE00001F8001FE00001F8003FE00001FC007FE00000FF01FFFF80
00FFFFFFFFC0007FFFFFFFC0007FFFFFFFC0003FFFE7FFC0000FFF83FF800003FE000000
2A287EA62F>I<7FFF801FFFE07FFFC03FFFE0FFFFC03FFFF0FFFFC03FFFF07FFFC03FFF
E07FFF801FFFE007C000003E0007C000003E0007C000003E0007E000007E0003E000007C
0003E000007C0003E000007C0003E000007C0003E000007C0001F00000F80001F00F80F8
0001F01FC0F80001F03FE0F80001F03FE0F80001F03FE0F80000F87FF0F00000F87DF1F0
0000F87DF1F00000F8FDF1F00000F8FDF9F00000F8F9F9F0000078F8F9E0000079F8F9E0
00007DF8F9E000007DF8F9E000007DF079E000007DF07BE000003FF07FC000003FE07FC0
00003FE03FC000003FE03FC000003FC01FC000001F800F80002C277FA62F>119
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc ecrm1095 10.95 38
/Fc 38 118 df<0000300000700000E00001C0000380000700000F00001E00003C00003C
0000780000F00000F00001E00001E00003C00003C00007C0000780000F80000F80000F00
001F00001F00001E00003E00003E00003E00003C00007C00007C00007C00007C00007C00
007C0000780000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80000F80000F80000F800007800007C00007C00007C00
007C00007C00007C00003C00003E00003E00003E00001E00001F00001F00000F00000F80
000F800007800007C00003C00003C00001E00001E00000F00000F000007800003C00003C
00001E00000F000007000003800001C00000E0000070000030145A77C323>40
D<C00000E000007000003800001C00000E00000F000007800003C00003C00001E00000F0
0000F000007800007800003C00003C00003E00001E00001F00001F00000F00000F80000F
800007800007C00007C00007C00003C00003E00003E00003E00003E00003E00003E00001
E00001F00001F00001F00001F00001F00001F00001F00001F00001F00001F00001F00001
F00001F00001F00001F00001F00001F00001F00001E00003E00003E00003E00003E00003
E00003E00003C00007C00007C00007C0000780000F80000F80000F00001F00001F00001E
00003E00003C00003C0000780000780000F00000F00001E00003C00003C0000780000F00
000E00001C0000380000700000E00000C00000145A7BC323>I<1C007F00FF80FF80FFC0
FFC0FFC07FC01CC000C000C000C000C000C001C00180018003800300070006000E000C00
1C003800700060000A1B788819>44 D<1C007F00FF80FF80FF80FF80FF807F001C000909
788819>46 D<0003FC0000001FFF8000003E07C00000F801F00001F000F80003E0007C00
03C0003C0007C0003E000F80001F000F80001F001F00000F801F00000F803F00000FC03F
00000FC03F00000FC03F00000FC07E000007E07E000007E07E000007E07E000007E07E00
0007E0FE000007F0FE000007F0FE000007F0FE000007F0FE000007F0FE000007F0FE0000
07F0FE000007F0FE000007F0FE000007F0FE000007F0FE000007F0FE000007F0FE000007
F0FE000007F0FE000007F0FE000007F0FE000007F0FE000007F0FE000007F0FE000007F0
7E000007E07E000007E07E000007E07E000007E07F00000FE03F00000FC03F00000FC03F
00000FC03F00000FC01F00000F801F80001F800F80001F000F80001F0007C0003E0007C0
003E0003E0007C0001F000F80000F801F000003E07C000001FFF80000003FC0000243F7C
BC2D>48 D<0000C0000003C0000007C000001FC000007FC00007FFC000FFFFC000FF9FC0
00F81FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC0
00001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC0
00001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC0
00001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC0
00001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC0
00001FC000001FC000001FC000001FC000007FF000FFFFFFF8FFFFFFF8FFFFFFF81D3D78
BC2D>I<0007FC0000003FFF800000FFFFE00001F00FF800078003FC000F0001FE000E00
00FF001C00007F803800003FC03000003FC07000001FE06000001FE06000001FE0FE0000
0FF0FF00000FF0FF80000FF0FF80000FF0FF80000FF0FF80000FF0FF80000FF07F00000F
F01C00000FF00000000FE00000001FE00000001FE00000001FC00000003FC00000003F80
0000007F800000007F00000000FE00000001FC00000001FC00000003F800000007F00000
000FE00000000FC00000001F800000003E000000007C00000000F800000001F000000003
E000000003C000000007800000000F000030001E000030003C000030007800003000F000
006001E000006003C0000060078000006007000000E00FFFFFFFE01FFFFFFFE03FFFFFFF
E07FFFFFFFC0FFFFFFFFC0FFFFFFFFC0FFFFFFFFC0243D7CBC2D>I<0007FC0000003FFF
800000FFFFE00001F807F80007C003FC000F0001FE000E0000FF001C00007F801F80007F
803FC0003FC03FE0003FC03FE0003FC03FE0003FC03FE0003FC03FE0003FC01FC0003FC0
0700003FC00000003F800000007F800000007F800000007F00000000FF00000000FE0000
0001FC00000003F800000003F00000000FC00000003F0000001FFC0000001FFF80000000
0FE000000003F800000001FC00000000FE000000007F000000007F800000003FC0000000
3FC00000003FE00000003FE00000001FE00000001FF00000001FF00C00001FF03F00001F
F07F80001FF0FFC0001FF0FFC0001FF0FFC0001FF0FFC0001FF0FFC0003FE0FF80003FE0
7F00003FC07000003FC07000007F803800007F801C0000FF000F0001FE0007C003FC0003
F80FF00000FFFFE000003FFF80000007FC0000243F7CBC2D>I<0000000E000000000E00
0000001E000000003E000000003E000000007E00000000FE00000000FE00000001FE0000
0003FE00000003FE00000006FE0000000EFE0000000CFE00000018FE00000038FE000000
30FE00000060FE000000E0FE000000C0FE00000180FE00000380FE00000300FE00000600
FE00000E00FE00000C00FE00001800FE00003800FE00003000FE00006000FE0000E000FE
0000C000FE00018000FE00038000FE00030000FE00060000FE000E0000FE000C0000FE00
180000FE00380000FE00300000FE00600000FE00E00000FE00FFFFFFFFFFFFFFFFFFFFFF
FFFFFFFF000000FE00000000FE00000000FE00000000FE00000000FE00000000FE000000
00FE00000000FE00000000FE00000000FE00000000FE00000000FE00000001FF000001FF
FFFF0001FFFFFF0001FFFFFF283E7EBD2D>I<060000030007C0000F0007F800FE0007FF
FFFC0007FFFFFC0007FFFFF00007FFFFE00007FFFFC00007FFFF0000063FF80000060000
000006000000000600000000060000000006000000000600000000060000000006000000
00060000000006000000000600000000060000000006000000000601FE0000060FFF8000
063E03E000067001F80006E000FC0007C0007E000780003F000700003F800600001F8000
00001FC00000001FC00000001FE00000000FE00000000FE00000000FE00000000FF00000
000FF00000000FF00000000FF03E00000FF07F00000FF0FF80000FF0FF80000FF0FF8000
0FF0FF80000FF0FF00000FE0FE00001FE0E000001FE06000001FC07000001FC03000003F
803800003F801C00007F001E0000FE000F0001FC0007C003F80003F00FE00000FFFFC000
003FFF00000007F80000243F7CBC2D>I<300000000038000000003E000000003FFFFFFF
FC3FFFFFFFFC3FFFFFFFFC3FFFFFFFF87FFFFFFFF87FFFFFFFF07FFFFFFFE070000000E0
60000001C0600000038060000003006000000700C000000E00C000000C00C000001C00C0
0000380000000030000000007000000000E000000001C000000001800000000380000000
070000000007000000000E000000000E000000001C000000001C000000003C0000000038
0000000078000000007800000000F800000000F000000001F000000001F000000001F000
000003F000000003F000000003F000000007F000000007E000000007E000000007E00000
000FE00000000FE00000000FE00000000FE00000000FE00000001FE00000001FE0000000
1FE00000001FE00000001FE00000001FE00000001FE00000001FE00000001FE00000001F
E00000000FC00000000780000026407BBD2D>55 D<0003FC0000001FFF8000007FFFE000
00FC03F80001E000FC0003C0003E000780001F000F00000F000E00000F801E000007801C
000007C03C000003C03C000003C03C000003C03E000003C03E000003C03F000003C03F00
0007C03F800007801FE0000F801FF0000F001FFC001E000FFE003C000FFF80780007FFC0
F00003FFF1E00001FFFF800000FFFF0000003FFF0000001FFFC000000FFFE000001FFFF8
000078FFFC0001F07FFE0003C01FFF0007800FFF800F0003FFC01F0001FFC01E00007FE0
3C00003FE07C00000FE078000007F078000003F0F8000003F0F0000001F0F0000001F0F0
000000F0F0000000F0F0000000F0F0000000F0F8000000E078000001E078000001E07C00
0001C03E000003C01E000007801F00000F000FC0001E0007E0007C0001FC03F80000FFFF
E000001FFF80000003FC0000243F7CBC2D>I<0003FC0000001FFF0000003FFFC00000FE
07F00001F801F80003F000FC0007E0007C000FE0007E001FC0003F001F80003F003F8000
1F803F80001F807F80001F807F00001FC07F00001FC0FF00001FC0FF00000FE0FF00000F
E0FF00000FE0FF00000FE0FF00000FE0FF00000FF0FF00000FF0FF00000FF0FF00000FF0
FF00000FF0FF00000FF07F00001FF07F00001FF07F80001FF03F80001FF03F80003FF01F
80003FF00FC0007FF007C0006FF007E000EFF003F001CFF000F8038FF0007C070FF0001F
FE0FE00007F80FE00000000FE00000001FE00000001FE00000001FC00000001FC0000000
1FC00000003F800000003F800F00003F001F80007F003FC0007E003FC0007E003FC000FC
003FC001F8003F8001F8003F0003F0001C0007E0001E001FC0000FC07F000003FFFE0000
01FFF80000003FC00000243F7CBC2D>I<1C007F00FF80FF80FF80FF80FF807F001C0000
000000000000000000000000000000000000000000000000000000000000000000000000
00000000001C007F00FF80FF80FF80FF80FF807F001C00092778A619>I<000000000000
0E0000000000003C000000000000F0000000000007C000000000001F0000000000007800
0000000001E00000000000078000000000001E000000000000F8000000000003E0000000
00000F0000000000003C000000000000F0000000000003C000000000001F000000000000
7C000000000001E00000000000078000000000001E00000000000078000000000003E000
000000000F8000000000003C000000000000F0000000000000F00000000000003C000000
0000000F80000000000003E0000000000000780000000000001E00000000000007800000
00000001E00000000000007C0000000000001F00000000000003C0000000000000F00000
000000003C0000000000000F00000000000003E0000000000000F80000000000001E0000
000000000780000000000001E0000000000000780000000000001F00000000000007C000
0000000000F00000000000003C0000000000000E373279AF46>60
D<FFFFFFFFFFFFFFE0FFFFFFFFFFFFFFE000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
00FFFFFFFFFFFFFFE0FFFFFFFFFFFFFFE03B147BA046>I<E00000000000007800000000
00001E00000000000007C0000000000001F00000000000003C0000000000000F00000000
000003C0000000000000F00000000000003E0000000000000F80000000000001E0000000
000000780000000000001E0000000000000780000000000001F00000000000007C000000
0000000F00000000000003C0000000000000F00000000000003C0000000000000F800000
00000003E0000000000000780000000000001E0000000000001E00000000000078000000
000003E000000000000F8000000000003C000000000000F0000000000003C00000000000
0F0000000000007C000000000001F00000000000078000000000001E0000000000007800
0000000001E000000000000F8000000000003E000000000000F0000000000003C0000000
00000F0000000000003C000000000001F0000000000007C000000000001E000000000000
78000000000000E0000000000000373279AF46>I<FFFFFFFFFFFF80FFFFFFFFFFFF80FF
FFFFFFFFFF8000FFC00003FF80007F8000003F80007F8000001FC0007F80000007C0007F
80000003C0007F80000003C0007F80000001C0007F80000001C0007F80000001C0007F80
000000C0007F80000000C0007F80000000C0007F80000000C0007F8000000060007F8000
000060007F8000300060007F8000300060007F8000300060007F8000300000007F800030
0000007F8000300000007F8000700000007F8000700000007F8000F00000007F8001F000
00007F8007F00000007FFFFFF00000007FFFFFF00000007FFFFFF00000007F8007F00000
007F8001F00000007F8000F00000007F8000700000007F8000700000007F800030000000
7F8000300000007F8000300000007F8000300000007F8000300000007F8000300000007F
8000000000007F8000000000007F8000000000007F8000000000007F8000000000007F80
00000000007F8000000000007F8000000000007F8000000000007F8000000000007F8000
000000007F8000000000007F8000000000007F8000000000007F800000000000FFE00000
0000FFFFFFF0000000FFFFFFF0000000FFFFFFF0000000333E7DBD3B>70
D<3FFFFFFFFFFFFF003FFFFFFFFFFFFF003FFFFFFFFFFFFF003FE000FFC001FF003F0000
7F80003F007E00007F80001F807C00007F80000F807800007F800007807000007F800003
807000007F800003807000007F800003806000007F800001806000007F80000180600000
7F800001806000007F800001806000007F80000180C000007F800000C0C000007F800000
C0C000007F800000C0C000007F800000C0C000007F800000C00000007F80000000000000
7F800000000000007F800000000000007F800000000000007F800000000000007F800000
000000007F800000000000007F800000000000007F800000000000007F80000000000000
7F800000000000007F800000000000007F800000000000007F800000000000007F800000
000000007F800000000000007F800000000000007F800000000000007F80000000000000
7F800000000000007F800000000000007F800000000000007F800000000000007F800000
000000007F800000000000007F800000000000007F800000000000007F80000000000000
7F800000000000007F800000000000007F800000000000007F800000000000007F800000
000000007F800000000000007F800000000000007F80000000000000FFC0000000000001
FFE00000000007FFFFFFF800000007FFFFFFF800000007FFFFFFF800003A3E7DBD41>84
D<FFFEFFFEFC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC
00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC
00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC
00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC
00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FF
FEFFFE0F5B78C319>91 D<FFFEFFFE007E007E007E007E007E007E007E007E007E007E00
7E007E007E007E007E007E007E007E007E007E007E007E007E007E007E007E007E007E00
7E007E007E007E007E007E007E007E007E007E007E007E007E007E007E007E007E007E00
7E007E007E007E007E007E007E007E007E007E007E007E007E007E007E007E007E007E00
7E007E007E007E007E007E007E007E007E007E007E007E007E007E007E007E007E007E00
7E007E007E007E007EFFFEFFFE0F5B7FC319>93 D<7FFFFFFFFFFFFCFFFFFFFFFFFFFEFF
FFFFFFFFFFFE7FFFFFFFFFFFFC3704796E46>95 D<001FF0000000FFFC000003E03F0000
0F000FC0001C0007E0001F0003F0003F8001F8003FC000FC003FC000FC003FC000FC003F
C0007E001F80007E000F00007E000000007E000000007E000000007E000000007E000000
1FFE000003FFFE00001FF87E00007F807E0001FC007E0007F0007E000FE0007E001FC000
7E003F80007E007F80007E007F00007E007F00007E03FE00007E03FE00007E03FE00007E
03FE0000FE03FE0000FE03FE0001FE037F0001BE037F0003BE033F80071F061FC00E1F8E
0FF03C0FFC03FFF007F8003FC003E0282A7CA82D>97 D<01F800000000FFF800000000FF
F800000000FFF80000000007F80000000003F80000000001F80000000001F80000000001
F80000000001F80000000001F80000000001F80000000001F80000000001F80000000001
F80000000001F80000000001F80000000001F80000000001F80000000001F80000000001
F80000000001F80000000001F80000000001F807F8000001F81FFF000001F8780FC00001
F9E003F00001FB8001F80001FF0000FC0001FE00007E0001FC00003F0001FC00001F8001
F800001F8001F800001FC001F800000FC001F800000FE001F800000FE001F8000007E001
F8000007F001F8000007F001F8000007F001F8000007F001F8000007F001F8000007F001
F8000007F001F8000007F001F8000007F001F8000007F001F8000007E001F800000FE001
F800000FE001F800000FE001F800000FC001F800001FC001F800001F8001FC00003F0001
FE00003F0001F600007E0001F70000FC0001E38001F80001C1C003E00001C0F81F800001
803FFE0000000007F000002C407EBE32>I<0001FF0000000FFFE000003F00F800007C00
1E0001F800070003F0001F0007E0003F800FC0007F800FC0007F801F80007F801F80007F
803F00003F003F00001E007F000000007F000000007E00000000FE00000000FE00000000
FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE
00000000FE000000007F000000007F000000007F000000003F000000C03F800000C01F80
0001C01FC00001800FC000038007E000070003F000060001F8001E0000FC003800003F01
F000000FFFC0000001FE0000222A7DA828>I<00000001F800000000FFF800000000FFF8
00000000FFF80000000007F80000000003F80000000001F80000000001F80000000001F8
0000000001F80000000001F80000000001F80000000001F80000000001F80000000001F8
0000000001F80000000001F80000000001F80000000001F80000000001F80000000001F8
0000000001F80000000001F8000000FF01F8000007FFC1F800001F80F1F800007C0039F8
0001F8001DF80003F0000FF80007E00007F8000FC00003F8000FC00003F8001F800001F8
003F800001F8003F000001F8007F000001F8007F000001F8007F000001F8007E000001F8
00FE000001F800FE000001F800FE000001F800FE000001F800FE000001F800FE000001F8
00FE000001F800FE000001F800FE000001F800FE000001F8007E000001F8007F000001F8
007F000001F8003F000001F8003F800001F8001F800003F8001F800003F8000FC00007F8
0007E0000FF80003F0000DFC0001F8003DFE0000FC0071FFF0003F01E1FFF0000FFF81FF
F00001FE01F8002C407DBE32>I<0003FC0000001FFF8000007E07E00000F801F00001F0
00F80003E0007C0007C0003E000FC0003F001F80001F001F80001F803F00001F803F0000
0F807F00000F807F00000FC07E00000FC07E00000FC0FE00000FC0FE00000FC0FFFFFFFF
C0FFFFFFFFC0FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000
7E000000007F000000007F000000007F000000003F000000C03F800000C01F800001C00F
C00001800FC000038007E000070003F0000E0001F8001C0000FC003800003F01F000000F
FFC0000001FE0000222A7DA828>I<00001FC00000FFF00003F0380007C0FC000F81FE00
1F81FE003F01FE003E01FE007E01FE007E00FC00FC000000FC000000FC000000FC000000
FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000
FC000000FC0000FFFFFF00FFFFFF00FFFFFF0000FC000000FC000000FC000000FC000000
FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000
FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000
FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000
FC000001FE00007FFFFE007FFFFE007FFFFE001F407FBF1C>I<01F800000000FFF80000
0000FFF800000000FFF80000000007F80000000003F80000000001F80000000001F80000
000001F80000000001F80000000001F80000000001F80000000001F80000000001F80000
000001F80000000001F80000000001F80000000001F80000000001F80000000001F80000
000001F80000000001F80000000001F80000000001F803FC000001F80FFF800001F83C0F
C00001F8F003E00001F9C003F00001FB8001F80001FB0001F80001FF0000FC0001FE0000
FC0001FE0000FC0001FC0000FC0001FC0000FC0001F80000FC0001F80000FC0001F80000
FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000
FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000
FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000
FC0001F80000FC0001F80000FC0001F80000FC0003FC0001FE00FFFFF07FFFF8FFFFF07F
FFF8FFFFF07FFFF82D3F7EBE32>104 D<01C00007F0000FF8000FF8000FF8000FF8000F
F80007F00001C00000000000000000000000000000000000000000000000000000000000
000000000000000001F8007FF8007FF8007FF80007F80003F80001F80001F80001F80001
F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001
F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001
F80001F80001F80003FC00FFFFE0FFFFE0FFFFE0133D7EBC19>I<01F800FFF800FFF800
FFF80007F80003F80001F80001F80001F80001F80001F80001F80001F80001F80001F800
01F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F800
01F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F800
01F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F800
01F80001F80001F80001F80001F80001F80001F80001F80003FC00FFFFF0FFFFF0FFFFF0
143F7EBE19>108 D<01F803FC0001FE0000FFF80FFF8007FFC000FFF83C0FC01E07E000
FFF8F003E07801F00007F9C003F0E001F80003FB8001F9C000FC0001FB0001F98000FC00
01FF0000FF80007E0001FE0000FF00007E0001FE0000FF00007E0001FC0000FE00007E00
01FC0000FE00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E00
01F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E00
01F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E00
01F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E00
01F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E00
01F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E00
01F80000FC00007E0003FC0001FE0000FF00FFFFF07FFFF83FFFFCFFFFF07FFFF83FFFFC
FFFFF07FFFF83FFFFC46287EA74B>I<01F803FC0000FFF80FFF8000FFF83C0FC000FFF8
F003E00007F9C003F00003FB8001F80001FB0001F80001FF0000FC0001FE0000FC0001FE
0000FC0001FC0000FC0001FC0000FC0001F80000FC0001F80000FC0001F80000FC0001F8
0000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F8
0000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F8
0000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F8
0000FC0001F80000FC0001F80000FC0003FC0001FE00FFFFF07FFFF8FFFFF07FFFF8FFFF
F07FFFF82D287EA732>I<0001FE0000000FFFC000003F03F000007C00F80001F0003E00
03E0001F0007C0000F8007C0000F800F800007C01F800007E01F000003E03F000003F03F
000003F07E000001F87E000001F87E000001F87E000001F8FE000001FCFE000001FCFE00
0001FCFE000001FCFE000001FCFE000001FCFE000001FCFE000001FCFE000001FC7E0000
01F87E000001F87E000001F87F000003F83F000003F03F000003F01F800007E00F800007
C00FC0000FC007C0000F8003E0001F0001F0003E0000FC00FC00003F03F000000FFFC000
0001FE0000262A7DA82D>I<03F00FC0FFF03FF0FFF0F0F8FFF1C3FC07F183FC03F383FC
01F703FC01F603FC01F601F801FE006001FC000001FC000001FC000001FC000001F80000
01F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F80000
01F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F80000
01F8000001F8000001F8000003FC0000FFFFF800FFFFF800FFFFF8001E287EA723>114
D<007FC06003FFF8E007C03DE01E000FE03C0003E0780001E0780001E0700000E0F00000
E0F0000060F0000060F8000060F8000060FC000060FF0000007FC000007FFE00003FFFE0
001FFFFC0007FFFE0003FFFF80007FFFC00007FFE000003FE000000FF0C00003F0C00001
F8C00000F8E00000F8E0000078E0000078F0000078F0000078F8000078F80000F0FC0000
F0FC0001E0FE0001C0F7800780F1E01F00E0FFFC00C01FE0001D2A7DA824>I<00180000
001800000018000000180000001800000018000000380000003800000038000000380000
007800000078000000F8000000F8000001F8000003F8000007F800001FFFFFC0FFFFFFC0
FFFFFFC001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F80000
01F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F80000
01F8000001F8000001F8000001F8006001F8006001F8006001F8006001F8006001F80060
01F8006001F8006001F8006000FC00E000FC00C000FC00C0007E01C0003F0380001F8700
0007FE000001F8001B397EB723>I<01F80000FC00FFF8007FFC00FFF8007FFC00FFF800
7FFC0007F80003FC0003F80001FC0001F80000FC0001F80000FC0001F80000FC0001F800
00FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F800
00FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F800
00FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F800
00FC0001F80000FC0001F80001FC0001F80001FC0001F80001FC0001F80003FC0000F800
03FC0000FC0007FC0000FC000EFE00007C001CFF00003E0038FFF8001F80F0FFF80007FF
E0FFF80000FF00FC002D297EA732>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd ectt0800 6 10
/Fd 10 58 df<00F80003FE0007FF000FFF801F8FC01E03C03C01E03C01E07800F07800
F07800F0F00078F00078F00078F00078F00078F00078F00078F00078F00078F800F87800
F07800F07C01F03C01E03E03E01E03C01F8FC00FFF8007FF0003FE0000F80015207E9E1A
>48 D<00E00000E00001E00003E00003E0000FE0007FE000FFE000FFE00079E00001E000
01E00001E00001E00001E00001E00001E00001E00001E00001E00001E00001E00001E000
01E00001E00001E00001E0007FFF807FFF807FFF807FFF80111F7C9E1A>I<03FC000FFF
001FFF803FFFC07E0FE07803F0F800F0F800F8F80078F800787000780000780000780000
F80000F00001F00003E00007C0000F80001F00007E0000FC0001F80007E0000FC0001F80
783E00787FFFF8FFFFF8FFFFF87FFFF8151F7E9E1A>I<03FC000FFF001FFFC03FFFE07E
07E07C01F07C00F07C00F03800F00001F00001F00003E0000FC003FFC003FF8003FF8003
FFC00007E00001F00000F00000F8000078700078F80078F800F8F800F8F801F07E07E07F
FFE03FFFC00FFF0003FC0015207E9E1A>I<001F80003F80003F80007B80007B8000F380
01F38001E38003C38007C3800783800F03801F03801E03803C03803C0380780380F80380
FFFFFEFFFFFEFFFFFEFFFFFE000380000380000380000380000380003FF8007FFC007FFC
003FF8171F7F9E1A>I<3FFFE03FFFE03FFFE03FFFE03C00003C00003C00003C00003C00
003C00003CFE003FFF003FFFC03FFFE03F87E03E01F03C00F03800F80000780000780000
78700078F80078F800F8F800F0F803F07E0FE03FFFC01FFF800FFF0003FC00151F7E9D1A
>I<003F0000FFC003FFE007FFF00FE1F01F81F01F01F03E00E07C00007C0000781000F9
FF00F7FF80FFFFC0FFFFE0FE03F0FC01F0F800F8F800F8F00078F80078F8007878007878
00787C00F87C00F03E01F01F87E01FFFC00FFF8007FF0001FC0015207E9E1A>I<F00000
FFFFF8FFFFF8FFFFF8FFFFF8F001F0F003E00007C0000780000F00001F00001E00003E00
003C00007C0000780000F80000F00000F00001F00001E00001E00001E00001E00003C000
03C00003C00003C00003C00003C00003C00001800015207E9E1A>I<01FC0007FF000FFF
801FFFC03F07E03C01E07C01F07800F07800F07800F07C01F03E03E01F07C00FFF8007FF
000FFF801FFFC03E03E07C01F07800F0F00078F00078F00078F00078F000787800F07C01
F03F07E03FFFE01FFFC007FF0001FC0015207E9E1A>I<01FC0007FF000FFF801FFFC03F
07E07C03E07801F0F801F0F000F0F000F0F000F8F000F8F00078F800F8F800F87C01F87E
03F83FFFF81FFFF80FFF7807FCF80040F00000F00001F03803E07C03E07C07C07C1F807F
FF003FFE001FFC0007F00015207E9E1A>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fe ecbx1200 12 8
/Fe 8 121 df<07C01FF03FF87FFCFFFEFFFEFFFEFFFEFFFEFFFEFFFE7FFC3FF81FF007
C00000000000000000000000000000000000000000000000000000000007C01FF03FF87F
FCFFFEFFFEFFFEFFFEFFFEFFFEFFFE7FFC3FF81FF007C00F2C78AB1F>58
D<FFFFFFFFFFFFFFF800FFFFFFFFFFFFFFF800FFFFFFFFFFFFFFF800FFFFFFFFFFFFFFF8
00FFFFFFFFFFFFFFFC00001FFF000001FFFC00001FFF0000003FFC00001FFF0000000FFC
00001FFF00000003FC00001FFF00000001FC00001FFF00000000FC00001FFF00000000FC
00001FFF000000007E00001FFF000000003E00001FFF000000003E00001FFF000000003E
00001FFF000000001E00001FFF000000001E00001FFF000078001E00001FFF000078001E
00001FFF000078000F00001FFF000078000F00001FFF000078000F00001FFF000078000F
00001FFF0000F8000000001FFF0000F8000000001FFF0000F8000000001FFF0001F80000
00001FFF0003F8000000001FFF001FF8000000001FFFFFFFF8000000001FFFFFFFF80000
00001FFFFFFFF8000000001FFFFFFFF8000000001FFFFFFFF8000000001FFF001FF80000
00001FFF0003F8000000001FFF0001F8000000001FFF0000F8000000001FFF0000F80000
00001FFF0000F80001E0001FFF0000780001E0001FFF0000780001E0001FFF0000780003
C0001FFF0000780003C0001FFF0000780003C0001FFF0000780003C0001FFF0000000003
C0001FFF0000000007C0001FFF0000000007C0001FFF000000000780001FFF0000000007
80001FFF000000000F80001FFF000000000F80001FFF000000001F80001FFF000000001F
80001FFF000000003F80001FFF000000007F00001FFF00000000FF00001FFF00000001FF
00001FFF00000007FF00001FFF0000001FFF00001FFF000001FFFF00FFFFFFFFFFFFFFFF
00FFFFFFFFFFFFFFFE00FFFFFFFFFFFFFFFE00FFFFFFFFFFFFFFFE00FFFFFFFFFFFFFFFE
0043447DC34A>69 D<00003FF800000003FFFF8000000FFFFFE000003FFFFFF000007FF8
3FF80000FFC007FC0001FF8003FE0003FF0001FF0007FE0000FF800FFC0000FF801FFC00
007FC01FF800007FC03FF800003FE03FF800003FE07FF800003FE07FF000003FE07FF000
003FF07FF000001FF0FFF000001FF0FFF000001FF0FFFFFFFFFFF0FFFFFFFFFFF0FFFFFF
FFFFF0FFFFFFFFFFF0FFF000000000FFF000000000FFF000000000FFF000000000FFF000
0000007FF0000000007FF0000000007FF8000000007FF8000000003FF8000000003FF800
0000F01FFC000000F01FFC000001F00FFE000001E007FF000003E003FF800007C001FFC0
000F8000FFF0003F00007FFE01FE00001FFFFFFC000007FFFFF0000001FFFFC00000001F
FE00002C2F7DAD33>101 D<007FC000FFFFC000FFFFC000FFFFC000FFFFC000FFFFC000
03FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC000
01FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC000
01FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC000
01FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC000
01FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC000
01FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC000
01FFC00001FFC00001FFC00001FFC000FFFFFF80FFFFFF80FFFFFF80FFFFFF80FFFFFF80
19457CC420>108 D<007F8007FE00000FFC0000FFFF803FFFC0007FFF8000FFFF80FFFF
F001FFFFE000FFFF81FFFFF803FFFFF000FFFF87F01FFC0FE03FF800FFFF8FC00FFE1F80
1FFC0003FF9F000FFF3E001FFE0001FF9E0007FF3C000FFE0001FFBC0007FF78000FFE00
01FFF80003FFF00007FF0001FFF80003FFF00007FF0001FFF00003FFE00007FF0001FFE0
0003FFC00007FF0001FFE00003FFC00007FF0001FFE00003FFC00007FF0001FFC00003FF
800007FF0001FFC00003FF800007FF0001FFC00003FF800007FF0001FFC00003FF800007
FF0001FFC00003FF800007FF0001FFC00003FF800007FF0001FFC00003FF800007FF0001
FFC00003FF800007FF0001FFC00003FF800007FF0001FFC00003FF800007FF0001FFC000
03FF800007FF0001FFC00003FF800007FF0001FFC00003FF800007FF0001FFC00003FF80
0007FF0001FFC00003FF800007FF0001FFC00003FF800007FF0001FFC00003FF800007FF
0001FFC00003FF800007FF0001FFC00003FF800007FF0001FFC00003FF800007FF0001FF
C00003FF800007FF0001FFC00003FF800007FF0001FFC00003FF800007FF0001FFC00003
FF800007FF0001FFC00003FF800007FF00FFFFFF81FFFFFF03FFFFFEFFFFFF81FFFFFF03
FFFFFEFFFFFF81FFFFFF03FFFFFEFFFFFF81FFFFFF03FFFFFEFFFFFF81FFFFFF03FFFFFE
572D7CAC5E>I<007FC00FF80000FFFFC0FFFF8000FFFFC3FFFFE000FFFFCFFFFFF800FF
FFDFC03FFC00FFFFFF001FFE0003FFFC0007FF0001FFF80003FF8001FFF00003FFC001FF
E00001FFE001FFC00001FFE001FFC00000FFF001FFC00000FFF001FFC000007FF801FFC0
00007FF801FFC000007FF801FFC000007FF801FFC000003FFC01FFC000003FFC01FFC000
003FFC01FFC000003FFC01FFC000003FFC01FFC000003FFC01FFC000003FFC01FFC00000
3FFC01FFC000003FFC01FFC000003FFC01FFC000003FFC01FFC000003FFC01FFC000007F
F801FFC000007FF801FFC000007FF801FFC000007FF001FFC00000FFF001FFC00000FFF0
01FFC00001FFE001FFE00001FFC001FFF00003FFC001FFF80007FF8001FFFC000FFF0001
FFFE001FFE0001FFDFC07FFC0001FFCFFFFFF00001FFC3FFFFC00001FFC0FFFF000001FF
C01FF0000001FFC00000000001FFC00000000001FFC00000000001FFC00000000001FFC0
0000000001FFC00000000001FFC00000000001FFC00000000001FFC00000000001FFC000
00000001FFC00000000001FFC00000000001FFC000000000FFFFFF80000000FFFFFF8000
0000FFFFFF80000000FFFFFF80000000FFFFFF8000000036407DAC3E>112
D<001FFC038000FFFF878003FFFFFF800FFFFFFF801FF003FF803FC000FF803F80003F80
7F00001F807E00001F80FE00000F80FE00000F80FE00000780FF00000780FF00000780FF
80000780FFE0000000FFFE0000007FFFF000007FFFFF00003FFFFFC0003FFFFFF0001FFF
FFFC000FFFFFFE0003FFFFFF0001FFFFFF80007FFFFF80000FFFFFC000003FFFC0000003
FFE0000000FFE0F000003FE0F000003FE0F800001FE0F800000FE0F800000FE0FC00000F
E0FC00000FE0FE00000FC0FF00001FC0FF00001FC0FF80003F80FFE0007F00FFF803FE00
FFFFFFFC00FCFFFFF800F03FFFE000E007FE0000232F7CAD2C>115
D<FFFFFE003FFFF0FFFFFE003FFFF0FFFFFE003FFFF0FFFFFE003FFFF0FFFFFE003FFFF0
00FFF00003E000007FF80007C000003FFC000F8000001FFC001F0000001FFE003F000000
0FFF007E00000007FF807C00000003FFC0F800000001FFC1F000000001FFE3E000000000
FFF7C0000000007FFF80000000003FFF80000000001FFF00000000001FFE00000000000F
FF000000000007FF800000000003FFC00000000003FFC00000000007FFE0000000000FFF
F0000000000FFFF8000000001F3FFC000000003E1FFC000000007C1FFE00000000F80FFF
00000001F007FF80000003F003FFC0000007E001FFC0000007C001FFE000000F8000FFF0
00001F00007FF800003E00003FFC00007E00001FFC00FFFFE000FFFFFCFFFFE000FFFFFC
FFFFE000FFFFFCFFFFE000FFFFFCFFFFE000FFFFFC362C7EAB3B>120
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ff ectt1200 12 22
/Ff 22 118 df<00000F0000003F8000007F800000FF800001FF000003FE000007F80000
0FF000001FE000003FC000007F800000FF000000FE000001FE000001FC000003F8000007
F8000007F000000FF000000FE000001FE000001FC000001FC000003FC000003F8000003F
8000007F8000007F0000007F0000007F0000007F000000FF000000FE000000FE000000FE
000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE
000000FE000000FF0000007F0000007F0000007F0000007F0000007F8000003F8000003F
8000003FC000001FC000001FC000001FE000000FE000000FF0000007F0000007F8000003
F8000001FC000001FE000000FE000000FF0000007F8000003FC000001FE000000FF00000
07F8000003FE000001FF000000FF8000007F8000003F8000000F00194D6FC433>40
D<78000000FE000000FF000000FF8000007FC000003FE000000FF0000007F8000003FC00
0001FE000000FF0000007F8000003F8000003FC000001FC000000FE000000FF0000007F0
000007F8000003F8000003FC000001FC000001FC000001FE000000FE000000FE000000FF
0000007F0000007F0000007F0000007F0000007F8000003F8000003F8000003F8000003F
8000003F8000003F8000003F8000003F8000003F8000003F8000003F8000003F8000003F
8000007F8000007F0000007F0000007F0000007F000000FF000000FE000000FE000001FE
000001FC000001FC000003FC000003F8000007F8000007F000000FF000000FE000001FC0
00003FC000003F8000007F800000FF000001FE000003FC000007F800000FF000003FE000
007FC00000FF800000FF000000FE00000078000000194D78C433>I<07C00FF01FF83FF8
3FFC3FFC3FFE3FFE1FFE0FFE07FE007E00FE00FE00FC01FC03F807F80FF07FE0FFE0FFC0
FF00FE0078000F196E8A33>44 D<0001E000000003F000000003F000000007F000000007
F00000000FF00000000FF00000001FF00000003FF00000007FF0000000FFF0000003FFF0
00003FFFF000007FFFF00000FFF7F00000FFE7F00000FF87F000007E07F000000007F000
000007F000000007F000000007F000000007F000000007F000000007F000000007F00000
0007F000000007F000000007F000000007F000000007F000000007F000000007F0000000
07F000000007F000000007F000000007F000000007F000000007F000000007F000000007
F000000007F000000007F000000007F000000007F000000007F000000007F000000007F0
00000007F000000007F000000007F000000007F000000007F000000007F000000007F000
000007F000003FFFFFFE007FFFFFFF007FFFFFFF807FFFFFFF807FFFFFFF003FFFFFFE00
213E76BD33>49 D<0001FFC00000000FFFF80000003FFFFF000000FFFFFF800001FFFFFF
C00003FFFFFFE00007FF807FF0000FFC000FF8000FF00007FC001FE00003FC001FE00001
FE001FE00001FE001FE00000FE001FE00000FE000FC00000FE0007800000FE0000000000
FE0000000001FE0000000001FC0000000001FC0000000003FC0000000007F8000000000F
F8000000001FF0000000003FE000000003FFC0000003FFFF80000007FFFF00000007FFFE
00000007FFFF00000007FFFFC0000003FFFFE0000000007FF0000000000FF80000000003
FC0000000001FE0000000000FF00000000007F00000000007F80000000003F8000000000
3F80000000001FC0000000001FC0000000001FC03C0000001FC07E0000001FC0FF000000
1FC0FF0000001FC0FF0000003FC0FF0000003F80FF0000007F807F0000007F007F800000
FF007FC00001FE003FE00003FE001FF8000FFC000FFF807FF80007FFFFFFF00003FFFFFF
E00001FFFFFF8000007FFFFF0000000FFFFC00000001FFC000002A3F7CBD33>51
D<000000FF0000000001FF8000000003FF8000000007FF8000000007FF800000000FFF80
0000001FFF800000001FDF800000003F9F800000003F9F800000007F1F80000000FE1F80
000000FE1F80000001FC1F80000001FC1F80000003F81F80000007F01F80000007F01F80
00000FE01F8000001FC01F8000001FC01F8000003F801F8000003F801F8000007F001F80
0000FE001F800000FE001F800001FC001F800003FC001F800003F8001F800007F0001F80
0007F0001F80000FE0001F80001FC0001F80001FC0001F80003F80001F80003F80001F80
007F00001F8000FE00001F8000FFFFFFFFFFE0FFFFFFFFFFF0FFFFFFFFFFF0FFFFFFFFFF
F0FFFFFFFFFFF07FFFFFFFFFE00000001F80000000001F80000000001F80000000001F80
000000001F80000000001F80000000001F80000000001F80000000001F80000000001F80
000000001F80000000001F800000001FFFFF8000003FFFFFC000007FFFFFE000007FFFFF
E000003FFFFFC000001FFFFF802C3E7DBD33>I<07FFFFFFF00FFFFFFFF81FFFFFFFF81F
FFFFFFF81FFFFFFFF81FFFFFFFF01FC00000001FC00000001FC00000001FC00000001FC0
0000001FC00000001FC00000001FC00000001FC00000001FC00000001FC00000001FC000
00001FC00000001FC00000001FC00000001FC00000001FC0FFC0001FC7FFF8001FDFFFFC
001FFFFFFF001FFFFFFF801FFFFFFFC01FFF80FFE01FFC001FF01FF0000FF81FE00007F8
1FC00003FC0F800001FC07000001FE00000000FE00000000FE00000000FF000000007F00
0000007F000000007F000000007F180000007F7E0000007F7E0000007FFF000000FFFF00
0000FEFF000000FEFE000001FEFF000001FC7F000003FC7F800007F87FC0000FF83FE000
1FF01FF0007FE01FFE03FFC00FFFFFFF8007FFFFFF0001FFFFFE0000FFFFF800003FFFE0
000003FF0000283E7BBC33>I<7C0000000000FFFFFFFFFF80FFFFFFFFFFC0FFFFFFFFFF
C0FFFFFFFFFFC0FFFFFFFFFFC0FFFFFFFFFF80FE000000FF00FE000001FE00FE000003FC
007C000007F8000000000FF0000000000FE0000000001FE0000000003FC0000000007F80
000000007F0000000000FF0000000000FE0000000001FC0000000003FC0000000003F800
00000007F80000000007F0000000000FF0000000000FE0000000001FE0000000001FC000
0000003FC0000000003F80000000003F80000000007F00000000007F0000000000FF0000
000000FE0000000000FE0000000001FE0000000001FC0000000001FC0000000001FC0000
000003F80000000003F80000000003F80000000003F80000000007F80000000007F00000
000007F00000000007F00000000007F00000000007F0000000000FF0000000000FE00000
00000FE0000000000FE0000000000FE0000000000FE0000000000FE0000000000FE00000
00000FE0000000000FE0000000000FE00000000007C00000000003800000002A3F7CBD33
>55 D<7FFFFFC0FFFFFFE0FFFFFFE0FFFFFFE0FFFFFFE0FFFFFFC0FE000000FE000000FE
000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE
000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE
000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE
000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE
000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE
000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE
000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FF
FFFFC0FFFFFFE0FFFFFFE0FFFFFFE0FFFFFFE07FFFFFC01B4D6CC433>91
D<7FFFFFC0FFFFFFE0FFFFFFE0FFFFFFE0FFFFFFE07FFFFFE000000FE000000FE000000F
E000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000F
E000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000F
E000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000F
E000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000F
E000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000F
E000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000F
E000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE07FFFFF
E0FFFFFFE0FFFFFFE0FFFFFFE0FFFFFFE07FFFFFC01B4D7DC433>93
D<7FFFFFFFFE7FFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFE7FFFFFFFFE
28077B7D33>95 D<3FFC000000007FFE00000000FFFE00000000FFFE000000007FFE0000
00003FFE0000000000FE0000000000FE0000000000FE0000000000FE0000000000FE0000
000000FE0000000000FE0000000000FE0000000000FE0000000000FE0000000000FE0000
000000FE01FE000000FE0FFFC00000FE1FFFF00000FE7FFFF80000FEFFFFFE0000FFFFFF
FF0000FFFE07FF0000FFF800FF8000FFE0007FC000FFC0003FE000FF80001FE000FF8000
0FF000FF00000FF000FF000007F000FE000007F800FE000003F800FE000003F800FE0000
03FC00FE000001FC00FE000001FC00FE000001FC00FE000001FC00FE000001FC00FE0000
01FC00FE000001FC00FE000001FC00FE000001FC00FE000003FC00FE000003F800FE0000
03F800FF000007F800FF000007F000FF80000FF000FF80000FE000FFC0001FE000FFC000
3FC000FFE0007FC000FFF801FF8000FFFE07FF0000FFFFFFFE0000FEFFFFFC0000FE7FFF
F800007E3FFFE000003C0FFF8000000003FE00002E3E7FBC33>98
D<0000FFF0000007FFFE00001FFFFF80003FFFFFC0007FFFFFE001FFFFFFF003FFC01FF0
03FE000FF007FC000FF00FF8000FF01FF00007E01FE00003C03FC00000003F800000003F
800000007F800000007F000000007F00000000FF00000000FE00000000FE00000000FE00
000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FF0000
00007F000000007F000000007F800000003F800001F03FC00003F81FE00003F81FF00007
F80FF80007F007FC000FF007FF001FE003FFE07FE001FFFFFFC000FFFFFF80003FFFFF00
001FFFFC000007FFF8000000FFC000252E79AC33>I<0000007FF800000000FFFC000000
01FFFC00000001FFFC00000000FFFC000000007FFC0000000001FC0000000001FC000000
0001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC000000
0001FC0000000001FC0000000001FC000001FF01FC000007FFC1FC00001FFFF1FC00007F
FFF9FC0000FFFFFFFC0001FFFFFFFC0003FF81FFFC0007FE003FFC000FF8001FFC000FF0
000FFC001FE00007FC001FC00003FC003FC00003FC003F800001FC007F800001FC007F00
0001FC007F000001FC00FF000001FC00FE000001FC00FE000001FC00FE000001FC00FE00
0001FC00FE000001FC00FE000001FC00FE000001FC00FE000001FC00FE000001FC00FF00
0001FC007F000001FC007F000003FC007F800003FC003F800003FC003FC00007FC003FC0
0007FC001FE0000FFC001FF0001FFC000FF8003FFC0007FC007FFC0003FF81FFFFF003FF
FFFFFFF800FFFFFDFFFC007FFFF9FFFC003FFFE1FFF8000FFF80FFF00001FE0000002E3E
7DBC33>I<0000FF80000007FFF000001FFFFC00003FFFFE0000FFFFFF0001FFFFFF8003
FF80FFC007FE003FE007F8000FF00FF00007F01FE00007F81FC00003F83FC00003FC3F80
0001FC7F800001FC7F000001FC7F000001FE7F000000FEFF000000FEFE000000FEFFFFFF
FFFEFFFFFFFFFEFFFFFFFFFEFFFFFFFFFEFFFFFFFFFEFFFFFFFFFCFE00000000FF000000
007F000000007F000000007F000000003F800000003F8000007C1FC00000FE1FE00000FE
0FF00000FE0FF80001FE07FC0003FC03FF000FFC01FFC03FF800FFFFFFF0007FFFFFE000
3FFFFFC0000FFFFF000003FFFC0000007FE000272E7BAC33>I<0000003FE0000001FFFC
000007FFFE00001FFFFE00003FFFFF00007FFFFF0000FFC0FF0000FF00FF0001FE007E00
01FC003C0003FC00000003F800000003F800000003F800000003F800000003F800000003
F800000003F800000003F800003FFFFFFFF87FFFFFFFFCFFFFFFFFFCFFFFFFFFFCFFFFFF
FFFC7FFFFFFFF80003F800000003F800000003F800000003F800000003F800000003F800
000003F800000003F800000003F800000003F800000003F800000003F800000003F80000
0003F800000003F800000003F800000003F800000003F800000003F800000003F8000000
03F800000003F800000003F800000003F800000003F800000003F800000003F800000003
F800000003F800000003F800000003F800003FFFFFFF807FFFFFFFC07FFFFFFFC07FFFFF
FFC07FFFFFFFC03FFFFFFF80283E7DBD33>I<0000E000000003F800000003F800000007
FC00000007FC00000007FC00000003F800000003F800000000E000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
0000000000003FFFF800007FFFFC00007FFFFC00007FFFFC00007FFFFC00003FFFFC0000
0001FC00000001FC00000001FC00000001FC00000001FC00000001FC00000001FC000000
01FC00000001FC00000001FC00000001FC00000001FC00000001FC00000001FC00000001
FC00000001FC00000001FC00000001FC00000001FC00000001FC00000001FC00000001FC
00000001FC00000001FC00000001FC00000001FC00000001FC00000001FC00000001FC00
000001FC00000001FC00007FFFFFFFC0FFFFFFFFE0FFFFFFFFF0FFFFFFFFF0FFFFFFFFE0
7FFFFFFFC0243E78BD33>105 D<3FFFFC00007FFFFE0000FFFFFE0000FFFFFE00007FFF
FE00003FFFFE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE
00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00
000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE0000
0000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE000000
00FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000
FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE
00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00
003FFFFFFFF87FFFFFFFFCFFFFFFFFFEFFFFFFFFFE7FFFFFFFFC3FFFFFFFF8273D7ABC33
>108 D<000001FF00003FFC07FFC0007FFE1FFFF000FFFE7FFFF800FFFEFFFFF8007FFF
FFFFFC003FFFFF07FE0000FFF801FE0000FFF000FE0000FFE000FF0000FFC0007F0000FF
80007F0000FF80007F0000FF00007F0000FF00007F0000FF00007F0000FE00007F0000FE
00007F0000FE00007F0000FE00007F0000FE00007F0000FE00007F0000FE00007F0000FE
00007F0000FE00007F0000FE00007F0000FE00007F0000FE00007F0000FE00007F0000FE
00007F0000FE00007F0000FE00007F0000FE00007F0000FE00007F0000FE00007F0000FE
00007F0000FE00007F0000FE00007F003FFFF80FFFFC7FFFFC1FFFFEFFFFFE3FFFFFFFFF
FE3FFFFF7FFFFC1FFFFE3FFFF80FFFFC302C7FAB33>110 D<001FFE0F0000FFFF8F8003
FFFFFF800FFFFFFF801FFFFFFF803FFFFFFF803FF007FF807F8001FF807F0000FF80FE00
007F80FC00007F80FC00003F80FC00003F80FC00003F80FE00003F807F00001F007FC000
00003FF80000003FFFC000001FFFFF00000FFFFFE00003FFFFF80000FFFFFC00001FFFFF
000000FFFF80000007FFC00000007FC00000001FE07C00000FE0FE000007F0FE000003F0
FE000003F0FF000003F0FF000003F0FF800003F0FF800007F0FFC00007E0FFE0000FE0FF
F0003FC0FFFE01FFC0FFFFFFFF80FFFFFFFF00FDFFFFFE00FCFFFFF800F83FFFE0007807
FF0000242E79AC33>115 D<0003C00000000007E0000000000FE0000000000FE0000000
000FE0000000000FE0000000000FE0000000000FE0000000000FE0000000000FE0000000
000FE0000000000FE00000003FFFFFFFFC007FFFFFFFFE00FFFFFFFFFE00FFFFFFFFFE00
FFFFFFFFFE007FFFFFFFFC00000FE0000000000FE0000000000FE0000000000FE0000000
000FE0000000000FE0000000000FE0000000000FE0000000000FE0000000000FE0000000
000FE0000000000FE0000000000FE0000000000FE0000000000FE0000000000FE0000000
000FE0000000000FE0000000000FE0000000000FE0000000000FE0000000000FE0001F00
000FE0003F80000FE0003F80000FE0003F80000FE0003F80000FE0003F80000FE0007F80
000FF0007F000007F000FF000007F801FF000007FE07FE000003FFFFFC000001FFFFF800
0000FFFFF00000007FFFE00000001FFF8000000007FC000029387EB633>I<3FFC001FFE
007FFE003FFF00FFFE007FFF00FFFE007FFF007FFE003FFF003FFE001FFF0000FE00007F
0000FE00007F0000FE00007F0000FE00007F0000FE00007F0000FE00007F0000FE00007F
0000FE00007F0000FE00007F0000FE00007F0000FE00007F0000FE00007F0000FE00007F
0000FE00007F0000FE00007F0000FE00007F0000FE00007F0000FE00007F0000FE00007F
0000FE00007F0000FE00007F0000FE00007F0000FE00007F0000FE00007F0000FE00007F
0000FE0000FF0000FE0000FF0000FE0001FF0000FE0001FF0000FF0003FF00007F800FFF
00007FE03FFFFC003FFFFFFFFE003FFFFFFFFF001FFFFF7FFF000FFFFE7FFE0003FFF83F
FC0000FFC00000302C7FAA33>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fg ecti1200 12 20
/Fg 20 234 df<0000FFFFFFF0000000FFFFFFF0000000FFFFFFE000000001FFC0000000
0000FF800000000001FF000000000001FF000000000001FE000000000001FE0000000000
01FE000000000003FE000000000003FC000000000003FC000000000003FC000000000007
FC000000000007F8000000000007F8000000000007F800000000000FF800000000000FF0
00000000000FF000000000000FF000000000001FF000000000001FE000000000001FE000
000000001FE000000000003FE000000000003FC000000000003FC000000000003FC00000
0000007FC000000000007F8000000000007F8000000000007F800000000000FF80000000
0000FF000000000000FF000000000000FF000000000001FF000000000001FE0000000000
01FE000000000001FE000000000003FE000000100003FC000000380003FC000000380003
FC000000780007FC000000700007F8000000700007F8000000F00007F8000000E0000FF8
000001E0000FF0000001E0000FF0000001C0000FF0000003C0001FF0000007C0001FE000
000780001FE000000F80001FE000000F80003FE000001F00003FC000003F00003FC00000
7F00007FC00000FE00007FC00003FE00007F80000FFE0000FF80007FFC00FFFFFFFFFFFC
00FFFFFFFFFFFC00FFFFFFFFFFF80035447AC33D>76 D<0000FFFFFFFF80000000FFFFFF
FFF8000000FFFFFFFFFE00000001FF8001FF80000000FF00003FC0000001FF00001FE000
0001FF00000FF0000001FE000007F8000001FE000003F8000001FE000003FC000003FE00
0003FC000003FC000003FE000003FC000003FE000003FC000003FE000007FC000003FE00
0007F8000003FE000007F8000003FE000007F8000003FE00000FF8000007FC00000FF000
0007FC00000FF0000007FC00000FF000000FF800001FF000000FF800001FE000000FF000
001FE000001FE000001FE000003FC000003FE000003F8000003FC000007F0000003FC000
00FE0000003FC00003F80000007FC00007F00000007F80001FC00000007F8001FF000000
007FFFFFF800000000FFFFFFE000000000FF0003F800000000FF0000FE00000000FF0000
7F00000001FF00003F80000001FE00001FC0000001FE00001FC0000001FE00001FE00000
03FE00001FE0000003FC00000FE0000003FC00000FE0000003FC00001FE0000007FC0000
1FE0000007F800001FE0000007F800001FE0000007F800003FE000000FF800003FE00000
0FF000003FE000000FF000003FE000000FF000007FC000001FF000007FC000001FE00000
7FC000001FE000007FC000001FE000007FC000003FE000007FC00E003FC000007FC00E00
3FC000007FC00E007FC000007F801E007FC000007F801C007F8000007F803C00FFC00000
7F8038FFFFFF80003FC070FFFFFF80001FC0F0FFFFFF80000FE1E0000000000003FF8000
0000000000FE003F467AC347>82 D<00001F80000000007FE000000001F07070000007C0
39F800000F801DF800001F001FF800003E000FF000007E000FF00000FC000FF00001F800
07F00001F80007E00003F00007E00007F00007E00007E0000FE0000FE0000FC0000FE000
0FC0001FC0000FC0001FC0001FC0003FC0001F80003F80001F80003F80001F80003F8000
3F80007F80003F00007F00003F00007F00003F00007F00007F00007F00007E0000FE0000
7E0000FE00007E0000FE0000FE0380FE0000FC0780FE0000FC0700FE0000FC07007E0001
FC07007E0001FC0F007E0003F80E007E0007F80E003E000FF81E003E000FF81C001F001C
F81C001F0038F838000F80F078780007C3E07C700001FF801FE000007E00078000292D76
AB32>97 D<00000FE00000007FF8000001F81E000007E00F00000F800780001F00038000
7E0003C000FC001FC001FC003FC001F8003FC003F0007F8007F0007F800FE0007F800FE0
003E001FC00000001FC00000003F800000003F800000007F800000007F000000007F0000
00007F00000000FF00000000FE00000000FE00000000FE00000000FE00000000FC000000
00FC00000000FC00000000FC00000000FC00000000FC00000180FC000003C0FC00000780
FC000007807C00000F007E00001E003E00007C003E0000F0001F0003E0000F800F800007
C07E000001FFF80000007FC00000222D75AB2D>99 D<0000000007F000000003FFF00000
0003FFF000000003FFF0000000000FE00000000007E0000000000FE0000000000FE00000
00000FC0000000000FC0000000001FC0000000001FC0000000001F80000000001F800000
00003F80000000003F80000000003F00000000003F00000000007F00000000007F000000
00007E00000000007E0000000000FE0000000000FE0000000000FC0000001F80FC000000
7FE1FC000001F071FC000007C039F800000F801DF800001F001FF800003E000FF800007E
000FF00000FC000FF00001F80007F00001F80007F00003F00007E00007F00007E00007E0
000FE0000FE0000FE0000FE0000FC0001FC0000FC0001FC0001FC0003FC0001FC0003F80
001F80003F80001F80003F80003F80007F80003F80007F00003F00007F00003F00007F00
007F00007F00007F0000FE00007E0000FE00007E0000FE0000FE0380FE0000FE0780FE00
00FC0700FE0000FC07007E0001FC07007E0001FC0F007E0003F80E007E0007F80E003E00
0FF81E003E000FF81C001F001CF81C001F0038F838000F80F078780007C3E07C700001FF
801FE000007E000780002C4676C432>I<00000FE00000007FF8000001F83E000007C00F
00001F800780003F000780007E0007C000FC0003C001F80003C003F00007C007F0000780
07E00007800FE0000F801FC0000F001FC0001F003F80003E003F8000FC003F8007F0007F
80FFC0007FFFFE00007FFFC000007F00000000FF00000000FE00000000FE00000000FE00
000000FE00000000FE00000000FC00000000FC00000000FC00000000FC00000000FC0000
0180FC000003C07C000007807C000007807E00000F003E00001E003E00007C001F0000F0
000F0003E00007800F800003C07E000001FFF80000003FC00000222D75AB2D>I<0000FE
000000007FFE000000007FFE000000007FFE0000000001FC0000000000FC0000000001FC
0000000001FC0000000001F80000000001F80000000003F80000000003F80000000003F0
0000000003F00000000007F00000000007F00000000007E00000000007E0000000000FE0
000000000FE0000000000FC0000000000FC0000000001FC0000000001FC0000000001F80
000000001F807F0000003F83FFC000003F8F81F000003F1E00F800003F3800FC00007F70
007C00007FE0007C00007FC0007E00007FC0007E0000FF80007E0000FF00007E0000FF00
007E0000FE00007E0001FC0000FE0001FC0000FC0001F80000FC0001F80000FC0003F800
01FC0003F80001F80003F00001F80003F00001F80007F00003F80007F00003F00007E000
03F00007E00007F0000FE00007E0000FE00007E0000FC0000FE0000FC0000FC0001FC000
0FC0781FC0001FC0701F80001F80701F80001F80703F80003F80F03F80003F00E03F0000
3F00E03F00003F01E07F00003E01C07F00003E03C07E00003E03807E00003E0700FE0000
1E0F00FE00001F1E00FC00000FF80038000003E0002D467AC432>104
D<00003C00007E0000FE0001FE0001FE0001FE0000FC0000700000000000000000000000
00000000000000000000000000000000000000000000000000000000000000007C0001FF
0003C7800703C00F03E00E03E01C03E01C07E03807E03807E07807E0700FE0700FC0701F
C0F01F80E01F80003F80003F00003F00007F00007E00007E0000FE0000FC0001FC0001F8
0001F80003F80003F00003F01E07F01C07E01C07E01C0FE03C0FC0380FC0380FC0780F80
700F80F00F80E00F81C00783C007C78003FE0000F800174378C11E>I<00000000F00000
0003F800000003F800000007F800000007F800000007F800000007F000000001C0000000
000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000001F000
000007FC0000001E1E000000380F000000700F800000E00F800001E00F800001C00F8000
03800F800007801F800007001F800007001F80000E001F80000E003F80001E003F80001C
003F000000003F000000007F000000007F000000007E000000007E00000000FE00000000
FE00000000FC00000000FC00000001FC00000001FC00000001F800000001F800000003F8
00000003F800000003F000000003F000000007F000000007F000000007E000000007E000
00000FE00000000FE00000000FC00000000FC00000001FC00000001FC00000001F800000
001F800000003F800000003F800000003F000000003F000000007F000000007E00000000
7E00000000FE00001C00FC00007F00FC0000FF01F80000FF03F00000FF03F00000FE07E0
0000FE0FC00000F81F000000707E0000003FF80000000FC0000000255683C11E>I<0003
F801FFF801FFF801FFF80007F00003F00007F00007F00007E00007E0000FE0000FE0000F
C0000FC0001FC0001FC0001F80001F80003F80003F80003F00003F00007F00007F00007E
00007E0000FE0000FE0000FC0000FC0001FC0001FC0001F80001F80003F80003F80003F0
0003F00007F00007F00007E00007E0000FE0000FE0000FC0000FC0001FC0001FC0001F80
001F80003F80003F80003F00003F00007F01C07F03C07E03807E03807E0780FE0700FC07
00FC0700FC0F00FC0E007C1E007C1C003C3C003E78001FF00007C000154678C419>108
D<01F0000FE00007F0000003FC007FF8003FFC0000071E01F03E00F81F00000E1F03C01F
01E00F80001E0F87001F83800FC0001C0F8E000F870007C0003C0F9C000F8E0007C00038
0FB8000FDC0007E000380FF8000FFC0007E000781FF0000FF80007E000701FE0000FF000
07E000701FE0000FF00007E000701FC0000FE00007E000F01F80001FC0000FE000E03F80
001FC0000FC000E03F00001F80000FC000003F00001F80000FC000003F00003F80001FC0
00007F00003F80001F8000007E00003F00001F8000007E00003F00001F8000007E00007F
00003F800000FE00007F00003F000000FC00007E00003F000000FC00007E00007F000000
FC0000FE00007E000001FC0000FE00007E000001F80000FC0000FE000001F80000FC0000
FC000001F80001FC0000FC078003F80001FC0001FC070003F00001F80001F8070003F000
01F80001F8070003F00003F80003F80F0007F00003F80003F00E0007E00003F00003F00E
0007E00003F00003F01E0007E00007F00003E01C000FE00007F00003E03C000FC00007E0
0003E038000FC00007E00003E070000FC0000FE00001E0F0001FC0000FE00001F1E0001F
80000FC00000FF8000070000038000003E0000492D78AB50>I<01F0000FE00003FC007F
F800071E01F03E000E0F03C01F001E0F87001F801C0F8E000F803C0F9C000F80380FB800
0FC0380FF8000FC0781FF0000FC0701FE0000FC0701FE0000FC0701FC0000FC0F01F8000
1FC0E03F80001F80E03F00001F80003F00001F80003F00003F80007F00003F00007E0000
3F00007E00003F00007E00007F0000FE00007E0000FC00007E0000FC0000FE0000FC0000
FC0001FC0000FC0001F80001FC0001F80001F80001F80001F80F03F80003F80E03F00003
F00E03F00003F00E03F00007F01E07F00007E01C07E00007E01C07E00007E03C07E00007
C0380FE00007C0780FC00007C0700FC00007C0E00FC00003C1E01FC00003E3C01F800001
FF00070000007C00302D78AB37>I<00000FE00000007FFC000001F83E000007E00F8000
0F8007C0001F0007C0007E0003E000FC0003F000FC0003F001F80001F003F00001F807F0
0001F80FE00001F80FE00001F81FC00001F81FC00001F83F800001F83F800003F87F8000
03F87F000003F87F000003F87F000007F8FF000007F0FE000007F0FE000007F0FE00000F
F0FE00000FE0FC00000FE0FC00001FC0FC00001FC0FC00001F80FC00003F80FC00003F00
FC00007F00FC00007E00FC0000FC007C0001F8007E0003F0003E0003E0003E0007C0001F
001F80000F803E000007C0FC000001FFF00000003F800000252D75AB32>I<00001F800C
00007FE01C0001F0703C0007C03878000F801CF8001F001DF8003E000FF8007E000FF000
FC000FF001F80007F001F80007F003F00007E007F00007E007E00007E00FE0000FE00FE0
000FC01FC0000FC01FC0000FC03FC0001FC03F80001F803F80001F803F80001F807F8000
3F807F00003F007F00003F007F00003F007F00007F00FE00007E00FE00007E00FE00007E
00FE0000FE00FE0000FC00FE0000FC007E0001FC007E0001FC007E0003F8007E0007F800
3E000FF8003E000FF8001F001FF0001F003BF0000F80F3F00007C3E7F00001FF87E00000
7E07E000000007E00000000FE00000000FC00000000FC00000000FC00000001FC0000000
1F800000001F800000001F800000003F800000003F000000003F000000007F000000007F
00000000FF0000007FFFFE00007FFFFE00007FFFFC00263F76AB2D>113
D<01F0003F8003FC01FFF0071E03C0F80E0F0F007C1E0F9E01FC1C0F9C01FC1C0FB803FC
380FF003FC380FF003FC381FE003F8781FE000E0701FC00000701FC00000F01F800000E0
3F800000E03F000000003F000000003F000000007F000000007E000000007E000000007E
00000000FE00000000FC00000000FC00000000FC00000001FC00000001F800000001F800
000001F800000003F800000003F000000003F000000003F000000007F000000007E00000
0007E000000007E00000000FE00000000FC00000000FC00000000FC00000001FC0000000
1F800000000700000000262D78AB29>I<00000FE00000007FF8000001F01E000003C00F
000007800780000F000380001E0003C0001E0007C0003C001FC0003C001FC0007C003F80
0078003F80007C003F80007C000E00007C000000007E000000007F000000007FF0000000
7FFF0000003FFFC000001FFFF000000FFFF8000007FFFC000000FFFC0000000FFE000000
01FE00000000FE000000007F000000003F000E00003F003F00001E007F80001E007F8000
1E007F80003E00FF00003C00FF00003C00FC000078007000007800700000F000780001E0
003C0003C0001E000F80000F803E000003FFF80000007FC00000222D7AAB28>I<000070
000001F8000001F8000001F8000003F8000003F0000003F0000003F0000007F0000007E0
000007E0000007E000000FE000000FC000000FC000000FC000001FC000001F8000001F80
007FFFFFE0FFFFFFE0FFFFFFC0003F0000003F0000007F0000007E0000007E0000007E00
0000FE000000FC000000FC000000FC000001FC000001F8000001F8000001F8000003F800
0003F0000003F0000003F0000007F0000007E0000007E0000007E000000FE000000FC000
000FC000000FC007801FC007001F8007001F800F001F800E003F801E003F001C003F003C
003F0038003F0070001F00F0001F01E0000F03C0000F87800007FE000001F800001B3F78
BD20>I<007C0000000001FF0000070003C780001F800703C0001F800F03E0001F800E03
E0003F801C03E0003F801C07E0003F003807E0003F003807E0007F007807E0007F00700F
E0007E00700FC0007E00701FC000FE00F01F8000FE00E01F8000FC00003F8000FC00003F
0001FC00003F0001FC00007F0001F800007E0001F800007E0003F80000FE0003F80000FC
0003F00000FC0003F00000FC0007F00001FC0007F00001F80007E00001F80007E00001F8
000FE03803F8000FE07803F0000FC07003F0000FC07003F0000FC07003F0001FC0F003F0
001F80E003F0003F80E001F0003F81E001F0007F81C001F800EF83C000F801EF8380007C
03C78780003E0F07C700001FFE01FE000003F00078002D2D78AB34>I<00003C00000000
007E0000000000FE0000000000FF0000000000FF80000000007F80000000003FC0000000
001FC00000000007E00000000003F00000000001F00000000000F800000000007C000000
00003C00000000001C000000000000000000000000000000000000000000000000000000
000000000000000000000000001F80000000007FE000000001F07070000007C039F80000
0F801DF800001F001FF800003E000FF000007E000FF00000FC000FF00001F80007F00001
F80007E00003F00007E00007F00007E00007E0000FE0000FE0000FC0000FE0000FC0001F
C0000FC0001FC0001FC0003FC0001F80003F80001F80003F80001F80003F80003F80007F
80003F00007F00003F00007F00003F00007F00007F00007F00007E0000FE00007E0000FE
00007E0000FE0000FE0380FE0000FC0780FE0000FC0700FE0000FC07007E0001FC07007E
0001FC0F007E0003F80E007E0007F80E003E000FF81E003E000FF81C001F001CF81C001F
0038F838000F80F078780007C3E07C700001FF801FE000007E00078000294276C032>
224 D<000000003C000000007E00000000FE00000001FE00000007FC0000000FF8000000
1FE00000003FC00000007F00000000FC00000001F800000007E00000000FC00000000F00
0000000E0000000000000000000000000000000000000000000000000000000000000000
00000FE00000007FF8000001F83E000007C00F00001F800780003F000780007E0007C000
FC0003C001F80003C003F00007C007F000078007E00007800FE0000F801FC0000F001FC0
001F003F80003E003F8000FC003F8007F0007F80FFC0007FFFFE00007FFFC000007F0000
0000FF00000000FE00000000FE00000000FE00000000FE00000000FE00000000FC000000
00FC00000000FC00000000FC00000000FC00000180FC000003C07C000007807C00000780
7E00000F003E00001E003E00007C001F0000F0000F0003E00007800F800003C07E000001
FFF80000003FC00000274275C02D>233 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fh ecsx1200 12 8
/Fh 8 121 df<00000F800000001FC00000003FC0000000FFC0000003FFC000001FFFC0
003FFFFFC0007FFFFFC000FFFFFFC000FFFFFFC000FFFFFFC0007FF3FFC0002003FFC000
0003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC00000
03FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003
FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FF
C0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0
000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC000
0003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC00000
03FFC0000003FFC0000003FFC0000003FFC0000003FFC0003FFFFFFFF87FFFFFFFFCFFFF
FFFFFCFFFFFFFFFC7FFFFFFFFC3FFFFFFFF8264377C238>49 D<0000FFC00000000FFFFC
0000003FFFFF800000FFFFFFE00001FFFFFFF00003FFFFFFFC0007FFFFFFFE000FFFFFFF
FF001FFFFFFFFF803FFF00FFFFC03FFC003FFFC07FF0000FFFE07FE00007FFE0FFC00003
FFF0FFC00001FFF0FF800001FFF07F800000FFF83F000000FFF81F000000FFF81F000000
FFF80E0000007FF8060000007FF8000000007FF800000000FFF800000000FFF800000000
FFF800000000FFF000000001FFF000000001FFF000000003FFE000000003FFC000000007
FFC000000007FF800000000FFF000000001FFE000000003FFC000000007FF800000000FF
F000000001FFE000000003FFC000000007FF800000000FFE000000001FFC000000003FF8
000000007FE000000000FFC000000001FF8000000003FF0000000007FE000000000FF800
0000001FF0000000003FE000000000FFC000000001FF8000000003FE0000000007FC0000
00000FF8000000001FF0000000003FFFFFFFFFF07FFFFFFFFFF8FFFFFFFFFFF8FFFFFFFF
FFF8FFFFFFFFFFF8FFFFFFFFFFF8FFFFFFFFFFF87FFFFFFFFFF83FFFFFFFFFF02D437BC2
38>I<3FFFFFFFFFFFC07FFFFFFFFFFFE0FFFFFFFFFFFFE0FFFFFFFFFFFFE0FFFFFFFFFF
FFE0FFFFFFFFFFFFE0FFFFFFFFFFFFE0FFFFFFFFFFFFE0FFFFFFFFFFFFC0FFF800000000
00FFF80000000000FFF80000000000FFF80000000000FFF80000000000FFF80000000000
FFF80000000000FFF80000000000FFF80000000000FFF80000000000FFF80000000000FF
F80000000000FFF80000000000FFF80000000000FFF80000000000FFF80000000000FFF8
0000000000FFF80000000000FFF80000000000FFF80000000000FFFFFFFFFFFE00FFFFFF
FFFFFF00FFFFFFFFFFFF00FFFFFFFFFFFF00FFFFFFFFFFFF00FFFFFFFFFFFF00FFFFFFFF
FFFF00FFFFFFFFFFFE00FFF80000000000FFF80000000000FFF80000000000FFF8000000
0000FFF80000000000FFF80000000000FFF80000000000FFF80000000000FFF800000000
00FFF80000000000FFF80000000000FFF80000000000FFF80000000000FFF80000000000
FFF80000000000FFF80000000000FFF80000000000FFF80000000000FFF80000000000FF
F80000000000FFF80000000000FFF80000000000FFFFFFFFFFFFE0FFFFFFFFFFFFF0FFFF
FFFFFFFFF0FFFFFFFFFFFFF0FFFFFFFFFFFFF0FFFFFFFFFFFFF0FFFFFFFFFFFFF0FFFFFF
FFFFFFF07FFFFFFFFFFFF03FFFFFFFFFFFE0344577C443>69 D<00003FFC00000003FFFF
C000001FFFFFF000007FFFFFFC0000FFFFFFFE0001FFFFFFFF8003FFF007FF8007FFC000
FF800FFF00003F801FFE00001F001FFE00000F003FFC000007003FFC000003003FF80000
00007FF8000000007FF8000000007FF8000000007FF000000000FFF000000000FFF00000
0000FFF000000000FFF000000000FFF000000000FFF000000000FFF000000000FFF00000
0000FFF000000000FFF000000000FFF000000000FFF000000000FFF000000000FFF00000
00007FF8000000007FF8000000007FF8000000007FF8000000003FFC000000003FFC0000
01801FFE000003801FFE00000F800FFF00001F8007FFC000FFC007FFF007FFC003FFFFFF
FFC000FFFFFFFFC0007FFFFFFF00001FFFFFFC000003FFFFE00000007FFC00002A317CAF
32>99 D<00007FF800000003FFFF0000001FFFFFC000003FFFFFF00000FFFFFFF80001FF
FFFFFC0003FFF01FFE0007FF8007FF000FFF0003FF000FFE0001FF801FFC0000FF801FFC
0000FFC03FF80000FFC03FF800007FE07FF000007FE07FF000007FE07FF000007FE07FF0
00003FF0FFF000003FF0FFF000003FF0FFE000003FF0FFE000003FF0FFE000003FF0FFFF
FFFFFFF0FFFFFFFFFFF0FFFFFFFFFFF0FFFFFFFFFFF0FFFFFFFFFFF0FFFFFFFFFFE0FFF0
00000000FFF0000000007FF0000000007FF0000000007FF0000000007FF8000000003FF8
000000003FF8000000001FFC000000C01FFE000001C00FFE000007C007FF00000FC007FF
C0007FE003FFF803FFE001FFFFFFFFE0007FFFFFFFE0003FFFFFFF80000FFFFFFE000003
FFFFF00000003FFE00002C317DAF33>101 D<3FF07FF8FFF8FFF8FFF8FFF8FFF8FFF8FF
F8FFF8FFF8FFF87FF000000000000000000000000000000000000000000000000000001F
F03FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87F
F87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87F
F87FF87FF87FF87FF87FF87FF87FF83FF81FF00D487AC71B>105
D<000000F83FC007F87FE01FF8FFE07FF8FFE0FFF8FFE1FFF8FFE3FFF8FFE7FFF8FFEFFF
F8FFEFFF00FFFFF800FFFFF000FFFFC000FFFF8000FFFF0000FFFF0000FFFE0000FFFC00
00FFFC0000FFF80000FFF80000FFF80000FFF00000FFF00000FFF00000FFF00000FFF000
00FFF00000FFF00000FFF00000FFF00000FFF00000FFF00000FFF00000FFF00000FFF000
00FFF00000FFF00000FFF00000FFF00000FFF00000FFF00000FFF00000FFF00000FFF000
007FF000003FE000001D2F79AE26>114 D<7FC000001FF07FF000007FF07FF000007FF0
3FF80000FFE01FFC0001FFC01FFE0003FFC00FFF0007FF8007FF8007FF0003FF800FFE00
01FFC01FFC0000FFE03FF800007FF07FF000003FF87FF000003FF8FFE000001FFDFFC000
000FFFFF80000007FFFF00000003FFFE00000001FFFE00000000FFFC000000007FF80000
00007FF0000000003FF0000000007FF000000000FFF800000001FFFC00000003FFFE0000
0003FFFF00000007FDFF8000000FFCFFC000001FF87FE000003FF07FE000007FE03FF000
007FE01FF80000FFC00FFC0001FF800FFE0003FF8007FF0007FF0003FF800FFE0001FF80
1FFC0001FFC01FFC0000FFE03FF800007FF07FF000003FF8FFE000003FFCFFE000001FFC
7FC000000FF82E2E7EAD33>120 D E
%EndDVIPSBitmapFont
/Fi 142[76 113[{}1 99.6264 /Dingbats rf
%DVIPSBitmapFont: Fj ecbx1728 17.28 6
/Fj 6 118 df<000003FFE000000000003FFFFE0000000000FFFFFFC000000003FFFFFF
F00000000FFFFFFFFC0000003FF007FFFF0000007F8000FFFFC00000FE00003FFFE00003
F800001FFFF00003F0000007FFF80007E0000007FFFC000FC0000003FFFE001F80000001
FFFF001F00000000FFFF003F00000000FFFF803E000000007FFF807FF00000007FFFC07F
FC0000003FFFC07FFE0000003FFFE0FFFF0000003FFFE0FFFF0000003FFFE0FFFF800000
1FFFF0FFFF8000001FFFF0FFFF8000001FFFF0FFFF8000001FFFF0FFFF8000001FFFF0FF
FF8000001FFFF0FFFF8000001FFFF07FFF0000001FFFF03FFE0000001FFFF01FFC000000
1FFFF00FF80000001FFFF001C00000001FFFE000000000003FFFE000000000003FFFE000
000000003FFFE000000000003FFFC000000000007FFFC000000000007FFF800000000000
FFFF800000000000FFFF000000000000FFFE000000000001FFFE000000000001FFFC0000
00000003FFF8000000000007FFF0000000000007FFE000000000000FFFC000000000001F
FF8000000000001FFF0000000000003FFE0000000000007FFC0000000000007FF8000000
000000FFE0000000000001FFC0000000000003FF80000000000007FF00000000000007FE
0000000000000FF80000000000001FF00000000000003FE00000000000007FC000000000
0000FF80000000000001FE00000000000003FC000001F0000007F8000001F0000007F000
0001F000000FE0000001F000001FC0000003E000003F80000003E000007F00000003E000
00FE00000003E00001FC00000003E00003F000000007E00007E000000007E00007C00000
0007C0000F800000000FC0001F000000003FC0003FFFFFFFFFFFC0007FFFFFFFFFFFC000
FFFFFFFFFFFFC001FFFFFFFFFFFFC003FFFFFFFFFFFFC007FFFFFFFFFFFF800FFFFFFFFF
FFFF800FFFFFFFFFFFFF801FFFFFFFFFFFFF803FFFFFFFFFFFFF807FFFFFFFFFFFFF80FF
FFFFFFFFFFFF80FFFFFFFFFFFFFF00FFFFFFFFFFFFFF00FFFFFFFFFFFFFF00FFFFFFFFFF
FFFF003C5E78DD4D>50 D<000000FFF80000070000000FFFFF80000F0000007FFFFFF000
1F000001FFFFFFFC001F000007FFFFFFFF003F00001FFF800FFFC07F00003FF80000FFE0
FF0000FFE000001FF1FF0001FFC0000007F9FF0003FF00000001FFFF0003FE00000000FF
FF0007FC000000007FFF000FFC000000003FFF000FF8000000001FFF001FF8000000000F
FF001FF00000000007FF003FF00000000007FF003FF00000000003FF007FE00000000001
FF007FE00000000001FF007FE00000000000FF007FE00000000000FF00FFE00000000000
FF00FFE000000000007F00FFE000000000007F00FFF000000000007F00FFF00000000000
3F00FFF000000000003F00FFF800000000003F00FFF800000000003F00FFFC0000000000
1F00FFFE00000000001F00FFFF00000000001F00FFFF80000000001F007FFFC000000000
00007FFFE00000000000007FFFF80000000000003FFFFF0000000000003FFFFFF0000000
00003FFFFFFF00000000001FFFFFFFF8000000001FFFFFFFFF800000000FFFFFFFFFF800
000007FFFFFFFFFF80000003FFFFFFFFFFE0000003FFFFFFFFFFF8000001FFFFFFFFFFFE
000000FFFFFFFFFFFF8000007FFFFFFFFFFFC000001FFFFFFFFFFFE000000FFFFFFFFFFF
F0000003FFFFFFFFFFF8000001FFFFFFFFFFFC0000007FFFFFFFFFFE0000000FFFFFFFFF
FF00000001FFFFFFFFFF000000000FFFFFFFFF8000000000FFFFFFFF80000000000FFFFF
FFC000000000007FFFFFC0000000000007FFFFE0000000000001FFFFE00000000000007F
FFF00000000000003FFFF00000000000000FFFF000000000000007FFF000000000000003
FFF800000000000003FFF8F8000000000001FFF8F8000000000000FFF8F8000000000000
FFF8F80000000000007FF8F80000000000007FF8F80000000000007FF8FC000000000000
3FF8FC0000000000003FF8FC0000000000003FF8FC0000000000003FF8FE000000000000
3FF0FE0000000000003FF0FE0000000000003FF0FF0000000000003FF0FF000000000000
3FF0FF8000000000007FE0FFC000000000007FE0FFC000000000007FC0FFE00000000000
FFC0FFF00000000000FF80FFF80000000001FF80FFFC0000000001FF00FFFE0000000003
FF00FFFF8000000007FE00FFFFC00000000FFC00FF9FF00000001FF800FF8FFE0000007F
F000FF03FFC00001FFE000FE01FFFE000FFF8000FC007FFFFFFFFF0000F8001FFFFFFFFC
0000F80003FFFFFFF00000F000003FFFFF800000E0000001FFF8000000456678E356>83
D<0000003FFE000000000003FFFFE0000000001FFFFFFC000000007FFFFFFF00000001FF
F80FFFC0000007FFC003FFE000000FFF0000FFF000001FFE00007FF800003FFC00003FFC
00007FF800001FFE0000FFF000000FFF0001FFF000000FFF0003FFE0000007FF8007FFE0
000007FF8007FFC0000007FFC00FFFC0000003FFC00FFFC0000003FFE01FFF80000003FF
E01FFF80000001FFE03FFF80000001FFF03FFF80000001FFF03FFF80000001FFF07FFF00
000001FFF07FFF00000001FFF07FFF00000000FFF87FFF00000000FFF87FFF00000000FF
F8FFFF00000000FFF8FFFF00000000FFF8FFFF00000000FFF8FFFFFFFFFFFFFFF8FFFFFF
FFFFFFFFF8FFFFFFFFFFFFFFF8FFFFFFFFFFFFFFF8FFFF000000000000FFFF0000000000
00FFFF000000000000FFFF000000000000FFFF000000000000FFFF0000000000007FFF00
00000000007FFF0000000000007FFF0000000000007FFF0000000000007FFF8000000000
003FFF8000000000003FFF8000000000001FFF8000000000001FFF8000000000F81FFFC0
00000000F80FFFC000000001F807FFC000000001F007FFE000000001F003FFE000000003
F001FFF000000007E001FFF800000007C000FFF80000000FC0007FFC0000001F80003FFE
0000003F00001FFF800000FE000007FFC00003FC000003FFF8000FF8000000FFFF007FE0
0000003FFFFFFF800000000FFFFFFE0000000001FFFFF800000000000FFF8000003D437C
C146>101 D<00000003F8000000000FFE000000001FFF000000003FFF800000007FFFC0
0000007FFFC0000000FFFFE0000000FFFFE0000000FFFFE0000000FFFFE0000000FFFFE0
000000FFFFE0000000FFFFE00000007FFFC00000007FFFC00000003FFF800000001FFF00
0000000FFE0000000003F800000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000003FFE000007FFFFFE000007FFFFFE000007FFFFFE000007FFFFFE0
00007FFFFFE00000003FFFE00000001FFFE00000000FFFE00000000FFFE00000000FFFE0
0000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE0
0000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE0
0000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE0
0000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE0
0000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE0
0000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE0
0000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE0
0000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE0
0000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE0
0000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE0
0000000FFFE00000000FFFE00000000FFFE00FF0000FFFE01FF8000FFFE03FFC000FFFE0
7FFE000FFFC0FFFF000FFFC0FFFF001FFFC0FFFF001FFF80FFFF001FFF80FFFF001FFF00
FFFF003FFF00FFFF003FFE007FFE007FFC007FFC007FF8003FF800FFF0001FF001FFE000
0FFC07FFC00007FFFFFF000003FFFFFC0000007FFFF00000000FFF0000002B8288E42F>
106 D<000007C00000000007C00000000007C00000000007C00000000007C00000000007
C0000000000FC0000000000FC0000000000FC0000000000FC0000000000FC0000000001F
C0000000001FC0000000001FC0000000003FC0000000003FC0000000007FC0000000007F
C000000000FFC000000001FFC000000001FFC000000003FFC000000007FFC00000000FFF
C00000001FFFC00000007FFFC0000001FFFFC000000FFFFFFFFFF8FFFFFFFFFFF8FFFFFF
FFFFF8FFFFFFFFFFF8FFFFFFFFFFF8001FFFC00000001FFFC00000001FFFC00000001FFF
C00000001FFFC00000001FFFC00000001FFFC00000001FFFC00000001FFFC00000001FFF
C00000001FFFC00000001FFFC00000001FFFC00000001FFFC00000001FFFC00000001FFF
C00000001FFFC00000001FFFC00000001FFFC00000001FFFC00000001FFFC00000001FFF
C00000001FFFC00000001FFFC00000001FFFC00000001FFFC00000001FFFC00000001FFF
C00000001FFFC00000001FFFC00000001FFFC00000001FFFC00000001FFFC00000001FFF
C00000001FFFC0001F001FFFC0001F001FFFC0001F001FFFC0001F001FFFC0001F001FFF
C0001F001FFFC0001F001FFFC0001F001FFFC0001F001FFFC0001F001FFFC0001F001FFF
C0001F001FFFC0001F000FFFC0003E000FFFE0003E000FFFE0003E0007FFE0007C0007FF
F0007C0003FFF000F80001FFF800F80000FFFC01F000007FFF07E000003FFFFFC000000F
FFFF80000003FFFE000000003FF800305C7DDA3C>116 D<0007FF80000001FFE000FFFF
FF80003FFFFFE000FFFFFF80003FFFFFE000FFFFFF80003FFFFFE000FFFFFF80003FFFFF
E000FFFFFF80003FFFFFE00000FFFF8000003FFFE000007FFF8000001FFFE000003FFF80
00000FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003FFF8000000FFFE000
003FFF8000000FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003FFF800000
0FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003F
FF8000000FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003FFF8000000FFF
E000003FFF8000000FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003FFF80
00000FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003FFF8000000FFFE000
003FFF8000000FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003FFF800000
0FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003F
FF8000000FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003FFF8000000FFF
E000003FFF8000000FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003FFF80
00000FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003FFF8000001FFFE000
003FFF8000001FFFE000003FFF8000001FFFE000003FFF8000001FFFE000003FFF800000
3FFFE000003FFF8000003FFFE000001FFF8000007FFFE000001FFF8000007FFFE000001F
FF800000FFFFE000001FFFC00001EFFFE000000FFFC00003CFFFE0000007FFC00007CFFF
F0000007FFE0000F8FFFF8000003FFF0001F0FFFFFF80001FFFC00FE0FFFFFF800007FFF
FFF80FFFFFF800001FFFFFF00FFFFFF8000007FFFFC00FFFFFF80000003FFE000FFF0000
4D427BC056>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fk ecrm1200 12 42
/Fk 42 239 df<1E007F80FF80FFC0FFC0FFE0FFE0FFE07FE01E60006000600060006000
E000C000C000C001C0018003800300070006000E001C003800700060000B1D78C41B>39
D<00000C00001C0000380000700000E00001C00003C0000780000F00000F00001E00003C
00003C0000780000F80000F00001F00001E00003E00003E00007C00007C00007C0000F80
000F80000F80001F00001F00001F00003F00003F00003E00003E00007E00007E00007E00
007E00007C00007C00007C0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC00
00FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC00
007C00007C00007C00007E00007E00007E00007E00003E00003E00003F00003F00001F00
001F00001F00000F80000F80000F800007C00007C00007C00003E00003E00001E00001F0
0000F00000F800007800003C00003C00001E00000F00000F000007800003C00001C00000
E000007000003800001C00000C166476CA26>I<C00000E000007000003800001C00000E
00000F000007800003C00003C00001E00000F00000F000007800007C00003C00003E0000
1E00001F00001F00000F80000F80000F800007C00007C00007C00003E00003E00003E000
03F00003F00001F00001F00001F80001F80001F80001F80000F80000F80000F80000FC00
00FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC00
00FC0000FC0000FC0000FC0000FC0000FC0000FC0000F80000F80000F80001F80001F800
01F80001F80001F00001F00003F00003F00003E00003E00003E00007C00007C00007C000
0F80000F80000F80001F00001F00001E00003E00003C00007C0000780000F00000F00001
E00003C00003C0000780000F00000E00001C0000380000700000E00000C0000016647BCA
26>I<1E007F80FF80FFC0FFC0FFE0FFE0FFE07FE01E60006000600060006000E000C000
C000C001C0018003800300070006000E001C003800700060000B1D78891B>44
D<1E007F807F80FFC0FFC0FFC0FFC07F807F801E000A0A78891B>46
D<0000FF00000007FFE000001F81F800003E007C0000FC003F0001F8001F8001F0000F80
03E00007C007C00003E007C00003E00FC00003F00F800001F01F800001F81F800001F83F
800001FC3F800001FC3F800001FC3F000000FC7F000000FE7F000000FE7F000000FE7F00
0000FE7F000000FEFF000000FFFF000000FFFF000000FFFF000000FFFF000000FFFF0000
00FFFF000000FFFF000000FFFF000000FFFF000000FFFF000000FFFF000000FFFF000000
FFFF000000FFFF000000FFFF000000FFFF000000FFFF000000FFFF000000FFFF000000FF
FF000000FFFF000000FF7F000000FE7F000000FE7F000000FE7F000000FE7F000000FE7F
800001FE3F800001FC3F800001FC3F800001FC1F800001F81F800001F80FC00003F00FC0
0003F00FC00003F007E00007E003E00007C003F0000FC001F8001F8000FC003F00003E00
7C00001F81F8000007FFE0000000FF000028447CC131>48 D<000030000000F0000001F0
000003F000001FF00000FFF000FFFFF000FFE7F000FF07F0000007F0000007F0000007F0
000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0
000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0
000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0
000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0
000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0
000007F0000007F0000007F0000007F000000FF800001FFC007FFFFFFF7FFFFFFF7FFFFF
FF204278C131>I<1E007F807F80FFC0FFC0FFC0FFC07F807F801E000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
00001E007F807F80FFC0FFC0FFC0FFC07F807F801E000A2B78AA1B>58
D<00000000C00000000000000001E00000000000000001E00000000000000001E0000000
0000000003F00000000000000003F00000000000000003F00000000000000007F8000000
0000000007F80000000000000007F8000000000000000FFC000000000000000FFC000000
000000000FFC0000000000000019FE0000000000000019FE0000000000000019FE000000
0000000030FF0000000000000030FF0000000000000070FF80000000000000607F800000
00000000607F80000000000000E07FC0000000000000C03FC0000000000000C03FC00000
00000001C03FE0000000000001801FE0000000000001801FE0000000000003001FF00000
00000003000FF0000000000003000FF0000000000006000FF80000000000060007F80000
000000060007F800000000000C0003FC00000000000C0003FC00000000000C0003FC0000
000000180001FE0000000000180001FE0000000000180001FE0000000000300000FF0000
000000300000FF0000000000700000FF80000000006000007F80000000006000007F8000
000000E000007FC000000000FFFFFFFFC000000000FFFFFFFFC000000001FFFFFFFFE000
0000018000001FE0000000018000001FE0000000030000001FF0000000030000000FF000
0000030000000FF0000000060000000FF80000000600000007F80000000600000007F800
00000C00000003FC0000000C00000003FC0000000C00000003FC0000001800000001FE00
00001800000001FE0000001800000001FE0000003000000000FF0000003000000000FF00
00007800000000FF800000F800000000FF800001FC00000000FFC0000FFF00000003FFE0
00FFFFE000007FFFFFC0FFFFE000007FFFFFC0FFFFE000007FFFFFC042477DC649>65
D<0000000FFE000060000000FFFFC000E0000003FFFFF000E000000FFC01FC01E000003F
C0003E01E00000FF00000F83E00003FC000003C7E00007F8000001E7E0000FF0000000FF
E0001FE00000007FE0003FC00000003FE0007F800000001FE000FF000000000FE001FE00
0000000FE001FC0000000007E003FC0000000007E007F80000000003E007F80000000003
E00FF00000000001E00FF00000000001E01FE00000000000E01FE00000000000E03FE000
00000000E03FE00000000000E03FC00000000000607FC00000000000607FC00000000000
607FC00000000000607FC0000000000000FF80000000000000FF80000000000000FF8000
0000000000FF80000000000000FF80000000000000FF80000000000000FF800000000000
00FF80000000000000FF80000000000000FF80000000000000FF80000000000000FF8000
0000000000FF80000000000000FF800000000000007FC00000000000007FC00000000000
007FC00000000000607FC00000000000603FC00000000000603FE00000000000603FE000
00000000601FE00000000000E01FF00000000000E00FF00000000000C00FF00000000000
C007F80000000001C007F800000000018003FC00000000038001FC00000000038001FE00
000000070000FF000000000600007F800000000E00003FC00000001C00001FE000000038
00000FF000000078000007F8000000F0000003FC000001E0000000FF000007800000003F
C0001F000000000FFC00FC0000000003FFFFF00000000000FFFFC000000000000FFE0000
003B487BC546>67 D<FFFFFFFFFFFFF800FFFFFFFFFFFFF800FFFFFFFFFFFFF80001FFC0
00007FF800007F80000007FC00007F80000001FC00007F80000000FC00007F800000007C
00007F800000003C00007F800000001C00007F800000001C00007F800000000E00007F80
0000000E00007F800000000E00007F800000000600007F800000000600007F8000000006
00007F800000000600007F800000000700007F800006000300007F800006000300007F80
0006000300007F800006000000007F800006000000007F800006000000007F8000060000
00007F80000E000000007F80000E000000007F80001E000000007F80003E000000007F80
00FE000000007FFFFFFE000000007FFFFFFE000000007FFFFFFE000000007F8000FE0000
00007F80003E000000007F80001E000000007F80000E000000007F80000E000000007F80
0006000000007F800006000000007F800006000000007F8000060000C0007F8000060000
C0007F8000060000C0007F800006000180007F800000000180007F800000000180007F80
0000000180007F800000000180007F800000000380007F800000000380007F8000000003
00007F800000000300007F800000000700007F800000000700007F800000000F00007F80
0000000F00007F800000001E00007F800000001E00007F800000003E00007F800000007E
00007F80000001FE00007F80000007FE0001FFC000007FFE00FFFFFFFFFFFFFC00FFFFFF
FFFFFFFC00FFFFFFFFFFFFFC003A447CC342>69 D<FFFFFFF8000000FFFFFFF8000000FF
FFFFF800000001FFE000000000007FC000000000007F8000000000007F8000000000007F
8000000000007F8000000000007F8000000000007F8000000000007F8000000000007F80
00000000007F8000000000007F8000000000007F8000000000007F8000000000007F8000
000000007F8000000000007F8000000000007F8000000000007F8000000000007F800000
0000007F8000000000007F8000000000007F8000000000007F8000000000007F80000000
00007F8000000000007F8000000000007F8000000000007F8000000000007F8000000000
007F8000000000007F8000000000007F8000000000007F8000000000007F800000000000
7F8000000000007F8000000000007F8000000000007F8000000000007F8000000030007F
8000000030007F8000000030007F8000000030007F8000000070007F8000000060007F80
00000060007F8000000060007F8000000060007F8000000060007F80000000E0007F8000
0000E0007F80000000E0007F80000001C0007F80000001C0007F80000003C0007F800000
07C0007F80000007C0007F8000000FC0007F8000003FC0007F8000007FC0007F800001FF
C001FFC0001FFF80FFFFFFFFFFFF80FFFFFFFFFFFF80FFFFFFFFFFFF8034447CC33D>76
D<0000001FFC00000000000001FFFFC0000000000007F007F000000000001F8000FC0000
0000007E00003F0000000001F800000FC000000003F0000007E000000007E0000003F000
00000FC0000001F80000001F80000000FC0000003F000000007E0000007E000000003F00
0000FE000000003F800001FC000000001FC00003F8000000000FE00003F8000000000FE0
0007F00000000007F00007F00000000007F0000FF00000000007F8000FE00000000003F8
001FE00000000003FC001FE00000000003FC003FC00000000001FE003FC00000000001FE
003FC00000000001FE007FC00000000001FF007FC00000000001FF007F800000000000FF
007F800000000000FF007F800000000000FF00FF800000000000FF80FF800000000000FF
80FF800000000000FF80FF800000000000FF80FF800000000000FF80FF800000000000FF
80FF800000000000FF80FF800000000000FF80FF800000000000FF80FF800000000000FF
80FF800000000000FF80FF800000000000FF80FF800000000000FF807FC00000000001FF
007FC00000000001FF007FC00000000001FF007FC00000000001FF003FC00000000001FE
003FE00000000003FE003FE00000000003FE001FE00000000003FC001FE00000000003FC
000FF00000000007F8000FF00000000007F80007F8000000000FF00007F8000000000FF0
0003F8000000000FE00003FC000000001FE00001FE000000003FC00000FE000000003F80
00007F000000007F0000007F80000000FF0000003F80000000FE0000001FC0000001FC00
000007E0000003F000000003F0000007E000000001FC00001FC0000000007E00003F0000
0000001F8000FC000000000007F007F0000000000001FFFFC00000000000001FFC000000
0041487BC54C>79 D<FFFFFFFFFC0000FFFFFFFFFFC000FFFFFFFFFFF80001FFC0000FFC
00007F800001FF00007F8000007F80007F8000001FE0007F8000000FE0007F80000007F0
007F80000007F8007F80000003FC007F80000003FC007F80000003FE007F80000001FE00
7F80000001FE007F80000001FF007F80000001FF007F80000001FF007F80000001FF007F
80000001FF007F80000001FF007F80000001FF007F80000001FE007F80000001FE007F80
000003FE007F80000003FC007F80000003FC007F80000007F8007F80000007F0007F8000
000FE0007F8000001FC0007F8000007F80007F800001FE00007F80000FFC00007FFFFFFF
F000007FFFFFFF8000007F8000000000007F8000000000007F8000000000007F80000000
00007F8000000000007F8000000000007F8000000000007F8000000000007F8000000000
007F8000000000007F8000000000007F8000000000007F8000000000007F800000000000
7F8000000000007F8000000000007F8000000000007F8000000000007F8000000000007F
8000000000007F8000000000007F8000000000007F8000000000007F8000000000007F80
00000000007F8000000000007F8000000000007F800000000001FFE000000000FFFFFFC0
000000FFFFFFC0000000FFFFFFC000000038447CC342>I<3FFFFFFFFFFFFFF83FFFFFFF
FFFFFFF83FFFFFFFFFFFFFF83FF0001FF8001FF83F80000FF00003F83E00000FF00000F8
7C00000FF000007C7800000FF000003C7800000FF000003C7000000FF000001C7000000F
F000001C7000000FF000001C6000000FF000000C6000000FF000000C6000000FF000000C
6000000FF000000C6000000FF000000CC000000FF0000006C000000FF0000006C000000F
F0000006C000000FF0000006C000000FF00000060000000FF00000000000000FF0000000
0000000FF00000000000000FF00000000000000FF00000000000000FF00000000000000F
F00000000000000FF00000000000000FF00000000000000FF00000000000000FF0000000
0000000FF00000000000000FF00000000000000FF00000000000000FF00000000000000F
F00000000000000FF00000000000000FF00000000000000FF00000000000000FF0000000
0000000FF00000000000000FF00000000000000FF00000000000000FF00000000000000F
F00000000000000FF00000000000000FF00000000000000FF00000000000000FF0000000
0000000FF00000000000000FF00000000000000FF00000000000000FF00000000000000F
F00000000000000FF00000000000000FF00000000000000FF00000000000000FF0000000
0000000FF00000000000000FF00000000000000FF00000000000001FF80000000000007F
FE0000000001FFFFFFFF80000001FFFFFFFF80000001FFFFFFFF80003F447DC346>84
D<0007FC000000003FFF80000000F80FE0000003C003F00000070001F800000E0000FC00
000FC0007E00001FE0007F00001FF0003F80001FF0003F80001FF0003F80001FF0001FC0
001FF0001FC0000FE0001FC0000380001FC0000000001FC0000000001FC0000000001FC0
000000001FC00000000FFFC0000001FFFFC000000FFE1FC000003FC01FC00000FF001FC0
0003FC001FC00007F8001FC0000FF0001FC0001FE0001FC0003FC0001FC0007FC0001FC0
007F80001FC0007F80001FC060FF00001FC060FF00001FC060FF00001FC060FF00003FC0
60FF00003FC060FF00003FC060FF80007FC0607F8000EFC0607FC000C7E0C03FC001C7E0
C01FE00783F1C007F81E03FF8001FFFC01FF00001FE0007C002B2E7CAC31>97
D<00007F80000003FFF000000FC07C00003F000F0000FC00038001F80001C003F8000FC0
07F0001FE007E0003FE00FE0003FE01FC0003FE01FC0003FE03F80003FE03F80001FC07F
800007007F800000007F800000007F00000000FF00000000FF00000000FF00000000FF00
000000FF00000000FF00000000FF00000000FF00000000FF00000000FF00000000FF0000
00007F000000007F800000007F800000003F800000003F800000303FC00000301FC00000
700FE00000600FE00000E007F00000C003F80001C001F800038000FC000700003F001E00
001FC078000007FFF0000000FF8000242E7DAC2B>99 D<000000007F000000003FFF0000
00003FFF000000003FFF0000000001FF0000000000FF00000000007F00000000007F0000
0000007F00000000007F00000000007F00000000007F00000000007F00000000007F0000
0000007F00000000007F00000000007F00000000007F00000000007F00000000007F0000
0000007F00000000007F00000000007F00000000007F00000000007F0000007F807F0000
03FFF07F00000FC07C7F00003F000E7F00007E00077F0000FC0003FF0003F80001FF0007
F00000FF0007E00000FF000FE000007F001FC000007F001FC000007F003F8000007F003F
8000007F007F8000007F007F8000007F007F0000007F00FF0000007F00FF0000007F00FF
0000007F00FF0000007F00FF0000007F00FF0000007F00FF0000007F00FF0000007F00FF
0000007F00FF0000007F00FF0000007F007F0000007F007F8000007F007F8000007F003F
8000007F003F8000007F001FC000007F001FC000007F000FC00000FF000FE00000FF0007
F00001FF0003F00003FF0001F800077F8000FC000E7FC0003F001C7FFE000FC0F87FFE00
03FFE07FFE00007F007F002F467DC436>I<0001FE00000007FFC000001F03F000007E00
FC0000FC007E0001F8003F0003F0003F0007E0001F800FE0001FC00FC0000FC01FC0000F
C03F80000FE03F800007E03F800007E07F800007F07F000007F07F000007F0FF000007F0
FF000007F0FF000007F0FFFFFFFFF0FFFFFFFFF0FF00000000FF00000000FF00000000FF
00000000FF00000000FF000000007F000000007F000000007F800000007F800000003F80
0000003F800000301FC00000301FC00000700FC00000600FE00000E007F00000C003F000
01C001F800038000FC000700003E001E00001F80F8000003FFE0000000FF0000242E7DAC
2B>I<00000FE00000007FF8000001F81E000003F03F00000FE07F80001FC0FF80001F80
FF80003F80FF80007F00FF80007F00FF80007F007F0000FE001C0000FE00000000FE0000
0000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE000000
00FE00000000FE00000000FE00000000FE00000000FE00000000FE000000FFFFFF8000FF
FFFF8000FFFFFF800000FE00000000FE00000000FE00000000FE00000000FE00000000FE
00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00
000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE0000
0000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE000000
00FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000
FE00000000FE00000001FF8000007FFFFF00007FFFFF00007FFFFF000021467EC51E>I<
000000000F800001FC007FE0000FFF81F0F0003F07E381F000FC01FF03F001F800FE01F0
03F0007E01E007F0007F000007E0003F00000FE0003F80000FC0001F80001FC0001FC000
1FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC000
1FC0001FC0001FC0001FC0000FC0001F80000FE0003F800007E0003F000007F0007F0000
03F0007E000001F800FC000001FC01F8000003BF07E00000030FFF8000000701FC000000
0700000000000700000000000F00000000000F00000000000F00000000000F8000000000
07C00000000007E00000000007FFFFF8000003FFFFFF000003FFFFFFE00001FFFFFFF800
007FFFFFFC0001FFFFFFFE0007C0000FFF000F800000FF003F0000003F803E0000001F80
7C0000000FC07C0000000FC0F800000007C0F800000007C0F800000007C0F800000007C0
F800000007C0FC0000000FC07C0000000F807E0000001F803E0000001F001F0000003E00
0F8000007C0007E00001F80001F80007E000007F003F8000001FFFFE00000001FFE00000
2C427DAC31>I<01FC00000000FFFC00000000FFFC00000000FFFC0000000007FC000000
0003FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC000000
0001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC000000
0001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC000000
0001FC0000000001FC0000000001FC01FE000001FC07FFC00001FC1E07F00001FC3801F8
0001FC7001FC0001FCE000FC0001FDC000FE0001FD8000FE0001FF80007F0001FF00007F
0001FF00007F0001FE00007F0001FE00007F0001FE00007F0001FC00007F0001FC00007F
0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F
0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F
0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F
0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F
0003FE0000FF80FFFFF83FFFFEFFFFF83FFFFEFFFFF83FFFFE2F457DC436>I<01E00007
F80007F8000FFC000FFC000FFC000FFC0007F80007F80001E00000000000000000000000
000000000000000000000000000000000000000000000000000000000001FC00FFFC00FF
FC00FFFC0007FC0003FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001
FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001
FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001
FC0001FC0003FE00FFFFF8FFFFF8FFFFF815437DC21C>I<00003C000000FF000000FF00
0001FF800001FF800001FF800001FF800000FF000000FF0000003C000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000007F80003FFF80003FFF80003FFF800000FF8000007F8000003F80
00003F8000003F8000003F8000003F8000003F8000003F8000003F8000003F8000003F80
00003F8000003F8000003F8000003F8000003F8000003F8000003F8000003F8000003F80
00003F8000003F8000003F8000003F8000003F8000003F8000003F8000003F8000003F80
00003F8000003F8000003F8000003F8000003F8000003F8000003F8000003F8000003F80
00003F8000003F8000003F8000003F8000003F8000003F8000003F8000003F8000003F80
3E003F807F003F80FF807F00FF807F00FF807E00FF807E00FF80FC007F00F8003C01F000
1E03E00007FF800001FE0000195785C21E>I<01FC00FFFC00FFFC00FFFC0007FC0003FC
0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC
0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC
0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC
0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC
0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0003FE
00FFFFF8FFFFF8FFFFF815457DC41C>108 D<01FC00FF00001FE00000FFFC07FFE000FF
FC0000FFFC0F03F801E07F0000FFFC3C01FC07803F800007FC7000FE0E001FC00003FCE0
007E1C000FC00001FDC0007F38000FE00001FD80007F30000FE00001FF80003FF00007F0
0001FF00003FE00007F00001FF00003FE00007F00001FE00003FC00007F00001FE00003F
C00007F00001FE00003FC00007F00001FC00003F800007F00001FC00003F800007F00001
FC00003F800007F00001FC00003F800007F00001FC00003F800007F00001FC00003F8000
07F00001FC00003F800007F00001FC00003F800007F00001FC00003F800007F00001FC00
003F800007F00001FC00003F800007F00001FC00003F800007F00001FC00003F800007F0
0001FC00003F800007F00001FC00003F800007F00001FC00003F800007F00001FC00003F
800007F00001FC00003F800007F00001FC00003F800007F00001FC00003F800007F00001
FC00003F800007F00001FC00003F800007F00001FC00003F800007F00001FC00003F8000
07F00001FC00003F800007F00001FC00003F800007F00003FE00007FC0000FF800FFFFF8
1FFFFF03FFFFE0FFFFF81FFFFF03FFFFE0FFFFF81FFFFF03FFFFE04B2C7DAB52>I<01FC
01FE0000FFFC07FFC000FFFC1E07F000FFFC3801F80007FC7001FC0003FCE000FC0001FD
C000FE0001FD8000FE0001FF80007F0001FF00007F0001FF00007F0001FE00007F0001FE
00007F0001FE00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC
00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC
00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC
00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC
00007F0001FC00007F0001FC00007F0001FC00007F0003FE0000FF80FFFFF83FFFFEFFFF
F83FFFFEFFFFF83FFFFE2F2C7DAB36>I<00007F8000000003FFF00000000FC0FC000000
3E001F0000007C000F800000F80007C00001F00003E00003E00001F00007C00000F8000F
C00000FC000FC00000FC001F8000007E003F8000007F003F8000007F003F0000003F007F
0000003F807F0000003F807F0000003F807F0000003F80FF0000003FC0FF0000003FC0FF
0000003FC0FF0000003FC0FF0000003FC0FF0000003FC0FF0000003FC0FF0000003FC0FF
0000003FC0FF0000003FC07F0000003F807F0000003F807F8000007F803F8000007F003F
8000007F001F8000007E001FC00000FE000FC00000FC000FE00001FC0007E00001F80003
F00003F00001F80007E00000FC000FC000003E001F0000001FC0FE00000007FFF8000000
007F8000002A2E7DAC31>I<01FC03FC0000FFFC0FFF8000FFFC3C07E000FFFC7001F800
07FDE000FE0001FD80007F0001FF80003F8001FF00001FC001FE00001FE001FC00000FE0
01FC00000FF001FC000007F001FC000007F801FC000003F801FC000003FC01FC000003FC
01FC000003FC01FC000001FE01FC000001FE01FC000001FE01FC000001FE01FC000001FE
01FC000001FE01FC000001FE01FC000001FE01FC000001FE01FC000001FE01FC000001FE
01FC000003FC01FC000003FC01FC000003FC01FC000007F801FC000007F801FC000007F0
01FC00000FF001FE00000FE001FE00001FC001FF00003FC001FF00003F8001FF80007E00
01FDC000FC0001FCF003F80001FC3C0FE00001FC1FFF800001FC03FC000001FC00000000
01FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC00000000
01FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC00000000
01FC0000000003FE00000000FFFFF8000000FFFFF8000000FFFFF80000002F3F7DAB36>
I<00007F8003000003FFE00700000FE0780700003F801C0F00007E000E0F0000FC00071F
0003F800039F0007F80001BF0007F00001FF000FE00000FF001FE00000FF001FC00000FF
003FC000007F003FC000007F007F8000007F007F8000007F007F8000007F00FF0000007F
00FF0000007F00FF0000007F00FF0000007F00FF0000007F00FF0000007F00FF0000007F
00FF0000007F00FF0000007F00FF0000007F00FF0000007F007F8000007F007F8000007F
007F8000007F003F8000007F003FC000007F001FC000007F001FE00000FF000FE00000FF
000FF00001FF0007F00001FF0003F80003FF0001FC00077F0000FE000E7F00003F001C7F
00000FC0F87F000003FFE07F0000007F007F00000000007F00000000007F00000000007F
00000000007F00000000007F00000000007F00000000007F00000000007F00000000007F
00000000007F00000000007F00000000007F00000000007F00000000007F0000000000FF
800000003FFFFE0000003FFFFE0000003FFFFE2F3F7DAB33>I<03F803F0FFF81FFCFFF8
3C3EFFF8707F07F8E0FF03F9C0FF01F980FF01FB80FF01FB007E01FB003C01FF000001FE
000001FE000001FE000001FE000001FC000001FC000001FC000001FC000001FC000001FC
000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC
000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC
000001FC000003FF0000FFFFFE00FFFFFE00FFFFFE00202C7DAB26>I<003FE01801FFFC
3807E01F780F0003F81E0001F83C0000F87C00007878000078F8000038F8000038F80000
18F8000018FC000018FC000018FE000018FF8000007FC000007FFC00003FFFE0001FFFFC
000FFFFF0007FFFFC003FFFFE000FFFFF0001FFFF80000FFF800000FFC000003FCC00001
FEC00000FEC000007EE000007EE000003EE000003EF000003EF000003EF000003EF80000
3CFC00007CFC000078FE0000F8FF0001F0F38003E0F1F00F80E07FFE00C00FF0001F2E7D
AC26>I<0006000000060000000600000006000000060000000E0000000E0000000E0000
000E0000001E0000001E0000001E0000003E0000007E0000007E000000FE000001FE0000
07FE00001FFFFFF0FFFFFFF0FFFFFFF000FE000000FE000000FE000000FE000000FE0000
00FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE0000
00FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000C
00FE000C00FE000C00FE000C00FE000C00FE000C00FE000C00FE000C00FE000C00FE000C
007E001C007F0018007F0018003F0038001F8030001FC0700007E0E00001FFC000007F00
1E3E7EBC26>I<01FC00007F00FFFC003FFF00FFFC003FFF00FFFC003FFF0007FC0001FF
0003FC0000FF0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F
0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F
0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F
0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F
0001FC00007F0001FC00007F0001FC00007F0001FC0000FF0001FC0000FF0001FC0000FF
0001FC0001FF0001FC0001FF0000FC0001FF0000FE0003FF00007E00077F80007F000E7F
C0003F001C7FFE000FC0787FFE0003FFF07FFE00007F807F002F2D7DAB36>I<FFFFF001
FFFCFFFFF001FFFCFFFFF001FFFC07FF00007FE003FE00001F8001FE00001F0001FE0000
0E0000FE00000E0000FE00000C00007F00001800007F00001800007F80001800003F8000
3000003F80003000003FC0007000001FC0006000001FE0006000000FE000C000000FE000
C000000FF001C0000007F00180000007F00180000003F80300000003F80300000003FC07
00000001FC0600000001FC0600000000FE0C00000000FE0C00000000FF0C000000007F18
000000007F18000000007FB8000000003FB0000000003FF0000000001FE0000000001FE0
000000001FE0000000000FC0000000000FC0000000000780000000000780000000000780
00000000030000002E2C7EAA33>I<FFFFF007FFFCFFFFF007FFFCFFFFF007FFFC03FFC0
01FFC000FF8000FF00007F8000FC00003F8000F800003FC000E000001FE000E000000FE0
01C0000007F00380000007F80300000003FC0600000001FC0E00000001FE1C00000000FF
18000000007F30000000003FF0000000003FE0000000001FE0000000000FE00000000007
F00000000007F8000000000FF8000000000DFC0000000019FE0000000038FF0000000070
7F00000000603F80000000C03FC0000001C01FC0000003800FE0000003000FF000000600
07F800000E0003F800001C0001FC00003C0001FE00007C0001FF0001FC0001FF800FFE00
03FFC0FFFF800FFFFFFFFF800FFFFFFFFF800FFFFF302B7FAA33>120
D<FFFFF001FFFCFFFFF001FFFCFFFFF001FFFC07FF00007FE003FE00001F8001FE00001F
0001FE00000E0000FE00000C0000FF00001C00007F00001800007F00001800007F800038
00003F80003000003F80003000001FC0006000001FC0006000001FE000E000000FE000C0
00000FE000C0000007F00180000007F00180000007F80380000003F80300000003F80300
000001FC0600000001FC0600000001FE0E00000000FE0C00000000FE0C000000007F1800
0000007F18000000007FB8000000003FB0000000003FB0000000001FE0000000001FE000
0000001FE0000000000FC0000000000FC000000000078000000000078000000000078000
0000000300000000000300000000000600000000000600000000000600000000000C0000
0000000C0000000000180000000000180000003C00180000007E0030000000FF00300000
00FF0060000000FF0060000000FF00C0000000FE01C00000007C03800000007007000000
003C1E000000000FFC0000000003F0000000002E3F7EAA33>I<000780000000000FC000
0000001FE0000000001FF0000000000FF8000000000FFC0000000003FE0000000001FF00
000000007F00000000001F80000000000FC00000000003E00000000000F0000000000070
00000000001000000000000000000000000000000000000000000000000000000007FC00
0000003FFF80000000F80FE0000003C003F00000070001F800000E0000FC00000FC0007E
00001FE0007F00001FF0003F80001FF0003F80001FF0003F80001FF0001FC0001FF0001F
C0000FE0001FC0000380001FC0000000001FC0000000001FC0000000001FC0000000001F
C00000000FFFC0000001FFFFC000000FFE1FC000003FC01FC00000FF001FC00003FC001F
C00007F8001FC0000FF0001FC0001FE0001FC0003FC0001FC0007FC0001FC0007F80001F
C0007F80001FC060FF00001FC060FF00001FC060FF00001FC060FF00003FC060FF00003F
C060FF00003FC060FF80007FC0607F8000EFC0607FC000C7E0C03FC001C7E0C01FE00783
F1C007F81E03FF8001FFFC01FF00001FE0007C002B417CBF31>224
D<0000C00000000001E00000000003F00000000007F8000000000F3C000000001E1E0000
00001C0E00000000380700000000700380000000E001C0000001C000E000000380007000
000700003800000600001800000400000800000000000000000000000000000000000000
000000000000000007FC000000003FFF80000000F80FE0000003C003F00000070001F800
000E0000FC00000FC0007E00001FE0007F00001FF0003F80001FF0003F80001FF0003F80
001FF0001FC0001FF0001FC0000FE0001FC0000380001FC0000000001FC0000000001FC0
000000001FC0000000001FC00000000FFFC0000001FFFFC000000FFE1FC000003FC01FC0
0000FF001FC00003FC001FC00007F8001FC0000FF0001FC0001FE0001FC0003FC0001FC0
007FC0001FC0007F80001FC0007F80001FC060FF00001FC060FF00001FC060FF00001FC0
60FF00003FC060FF00003FC060FF00003FC060FF80007FC0607F8000EFC0607FC000C7E0
C03FC001C7E0C01FE00783F1C007F81E03FF8001FFFC01FF00001FE0007C002B417CBF31
>226 D<00008000000003E000000007F000000007F800000007FC00000007FC00000003
FE00000001FF000000007F800000003FC00000000FE000000003E000000001F000000000
78000000003800000000080000000000000000000000000000000000000000000001FE00
000007FFC000001F03F000007E00FC0000FC007E0001F8003F0003F0003F0007E0001F80
0FE0001FC00FC0000FC01FC0000FC03F80000FE03F800007E03F800007E07F800007F07F
000007F07F000007F0FF000007F0FF000007F0FF000007F0FFFFFFFFF0FFFFFFFFF0FF00
000000FF00000000FF00000000FF00000000FF00000000FF000000007F000000007F0000
00007F800000007F800000003F800000003F800000301FC00000301FC00000700FC00000
600FE00000E007F00000C003F00001C001F800038000FC000700003E001E00001F80F800
0003FFE0000000FF000024427DC02B>232 D<000002000000000F800000001FC0000000
3FC00000007FC00000007FC0000000FF80000001FF00000003FC00000007F80000000FE0
0000000F800000001F000000003C00000000380000000020000000000000000000000000
00000000000000000000000001FE00000007FFC000001F03F000007E00FC0000FC007E00
01F8003F0003F0003F0007E0001F800FE0001FC00FC0000FC01FC0000FC03F80000FE03F
800007E03F800007E07F800007F07F000007F07F000007F0FF000007F0FF000007F0FF00
0007F0FFFFFFFFF0FFFFFFFFF0FF00000000FF00000000FF00000000FF00000000FF0000
0000FF000000007F000000007F000000007F800000007F800000003F800000003F800000
301FC00000301FC00000700FC00000600FE00000E007F00000C003F00001C001F8000380
00FC000700003E001E00001F80F8000003FFE0000000FF000024427DC02B>I<00180000
3C00007E0000FF0001FF8001E78003C3C00781E00F00F01E00783C003C38001C70000EE0
0007C0000300000000000000000000000000000000FE007FFE007FFE007FFE0003FE0001
FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000
FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000
FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0001FF007F
FFFC7FFFFC7FFFFC18407EBF1C>238 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fl eccc1200 12 18
/Fl 18 234 df<00007F8000000003FFF00000000FC0FC0000003F003F0000007C000F80
0000F80007C00001F00003E00003E00001F00007E00001F80007C00000F8000FC00000FC
000FC00000FC001F8000007E001F8000007E001F8000007E003F8000007F003F8000007F
003F8000007F007F0000003F807F0000003F807F0000003F807F0000003F807F0000003F
807F0000003F80FF0000003FC0FF0000003FC0FF0000003FC0FF0000003FC0FF0000003F
C0FF0000003FC0FF0000003FC0FF0000003FC0FF0000003FC0FF0000003FC0FF0000003F
C0FF0000003FC0FF0000003FC0FF0000003FC0FF0000003FC0FF0000003FC0FF0000003F
C0FF0000003FC0FF0000003FC0FF0000003FC0FF0000003FC07F0000003F807F0000003F
807F0000003F807F0000003F807F8000007F803F8000007F003F8000007F003F8000007F
003F8000007F001F8000007E001FC00000FE000FC00000FC000FC00000FC0007E00001F8
0007E00001F80003F00003F00001F00003E00000F80007C000007C000F8000003F003F00
00000FC0FC00000003FFF0000000007F8000002A447BC135>48 D<0003FF0000001FFFE0
00007FFFFC0000FC03FE0003E000FF800780003FC00F00001FE01E00000FF01C00000FF8
38000007FC30000003FC70000003FE60000003FE6C000001FEFF000001FFFF800001FFFF
C00001FFFFC00000FFFFC00000FFFFC00000FFFFC00000FF7F800001FF3F000001FF0000
0001FF00000001FE00000001FE00000003FE00000003FC00000007FC00000007F8000000
0FF00000000FF00000001FE00000001FC00000003F800000007F00000000FE00000000FC
00000001F800000003F000000007E00000000FC00000001F800000001F000000003E0000
00007800000000F000000001E000000003C000000007800003000F000003001E00000300
3C000006007800000600F000000601E000000603C000000E038000000C070000001C0FFF
FFFFFC1FFFFFFFFC3FFFFFFFFC7FFFFFFFFCFFFFFFFFF8FFFFFFFFF8FFFFFFFFF828427A
C135>50 D<00000030000000000000780000000000007800000000000078000000000000
FC000000000000FC000000000001FE000000000001FE000000000001FE0000000000037F
0000000000037F0000000000077F8000000000063F8000000000063F80000000000C3FC0
000000000C1FC0000000001C1FE000000000180FE000000000180FE000000000300FF000
0000003007F0000000007007F8000000006003F8000000006003F800000000C003FC0000
0000C001FC00000000C001FC000000018000FE000000018000FE000000030000FF000000
0300007F0000000300007F0000000600003F8000000600003F8000000FFFFFFFC000000F
FFFFFFC000000FFFFFFFC000001800000FE000001800000FE000003800000FF000003000
0007F0000030000007F0000060000007F8000060000003F80000E0000003FC0000C00000
01FC0001C0000001FC0001C0000001FE0003C0000000FE0007E0000001FF001FF0000003
FF80FFFC00001FFFFCFFFC00001FFFFCFFFC00001FFFFC36367CB53E>97
D<FFFFFFFF8000FFFFFFFFF000FFFFFFFFFC0003FE0001FF0001FC00007F8001FC00003F
C001FC00001FE001FC00000FE001FC00000FF001FC000007F001FC000007F801FC000007
F801FC000007F801FC000007F801FC000007F801FC000007F801FC000007F001FC00000F
F001FC00000FE001FC00001FE001FC00003FC001FC00007F8001FC0000FE0001FC0007FC
0001FFFFFFE00001FFFFFFFC0001FC0000FF0001FC00001FC001FC00000FE001FC000007
F001FC000003F801FC000001FC01FC000001FE01FC000001FE01FC000000FE01FC000000
FF01FC000000FF01FC000000FF01FC000000FF01FC000000FF01FC000000FF01FC000000
FE01FC000001FE01FC000001FC01FC000003FC01FC000007F801FC00000FF001FC00003F
E003FE0000FFC0FFFFFFFFFF00FFFFFFFFFC00FFFFFFFFE00030347BB33A>I<000001FF
8000C000001FFFF001C000007FFFFE03C00001FF803F03C00007F80007C7C0001FE00001
EFC0003FC000007FC0007F0000003FC000FE0000001FC001FC0000000FC003F800000007
C007F000000007C00FF000000003C00FE000000003C01FE000000001C01FC000000001C0
3FC000000001C03F8000000000C07F8000000000C07F8000000000C07F8000000000007F
000000000000FF000000000000FF000000000000FF000000000000FF000000000000FF00
0000000000FF000000000000FF000000000000FF000000000000FF000000000000FF0000
000000007F0000000000007F8000000000007F8000000000007F8000000000C03F800000
0000C03FC000000000C01FC000000000C01FE000000001C00FE000000001800FF0000000
018007F0000000038003F8000000030001FC000000070000FE0000000E00007F0000001C
00003FC000003800001FE00000F0000007F80003E0000001FF801F800000007FFFFE0000
00001FFFF80000000001FFC0000032367BB43C>I<FFFFFFFFFFF0FFFFFFFFFFF0FFFFFF
FFFFF003FE00001FF001FC000003F001FC000001F801FC000000F801FC0000007801FC00
00003801FC0000003801FC0000001801FC0000001801FC0000001801FC0000001801FC00
03000C01FC0003000C01FC0003000C01FC0003000C01FC0003000001FC0007000001FC00
07000001FC000F000001FC003F000001FFFFFF000001FFFFFF000001FFFFFF000001FC00
3F000001FC000F000001FC0007000001FC0007000001FC0003000001FC0003000301FC00
03000301FC0003000301FC0003000601FC0000000601FC0000000601FC0000000601FC00
00000601FC0000000E01FC0000000E01FC0000000C01FC0000001C01FC0000001C01FC00
00003C01FC0000007C01FC000000FC01FC000003FC03FE00001FF8FFFFFFFFFFF8FFFFFF
FFFFF8FFFFFFFFFFF830347BB338>101 D<FFFFF801FFFFF0FFFFF801FFFFF0FFFFF801
FFFFF003FE000007FC0001FC000003F80001FC000003F80001FC000003F80001FC000003
F80001FC000003F80001FC000003F80001FC000003F80001FC000003F80001FC000003F8
0001FC000003F80001FC000003F80001FC000003F80001FC000003F80001FC000003F800
01FC000003F80001FC000003F80001FC000003F80001FC000003F80001FC000003F80001
FFFFFFFFF80001FFFFFFFFF80001FFFFFFFFF80001FC000003F80001FC000003F80001FC
000003F80001FC000003F80001FC000003F80001FC000003F80001FC000003F80001FC00
0003F80001FC000003F80001FC000003F80001FC000003F80001FC000003F80001FC0000
03F80001FC000003F80001FC000003F80001FC000003F80001FC000003F80001FC000003
F80001FC000003F80001FC000003F80001FC000003F80001FC000003F80003FE000007FC
00FFFFF801FFFFF0FFFFF801FFFFF0FFFFF801FFFFF034347BB33E>104
D<FFFFF8FFFFF8FFFFF803FE0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC
0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC
0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC
0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC
0003FE00FFFFF8FFFFF8FFFFF815347BB31E>I<FFFFFE000000FFFFFE000000FFFFFE00
000003FF0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000
000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000
000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000
000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000
000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000006001FC0000
006001FC0000006001FC0000006001FC0000006001FC000000C001FC000000C001FC0000
00C001FC000000C001FC000001C001FC000001C001FC000003C001FC000003C001FC0000
07C001FC00000FC001FC00001FC001FC00007F8003FE0003FF80FFFFFFFFFF80FFFFFFFF
FF80FFFFFFFFFF802B347BB334>108 D<FFFC00000FFFF0FFFE00000FFFF0FFFF00000F
FFF001FF000001FF8001FF8000007E0001BFC000003C00019FE000001800019FE0000018
00018FF0000018000187F8000018000187FC000018000183FC000018000181FE00001800
0180FF000018000180FF0000180001807F8000180001803FC000180001801FE000180001
801FE000180001800FF0001800018007F8001800018007F8001800018003FC0018000180
01FE001800018000FF001800018000FF0018000180007F8018000180003FC01800018000
3FC018000180001FE018000180000FF0180001800007F8180001800007F8180001800003
FC180001800001FE180001800001FF180001800000FF1800018000007F9800018000003F
D800018000003FD800018000001FF800018000000FF8000180000007F8000180000007F8
000180000003F8000180000001F80003C0000001F80007E0000000F8001FF80000007800
FFFF0000003800FFFF0000003800FFFF000000180034347BB33E>110
D<FFFFFFFF0000FFFFFFFFE000FFFFFFFFFC0003FE0003FE0001FC00007F8001FC00001F
C001FC00000FE001FC00000FF001FC000007F001FC000007F801FC000003F801FC000003
FC01FC000003FC01FC000003FC01FC000003FC01FC000003FC01FC000003FC01FC000003
FC01FC000003F801FC000007F801FC000007F001FC00000FE001FC00000FE001FC00003F
C001FC00007F0001FC0003FE0001FFFFFFF80001FFFFFFC00001FC0000000001FC000000
0001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC000000
0001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC000000
0001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC000000
0003FE00000000FFFFF8000000FFFFF8000000FFFFF80000002E347BB338>112
D<000003FF00000000003FFFF000000000FE01FC00000003F0003F0000000FC0000FC000
001F800007E000007F000003F80000FE000001FC0001FC000000FE0001F80000007E0003
F00000003F0007F00000003F800FE00000001FC00FE00000001FC01FC00000000FE01FC0
0000000FE03F8000000007F03F8000000007F07F8000000007F87F8000000007F87F8000
000007F87F0000000003F8FF0000000003FCFF0000000003FCFF0000000003FCFF000000
0003FCFF0000000003FCFF0000000003FCFF0000000003FCFF0000000003FCFF00000000
03FCFF0000000003FC7F0000000003F87F0000000003F87F8000000007F87F8000000007
F83F8000000007F03F8000000007F01FC00000000FE01FC00000000FE00FE00000001FC0
0FE00000001FC007F000FC003F8003F003FF003F0003F80703807F0001FC0E01C0FE0000
FE0C00C1FC00007F0C00E3F800001F8C0077E000000FCC007FC0000003FE003F00000000
FF01FC000000003FFFF8000C000003FF3C000C000000003C000C000000001E001C000000
001E001C000000001F003C000000001F807C000000000FC0F8000000000FFFF800000000
0FFFF80000000007FFF00000000007FFF00000000003FFE00000000003FFC00000000000
FF8000000000003E0036447BB440>I<FFFFFFFC000000FFFFFFFF800000FFFFFFFFF000
0003FE000FFC000001FC0000FE000001FC00007F800001FC00001FC00001FC00001FE000
01FC00000FE00001FC00000FF00001FC000007F00001FC000007F80001FC000007F80001
FC000007F80001FC000007F80001FC000007F80001FC000007F80001FC000007F00001FC
00000FF00001FC00000FE00001FC00001FC00001FC00003F800001FC00007F000001FC00
01FC000001FC000FF0000001FFFFFFC0000001FFFFFF00000001FC001FE0000001FC0003
F0000001FC0001FC000001FC0000FE000001FC00007E000001FC00007F000001FC00007F
000001FC00003F800001FC00003F800001FC00003F800001FC00003F800001FC00003F80
0001FC00003FC00001FC00003FC00001FC00003FC00001FC00003FC00001FC00003FC000
01FC00003FC00601FC00003FE00601FC00001FE00601FC00001FE00E03FE00000FF00CFF
FFF80007F01CFFFFF80003F838FFFFF80000FFF000000000001FC037357BB33D>I<000F
F00180007FFE038001FFFF838007F007E7800FC000FF801F00007F803E00003F803E0000
1F807C00000F807C00000780F800000780F800000380F800000380F800000380F8000001
80FC00000180FC00000180FE000000007F000000007F800000007FE00000003FFE000000
1FFFF000001FFFFF00000FFFFFE00003FFFFF80001FFFFFC00007FFFFE000007FFFF0000
007FFF80000007FFC00000007FC00000003FE00000000FE000000007F000000007F00000
0003F0C0000003F0C0000001F0C0000001F0C0000001F0E0000001F0E0000001F0E00000
01E0F0000003E0F8000003C0F8000007C0FE00000F80FF00001F00FFC0003E00F3FC00FC
00E0FFFFF800E01FFFE000C003FF000024367BB42E>I<7FFFFFFFFFFFE07FFFFFFFFFFF
E07FFFFFFFFFFFE07F8003FE001FE07C0001FC0003E0780001FC0001E0700001FC0000E0
700001FC0000E0600001FC000060E00001FC000070E00001FC000070E00001FC000070C0
0001FC000030C00001FC000030C00001FC000030C00001FC000030C00001FC000030C000
01FC000030000001FC000000000001FC000000000001FC000000000001FC000000000001
FC000000000001FC000000000001FC000000000001FC000000000001FC000000000001FC
000000000001FC000000000001FC000000000001FC000000000001FC000000000001FC00
0000000001FC000000000001FC000000000001FC000000000001FC000000000001FC0000
00000001FC000000000001FC000000000001FC000000000001FC000000000001FC000000
000001FC000000000001FC000000000001FC000000000001FC000000000003FE00000000
0007FF0000000007FFFFFF00000007FFFFFF00000007FFFFFF000034347CB33C>I<FFFF
F8000FFFF0FFFFF8000FFFF0FFFFF8000FFFF003FE000001FF8001FC0000007E0001FC00
00003C0001FC000000180001FC000000180001FC000000180001FC000000180001FC0000
00180001FC000000180001FC000000180001FC000000180001FC000000180001FC000000
180001FC000000180001FC000000180001FC000000180001FC000000180001FC00000018
0001FC000000180001FC000000180001FC000000180001FC000000180001FC0000001800
01FC000000180001FC000000180001FC000000180001FC000000180001FC000000180001
FC000000180001FC000000180001FC000000180001FC000000180001FC000000180001FC
000000180001FC000000180001FC000000380000FE000000300000FE000000300000FE00
00007000007E0000006000007F000000E000003F800001C000001F800003C000000FC000
0780000007E0000F00000003F8003E00000001FE01FC000000007FFFF0000000001FFFC0
0000000001FE00000034357BB33E>I<FFFFE000003FFFFFFFE000003FFFFFFFE000003F
FF07FE0000000FF803FC00000007E003FC00000003C001FE000000038001FE0000000380
00FE000000030000FF0000000300007F0000000600007F8000000600003F8000000C0000
3F8000000C00003FC000001C00001FC000001800001FE000001800000FE000003000000F
F0000030000007F0000060000007F0000060000007F80000E0000003F80000C0000003FC
0000C0000001FC000180000001FE000180000000FE000300000000FE000300000000FF00
07000000007F0006000000007F8006000000003F800C000000003FC00C000000001FC018
000000001FC018000000001FE038000000000FE030000000000FF0300000000007F06000
00000007F8600000000003F8C00000000003F8C00000000003FDC00000000001FD800000
000001FF800000000000FF000000000000FF0000000000007E0000000000007E00000000
00007E0000000000003C0000000000003C0000000000001800000038357DB33E>I<0000
00000E00000000003F0000000000FF0000000001FF8000000007FF000000001FFF000000
003FFE00000000FFE000000003FF0000000007F8000000000F80000000000C0000000000
00000000000000000000000000000000000000000000000000000000000000000000FFFF
FFFFFFF0FFFFFFFFFFF0FFFFFFFFFFF003FE00001FF001FC000003F001FC000001F801FC
000000F801FC0000007801FC0000003801FC0000003801FC0000001801FC0000001801FC
0000001801FC0000001801FC0003000C01FC0003000C01FC0003000C01FC0003000C01FC
0003000001FC0007000001FC0007000001FC000F000001FC003F000001FFFFFF000001FF
FFFF000001FFFFFF000001FC003F000001FC000F000001FC0007000001FC0007000001FC
0003000001FC0003000301FC0003000301FC0003000301FC0003000601FC0000000601FC
0000000601FC0000000601FC0000000601FC0000000E01FC0000000E01FC0000000C01FC
0000001C01FC0000001C01FC0000003C01FC0000007C01FC000000FC01FC000003FC03FE
00001FF8FFFFFFFFFFF8FFFFFFFFFFF8FFFFFFFFFFF830467BC538>233
D E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref)/Author ()/Keywords () /DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -136 -396
a
SDict begin H.S end
 -136 -396 a -136 -396 a
SDict begin H.R end
 -136 -396 a -136 -396 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -136
-396 a 0 TeXcolorgray -128 -299 a Fl(\351preuve)36 b(pra)-8
b(tique)36 b(blanche)f(2022)2073 b(nsi)33 b Fk(T)-8 b(erminale)p
-128 -260 4252 4 v Black 0 TeXcolorgray -128 -180 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -128
-180 a -128 -180 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -128 -180 a -128 -180 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -128 -180
a -128 -180 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -128 -180 a -128 -180 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -128 -180 a -128
-180 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -128 -180 a -128 -180 a
SDict begin H.S end
 -128 -180 a -128 -180
a
SDict begin 14.5 H.A end
 -128 -180 a -128 -180 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -128 -180 a 0 TeXcolorgray
0 TeXcolorgray 1526 -80 945 9 v 1759 40 a Fj(Sujet)52
b(2)p 1526 111 V -128 281 a Fi(q)33 b Fh(Exercice)j(1)d
Fk(:)f Fg(Liste)j(des)g(indic)-5 b(es)-128 401 y Fk(Ecrire)27
b(une)h(fonction)d Ff(liste_indices)30 b Fk(qui)d(prend)g(en)h
(param\350tres)e(un)h(en)m(tier)g Ff(n)g Fk(et)g(une)h(liste)d(d'en)m
(tiers)j Ff(l)f Fk(et)g(qui)-128 522 y(ren)m(v)m(oie)c(la)d(liste)h
(des)i(indices)e(d'apparition)f(de)i Ff(n)g Fk(dans)g
Ff(l)p Fk(.)g(P)m(ar)g(exemple,)g Ff(liste_indices\(5,[17,5,11,5)q
(,5,1)q(4]\))-128 642 y Fk(ren)m(v)m(oie)34 b Ff([1,3,4])p
Fk(.)g(Lorsque)g(l'en)m(tier)d(n'appara\356t)h(pas)h(dans)g(la)e
(liste,)h(on)g(ren)m(v)m(oie)h(la)f(liste)f(vide.)-128
762 y Fe(Exemples)37 b(:)-128 832 y
SDict begin H.S end
 -128 832 a -128 832
a
SDict begin 14.5 H.A end
 -128 832 a -128 832 a
SDict begin [/View [/XYZ H.V]/Dest (lstlisting.-1) cvn /DEST pdfmark
end
 -128 832 a 0.95 TeXcolorgray
128 849 4025 29 v 0 TeXcolorgray 0.95 TeXcolorgray 0
TeXcolorgray 128 849 4 29 v 128 824 29 4 v 156 824 3969
4 v 4125 824 29 4 v 4149 849 4 29 v 0.95 TeXcolorgray
131 962 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 128
962 4 113 v 0 TeXcolorgray 128 962 V 0.95 TeXcolorgray
156 962 3969 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4124
962 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4149 962
4 113 v 0 TeXcolorgray 4149 962 V 156 928 a
SDict begin H.S end
 156 928 a
156 928 a
SDict begin 13.6 H.A end
 156 928 a 156 928 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.1) cvn /DEST pdfmark
end
 156 928 a -110 w Fd(1)70
b Fc(>)-14 b(>)g(>)63 b(l)14 b(i)g(s)g(t)g(e)g(_)g(i)g(n)g(d)g(i)g(c)h
(e)34 b(\()13 b(1)g(3)27 b(,)13 b([)g(1)g(3)28 b(,)13
b(2)g(4)27 b(,)13 b(1)g(0)27 b(,)13 b(1)g(3)g(])g(\))p
0.95 TeXcolorgray 131 1075 25 113 v 0 TeXcolorgray 0.95
TeXcolorgray 128 1075 4 113 v 0 TeXcolorgray 128 1075
V 0.95 TeXcolorgray 156 1075 3969 113 v 0 TeXcolorgray
0.95 TeXcolorgray 4124 1075 25 113 v 0 TeXcolorgray 0.95
TeXcolorgray 4149 1075 4 113 v 0 TeXcolorgray 4149 1075
V 156 1041 a
SDict begin H.S end
 156 1041 a 156 1041 a
SDict begin 13.6 H.A end
 156 1041 a 156 1041
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.2) cvn /DEST pdfmark
end
 156 1041 a -110 w Fd(2)99 b Fc([)15 b(0)30 b(,)15 b(3)g(])p
0.95 TeXcolorgray 131 1187 25 113 v 0 TeXcolorgray 0.95
TeXcolorgray 128 1187 4 113 v 0 TeXcolorgray 128 1187
V 0.95 TeXcolorgray 156 1187 3969 113 v 0 TeXcolorgray
0.95 TeXcolorgray 4124 1187 25 113 v 0 TeXcolorgray 0.95
TeXcolorgray 4149 1187 4 113 v 0 TeXcolorgray 4149 1187
V 156 1154 a
SDict begin H.S end
 156 1154 a 156 1154 a
SDict begin 13.6 H.A end
 156 1154 a 156 1154
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.3) cvn /DEST pdfmark
end
 156 1154 a -110 w Fd(3)70 b Fc(>)-14 b(>)g(>)63 b(l)14
b(i)g(s)g(t)g(e)g(_)g(i)g(n)g(d)g(i)g(c)h(e)34 b(\()13
b(1)g(1)28 b(,)13 b([)g(7)27 b(,)13 b(1)g(9)28 b(,)13
b(1)g(5)28 b(,)13 b(1)g(4)27 b(,)13 b(2)g(])g(\))p 0.95
TeXcolorgray 131 1300 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray
128 1300 4 113 v 0 TeXcolorgray 128 1300 V 0.95 TeXcolorgray
156 1300 3969 113 v 0 TeXcolorgray 0.95 TeXcolorgray
4124 1300 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4149
1300 4 113 v 0 TeXcolorgray 4149 1300 V 156 1266 a
SDict begin H.S end
 156
1266 a 156 1266 a
SDict begin 13.6 H.A end
 156 1266 a 156 1266 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.4) cvn /DEST pdfmark
end
 156 1266 a -110
w Fd(4)103 b Fc([)20 b(])p 0.95 TeXcolorgray 131 1413
25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 128 1413 4
113 v 0 TeXcolorgray 128 1413 V 0.95 TeXcolorgray 156
1413 3969 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4124
1413 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4149 1413
4 113 v 0 TeXcolorgray 4149 1413 V 156 1379 a
SDict begin H.S end
 156 1379
a 156 1379 a
SDict begin 13.6 H.A end
 156 1379 a 156 1379 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.5) cvn /DEST pdfmark
end
 156 1379 a -110 w
Fd(5)70 b Fc(>)-14 b(>)g(>)63 b(l)14 b(i)g(s)g(t)g(e)g(_)g(i)g(n)g(d)g
(i)g(c)h(e)34 b(\()13 b(1)g(4)28 b(,)13 b([)g(7)27 b(,)13
b(1)g(4)28 b(,)13 b(1)g(5)28 b(,)13 b(2)g(8)27 b(,)13
b(2)g(])g(\))p 0.95 TeXcolorgray 131 1526 25 113 v 0
TeXcolorgray 0.95 TeXcolorgray 128 1526 4 113 v 0 TeXcolorgray
128 1526 V 0.95 TeXcolorgray 156 1526 3969 113 v 0 TeXcolorgray
0.95 TeXcolorgray 4124 1526 25 113 v 0 TeXcolorgray 0.95
TeXcolorgray 4149 1526 4 113 v 0 TeXcolorgray 4149 1526
V 156 1492 a
SDict begin H.S end
 156 1492 a 156 1492 a
SDict begin 13.6 H.A end
 156 1492 a 156 1492
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.6) cvn /DEST pdfmark
end
 156 1492 a -110 w Fd(6)101 b Fc([)17 b(1)g(])p 0.95
TeXcolorgray 128 1554 4025 29 v 0 TeXcolorgray 0.95 TeXcolorgray
0 TeXcolorgray 128 1554 4 29 v 129 1554 29 4 v 156 1554
3969 4 v 4125 1554 29 4 v 4149 1554 4 29 v 0 TeXcolorgray
0 TeXcolorgray -128 1744 a Fi(q)33 b Fh(Exercice)j(2)d
Fk(:)f Fg(R)-5 b(e)g(cher)g(che)34 b(dichotomique)g(dans)g(une)h(liste)
f(tri\351)-5 b(e)-128 1864 y Fk(On)23 b(rapp)s(elle)e(que)i(lorsque)g
(qu'une)h(liste)d(est)i Fg(d\351j\340)i(tri\351)-5 b(e)p
Fk(,)23 b(on)f(p)s(eut)h(y)g(rec)m(herc)m(her)i(un)e(\351l\351men)m(t)f
(gr\342ce)g(\340)h(la)e(rec)m(herc)m(he)-128 1984 y(dic)m(hotomique)30
b(\(plus)g(p)s(erforman)m(te)f(que)i(la)e(rec)m(herc)m(he)k(simple\).)c
(Cet)i(algorithme)c(consiste)k(\340)f(rec)m(herc)m(her)i(en)m(tre)-128
2105 y(deux)e(indices)e Ff(debut)i Fk(\(initialis\351)25
b(\340)j(0\))g(et)h Ff(fin)g Fk(\(initialis\351)c(\340)j(la)g(longueur)
g(de)h(la)e(liste)h(moins)f(1\).)h(A)h(c)m(haque)h(\351tap)s(e)-128
2225 y(on)36 b(compare)g(l'\351l\351men)m(t)f(rec)m(herc)m(h\351)j(a)m
(v)m(ec)f(celui)e(situ\351)h(au)g(milieu)d(de)k(ces)g(deux)g(indices)e
(et)i(on)e(les)h(mets)g(\340)g(jour)-128 2346 y(en)d(cons\351quence.)j
(Compl\351ter)c(l'impl\351men)m(tation)c(it\351rativ)m(e)k(suiv)-5
b(an)m(te)33 b(de)g(la)e(rec)m(herc)m(he)k(dic)m(hotomique)d(:)-128
2415 y
SDict begin H.S end
 -128 2415 a -128 2415 a
SDict begin 14.5 H.A end
 -128 2415 a -128 2415
a
SDict begin [/View [/XYZ H.V]/Dest (lstlisting.-2) cvn /DEST pdfmark
end
 -128 2415 a 0.95 TeXcolorgray 128 2432 4025 29 v 0
TeXcolorgray 0.95 TeXcolorgray 0 TeXcolorgray 128 2432
4 29 v 128 2407 29 4 v 156 2407 3969 4 v 4125 2407 29
4 v 4149 2432 4 29 v 0.95 TeXcolorgray 131 2545 25 113
v 0 TeXcolorgray 0.95 TeXcolorgray 128 2545 4 113 v 0
TeXcolorgray 128 2545 V 0.95 TeXcolorgray 156 2545 3969
113 v 0 TeXcolorgray 0.95 TeXcolorgray 4124 2545 25 113
v 0 TeXcolorgray 0.95 TeXcolorgray 4149 2545 4 113 v
0 TeXcolorgray 4149 2545 V 156 2511 a
SDict begin H.S end
 156 2511 a 156
2511 a
SDict begin 13.6 H.A end
 156 2511 a 156 2511 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.1) cvn /DEST pdfmark
end
 156 2511 a -110 w Fd(1)306
b Fb(d)5 b(e)g(f)71 b Fc(d)10 b(i)g(c)g(h)g(o)g(t)g(o)g(m)g(i)g(e)22
b(\()j(l)16 b(i)g(s)f(t)h(e)46 b(,)24 b(e)9 b(l)g(e)g(m)g(e)g(n)g(t)21
b(\))j(:)p 0.95 TeXcolorgray 131 2658 25 113 v 0 TeXcolorgray
0.95 TeXcolorgray 128 2658 4 113 v 0 TeXcolorgray 128
2658 V 0.95 TeXcolorgray 156 2658 3969 113 v 0 TeXcolorgray
0.95 TeXcolorgray 4124 2658 25 113 v 0 TeXcolorgray 0.95
TeXcolorgray 4149 2658 4 113 v 0 TeXcolorgray 4149 2658
V 156 2624 a
SDict begin H.S end
 156 2624 a 156 2624 a
SDict begin 13.6 H.A end
 156 2624 a 156 2624
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.2) cvn /DEST pdfmark
end
 156 2624 a -110 w Fd(2)324 b Fa(')22 b(')h(')76 b(r)11
b(e)g(c)g(h)g(e)g(r)g(c)g(h)g(e)80 b(e)10 b(l)g(e)g(m)g(e)g(n)g(t)70
b(d)7 b(a)g(n)g(s)82 b(l)19 b(i)f(s)h(t)f(e)79 b(e)5
b(n)77 b(u)17 b(t)g(i)f(l)h(i)g(s)f(a)h(n)g(t)84 b(l)13
b(a)79 b(r)11 b(e)g(c)g(h)g(e)g(r)g(c)g(h)g(e)p 0.95
TeXcolorgray 131 2771 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray
128 2771 4 113 v 0 TeXcolorgray 128 2771 V 0.95 TeXcolorgray
156 2771 3969 113 v 0 TeXcolorgray 0.95 TeXcolorgray
4124 2771 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4149
2771 4 113 v 0 TeXcolorgray 4149 2771 V 549 2737 a(d)f(i)g(c)g(h)g(o)g
(t)g(o)g(m)g(i)g(q)g(u)g(e)39 b(')22 b(')g(')p 0.95 TeXcolorgray
131 2883 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 128
2883 4 113 v 0 TeXcolorgray 128 2883 V 0.95 TeXcolorgray
156 2883 3969 113 v 0 TeXcolorgray 0.95 TeXcolorgray
4124 2883 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4149
2883 4 113 v 0 TeXcolorgray 4149 2883 V 156 2850 a
SDict begin H.S end
 156
2850 a 156 2850 a
SDict begin 13.6 H.A end
 156 2850 a 156 2850 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.3) cvn /DEST pdfmark
end
 156 2850 a -110
w Fd(3)308 b Fc(d)8 b(e)g(b)g(u)g(t)53 b(=)69 b(.)22
b(.)f(.)p 0.95 TeXcolorgray 131 2996 25 113 v 0 TeXcolorgray
0.95 TeXcolorgray 128 2996 4 113 v 0 TeXcolorgray 128
2996 V 0.95 TeXcolorgray 156 2996 3969 113 v 0 TeXcolorgray
0.95 TeXcolorgray 4124 2996 25 113 v 0 TeXcolorgray 0.95
TeXcolorgray 4149 2996 4 113 v 0 TeXcolorgray 4149 2996
V 156 2963 a
SDict begin H.S end
 156 2963 a 156 2963 a
SDict begin 13.6 H.A end
 156 2963 a 156 2963
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.4) cvn /DEST pdfmark
end
 156 2963 a -110 w Fd(4)316 b Fc(f)15 b(i)g(n)61 b(=)70
b(.)23 b(.)g(.)h(.)p 0.95 TeXcolorgray 131 3109 25 113
v 0 TeXcolorgray 0.95 TeXcolorgray 128 3109 4 113 v 0
TeXcolorgray 128 3109 V 0.95 TeXcolorgray 156 3109 3969
113 v 0 TeXcolorgray 0.95 TeXcolorgray 4124 3109 25 113
v 0 TeXcolorgray 0.95 TeXcolorgray 4149 3109 4 113 v
0 TeXcolorgray 4149 3109 V 156 3075 a
SDict begin H.S end
 156 3075 a 156
3075 a
SDict begin 13.6 H.A end
 156 3075 a 156 3075 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.5) cvn /DEST pdfmark
end
 156 3075 a -110 w Fd(5)307
b Fb(w)6 b(h)g(i)g(l)g(e)67 b Fc(d)6 b(e)g(b)g(u)g(t)f(<)-11
b(=)5 b(f)15 b(i)g(n)29 b(:)p 0.95 TeXcolorgray 131 3222
25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 128 3222 4
113 v 0 TeXcolorgray 128 3222 V 0.95 TeXcolorgray 156
3222 3969 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4124
3222 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4149 3222
4 113 v 0 TeXcolorgray 4149 3222 V 156 3188 a
SDict begin H.S end
 156 3188
a 156 3188 a
SDict begin 13.6 H.A end
 156 3188 a 156 3188 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.6) cvn /DEST pdfmark
end
 156 3188 a -110 w
Fd(6)530 b Fc(m)12 b(i)g(l)g(i)g(e)g(u)59 b(=)72 b(.)25
b(.)g(.)g(.)g(.)g(.)p 0.95 TeXcolorgray 131 3335 25 113
v 0 TeXcolorgray 0.95 TeXcolorgray 128 3335 4 113 v 0
TeXcolorgray 128 3335 V 0.95 TeXcolorgray 156 3335 3969
113 v 0 TeXcolorgray 0.95 TeXcolorgray 4124 3335 25 113
v 0 TeXcolorgray 0.95 TeXcolorgray 4149 3335 4 113 v
0 TeXcolorgray 4149 3335 V 156 3301 a
SDict begin H.S end
 156 3301 a 156
3301 a
SDict begin 13.6 H.A end
 156 3301 a 156 3301 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.7) cvn /DEST pdfmark
end
 156 3301 a -110 w Fd(7)523
b Fb(i)5 b(f)77 b Fc(l)18 b(i)h(s)f(t)g(e)33 b([)27 b(m)12
b(i)g(l)g(i)g(e)g(u)h(])o(=)o(=)c(e)g(l)g(e)g(m)g(e)g(n)g(t)26
b(:)p 0.95 TeXcolorgray 131 3448 25 113 v 0 TeXcolorgray
0.95 TeXcolorgray 128 3448 4 113 v 0 TeXcolorgray 128
3448 V 0.95 TeXcolorgray 156 3448 3969 113 v 0 TeXcolorgray
0.95 TeXcolorgray 4124 3448 25 113 v 0 TeXcolorgray 0.95
TeXcolorgray 4149 3448 4 113 v 0 TeXcolorgray 4149 3448
V 156 3414 a
SDict begin H.S end
 156 3414 a 156 3414 a
SDict begin 13.6 H.A end
 156 3414 a 156 3414
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.8) cvn /DEST pdfmark
end
 156 3414 a -110 w Fd(8)741 b Fb(r)6 b(e)g(t)g(u)g(r)g(n)86
b Fc(.)25 b(.)h(.)f(.)g(.)g(.)p 0.95 TeXcolorgray 131
3561 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 128 3561
4 113 v 0 TeXcolorgray 128 3561 V 0.95 TeXcolorgray 156
3561 3969 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4124
3561 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4149 3561
4 113 v 0 TeXcolorgray 4149 3561 V 156 3527 a
SDict begin H.S end
 156 3527
a 156 3527 a
SDict begin 13.6 H.A end
 156 3527 a 156 3527 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.9) cvn /DEST pdfmark
end
 156 3527 a -110 w
Fd(9)523 b Fb(i)5 b(f)77 b Fc(l)18 b(i)h(s)f(t)g(e)33
b([)27 b(m)12 b(i)g(l)g(i)g(e)g(u)17 b(])7 b(>)12 b(e)d(l)g(e)g(m)g(e)g
(n)g(t)26 b(:)p 0.95 TeXcolorgray 131 3674 25 113 v 0
TeXcolorgray 0.95 TeXcolorgray 128 3674 4 113 v 0 TeXcolorgray
128 3674 V 0.95 TeXcolorgray 156 3674 3969 113 v 0 TeXcolorgray
0.95 TeXcolorgray 4124 3674 25 113 v 0 TeXcolorgray 0.95
TeXcolorgray 4149 3674 4 113 v 0 TeXcolorgray 4149 3674
V 156 3640 a
SDict begin H.S end
 156 3640 a 156 3640 a
SDict begin 13.6 H.A end
 156 3640 a 156 3640
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.10) cvn /DEST pdfmark
end
 156 3640 a -136 w Fd(10)750 b Fc(f)15 b(i)g(n)61 b(=)70
b(.)25 b(.)f(.)h(.)f(.)p 0.95 TeXcolorgray 131 3787 25
113 v 0 TeXcolorgray 0.95 TeXcolorgray 128 3787 4 113
v 0 TeXcolorgray 128 3787 V 0.95 TeXcolorgray 156 3787
3969 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4124 3787
25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4149 3787 4
113 v 0 TeXcolorgray 4149 3787 V 156 3753 a
SDict begin H.S end
 156 3753
a 156 3753 a
SDict begin 13.6 H.A end
 156 3753 a 156 3753 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.11) cvn /DEST pdfmark
end
 156 3753 a -136 w
Fd(11)524 b Fb(e)6 b(l)g(s)g(e)19 b Fc(:)p 0.95 TeXcolorgray
131 3900 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 128
3900 4 113 v 0 TeXcolorgray 128 3900 V 0.95 TeXcolorgray
156 3900 3969 113 v 0 TeXcolorgray 0.95 TeXcolorgray
4124 3900 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4149
3900 4 113 v 0 TeXcolorgray 4149 3900 V 156 3866 a
SDict begin H.S end
 156
3866 a 156 3866 a
SDict begin 13.6 H.A end
 156 3866 a 156 3866 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.12) cvn /DEST pdfmark
end
 156 3866 a -136
w Fd(12)742 b Fc(d)8 b(e)g(b)g(u)g(t)53 b(=)70 b(.)23
b(.)h(.)f(.)p 0.95 TeXcolorgray 131 4013 25 113 v 0 TeXcolorgray
0.95 TeXcolorgray 128 4013 4 113 v 0 TeXcolorgray 128
4013 V 0.95 TeXcolorgray 156 4013 3969 113 v 0 TeXcolorgray
0.95 TeXcolorgray 4124 4013 25 113 v 0 TeXcolorgray 0.95
TeXcolorgray 4149 4013 4 113 v 0 TeXcolorgray 4149 4013
V 156 3979 a
SDict begin H.S end
 156 3979 a 156 3979 a
SDict begin 13.6 H.A end
 156 3979 a 156 3979
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.13) cvn /DEST pdfmark
end
 156 3979 a -136 w Fd(13)307 b Fb(r)6 b(e)g(t)g(u)g(r)g(n)85
b Fc(.)23 b(.)h(.)f(.)p 0.95 TeXcolorgray 128 4041 4025
29 v 0 TeXcolorgray 0.95 TeXcolorgray 0 TeXcolorgray
128 4041 4 29 v 129 4041 29 4 v 156 4041 3969 4 v 4125
4041 29 4 v 4149 4041 4 29 v 0 TeXcolorgray 0 TeXcolorgray
-128 4183 a Fe(Exemples)37 b(:)-128 4252 y
SDict begin H.S end
 -128 4252
a -128 4252 a
SDict begin 14.5 H.A end
 -128 4252 a -128 4252 a
SDict begin [/View [/XYZ H.V]/Dest (lstlisting.-3) cvn /DEST pdfmark
end
 -128 4252 a 0.95
TeXcolorgray 128 4269 4025 29 v 0 TeXcolorgray 0.95 TeXcolorgray
0 TeXcolorgray 128 4269 4 29 v 128 4244 29 4 v 156 4244
3969 4 v 4125 4244 29 4 v 4149 4269 4 29 v 0.95 TeXcolorgray
131 4382 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 128
4382 4 113 v 0 TeXcolorgray 128 4382 V 0.95 TeXcolorgray
156 4382 3969 113 v 0 TeXcolorgray 0.95 TeXcolorgray
4124 4382 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4149
4382 4 113 v 0 TeXcolorgray 4149 4382 V 156 4348 a
SDict begin H.S end
 156
4348 a 156 4348 a
SDict begin 13.6 H.A end
 156 4348 a 156 4348 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.1) cvn /DEST pdfmark
end
 156 4348 a -110
w Fd(1)287 b Fc(>)-14 b(>)g(>)59 b(d)10 b(i)g(c)g(h)g(o)g(t)g(o)g(m)g
(i)g(e)25 b(\()13 b([)g(1)g(5)26 b(,)13 b(1)g(5)26 b(,)13
b(1)g(5)25 b(,)13 b(1)g(8)26 b(,)13 b(2)g(2)26 b(,)13
b(3)g(1)g(])26 b(,)13 b(1)g(5)g(\))p 0.95 TeXcolorgray
131 4495 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 128
4495 4 113 v 0 TeXcolorgray 128 4495 V 0.95 TeXcolorgray
156 4495 3969 113 v 0 TeXcolorgray 0.95 TeXcolorgray
4124 4495 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4149
4495 4 113 v 0 TeXcolorgray 4149 4495 V 156 4461 a
SDict begin H.S end
 156
4461 a 156 4461 a
SDict begin 13.6 H.A end
 156 4461 a 156 4461 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.2) cvn /DEST pdfmark
end
 156 4461 a -110
w Fd(2)306 b Fc(T)5 b(r)g(u)g(e)p 0.95 TeXcolorgray 131
4608 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 128 4608
4 113 v 0 TeXcolorgray 128 4608 V 0.95 TeXcolorgray 156
4608 3969 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4124
4608 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4149 4608
4 113 v 0 TeXcolorgray 4149 4608 V 156 4574 a
SDict begin H.S end
 156 4574
a 156 4574 a
SDict begin 13.6 H.A end
 156 4574 a 156 4574 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.3) cvn /DEST pdfmark
end
 156 4574 a -110 w
Fd(3)287 b Fc(>)-14 b(>)g(>)59 b(d)10 b(i)g(c)g(h)g(o)g(t)g(o)g(m)g(i)g
(e)25 b(\()13 b([)g(7)26 b(,)13 b(1)g(1)27 b(,)13 b(1)g(2)26
b(,)13 b(1)g(8)26 b(,)13 b(2)g(2)27 b(,)13 b(3)g(1)g(])26
b(,)13 b(2)g(8)g(\))p 0.95 TeXcolorgray 131 4721 25 113
v 0 TeXcolorgray 0.95 TeXcolorgray 128 4721 4 113 v 0
TeXcolorgray 128 4721 V 0.95 TeXcolorgray 156 4721 3969
113 v 0 TeXcolorgray 0.95 TeXcolorgray 4124 4721 25 113
v 0 TeXcolorgray 0.95 TeXcolorgray 4149 4721 4 113 v
0 TeXcolorgray 4149 4721 V 156 4687 a
SDict begin H.S end
 156 4687 a 156
4687 a
SDict begin 13.6 H.A end
 156 4687 a 156 4687 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.4) cvn /DEST pdfmark
end
 156 4687 a -110 w Fd(4)312
b Fc(F)11 b(a)g(l)g(s)g(e)p 0.95 TeXcolorgray 128 4749
4025 29 v 0 TeXcolorgray 0.95 TeXcolorgray 0 TeXcolorgray
128 4749 4 29 v 129 4749 29 4 v 156 4749 3969 4 v 4125
4749 29 4 v 4149 4749 4 29 v 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
