%!PS-Adobe-2.0
%%Creator: dvips(k) 5.999 Copyright 2019 Radical Eye Software
%%Title: /home/fenarius/Travail/Cours/NSITerminale/docs/images/C5/modelisation-POO.dvi
%%CreationDate: Mon Nov  1 12:30:40 2021
%%Pages: 3
%%PageOrder: Ascend
%%BoundingBox: 0 0 363 273
%%DocumentFonts: LMSans9-Regular LMSans10-Regular LMSans8-Regular
%%+ LMRomanCaps10-Regular
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o
%+ /home/fenarius/Travail/Cours/NSITerminale/docs/images/C5/modelisation-POO.ps
%+ /home/fenarius/Travail/Cours/NSITerminale/docs/images/C5/modelisation-POO.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2021.11.01:1630
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 872 2018-12-21 20:39:31Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup xGridOffset add y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% $Id: pst-text.pro 891 2018-12-29 19:42:20Z herbert $
%
% PostScript header file pst-text.pro
% Version 1.02, 2018-12-28 (hv)
% For distribution, see pstricks.tex.
%
/tx@TextPathDict 45 dict def
tx@TextPathDict begin
%
% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def
%
/movetoproc { continue { @movetoproc } { pop pop } ifelse } def
%
/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def
%
/linetoproc { continue { @linetoproc } { pop pop } ifelse } def
%
/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def
%
/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def
%
% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def
%
/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def
%
/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def
%
%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint
    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
/warp {
    1 index
    1.4 mul
    cos 2 add
    mul
} def
/warpmove{
    2 index {
        newpath
    } if
    warp moveto
    pop false
} def
/warpline { warp lineto } def
/warpcurve {
    6 2 roll warp
    6 2 roll warp
    6 2 roll warp
    curveto
} def
/warpit {
    true
    { warpmove } { warpline } { warpcurve } { closepath } pathforall
    pop
} def
%
/circle {
    exch neg
    % .5 mul
    90 add
    dup cos 2 index mul
    3 1 roll
    sin mul
} bind def

/circmove{
    2 index { newpath } if
    circle moveto
    pop false
} bind def

/circline { circle lineto } bind def

/circcurve {
    6 2 roll circle
    6 2 roll circle
    6 2 roll circle
    curveto
} bind def

/circit { true { circmove } { circline } { circcurve } { closepath } pathforall pop } bind def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.03 2020/01/09
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 }
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% calculate the line coefficents Ax+By+C=0
%% x1 y1 x2 y2 -> A B C
/LineCoefABC {
  0 index 3 index sub % A=y2-y1
  4 index 3 index sub % B=x1-x2
  3 index 5 index mul 6 index 4 index mul sub % C=x2y1-x1y2
  7 3 roll pop pop pop pop
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% calculate the 2-order determinant
%% |a11 a12|
%% |a21 a22|
%% a11 a12, a21 a22 -> X
/DeterminantTwo {
  4 1 roll mul 3 1 roll mul exch sub
} def
%% calculate the 3-order determinant
%% |a11 a12 a13|
%% |a21 a22 a23|
%% |a31 a32 a33|
%%   8   7   6    5   4   3    2   1   0
%% a11 a12 a13, a21 a22 a23, a31 a32 a33 -> X
/DeterminantThree {
  % |a22 a23, a32 a33| * (-1)^(1+1)a11
  8 index abs 1E-5 lt { %a11=0
    0
  } {
    4 index 4 index 3 index 3 index DeterminantTwo
    9 index mul
  } ifelse
  % |a12 a13, a32 a33| * (-1)^(1+2)a21
  6 index abs 1E-5 lt { %a12=0
    0 sub
  } {
    8 index 8 index 4 index 4 index DeterminantTwo
    7 index mul sub
  } ifelse
  % |a12 a13, a22 a23| * (-1)^(1+3)a31
  3 index abs 1E-5 lt { %a13=0
    0 add
  } {
    8 index 8 index 7 index 7 index DeterminantTwo
    4 index mul add
  } ifelse
  10 1 roll pop pop pop pop pop pop pop pop pop
} def
%% calculate the 4-order determinant
%% |a11 a12 a13 a14|
%% |a21 a22 a23 a24|
%% |a31 a32 a33 a34|
%% |a41 a42 a43 a44|
%%  15  14  13  12   11  10   9   8    7   6   5   4    3   2   1   0
%% a11 a12 a13 a14, a21 a22 a23 a24, a31 a32 a33 a34, a41 a42 a43 a44 -> X
/DeterminantFour {
  % |a22 a23 a24, a32 a33 a34, a42 a43 a44| * (-1)^(1+1)a11
  15 index abs 1E-5 lt { %a11=0
    0
  } {
    10 index 10 index 10 index 9 index 9 index 9 index 8 index 8 index 8 index DeterminantThree
    16 index mul
  } ifelse
  % |a12 a13 a14, a32 a33 a34, a42 a43 a44| * (-1)^(1+2)a21
  12 index abs 1E-5 lt { %a21=0
    0 sub
  } {
    15 index 15 index 15 index 10 index 10 index 10 index 9 index 9 index 9 index DeterminantThree
    13 index mul sub
  } ifelse
  % |a12 a13 a14, a22 a23 a24, a42 a43 a44| * (-1)^(1+3)a31
  8 index abs 1E-5 lt { %a31=0
    0 add
  } {
    15 index 15 index 15 index 14 index 14 index 14 index 9 index 9 index 9 index DeterminantThree
    9 index mul add
  } ifelse
  % |a12 a13 a14, a22 a23 a24, a32 a33 a34| * (-1)^(1+4)a41
  4 index abs 1E-5 lt { %a41=0
    0 sub
  } {
    15 index 15 index 15 index 14 index 14 index 14 index 13 index 13 index 13 index DeterminantThree
    5 index mul sub
  } ifelse
  17 1 roll pop pop pop pop pop pop pop pop
  pop pop pop pop pop pop pop pop
} def
%% calculate the 5-order determinant
%% |a11 a12 a13 a14 a15|
%% |a21 a22 a23 a24 a25|
%% |a31 a32 a33 a34 a35|
%% |a41 a42 a43 a44 a45|
%% |a51 a52 a53 a54 a55|
%%  24  23  22  21  20   19  18  17  16  15   14  13  12  11  10    9   8   7   6   5    4   3   2   1   0
%% a11 a12 a13 a14 a15, a21 a22 a23 a24 a25, a31 a32 a33 a34 a35, a41 a42 a43 a44 a45, a51 a52 a53 a54 a55-> X
/DeterminantFive {
  % |a22 a23 a24 a25, a32 a33 a34 a35, a42 a43 a44 a45, a52 a53 a54 a55| * (-1)^(1+1)a11
  24 index abs 1E-5 lt { %a11=0
    0
  } {
    18 index 18 index 18 index 18 index 17 index 17 index 17 index 17 index 16 index 16 index 16 index 16 index 15 index 15 index 15 index 15 index DeterminantFour
    25 index mul
  } ifelse
  % |a12 a13 a14 a15, a32 a33 a34 a35, a42 a43 a44 a45, a52 a53 a54 a55| * (-1)^(1+2)a21
  20 index abs 1E-5 lt { %a21=0
    0 sub
  } {
    24 index 24 index 24 index 24 index 18 index 18 index 18 index 18 index 17 index 17 index 17 index 17 index 16 index 16 index 16 index 16 index DeterminantFour
    21 index mul sub
  } ifelse
  % |a12 a13 a14 a15, a22 a23 a24 a25, a42 a43 a44 a45, a52 a53 a54 a55| * (-1)^(1+3)a31
  15 index abs 1E-5 lt { %a31=0
    0 add
  } {
    24 index 24 index 24 index 24 index 23 index 23 index 23 index 23 index 17 index 17 index 17 index 17 index 16 index 16 index 16 index 16 index DeterminantFour
    16 index mul add
  } ifelse
  % |a12 a13 a14 a15, a22 a23 a24 a25, a32 a33 a34 a35, a52 a53 a54 a55| * (-1)^(1+4)a41
  10 index abs 1E-5 lt { %a41=0
    0 sub
  } {
    24 index 24 index 24 index 24 index 23 index 23 index 23 index 23 index 22 index 22 index 22 index 22 index 16 index 16 index 16 index 16 index DeterminantFour
    11 index mul sub
  } ifelse
  % |a12 a13 a14 a15, a22 a23 a24 a25, a32 a33 a34 a35, a42 a43 a44 a45| * (-1)^(1+5)a51
  5 index abs 1E-5 lt { %a51=0
    0 add
  } {
    24 index 24 index 24 index 24 index 23 index 23 index 23 index 23 index 22 index 22 index 22 index 22 index 21 index 21 index 21 index 21 index DeterminantFour
    6 index mul add
  } ifelse
  26 1 roll pop pop pop pop pop pop pop pop pop pop
  pop pop pop pop pop pop pop pop pop pop
  pop pop pop pop pop
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 1990-2020 The LaTeX3 Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
true setglobal
/pdf.globaldict 4 dict def
false setglobal

/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict~
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def product (Ghostscript)
search {pop pop pop revision 927 gt}{pop false} ifelse{/BorderArrayPatch{}
def}{/BorderArrayPatch{[exch{dup dup type/integertype eq exch type/realtype
eq or{BPToDvips}if}forall]}def} ifelse /HyperBorder {1 PDFToDvips}
def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx pdf@lly pdf@urx
pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly exch def dup
DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx exch
def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 4.00005 0.49998 moveto 2.00002 2.00002 lineto 4.00005
3.50003 lineto pgffill 16.0002 0.49998 moveto 18.00021 2.00002 lineto
16.0002 3.50003 lineto pgffill  grestore} bind def

 /pgf2{gsave exec 2.39105 3.38733 8.26909 0.79701 pgfe pgfstr  grestore}
bind def

 /pgf3{gsave exec 4.00005 0.49998 moveto 2.00002 2.00002 lineto 4.00005
3.50003 lineto 16.0002 0.49998 moveto 18.00021 2.00002 lineto 16.0002
3.50003 lineto pgffill  grestore} bind def

 /pgf4{gsave exec 2.39105 3.38733 6.97394 0.0 pgfe 7.80008 2.40001
moveto 7.80008 3.20003 lineto 11.20012 3.20003 lineto 11.20012 0.8
lineto 10.4001 0.8 lineto 8.6001 3.20003 moveto 8.6001 4.00005 lineto
12.00015 4.00005 lineto 12.00015 1.60002 lineto 11.20012 1.60002 lineto
pgfstr  grestore} bind def

 /pgf5{gsave exec 4.00005 0.49998 moveto 2.00002 2.00002 lineto 4.00005
3.50003 lineto 16.0002 0.49998 moveto 18.00021 2.00002 lineto 16.0002
3.50003 lineto pgffill 0.59776 pgfw 8.00009 4.00005 moveto 11.00012
4.00005 lineto 9.00009 2.00002 moveto 12.00015 2.00002 lineto 8.00009
1.0 moveto 11.00012 1.0 lineto 9.00009 0.0 moveto 12.00015 0.0 lineto
pgfstr  grestore} bind def

 /pgf6{gsave exec 0.59776 pgfw 9.00009 3.00003 moveto 12.00015 3.00003
lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 4.00005 0.49998 moveto 2.00002 2.00002 lineto 4.00005
3.50003 lineto 16.0002 0.49998 moveto 18.00021 2.00002 lineto 16.0002
3.50003 lineto pgffill 0.59776 pgfw 8.00009 1.0 moveto 11.00012 1.0
lineto 9.00009 0.0 moveto 12.00015 0.0 lineto pgfstr  grestore} bind
def

 /pgf8{gsave exec 0.59776 pgfw 8.00009 4.00005 moveto 11.00012 4.00005
lineto 9.00009 3.00003 moveto 12.00015 3.00003 lineto 9.00009 2.00002
moveto 12.00015 2.00002 lineto pgfstr  grestore} bind def

 /pgf9{gsave exec 10.0001 -0.49998 moveto 10.0001 4.50003 lineto pgfstr
 grestore} bind def

 /pgf10{gsave exec 0.59776 pgfw 4.00005 4.00005 moveto 7.00008 4.00005
lineto 5.00005 3.00003 moveto 8.00009 3.00003 lineto 5.00005 2.00002
moveto 8.00009 2.00002 lineto 3.00003 1.0 moveto 7.00008 1.0 lineto
5.00005 0.0 moveto 8.00009 0.0 lineto 12.00015 3.00003 moveto 15.00018
3.00003 lineto 13.00015 2.00002 moveto 16.0002 2.00002 lineto 13.00015
1.0 moveto 16.0002 1.0 lineto pgfstr  grestore} bind def

 /pgf11{gsave exec 0.59776 pgfw 8.00009 4.00005 moveto 11.00012 4.00005
lineto 9.00009 3.00003 moveto 12.00015 3.00003 lineto 9.00009 2.00002
moveto 12.00015 2.00002 lineto 8.00009 1.0 moveto 11.00012 1.0 lineto
9.00009 0.0 moveto 12.00015 0.0 lineto pgfstr  grestore} bind def

 /pgf12{gsave exec 0.59776 pgfw 10.4001 1.60002 moveto 12.00015 0.0
lineto pgfstr 0.3985 pgfw 10.66016 2.49069 moveto 10.66016 3.15096
10.1249 3.68622 9.46463 3.68622 curveto 8.80435 3.68622 8.26909 3.15096
8.26909 2.49069 curveto 8.26909 1.83041 8.80435 1.29515 9.46463 1.29515
curveto 10.1249 1.29515 10.66016 1.83041 10.66016 2.49069 curveto closepath
9.46463 2.49069 moveto pgfstr 1 setlinecap 4.00005 0.0 moveto 5.08101
0.0 6.00006 0.9 6.00006 2.00002 curveto 6.00006 3.10002 5.10005 4.00005
4.00005 4.00005 curveto 2.90001 4.00005 2.00002 3.10002 2.00002 2.00002
curveto 3.20003 2.60002 moveto 2.00002 1.60002 lineto 0.8 2.60002 lineto
16.0002 0.0 moveto 14.90016 0.0 14.00017 0.9 14.00017 2.00002 curveto
14.00017 3.10002 14.90016 4.00005 16.0002 4.00005 curveto 17.1002 4.00005
18.00021 3.10002 18.00021 2.00002 curveto 19.20023 2.60002 moveto 18.00021
1.60002 lineto 16.8002 2.60002 lineto pgfstr  grestore} bind def

 /pgf13{gsave exec 1.5 0.49998 moveto 3.50003 2.00002 lineto 1.5 3.50003
lineto pgffill  grestore} bind def

 /pgf14{gsave exec 1.5 0.49998 moveto 3.50003 2.00002 lineto 1.5 3.50003
lineto 3.50003 0.49998 moveto 5.50005 2.00002 lineto 3.50003 3.50003
lineto pgffill  grestore} bind def

 /pgf15{gsave exec 3.50003 0.49998 moveto 1.5 2.00002 lineto 3.50003
3.50003 lineto pgffill  grestore} bind def

 /pgf16{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf17{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf18{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf19{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf20{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf21{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf22{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash
3.00003 0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto
-1.65689 3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689
-1.65689 -3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689
3.00003 0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc
pgfstr grestore newpath  grestore} bind def

 /pgf23{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: LMRomanCaps10-Regular
%!PS-AdobeFont-1.0: LMRomanCaps10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRomanCaps10-Regular known{/LMRomanCaps10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRomanCaps10-Regular)readonly def
/FamilyName(LMRomanCaps10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRomanCaps10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-496 -290 1501 1100}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53E3095EF5AF4F01AA2B5C2934E5345
1D88D311DB46915432DD0F408112AADBDE54032868560673D08129A1793B6FDD
D1D82ACA35A8223DA18ED7A03094DE92156D5D0B42FF6C449A1823CEF7555FCA
B35573829AE5A55A1381600C734661125E28C2C51EAD103F3DD496F6EA7096EE
8FD3BEFA4FBD7391DF4FAAFA38FCC474FC632D8A8C890F5276629AC2552B74C5
3C8C4B1DF8FC58A3050CDF2357DD1F98E83C4D077AEE399C268ED59CDE9DFA68
BFE8629B52E8DC41DEEC0C9E84BDEA39B4AC552839755CBE2DC820864DC9612F
16D1A532150DE0137F647DAE154785D152CEE57AE3FF8F671B20EFA22C5711DC
B9F8AA784F222AE1183B01E2AAC6254D7994624D1B351DFF6CBF3B4F7B1DEC63
CCA90AEB60F15A33F727877927E80AC8722C27C584FB671FEB518D1DE33FAA48
3173C60B382AA1F0B22369BE368CBF749E7559509205B38DF4326DF6A6161C4F
E3553EE51C42032B00F69252E9043B7928B2824FCDB5189B3020CF1D596C59B2
135BC9D16D037D87C31B091D7C4DDDFAAB32D68F9C396CA3BF22BD6824BFE582
93520934A63EB6473935B1EB4801E3ED6475320DBFBA8C2F3F98F03DB06C3F05
B0B06847EA50E8220C87171F32F759EC361701793C97953550ECA6D4B28EC2FD
607D51FF237723D79DF208680711F2DAA6172AEBF28B736756CFE9D56EEF0156
FCC46EA96AFB2A804A3BEE06E0A59EC3652633189E85E68B5F3EFA7CBF91E3E1
D7472E66CCE86A28D2FE799AB043DA1C74EFBEB5C5AE6123A71702861463B56D
7BC98F38D9C0B29C25645142AD8BE57953956B838F815285B8802EE4BD0817BC
404C04D71B0FDFF6DC455B51B305A005DD7796527CD8561337EFB990C47DCC87
E2A042ECD49871111D71785275257C303761638CB0EF14492762F5A1CB7BD472
F0B01BB09FC6863455F33DE4BEF212E60A9021B94F42EE04735AF673E3D24A74
35BBA4EE640862CC2C49FD18BFD4A21FA259DED7A5F13C74E62BB9A4633098E0
15F6E5DD084E687F8909E2288265BB98D64189CEA29065AA87E8BB636C3FA965
32FA00F88F4C98217A140A3162D903EDE2880C3743AE61EA1D3E2DA8EFD0F95E
E88605CF6872260A0C808EB620E9F9156627EEF4B4F07CFF943A70AA730E2B56
3A5912AA256C9519F4F8A46E512BBA9F099FD0A4E11C873E88DFFCD25D0F0805
B0EA04ED10F3D442573A56648C90B3D8C4C44741A535D965E48F0F4AD114076E
79FD9D0DBBC50EDC121CA1ABABDCA567BB9D28CB3E5AE17F756273333E84F341
637A1BDB292EADD055C971FFA94B4E72EE284C44A9C294B2B18D9A2E50D90BEA
A161415478975E25D1E928C5867A495F88565BA02CEBBA62BBF3976782EE4B45
DF434B01660CFF3F89AB4FEF6BC7F7D7F83EED9F947931149B6CFA3CC38B537B
6C89BBCCE6C448AC5C61D17285F9E2E321C96C5501772C32C2B6183CA0BB5DEE
4B7C3C8F0D77EBB70D341E595B5A7BFE2B471EAC3CE6C0BB9A046AFF0D3CDE8F
81C142E70727135017B39A5A1AFBA562AA96BAD4D66958AA329DDE6CAB90B3FE
38E49F75EC083CE28D488E75BBF597DB49E3F42610D596C1D91A878EE680EB84
C857186645C467EC0164AB6086D2C2D95C1BA20D36E2E8C1494640BCF0294FF2
103926BD4D83104F9B660EFF434CCDDC96CC25E9F54CDC9E19D966D068DAEE4E
1255BF293797A1BD1FAAB9AF2BAB48057DE0E3C276E3A5117350E877FFF97EAE
242EFCE7ADE5DAB83C34AC97C66C21F4CE4812FA0F007C12820899207C35F3B0
14133645FB9F8E53A6E2A1CC08CED4D33CE9B69E7A5D0E31726EC3BF9FD98C0A
E5BA1BCF5166779F26081CE1DCF8FCBF985B41005EA0771D91D5727FB447795C
A639A5C9057E97FDC795EE6B7C39AF1AB0338BACA1A1E179F1AF0EABA623864E
553A210AE8C03A525E467DF8744A8B6DB57E04C99BF7F568041BF90B5EEC2B73
9A109B37B07E8A668E68D117A3E0C46B11617838874E7F840DAB45050FC413A5
037107717FB43013DA06FF41184DEF3526C06FD5BAB6F3763BD358D6931EEA4A
860E1A17079A59DEB9C7A4C0FC68AF583ECCBE6FE0329A031820D4D1DA9D11F0
2D650DFEAAD917E7F290E617903792223A2AA23AE7069154690EB370F940BAE2
395473B7C2F70EB4DF0E94468FBA1B6D5F1CCF350E3930ADAE5249B3D5CAE21B
281B22FAE6EE3AF85762C36421F291360670443326A44F1F4EA0E002D8B94CDA
144057B4D5F9FD416ADBAD209422879682A8D0D249CDBAB31345F45FCE24252E
D45316EA9E34A9EA03A6C950682BD7E72A81DC4FB2B9CCCA501761022009926B
5F55C9CB2855D5D049D3C73CBEF771A594437E6E1C6B0F15FB3102DB7A3DDCB5
3BF882D33E5A43EF201EC0B415DC701E8FE4FD3505B993F5CFDB502635117336
387D170AB42F95FFE8C79DD1C5CD4860749F82198FFFDAE1393586EFD3956EE1
0F7A3EC03DBC1045CDBCCCC3950C6C443E1EB25180C92F0640CE6A8AF3AE7EB1
81C2E4C11086C2ADDBAEFF30348287C9C3FA8B34A76654DD7AD692702C462BC8
6360DF3B3C743459AB088BEA49C5D06D6EB67124373543A2C18439DB2227247B
30A41C72B8836026F60961F8EA96BF0A4F3E778B9002DD7488DAD1A42BC257C3
C7149CB99114E73DDD3F9A78BBE152E1BAD8C1A22328682504131249C8468ADA
F74760105E07065AAB5CFCACB826EFB41D1A7A6F59DC8AFFD065CAD27B9EB202
0C908E91E81B07A92AD544D202816662873464594EBF58A0B38A156331EEAA0D
0BC24BB44DFFFCBF4181A86F0A4BD25C3921CD2BA8360AAD322C021122E962CD
756DE48DA93798FBDD034F4304D5EDBBA164DC9E9B3414D00E9F5B712394804B
D4BDA26FE7C2418EEB63B7E393108CADDA24C91C1962272359F2535FA1D1A508
FB5023D07D392FDDDE2AC0E0708B430846E137E6CA0B5436653A968FE24DF8D4
6D2003B45B60BB1B6D62DA735DA6689C2C03F196ADC11B27E608674E546D2074
A3AD2FDED543CBEB81B9271E5EDD5DEAA97BC86C948570063933291D78AB5298
EA92E13430C7CA1FC658FA031AAD0EA5B01D22253D6C26BF3F435E6A6E9147BC
1B68EA135225157DBB906F75C799F437E74F0E185AD518B7E446C30415CE5799
01D43D8E2B08A04783C5E1AB77A3E641BFCD7753EC20A9D8AED089AF77F0C5D8
96228A3AF8A96329A5F0EA14F929D5598F4437AB944A06B5EEC3343EB29A9271
70DB0EA31A11EE7634FD75CAEAA480F411AFB3A933234276082E17993B297043
B2F75674AA08FF419E5CBFB6407856406CC9C52353EAB3C79BAAEFD74B08910F
452C7FD271C1B9BACA52194DCABDB4284B77C573C5A7EEA60AC017A3CBD6BA59
A1AC2BACF1545011EA84CB75B2C5ED13C702870ECCCD60554EE8C5D4B9F2FB5A
92DA2D93B04417CC9240E9C692407250E7D47C97F9B3A11C8CB3EA31F589BDA6
00E115E70395E2E4C0A29284FD2C9A8740851EDC442490FAE8321683AE4A530F
EAC44A63E2B90731652CCDDBEEC58F573951454FE7AFA29CDDEF96E951AAA9B8
EEB3F9BD5F13210AEC71AED98317186244404D4812EB1E27A42058A387726A74
FD74B84CEABDA95CAA798540DFB193A897AEC52D74BB6747FB9CD5A633DF5375
2834D9E6147A844A7DC46DFC69EB7B63E6126545B566CA3099246CC6E5F85E04
5FE750DA4A9B403FD293CC4363897147A165FB658A4E7A74EE6C22C2737A8107
63C405C5DD41D7ADF7112DB70AEF68FF3B8773848FB918BD1D4D4963B96902F3
A84599D73EB3303D7B74883137EA5EEE14B739F60D45D102706C99D92E1CA501
846CC8AB6FB3AD6AC55575E66721F58FC39D634E3C68CB3E2E24D61819BC8515
9520ADC69ACA26ED5D96EF04C2AD0153759083DBE7DA9B89D877992A8DC821FB
5A141A58CC2A46228F2F642101F5B23CE1ED3A79F2C6006E04619B81578C0EA3
C3A72402DFB9B35C8E59BF582621648F48CC413EDED067EF9BEEEA1134788A6F
839F2C2FB22529A38153E830445FFF661BCCCA767DB0BCACA4693DF0370A9804
2E527BD65EC1E77D32A07DD7E1149715178A46263EFFFBE20CF045D1F128CA45
50BA9D6D6DA61B84D00CBC9FAE5924F8209ED49D597C20A0CAD1C2D3424E9CD5
8A179A2BB40AC54D2E45D206928BE43A964D2311F07753D0CE4ED2AD6198A473
F1F9EA821DEE99E27D331F0559477F0CF1D9731533BEFE67747FCBD3460F9E80
3E409065E158DA49560DBF9060489CEEBE735CE28EE4ABC81450157CB7DDACCB
72A0FB560345386569D9DEE8754EBA551B635693EC4FEEA9CDAE3564D5DB1DC8
0645A5DFBEDC32C58223FB032506BA87BA582862CCFE1FD43197B1C7953BD8F4
DA1AEDEC773D5C063965683DCBA5BAA51ED9F1F601F0F088C4C2859090964202
143D72C13B747461135CBEC72D82A7C1602B824629FA3F773B665ADFF0135A65
ACB5311765991CFE59744E7CC201895FC7C2415439EA0112F1804CEFA65F5653
92ECDDDC6641E651C4CAC35F163BC67A18CC18839FDC4EB001A723EE59734A18
EB12CD7C54DBA9F8C47428CFC2B96879AC6792E812426A33CD78A844120B5B67
120BA7884AE4336F3FEBD08B7B93B550CC6D1ED120AC16308B6DD2B9A8F686D6
AA020E49172C02DA888DE03EC12D4EA38E7D327F0F4C117F34AB17610F5D7F76
C207FAF88C8FAEF2476515A41387CA09174006C8F2125DB485D1F37C940A8F4B
3E4DCC91413C3273DAC2A3FD2C49E3C9AB8FF8EFC8DA34C873E57D38B01DF487
3772137582971F3249E6694A24DA005C84176455BA74C8A97447861732DFDA1A
5752B5222EDD9012B45CF0DF0644B2E5B7AE5DA72EFE54D294768DE021DDC1A7
C76EF77C6E740449BEE713B7E40F77F7F6EBB4BF933204D9E5E28D522591D17C
997D66D0491D2D29CFA7F4C88869E2D53DBAB54563CC5357F755C48E49F4F103
4A8645A68D436C42FAE21F2C158167C6BA509BED34E0B0DA099434D7FE957C3D
52C2AE0E9177DB0B86627B9DE43A7CAC25E8A1D8B592CDD4375AD01D63E8F687
46B8029C831A0871A8F9F2E264EC10133C444A86EF7C38608D246A1B4379C45A
7C34D82EBEACACC718F5905E864DD54CA062EA1FF406D9E2E42031876A1CFCE5
8D611A8435A8459CAAD2B618D4BF9115DAC5B425EC8BA4590DD3555C2E4BB601
97FBB232487FD786E57CA1229401BF634D445C93FDC157796BFA5502F105FB79
F31A554D8BF98B8303CFD661ABF9A72CA0629AA65989A7AA9AC8B6930AE574DD
D32FF4BD7C970D933C47EA4515043C418049903E3F36885AD45509FC3CF6F31E
975595338AAC667E1ACC0A3D0AF0B6A0995FA0FA6A1C7BF34A0E25EFB2AD7503
D23492E7E980B2C4324736378E0843451E4D9840AF87F800D3B6E0248AC51AEB
F052E92CDC3ADAD81E2D2AABE09DD98F5AE00F69DACA0535AC90368B31AB3110
CB4EB8D00DF6246BA012FA3416E1EAF822DCAA6C0C4142A552F0D97037FD695F
92137A8CEB212797BBE778DCDB2D0F6726BCF115DA15374CB688BB2F98BDC3B7
21DB34D4C6186E5CB2E597FE2055304950D905D6AFB4390B62A3173B522240F0
D3AB72588D98BAC8AEF2D4837251BBBF065C283B7C7B3BD08D7708CF72309950
D176CFAA1D155312586A9ADC136D9155C3C6ACBDEF8BA575387DD0D73162CDDD
96166F795921D90204DB9F3E3FBE084A2DECAA1964AD31D9D2F4743E73B73557
69B7ED30FCFA10238AB9E263F42C980A603B024C1844C08D06E40C58072E7D12
43257B02B8CAFF2AC2FB7868A7FC61E6AD2CF8C5CA6111D592F4184FABB849A3
676A8D175D44E71B9CEB49676700958F17D09D8B8D37746E5AB46052350D2D3D
6947F4B53D2B14FD50B4CEF4398D2D2BE7E7A3103A10B82E0E27702BF83306A0
C3A89D9AD2A517E03614C8349282F97AF2292BEEF24F886427E846C0BD15A807
62263CD8C96EAA02F137C2134A47241E3F15A881F6A2FE15BD745CE175B92169
7F9D9FF0803559FEA211098B4B45E88443AFB83F96DECD5E0B32C5EA329CB342
00253C789CF8F0CC740618BA5DCDAD4693F4E17363864CC8AB69FF9238E0B18A
F4114B94CDF5DADB44EAF5DB260D8B8BC3027ADFF7DBE2AD88CA3261C59CFC1E
C0418A91E44F1718D13CF485B3CAE0E01B327EE29107319D27F242A8681C2397
F448C46BA164AC7BE0C0A73FB423A2AD05E28D490FE15EBC6A6956477E8B7DAA
F1AE28A6B253A55B77C969975DADE58C1A863D53B67DFFDE2F48652558A2D707
BE5A2C968491730CC85A6FAC2CF9D670F1FB69EB4966334402F76388AD6AB9DB
661A04037C111998C99A0A09C9002478AA31E4240F13D73182F04410A11A88EB
D5278ACEC4A55F1A082D537B3C1EE890A6FD2ECD5F4D5DE99814AD4A07983923
64FE0BEFFF89A5599AA47087D62EBF48C20DCB99FD2BAE6853877991059EA431
7ACD1B3B44D9E5F789B7877ADFBD0F5BF0D86E0DC7B68A3F2D8B66E59BE53EDA
B3DA137D59CC6EFA0F579F8A1C5E4FFF0AF7FF5CCE31B93E4048CFBFCDADF56B
75CC3A9291183CA5F1FCD9BACF833A9D58F384DC27B11B3380AED6F7A6719B66
AA3E4CF7A10D86C2E63BB1BCEFB27E668CB9A72C46083DD42729C37C41DB7347
D16B9C41AAE346617AC1DA9EDB3A2ED55D49DDDEFA61EA1F01DAD0A1CEAB6B77
A4F4A47CB6269D49966E24FE51C7D95B1FBCC83587A2536500DAFBE0CA7772A5
89F8D9CDE0932B5D3A1819CB2732460837EDC62035D7D232AD000EDC4598F22B
950DDB38150538219C18735C6FE1823BC63C569503A4B5CBCCDFEEFC01872476
101D65E487A587BCA95243A1EB5BA0431C918A879828150795CF2BA78D4E55F1
FDBABB8BF813CB9DB27CB44AA47AA0D4E648240D872FB7614B5068382C766444
22AE18999FFE37981189CADA735CF09EBF4678CFABD1A6D3FBBF8357D4DC0524
BC6A4F583F56C127E3666DF8476D5A8A6CC0A5B1420DDB2B7E75B0A8C76AA6C9
98C9AD482CED7C243C9688323D96A3F96517CFF904BA26767486441050388419
88EAA2FE0155EA8DC3F8EA9DB943789A191542089E218EF40FB4942319C28B52
2ABAF817F506EF45F7262128F935F4893B87C2220034C6F979B5B3DE3BA5858C
38C9C1337A638C0E5C575727665665C88AD38E13EB02AC3AE5CF08B53BAB7FD1
3E263C2549247D8DF74C6863D43B0266C927FC0C7682845F3E4266B7D327312E
FB770916FBAA37015011999870F0AD19B5EB1B9D54BBE7593C45B8F41C203368
AB891AA0006AFDE458F28C88624B7CD1FEC7F9EF2C74697D12EF1AC78B34E566
672E71A0A5B53E6FEB67E477C72E6CDA1458BC8DB8E1DA62D42F448933905E64
F93DE35FB61FDFA5A4C78E426D6F68DFE42F76B1CF5F095DCFF46884A1AD7C81
AD55FEE036634EFB88A2B1ED19E37CF0B527D14F008E134FA0711FE40BC8A925
3E5027D8FE5FE873E98EEF621E059DF969C14E19E1CB4EB43B64E6957AEEF5C1
7D832383CC11E5D6419158E6A838BB3106F54CEB953F0C16D9F1CEF47274C469
0FA0620F50E5BB14A0F359C4C172951461E884747D6E5D29114039F59776D65F
0A6D9E5088AD245098A9CFAE5B44CB364AE68381B4DD8789E1D35D4AE06A0511
07EA4D90D3FFD25223604AF01B5F46C739DDC81B47978F0BDBD79F9A6A53DA20
0FB56DC483BBA3EEA535009B3A8AC750DA63EDE128761D164A9843955BBFEC72
13307B78378886F93C1C822EFA66A75E01A68758FD97C5928BB2B1DCDB63CA10
90BA2CDF850F9E1A5C5856D41D8FB730E048E0EA435515BF52FD453207213F3E
13FC83A36F2D86CBF4AAC4ABBFA39688BB222A81685006706434FFEF6D6EE0E7
0900D14EF927A2F0C3A8BE6E4CBC44070FC79D85C273074A7E31F7C63BC4DA2C
8E1C1CEA7000F63CA5BF75389D057C364EB8747A414F55FB4FDEB79A695E89B5
B2C3987863CB4B29ED6BC20B0687BF97346B111AAD8EDD835B26DEE73E360BA2
4603A6B42398895F1F95D5F0D0225D8EDA64581718ADF5FBD7277E57E9919BD1
0558E3A5022F158043BEB6A6820566EAD71325D69BF3460E9C3C7E0C0F1BB457
048ED47325A221E91DC93BC429BB517890A8F857C2F54BA01FAAC221D701C672
36E08C7A56288E339620A52776770935A6A193FA21A3DC25DEE1FF03955E5671
C075DD53A5A82FE7F773815B2AA555BB03CE19B2B72268C40F772CFA2CD7A598
A024222D413287F7481B9AC0E13B169DD71090499B415AD8AAFD99AB5DE2BBC1
1B40ABFB7CE655281EAE4F27B1E027C2A23E63378F5339306A9F79BF2523B16A
083F710C102E07B67194745D7159FCDBB10B6459273EFD03520F2483A9E6C0E5
665B54CFCA5BBE96B39E69D388D9229C1E361D6C47FF84A49AE0C70F71EA41B0
2E1DDF2DE8630CFC5F2C8AE1E5BCD78411D194A831BD263880153BECC873A9C7
1796A7807E2345AD02481ACECEE7243887DBA28E28217389829F4D31CECC14EB
7C948E6E6E104A080B9441E0BC3624493ED50AB68A0B22A779D7D816629D1E36
FBA83C5BD9BC2C57BCEA7F9A6886C9F13EC903E886DCB7291933374888A65847
44692F87A67A218BFBCC8896E57E4DF116E24E0B2C3DACF2BB4D4F11C5FE4243
E79E7B7164A60BC32326C2D36742C0D71D21C63AA4DEC82918F11F62984C5F85
3516C1419DF929D29EAF4490A01F57EEC3A27B18E547B77AB0DD203BA47E66E3
B8932462C277481778614D372B043761D928D66FCB9D760D3096B5CAB2A1DD50
A23E443D8A30572DD2A12550B2D61B5B8D3DA00ECDF9FEBE424C8D607EF6BABA
6D1482E9C494671BB7A2FFB0FFC63B7D9F12B2F4A61E66537C09C6F27C5348D0
4809C49896E18909ECD6892BFD2B0D73A84B6E682E463E69702266FBCF04AC9A
0CAB64076EB9EA884B2F5A13400556D1D07217CE900C16506F570143710E9AEE
87EB93711F2A49C15DD57EA42ECA4E6E8D58BC4A195405629408224D07020749
9DF2F43E7D52E442E951CEB1C926563979CAD433B91341797AC8D4E9842A2025
15A73ADB4AEAA456ACCF3FA9FD5C0D7DE2197E5C96CA1E77BBDA711E73F6CF45
F31613A24A30023BEA9A207E8E4E119B5356CED765F73F6935478D5133B9E761
4922209C25478E0A63F78F3460EDD4F64B4D2A5B3E660B614F62A53AB284FAE1
FEB947C50CE8BE18F24922B066F392E4321F75C42A86C70CC8E4AE8F6F84FC65
3EAE2D03CBEBEDA67F83FA8F1322A68097441DA3511D8FE63394AA5E6B7F441A
D12126999FA71ECFDD70607C4FFA2A1D6C138C8A750A892DDAEF50284D2CEADF
C997B78F9AF18E63822DA479E4279465A6CBD43EB5B5DB8B72E96306900A09C9
002478AA31E4240F13D73182F04410A119C72285F06F1773BAEB6FC8CD2EAC6F
0799C903D18C64FE378916128CCEBF8943967A33F856A40BA5B302782175203C
082BC703ED67F8956F3C757799D61A801701C34E5F0311D00A7FF64F31505AAE
C9170516D38C247C25CC98E436D6B0129745977065519D41FEA05DE277A2B681
6846BF7BEEBF9D323B549CAD581F17DB11717FE745194FD74DDFA29EF38C14A7
D31F074565A14EB60996DCAA0762F3C701390274F4A233B7C21EABC56271E0D2
6F4D8222E82DFAE6D7CBDB0C2F268BB8BFFF2897D51564ABBBFD16D44724C916
7C7F909DCEC3005810B42BD9CA1B33DDC4B3D69A6DDA20E104C5BAB68F3D943A
9B0E24B8327345DBD550F4D3A85FEB2007E09F408B6FB0408AEBF36BB9459C6F
41B3B4EE5B63571F18E7077F1990611E243FB8A327EFE9CBBBE8F9B76ABA9F6F
7335FDFC57213D5D25DAA9FF60D639DE068E6459B14ADFA9FA485D2B692C522B
F8E5FB4531330E02C9A8EBCD6C3AD71A1E40A4D3F1B93134816B1E636A2327F6
240BFF595E24EF8941707987E8E672F486552480FFE3D56EF1EC01FC6D827091
334762A700EE46CCFF0F8222069A239E9C090C056C50ED33CCDF1DC4CD54AF2B
27F3898D35DBACB95E33FD81D89FFDEA459395AEB1FD2A2313C4619C3924D6CB
4C7156FED518164901F83DF3BAA6A0ED3E1145BF13B94FD26442237EE2121C14
F116A1114838B333EF11ACBCEC26CB9945AA4F8F616FCC76E4B0D7BA8C76364C
F343FDCB3945F586BFB542B229FECFCD917788FCB6F16B6C1C40E3E00F45773D
C20480C8D6BB75756FFD8F5C7A6D66A69276CF920B7BEC2E368A095DC1E3A421
F0C532042E003906F07403A54AAA87A7CC1465CB48ABFD9A879E5B8A847E9323
2C034664E2C43DF499BE3810C38A4BA01A31B5C80138263B8E0DA1FCC4238D71
517DA16343332416C4BFE510F180C63CD039D399B1D9C4208BDE9F2A8208512E
1E9EB36A96421288D8A846DA9F3D3B8DC89359340E6D6E4BB80425136F59F84D
8B2D3548C5EA909142D33AE8B2BDCC9705D1EC8848293ECD9599CAADB700A176
76B96C607DC49759734D8F1EBBF10A7E363AFBA180CC2897C588A09FDB14647F
570BBEE55DC7F2AED3E75B7AAE70ADAA461BAE73B4CBBA029A5BD8AB7E658340
5263C510185BC34AAC67226177133AA7CD431BB67C5261595CA2A18E0FD97413
5F38D540014D38ED97AC4F6058C1B834BD195096C9A61145921EBA98A70B52C5
BCA89089361DA0D7AB8B979BD91DBF43FB52495F20DFBF159A58F3D4BCCF3638
857C25C73B78F5C35FF0DD1AE8036C3620836DA8BB5CE31BAA722DDB36BA5642
CE4110C57A3A4D95D4D5188EBD111ADAF13004B95BB6A1F91C919C28F67F64AA
534A2AF512C1F2BC5BEE9F21801512D2455DD4B94E0C5EF66E5F4252E5511A19
172AE7E16B6E84C13265E7A78843F80CD719C44633862B102690CA956190CC61
CEF424A54E62107D2ADA1C19405B9CB4C39694E52AAA56E56F82678A4327EB6C
A34EB5A6A8B1C41ECCB9418C1094CBAB96EE405DCF58E3A569DF07092225A683
511770EAC39ED55DADB32778CAE943CE6E928D5C8A44F0B691350DC0E4B38E4B
5B5868A34E643E6075C7A82C17F569049E4A119632C47683095845CE5281573D
CCA18F596C2A638DFA3A2A0E4088072A3C9E36431D9A9656D60135F7B7941CCD
EA0BC0168ADAE8A1716BCAB61A1FBE56DE145488C0306C6EE589C2E71F0433B9
B8200015BEE977FEA781C3B8034170F9FCF6324AECC2554A56897CBF7F8B7139
ADF77EC4DA414C2CC5424CBACBFF09AB4F4962A697CA30668A1809DD72B71A4B
BF6C618A4EE64F0673FBCDF58BAD19C9CFA9D528D104702E4AD8F19711F44C14
87A8A062B0E7D307423CF2852AD05690FE1912DDF6CFDCB995609788A176928B
EB2B6E6007ACE26260537E178406C35173ADA131F8880C15E753D7BF2E4BC089
2953EAD550817FB700822EB157C4BE8DE18B2AC08FBC05291063120165B4379B
1A4DC9D967DBF6AE8C59B9584224CD65C6361095861A84EA1B7A991DD837F2E3
96EA1B598CDC2B459A81B19A090AA25E8D0036616784228ACBA46F5DDF43D3CA
439B4506CCFE90F24ED9CA8B3498FEDD429B1B1B8550F2219E7EF9CC64983581
38BF2645040109A3D2D98CB563D4CEB5C030A7D2F6DBF55063AB7EEC2FC100F1
26DBD977068AC186C94D6BDC3E849EABF685A634431D9FCCDFCB4A1195C76A6A
D5138A35588B794EF9FE03CDD26508432F9ACEEC0C86CE8744277F5C32166AB5
39082917BFF7EF652D589681C60B99DD4F132248742876953526D119551A8B29
CCFE9D9B35C9A04CDB15B160C3E2B285BBCFE14C06C490185488510704D87E32
41AB1B0AE52F898A234931F910D5DFE85FE2218C80C58E34DF3EA0718B7C8E2D
6511B059092391D17C997D66D0491D2D29CFA7F4C88869E2D53DB8DE6F4258E1
A49C6B865B75EAA21C02F7007978FF715C0E3EF03E39BD49697D30B8BCE8B934
1D2DAA72F7FDE1FCA3BF72DB85657F4A3558D4585AD1918E86DAACB86231F261
EBA0BB60C59D40F48DF92AF2EB6EC67815D27BA9BB672751D8A658C45E07B955
8E776E94EC0991B31A4BE92420B6D9F5E6FA1855513B7131C7A04B00038E48F3
936442CB14BD2C5658C938BC685FADEC8C6514A728C83D7E00DFD4EDBF4044F0
E247D957956045B16131155F4296C5D97BC3D1F1C93A6E82767543FEF3277C1D
AC4869CFA865B49FAFAEE9506D2F10DEE673E177D6279ABFFF8E757851AA4497
5855AB9D1E3310DC01B08B5CAB5346609FCB048910F3D70211659CDBCE05F073
3AF96804623A11636472F5845AF507C8EBA6518215D75034119AF4A4A9D8A9F9
24028ED77937B477662CCCE77BADAA08B20B9392171DBF9964BBEC03013F324B
D4B1E3053E4E12EF73AD5B6DC764101CD4CBC3FC2A4F1010CC1DE442DDC48044
4449DB76A321ED1517E750F551AAC934621B52AC90EE56F9DEE0666C2484BBCE
C64AC7004C28C6681794C0E2CA89BB581FF57DDBFF7865063A2AFC57C76819BE
9B78D0F4DD3B3B23D69A58E2C82C1981EB8E18B5EE80058433952B6985256120
82298F0E6E36968C8C0932BA0E02AA42C71D9E27302A88E52BB8B1924F057B9A
498D69CCFBFE7E3062895E706E20DE8096399754FB32677CFC456E5CBE116BC3
DFC67B18E95621D03FAEE1831A15D5205891AF008F869D7AF5E4EF1989FD377E
9724F1BD2A06FC203245246BE57408FCC7B3586AEF5F4BDD49CBC31AA72B65C3
BBEF8EDD9B4EEC32CD7D3C7C2FEC51FE0DA9A33F1C12A392750F3D1D4FE99AF4
D9A1772129A3C3490B8B4529805E0E306E95001663F0EE156891E1537A7E03BD
98EE97FA23D768F48EA462E9C8ADE136814E40E9494038C8C4146D9E400A2CF7
0467645A2898C551E43963ACD7E7868CAA4488EE815D40E28CA54BDEF9122801
8A6DF526D5C66A9F11AEC07A100C7CCF00A1BBB7177AD139137E1E992023356C
5C546DEE5401E08A00FD38A70551FF9C8A68CEEEC3E24A8A8D78F1B9CA757727
B2A7D3A46798F5F975A2784717BCE6E4D0B66E0000BA7FDB864CFE04BD7CE607
0FC5EF576B1DE985AAAC8126AEABC40B64A430C0AA868759E4C0A2689D828D2B
468A3858BB337F0E6842EC5D9C0D5D2596ACBE7E4BB9B5198903BEE40A9F1FEE
2CE3375D67D77D11B92C07A9CE1FFEC4FD57B0891FBA2E75BD5D5D17618A9ADD
DA75ABA8C339C5AAB51AB884232E9D200A40A68E4799E5E842BFA51FFFCEAE9E
1A97661A47326B6308D41B37E844E66954DA9032B1333396FD545000E364E7E6
A79BD95977419E006D51A92C2CF0046A5F542DBC264C611E8BD569D4E7894668
52BDABAADD6B9E6E1B71655C46DE2F505615AB470D93AC31E7FC99288D9FB5EB
919A1D92B466676E57429E6BD74FFC6257A2E0CE1910FF41A7B70BE8A29332C5
DA24457DF7F2AFBA61F8B754C7582A8C089F5553B7617187C50EE0D0D7941F08
41112068656190221491CAE0922A3C733FB9D45F81757CFC8ED6BAB5630EDD86
4ECFE0D6959D5114EAAF1612C970CAA2C9472CA9736B50613961F9E542A99E1E
9EAB27BEF2BCF74FB40E6263AD649C32D00F99B504DD1602FBCC202CC8046C60
9E8D29EB8FCDA4F0323901508EC6D0D3A034E320755C9FBA42428460AC283786
C0E4C0F45DA2C8C78EE355C3B5C349CFAD8F885A3D4CA30C74613E0205AF23AA
2719BC14013E7859D68CDF0BDCFE954601924C473B761EA72FE8B82C2A961083
82D4DE8073A483A2C65E3AACDF4106A11D6366AF685F88D99F32705FFB5C3190
91904AA6F8C52B2F1E9E66AD9E7C3C3C96F6FD1D2A69856DE6ACF6E51395ED67
AD441581D7A43EC3324CFF3DAB7E17D9D291D0CF9CB9086D116D56152BCE3296
95FE8A830CCF318CF0DDD078FF2E319A37EB5CEFDBF36492D265A24D538031F5
D1B00F3C41E627B1DB9876EE658C50AB2BD9D2B92C897D83ABBA76105BFF7E79
29B8B36A0F3C3F8378B427A87086EA10A597E1623529F8734C0E096F1BCE149F
8B0F4C80FD9ED2073D21FF50B841774BC20AA8870AA9DB4ED19128C657C8098E
D5BB7691BBF8C1F6ED0358B085054144022BE6620E3BE3BCFF07C029D465A074
684244F63F8367906C7C4648EF33244ECEF4405FCD839685C2BD7D5FC1353416
8DDBA44083519C586F6BCA610DA67BCBB18285BD9C0C838711A76C5B5D57F356
EA414904DCBB1C1FF12E5BFED5253156E3A76B45CE938395E129746ACA103A34
C38A7E6808E1BA082060EE975BBEE0EE2360D53A6C2EB0393A21C2984E95892F
8AB221D586720A71FAFBE2C80951B24AAACDF129B2BB843A35372A2FAE18AFAC
C74586D3DD54067F7779D9DA069D7897314C617685D05AE401C710E8EC03A64D
8C462D8E458ED29A12F56A9D3FC1A5A59BB391F99ED1BC64F8850BD7F2551F3C
144EC0BFA8529787A6F7E7F29C2C9D31F4094F9E218E053ED37FBC0EB204AAD2
53FF338FEC59B284251A985F7377BEAA49275B5E62BC871BCFAE9AB64224D592
847AE57C85675CF04BFD1410B56E616F68C39FF5608FEAEC6E72A40B22AB733D
F071D6B92B62F165192F48C0198F2957A103CB2F0D1F55AA122628853277D256
C2107390CC3E2D2BBEB1220329E86A68680D1F9DA963B401CDD3C429BD4CC3F9
6584C065FAFEA3EEC98A137AEAE50529E1F15174DF4AE9067EC4E67725672D65
4D5081FCF2663644C985191135F0156722F0BF1DFACDE24649CA49CBA47F93F0
201678944115499724D8B9052FB4F6E0375B8F8640A75773638943DE96B8C4EA
EC254CBA1E05D8C31B9C3178133782ACD3465C5CA2D45C688F3CDDED343F64C6
CAC65D8218E75ECDA7292A0F2FBB4F6B9DA8379C3AADF23AB9DC687ACA989BF8
6F24F23F6F74F71AD0561F50EAD7CB37952D1A0E9F744FBE8041D1C3EDBAED08
9845046259EA79899713DD1E567F28531E7B25EEE41EAC3D35A3AAF9348E13F1
671DB099C4BA1079D778A6FA8FA13E04D067B55F84954495EA3D40E2620204AD
69A42D29B4D95429C7651244276269FA385532E9B57F1C2D2652933D4F316B85
7DD80D0BF6EC0333F920B9031F7626389BD3E392CFB2EEDE173452C0642741F3
C72D84A0DB18152D56A72ECE236FD3A3914574309A3384CE66C909B7040538B5
E7DE80B6DE055DC28C1B394FBCEA0BDDFC44213AD960278AA498A967D890C295
77ED868877C03C1100D8EBF3CECA4AADE5DCBB3F0CFEA4E8A5DAE149F6483523
881EDF02DAEDAE3EE928160342AE6170A01E13666A84DFEBC5A5DC04BFB1D49B
F5BEB4A8F19D264A7F4B1C259E4B1010AC355CD9D1DD0C6F18999CC47EB3AAC7
B89EEEB9E2F9CFC6BCDFD9A438C10C8C604E64AB2F9488EA7B1344329A6DE47F
D59BF4A2987AD80BF0054F72ED0CA0451E5D8A813AD6697E53A43ACACCADDACB
20AB6BFCBDD95D322B8478B7485BE9C86F055D7217D0F46FDC29D08D6CD71B9E
1DE1C50C1C3C85C14940A830DDD392F93F6CE1294B62411E6DF77D4A4A4D889F
D9D7A6AC1A896380F2762679E60FA6E763176E1B2512B04580233972D9211954
9CBE53B0896667EC7ED9C97F909B8B374E4975E93D9FD32DFA0AE84699D182CF
6C029A8E6564460CBE4D5EE06C24C4F502E4EB602446673621049928B01E78C6
FC5FC52B1CB9BBE02BB81F2886C558B9F2EB0504A2F8002B1B13E2A496759FF4
2496772170C511EE704B4308A3727F64393E392FB6E0369BEFA855C8CF4E76AE
27517A9B3ACEEE42F3101F44998749B33FFFB35AD715BB0DCDBB2D35B51730CB
8CC9D14A39917EA3055C85D171C0378299712D1177AA7469F470279E73A0EB1F
BE7B70C8CE0AE57426572795B0826AC0D3E445C98DBCFBB63EAE33B6E75C7E71
157123DE44DE684057683F923A2126FE2A788552F7A3483384B6E646EC0415CF
6D4002CD9FA8779392B0A780E97EEBD2450DDD1ABDBA993B98A90E50CBF66121
08A4F43DBE0FE09467C33DA6A1C61F02BC5847C65C187E5B23DEC4C625C286EB
9AC7E30F0BEE1991402F2BC62D606C038AF2B098A79351897E7B6222B6D73635
3AC4E3D4C203CC50342491D2F70A528226650D38258FE2EADA6E4E1D582F4723
F2143CD07E0E6958254B6D96C9E5485E26B07047B80849C0A77BEDA560ECAE3F
CD7FF41BA0AFCC480F261D7CE694477F749F82E5B4AFFE12BA90C032157C7688
7E325784917AE505A158C5B3D37C1041ECCA0BA811777B5019CCAC36997DFE14
2D7DD000A0E766DFE0F272E311047B6227781696AD545FBE5A80E2A32D7F8462
912966E9E97A67D036FCC3FC5375A979B78F473EE7AF6AFC189BF5E14FD0D21D
656B3EF50D47E923F43BEA1BE16CC04EB2A966CBF4FE707BC7472D56ED0C13A9
66448345074B1F2C00C537A79FFCBB1A784959B43E58965C260A89E7E3BB7ADE
BA9C882AAEE60A026DA25D51A46651A1EE03A2CA61DE42D78AEF016749873529
5CFFA292D5B7A1FADD93BD3CC207D8623EB59F6B3FDF302403A9C2D794743851
18652EB37CB7021F80792262A4D2F354389D1ADE3C1E4BA1EB8855BBFECA191D
4B80212DECEE21CB16BE0DD2A5B6AE12B959415091545A96B78F6F4DDB5CDAB0
611B3248836DD9E54650EE2D2F3EB92489594667525BAF1656DE0175464EE264
860B6E310854C80BEC744D529624024E35566FF0EF71D60ABD9581F43AFD7EE4
A7099844282972DDAB121A040D3D7CC97870F88C3874BD5C497F391141F2094F
8EAB4CC90B12E10F8AE6DC2081CC4C4860CBC1DC3427060C9118E755156C02A9
9A7EF38084D649289E4600F5A67256788F406EFD36886F531DB9D7ECA48701B5
D4511FF86644AE56F46392D5804039C0FF5C49D1AD996A67AB0914D83D859C06
AA049CA26AAE7F316592E7DE134F775A835D46A69D1C4BBD6B53124D7433EEB4
4C724ED69C8697D06A5246DF0C49444B5390076A43C82C91B982B19D7AA8B615
16F4BE3585A899E98988CAFF8DCCEBF494D5676912D5E868E3877779F910B174
AF933326ABB47935AC900487A2273F6AA2BF735C312FEA9A1AC7289E4B43B953
D2EC568761231C3119E073DB7DEED7DC4A04968B69F792644FA8B627CF923CFD
F8CAF8B9C8FB9AC27C8F2C2F86FEEE11AA06BBC0027C40E0F9DE9385F79D5989
98FCADE704A1035C780BD03AF71BAE6A930CD02B6C4D07D6D0998EA18EC7CBE2
73105CE6378A2ED913F14D20C272D14060533ADF2FAB44A60E6395AF687EC88E
429815282D632366039F37D3D55E93A63A397B46FBB2B6757DD564C0BF55E0AC
8EC66E031CE51B2D7D27AB41A21D646C236DDEEF1A23DA64A61F0DBF36B86A59
893F277DDD906E28FFFDFAD7E4B7610E6A108DE7F71F178FC7448D4C2E985072
E0811881511DDFA4A3C730DD7CF5C1E29104673D7270F35D580E8F3BA9BC94F1
31ED0110C946D421B42532E5BD4FE3D8B242EDF647251781ED6CE249DEDCA4A1
FC94E0ACCAB225D733E123302C0C9B054E97386886E8AB5D03167D702466832B
32DC035DFAF601E2EB6615E116FA9A44B8D0586FACDA34A0D0DC74662C3F4FA1
736A4D67CE0650766E29A79AD6ACAE003485A4C21B389F45F8022593DF513D31
54E07738A2E39D6AC9429F1A359112CA28BD92DC4EDA5C72C6F813D53F1E9C37
34B81C2CB5207702A9A0194F0DA8D335635EE2174E2DB99DAE9AF89BEE304763
BBA1AA81F9D74B24FA7EACEFBCAC72DA4AF7C3A7C06483A7FE49E9118C94F79A
DB280E5CC383595D57C51F4C969C464C1CB1712283C42A77AE7874BD4EE0AB63
64E2FA747EE9A89161F93F178D7A24AB2C747B80BDF0816DA99795CA28792796
8E85C3FE71046BF6F87A97CD03FB8CB1FA267164742287C9F05BAB96F90F2374
8B2DA4315C703763D6B35A4836A2AA71B39B7AF614B09A3D9FE54E8B1AADF323
785074E2F023CF26547355053A5B40A0BE90965C2C34C42797BA6CD6DB3BEC3E
2ECFC061F2F9BAAF636F17EB88960EA70F1F0F037DDF2061921A72E46589CC08
EA87EECFDF36B819B07306C00D700345CA2E6113E992D2BE44DD9B12DA394FF3
5F44EFD4D133019C4ADC916AA6F4F5FE8A642DA2E54F42220C01688C94717B2F
1204BBE9A32B02C569FE47B75784AF1D9300E4D8EC13C0B542DB50991CB26D44
DFA0957D4DD0665F0BB9EFD60F9D0ACCDE739B576500ADBDD6E0D981C2149AB5
368FF41481D6B8DE8662E73CAE558AC3FDD6C48D353FC68A77014365407D48C1
350E58ECA8C0532F762F64A11900664ED4E6D4DAFDF0C64F9446C356216312C5
F614AAEE0D8590A3A26854ED51C4A9A1C13E40363B10533A8BE1080729D86FEA
A2193FA6D6C34422C34643DA9557ADE417810A48AA2D73D0E0E9674BD4C83958
81C15ACFCEBD5772A959E2C99D13BA11BFAFF1112E2CCB84677CE03DA00972FD
3106F8FB5AEA60ACB194FB8FD49395A70058C942F80C2313118CDFEFF258E569
E39372E34E3FF5AD87298C696722D1D562D4A8478555769EC2C44150D849A0C7
D966B2EE653CDBDBE9C8F352887F8DB03D70F9E692F0A5A3160110CD4097E3E1
FFD0B18758DF9ADE231B76140270F0A05D53FD964DF5CB87A377ADBF202718B9
E47B1DB784435B7EDEA4BD19388DDF3C5B474F5374D80D469AED90BA08D8A04E
A2CF32810C68ABDAE536D95D46BCDAAFAA5A8301F7DDCD3BFE10B6C23F1C7ACA
39A6117CE4DB91E197AE348634BF44B2108CE10CCBFA1B838169A4577A9B225A
BF538D4B10A9C5FDC801B144AF82BBCCC3E63B027A4C3070D38586C67E8A16C5
60DBC0D4941CB6DF6A0D1E7492A6DE009C0F464678859A03070758C38629FC34
410FAEDB24E5DA8ABA2868658526B74727FCB164F21405F988059A1BCCE6038D
184DC74E2E186A664391B7B84E2281ABBAB44B8B81D92F63481CCEFBF4264ED8
900D17D9632421541DC60BB39BB060ED6495AE98F6798010F76FBF67CA47E5CE
09E60F0839874318C8389E298F554671CE327B099B0AB9BDB8192271B478CE0B
38151243D996CA5AEF4354211E3953CD7AD90239C1FFCA061A21652100B8E2F3
DCA6DAAB758BD7FA7D29C266129C91A2A5804ABE9DBD230FB37711C0E606B1CD
01AF00122F9A948F54FDFAC13A9C437607321D3E4C10059C1091823B03DC61BD
809BB14C7D4FD2C4E6057BE5F5C51A242002726250A2AB4E8AC7F70BCD0AEE3C
4CCE6E1793589423B942DFF7E8267BE5FCB0B209B090009718A49C6D7256EBE0
D843690DF3AF3420D94859E53AEFC9D1DD75BF4A02A4E2C44D18720A9F9D707C
9D341698A75314282E4770738AE96FBE5811DD097EB0065B1E01ABF5E2D8428D
248B16047FD72F0059E35DFEF5A8F444C41D300E540D53723F45F0E20277695C
CC2E54A25041A959AC738AB6CDEA6486B7EB9914CE42558ABC90B623AFF1FA2C
B3EE64202FB703CBE8249A14C37B54C54CD69DAD2A5C2183103109D6F82129B1
301EE091D9F7A4D345114235F4BA289528C04940A830DDD392F93F6CE1294B62
411E6DF77D4A4B7EEDDB6330756507D8BDB3F97266E6A31040AE138A8469E758
4D0670E527BC95332D13B3980549FA02073BC0A45FD5AD5AA0468323052D1205
BBE6E794D7FC7861CC42DCDDDD4A4A3EA5B0A1FA84E55ECA7617A4112459597B
716E81960CC0321BF3AC8193758B4610EF33F894F09C9ADB7C4531253BFAD318
0DBDF8DEA31BD5BB3282B15C22014FBA359AB5BFF346F5DDB0BD589A54893931
D3F46EC04582CAC86BBA5E5E515335B3ACA75A5A7E5F16E27E8CBF4128859E2E
97D48C02844AB8D43C84FB19D8B311E2E8146C7D3D076F43B3F9EA8A848D7E8D
0E219B61F71B5D50F4DFB79975EAD0E794E842C213CB237B187A7B54F41B5443
3526B5BCF13D2DF1472686B200B23FCE6AC13FAE056EA1B304C5FA713A88B4EB
663FD7959C6D491010F976D4C7EA2FA6C18E22DD503E8981DB670CF5CBD09E17
6E265CF148A20091BA8B06B993088E210C91279AAD5922A3546551F93A076B39
3E4219E0EF172C72ADE99EA91ED60447A31981F8F13BDB8CCAC4361557D938FC
4AEAEA9E88AA0FF61ED04C6C105F0258CE2084F898D7571091B18B212D48B43D
6007AF07A0FDB7C9FBC784A1C9E0506142709DA99718F36F909299F3C570E743
FBB19F4F841939609B3A3D2D388DA4DB9FFD25C55A4F377E53B352830FA336B8
CDA7B5752C68FC0637C661E3ECCBB47543C20271E2233F7FBDA8094346C06AF0
1FF1D4784AD33491DBFB17AA6A4C7C8B2518C12DD5F849263DA8B6B2C38E4741
21239515E3E3BC6B36475154CACD25A07C74FEAA2928802611B05C9CA0ECCDCD
40CE7AC49715D8BD0A6803D8B14E755118F43CE13E54945B0A6BCB5633B1D580
346D913BACDF1DA8EE9EDC8540FA56F817D5C135D554004829A6E4566D3C3D4F
50453B4C997ED2C8725BFB415A30E47844548A823BCD7D0D5F3A1B0B5789DB78
6BD92416107B1E59084B5F758E509DE66F112F49E63A16F60B6795CF0D93839A
E2FB6D0B74207F0434C9599D055D786DC25523AF3CDCD9D834D54D210461A17D
F138F3D9F5C7AF9CED4243271A1FE1B018462BEBE17138AA07373412B44023BA
4E204AF4BF3AD6DC4CF005D393672AF65F0D015C86E975DA6622238B837FDE02
71B310BDB076E1E5D2187136E1E88EEDCACC0DC5B4F3268A8831F3391A7B2A17
E1A8397AD1D30455CE9BCFB29BFE08071774366804FA232E4AE9688E40E61987
035623AB8DDEC101D55543FB93BA5928AAADEC03C130570142D6849BC5B3D044
5B30D984FBAF9F56E6FACF7C07F249FC058275A863D921A182DC7C205A93ADC9
40D3EDD5D675EE14CA60D33D1C57855BBEF5F5B024656B80578308ADA3B73C7D
92DFFA19F1A79AC9BDD3F2F88D9725FCEA44A75FEA44CE4C991729C5792E1052
A4216B17742ED304B2996DC77BEA528DD00039AA51261D5401AB2ABD3C25D5C9
A2FA8C392A82F8DC836C8E33A5B5A2FE1B6C18912CECB8E244A91E1AD8064357
046BF2F498400D6D7DC137A904C96EB7B3CA2E65F64E840DCF69234B15780303
EFD10F9B6887E40A5D78E6B1EF8305A4FCE9C00A5845D1C7E8F51710B4F1A4DB
D8E6BC200679470F5503B71479FD9AC22E7818EF7BA80719844ED6735C3EB876
E244D5CDFE745A089F2679B720C105764DA0F3744E683F88050A9CC76AD73A11
DD873632665A06A2D13141E35806D8F53E8F34D70DF5C324DEB566724FCB712F
E0BF7EC9416F02C2C3116926FBA26021B38D6E21AB7875CCA19E45CF37211113
56D1F3E208CC54E7684A70232F0EF82F448559F8CB85DD9909A74AD694DD99A2
3A6BF1BBDD51D96BA4A5207AF1044E917186B01F946EE08ECE7455EDEA610D0F
B69A58D32F41B39AF49EB624CAA6C346A08DBE65B1C054C0587AFB35100BC76C
C64E05B36DD4226A16A7822E6D523A4B3970F587F38A0E89A05611B3A13BD144
BDFA564DABA6CEAF8A444AA157E95381808E974D7CD402B571D2CD823D1E7014
31809B56C504BDB1B7D50B99310A0DAF0C020C04EF94D0D2D096B734CE3721C3
71C213B6AFA0E73C0622E2AA49C4DE54A05AFB1AA6C7CCFBD9F72150DE24DFA0
F0D5FF99461F3A9DA8509E7EE6AB98B4BB88F67796EF2B133E9F6AAE0CDA18F2
428EACE52EE14B5FE74DE6D3E114246049948C187FABF401324F9989DB792F77
814729157208E3B37B9CE3F1D0C616D951BA702DBBFC2C1B953BFC6CCA78DB0C
094BC82EC4F0BC92833AEBC6E11B70E1C0F3A18E54817F7BDD3895DF79E9BE61
9F55E9CEE03B1AAC8C7642DA07EF2F28988112405F80F2BC8A63F2CF41C075C4
DF19A0F0AD8A46F5BCC2BA12C4D68D803B840ACF32FFBFD9E8DC6ED9FA9FF379
C70C8E439578725B3F51746691838E600146F6C88E1BE994C9B91F45C562A5BE
309D5D926AE5C673625845E1981A3316F98A77F4D100499847E1102CC075FA12
10881D95D6EB2E7C492BC58C366F903F717C1A9A37719070DB1E340FB5AE3AB8
F380A19F5FDCDCFB687120DD2BE5305363019BEC0F407C2D4DA38EA432F0E7A6
D8221F23B7C33CFA77D83480566E36545DAB1BB0423C34755F88AD24878354F7
52B9EA1278E210D305677B9A4739C67ACF82AAC653B48D8D7589DAF8148D380D
77F8E7DE4DAE00D18C95C7E50A7AD744042B565746C211F30813630C7EE7DC31
054612907A0811E8EC4075D24EB0682E7602CC252BA8AC0287850F9073E30FAC
A80736C0BF828DC7E5A8F8F4569CBA4C2C3F91912C485C5DAC43C435E2F5527D
647EFABA9D63753FAB6F4BF4D7B35D01E3A198153B354914BA8E4C0BAC128B7D
4D61C2AA87093F0D9188350856B6E34E1109B826A3F23AEBD548E10C71A93759
6710EBCD5651DFA0566AF29195C653FA085F712258B8A1B9AABB8A860492155A
DDA8E704EC5CFDF86D3B00CA7934C295363D8ADB04340CB71315D89A0A06D4C8
C61AEF51A2BD2410FF027C40E0F9DE9385F79D598998FCADE704A100379B7D9E
02960F7C0D013CCE063154E006EC3DBFD9106F331F128C794D9D6EF7E18E8301
0405CAA3AF558B2772A5EB6C07862D3090AC8A81D8019BF968EE312103282494
D6472D885F3CFAD49B63B96DA5105CEC17F4DE04D7DB69822968706EB94D1720
FB2879E596D3A7EF942D50173D24763E96F2C385B9F9C34E0382F02EB8C8BF9D
3BACA0FAB8F42D90434A48E3F4993DDF5FDF93C9E21FAF162C920C27726380FB
D329D29ADDF290883487CA328A0102AF3247216D8F96EBD8D1EC18D48FEB29E9
68BEDA93F92B4398FA2E1D6CE1F398ACBABDB5DEEFFFF4DA29E095CCD0114C8B
49875196489903BAEB958166DA9C2088BF9C76C921024B55FC6D5DB5BCCCF772
26C214AE81832A9157AF1175AB47229D0F348EA969DF366D3E164E497528F422
DFFD3B72A168E84519D138C233FED4D468568036B06C33F7273ADF8875EA0E53
899CAA8CCD652C4D5F26A7E0A25B9C7C4F5C4199F13DACC7D8F943E964B009D7
64D79C3C26CF9EFBA94B4FBF6CFE9C75C0F505BE6261EB9A2CB750BE2E146ECB
DD16A1584F3EA2AB3D9A3783D8743C3597C357ABD25D6B8DCB78E81FB5B8D5C7
0217AA3648ADD641A983CA3BCD930955DFBE0DA8B9619E7108A8EAA94000C80C
AB2AD7ACA1D2D0827EFFDD05D4EDE9C2B589686F3F263BC002C8884F38F3BB6E
09768DA7EB3BC1496E363543F04DE5B6F6A9812C7757E990268FFAEFB175466B
422BCC69E8B69400CDE8AE2CF394292067CCAF4F4E32669BE217C096E518A781
20259FE222179A0B410CEF30DD249F2A5D23E5E47C9ECD23288E6C069F496C57
3ED18C446A9892616611F8E6172063E0FCB7C1518524619525DAD95ED33B70A2
CB2356886E9B27AFB10DB195E5EDDB1006AE12755599CF67E27E753AD25C1FC7
5E2D35E33B794FD8F19F03162747FB4086DE7B1C1C800BFD4F229399392038EF
1BF9E659792F783316889221A826EC20ACFEE1E14ED854D3DED0148890086099
5F1623CF43A1C00109AF4F59B91B71B9682CE60E17947EB7915938EEC8A66836
140F02D324C7B4B70BED56A8FF4C1A2EAAAFDAE8BBB5E8E952B17C07E69BBE73
C205BC659E191366CDCFD2BD52526414BE2E70272CE823A43FB0D77B53B2866E
7F21C96896DA4DEE11C94AB03CA1A32018C4B034272D9B8876DAF47EF08D2DB5
D2936909F3E8BA0936E751B73E754A73DF6685DE51FD6A9989881AC4465318DB
FF9E0E5E13435B4A830B5E77C42EE8E41CD5CA9BD0C6E714DAA34F8DC7594332
E895054E5FD3DF1EA44126CCC0345812AFE08FC784E7C4C4287D887EBAC1683A
8CE358ED73989053E0F420D2D4A09E9CFB29726F821A7787E5F817FB905AB350
D466B4D20EE18B679FC1AA857C307C4D2AB54597F47496C8889CF6CF6C6E377D
41AA9E983FF07D8B6356917744AFA6F67477386B69D3DE885AE1F8B52B0FC756
5D358E8D01FC5A9066DBE8E1FE86726B646E864416CF2B7E1E9366A136B9837C
80FB068B3D2290FDC35C286E35763A02A8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMSans8-Regular
%!PS-AdobeFont-1.0: LMSans8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMSans8-Regular known{/LMSans8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMSans8-Regular)readonly def
/FamilyName(LMSans8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMSans8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-446 -314 1510 1154}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123833081E024C973A102E5EBE9986
D95806FBDB9DD41BBEC9E98875643E43D499FFB2E48F58EF7FA59843B8CC092D
AFB67604D9EE4CF2B87CD20222F6DC988B80418F8EBCBA06EB7577DC5FD0473A
55FC62B9B4DBABB8776941636268C7D4F704AFF1C85927E2D0C03585B60D5DDC
D07A1FE61288043CFE477BEC3F1A0BB96666D44F8286474186BD74037C208527
135C090597DEC81C9F985DD84C889A3A32B3805B9A653C816C523D14F6215B89
5E57100A2E43AD20344D45AC8419E928E4DC97E1B1B2285602B23DF89E149B9C
975AAB575A17772D4BD861C8DA1CF693AC37BA57CC51B9CB825607CFDF41347B
D09648E797437823A12DA3ABDAED3E3E1042F4B4BCEC0A9CB2517C0047ECDBDA
507600F57BF0F93B33764E47B5572573253F1439C293C4CBD1F018FCF994A313
30701B46B9E83B3C16E17036EAF2F0072D5CCC8AB293EC15697C72C097565D80
BFDA02AD9357437E60FB57F31BD6E172895D0E1212674C1401A3CE2599E7CED3
EF0A11750E622958C887E58600672A1AF43AEEA1D9BDAF69147E613C610E127C
9C8190A5B3F5F9A3CBC6A9A61D1970F030ED0D623FD6AAE34DD12E7F12B00204
42C239808277550593ADE8004B53B5FC0BB124F58965745A82152F9860FA6FFF
94BFDF287A8FC265B6B0411ACFEFA520E402DA17AA6B6D0904D8DCB1A56E96FC
6A1C7300A4455F6FF98AA6226337D5FC699B1A0900F049453DCF3FCDC8A3E397
C011C9D2E55D0C2845297B4C50597F58C82B0348AC299172DD191715C1FC81E2
BA9F00D26B3D3098006622D2740A0EB0743B1ECEADE8F9697C7F782265A58C4B
7D8B174654EC7F3BB8ACCAD729170D100F5DAC4CB7CC0EEF74D662EEF94702E7
9237CDB6E3DAF2C65E5A10DDD52EB236C227C3DEAB315E5CE479878DD60BCA19
564DA461E2EC66ABD6E7B4952C21C2D3E37C7B97175C5668DB4C64CD1CC23F71
36DE0E644436C67784A3CCE2F3DB601601B011F527AAC3DFA31A51A29C8C564D
794FDAA23AD6B4540055EC4403642C9A62E6138192E19652A050AC81B2D1D4CE
B9E40F7A0C351F8C72E4CBC21733BDE3623932A66FAC82D253D8251331B62150
06FB1CC2CF016E6BCC1D7732019B86C11D799B79F33BB09CB6771F637BEE71E6
FA1A18E90331A61A3162ED7589B05BF937ADBEC739FD624F6763A3B951E33C7E
F5F1AB73604DFCC2AAE3C9DAB3E303F8B56D1161CAF14DC202B636DB484CCA84
03197D7542BC10E7F9CF2FDDFE83B006FE1A6D13C6312FFAE07D32B62AEA32B5
8B8D127C00F3B953CDA49BBEB1B913570A51B2F96D302EF8913C6BB60B5D3924
78A32E11CECAEAFB7D4C6127C4A26EAC47FC77E895E36ECD8881C06314B93496
2984C7FE400CCA5A5007E9E2A5E16116D8483EC235D20B206326C7E4FB54256D
88CC4BD4DC84B5EEFE217BE0B436583B1D92B5C563266755B07C1E9658B8DA9F
48C8E10FB7F29D1EAE6A5E1AB2F9C2FBE93E979D8C74B1ACB91AA5D9EA54F207
742D31C0B69DDD41BA88727A80869626C7998F17B7D86D4D6F2D1C5324484C73
C05C61C3CCBDF28D048F84AA23178B60E4042034918287418FB5133B36447469
4193A44EE745F76035D5073240736B4F1BCE96F57A97F831842958E6B6517018
BFDBDC3423CF739AC5B38303C3D4DF196C462C8742A5F062F69B935148E81C55
7C4E1B77F5441CDA5FCF63459352EAD6B4A2A666CC5D85855641CB31507D0100
B13895988AD2D1F4DC2FB40840A0CA3622532561939CA66F3375B5C3CC39D956
0C010A1363F725ED71E3442C0A00DD938476920CF67869A9DDF5A299FBC13BD0
1C6450DBD0DE1D9CD163520429734028AA2CB185F711441471ED972022B4D84C
F007C1D9B1D7E625D684C53723CEDC5E42A4D17F35791CD367DFB3078ACB6507
E89B97158EADF677C788A0FFC3EEB38D5ABCA560E04852E7DBC79C2DC8561F80
5C0DA1E125B17E572A8DB0D0565F05E271CF122E3770490B395E4DC4AD00B46C
36448FE2DB35CB45276DFB339097E9EF935AE0DE2D8839376A78D70FA44F1974
ABA413D7143EE4742916BEAE0D21F24A3E4D146DEBD198727ECFF842EF5F146D
57D0287D62D1A34793E173D032F71193B2E2990ECE96EF6D712B4FD780875393
92EA302BFF0EAC108829820238728C6305754EF0BDCC8B7204CBBC597F2F9C95
9B69948674FA133F77935F24EF5D7522B401F3A783BF474B153533C05AF2DF8D
DA960CEED2FF28FF48234265B4759B50D24BD711DAC557EF4F768148C131B265
25D173F07ADFE2C2AAF32AA0B556EEE562106998F7FBFAF7313B1FA589C0DD6C
A9B5A8D9DDD843E6E80330277D6DD2356D80BC6180F2E924BAEABAA6E2628007
B37A2029F3D9F5E1728F408B89D85806D6A6AD7618A93DC4A85C4076A95944ED
748D1BA12F86DCE859F1F48AC037F26DEDB1C48ABA2768E9177E799855334DAC
3760EA1B589B5562F3D48655DACF49BA37A4AE429B79608716438BD99613EC67
5F40200FE34CEC934F99C14E909440B5457AE7487221179B9885F7A063D99B45
1BFD666E82909A1D82572176422757988D43159FD814DAF574818FC2CBB20431
9D5AC85C1B43EB9623DB369D2E0217DE72D65B0B051B0CAF9FBB9BF6FBD49BB6
7E0D942F8A6C4128F6504B102B0745FE0B75AC33767B7F328A8E8E537444EA52
7D0ADCC055264CF38070833FE36F3E9E75ED639A567075C6FD56077C00902CA6
AAF0C12EB5696A397E624F888EB2B5E2F8CD8F21B4A6E6FCABA356F58CA99ED5
3039A1BFEA1C40DC1AEA90C0959232198D1F4E26CA8339782ACB8A908C5E7CE6
98479ABD173B95479825415B084F754454ACBF44DCF4961F68DBB06449776DAF
07138F356959B8327FAA6CD71CE5EC69F97CCC84646C78399E063C0AAF44775E
6D1570F08B3085066DB8C38AFFAB5CBEBC7567A0330E68DBACCE1DBF6D7A0ADE
9BF8F8AC548AFDFF12971C763213CD781D208D0E5BBB31FA3647D2B0AA7E0124
3B0C3964184341D8D1ABFDDAE449FE68185327170B046B27F59EF54E9FB7783C
8A81FCC602CCD47F4BFD25E5D4B24CABEDE1436754701F9823D97F39E01DFCD7
F73BDC4069607F52F09F53B087A3E5284B1C41859808C27C7DFDF4D22DCC6CAD
9D6A335B2BCFA6D000A7C579EA6EFFE9BBC688FC7FB98005BF250E91BF91F719
E5568DA27D69EFC526F59DABA970CB94B8CBACF31A8EBD8AB754A936A7F9A209
8050930339C0DB023D08E568308EA1D4D5663E33173E5C99CB752EB3EEB45A26
663E123B8852CA9D2E0F4A930BEDB6F4CE046EE0A9BB4FDDFA475AD631D13A80
2CB7B6D960A86183FAAAA649948FB3F0D55900D5F58F37B8866DE8F3052007F9
104EED7A5DDFC7AC37A6D9E49F46CA0B3AAE98A934A36CCDE8EDA8362FE97F20
9BA574B5D5D039A77BA46591F6E45F73DCA2513811A6517DBDFD7D818F48E683
5C26FC0C7682845F3E4266B7D327312EFB770916FBA0C65A20305AA1A087B1CC
97528D5088D1E07DE9A23C9D41F23C77C5072809B2819B32478FD58A974363AA
8F4D622C39534F12614E0DF155D72F1EB25082796DC38497B4850BDD181EB8A9
6ABE64730301A06C16A74FE25A3C3068A83A513556D05359A393B6C6929BADBE
97502F351D81614CD73E27F230046F89E913D02B0326F68EDD3146F069085199
CC16681FED2AD0A7B141001A3FC4C5D21126A66592F51AB6DEC1CD3393B65C2B
CC478177F585F15CD2912847D0F53FF2986C63691FDB76EAD40D9798E28E803B
BDDE19EB95FB140A227DF24CCB36C662C7BB5E8F7DA664D1CEC437E17D6BF29D
BA2BFA67306C1B77FBCE256EA412CD417BC3BB4B243FC3A0CAE847B3AD58CBE7
B8C5C86283EB434163C89CE51D484F7E49765600A125D6DD423540B78E744459
2036A2427850EBD6C17EF1545EEE457EAEFDAABEAD2039060F8B6BB4C28AB1B9
A5AAFB7FB945AA4671A6A97BD8C6807C21360D0C3F7742F47CBC27562830521A
7BE2EF1D993F75619EAC1B3A7A43761856730BA49A3260BA0E094D9116F8D9C6
46740F45157716658C23144649A72A043685E0A6F25531307FA0CB5148358692
A287F5074A8C01BA5518911789F7767BD4551B1A301528C4F0C5008F19618E63
B50C60FBA08F6449B676DDFF2B9DAB14A41206C3350B9DFC1DEC1CA57547928E
BF55EC09503BF1AFD89227A574BD8D6F6283BF7C4A30E256A366A29BE5ABE787
9DB7FFB127700DFE7357E50376A9CE8E4B6C4211CBFCF9709AA29144F3A40000
E75FBC7E5D5A2A65C07D4FBCBB8FB94BE05DFF2B3FBD09F11CA9C72A278C045B
1D2572EC08DE1424D242091780720E28A4055091ED6C0F733B035CCAC9A2CAA2
8BC0DF33C013CBF06EDF7DF34EAFE36D3104DADE5D30F2104A0C54D49D520611
165AAF3711B005AD3DFBE56FD60E89A4C5C968742603F4FDB0B0B6D446B29F4A
0504DC2F9B420111821EAC567FC09B4517D9443FD0145DD7514B2E09AB2960F8
D54E965C4D8F99DE6CD69EFF58A2B6AC9AF7769E0A6E389AD0B2A5D10CD4C41A
40097EF75607A937A95839A181E6E55835DA3E81C8846980EC5C16651039C0C1
ED728808427CE96611D1F832FA6DB2B8783BB484E18505891086618044B4EE0F
4C3D3AB7CC8FCC4707DE223E7620AD1E77F2C9F7045257D254633BBD96D5D6F4
5696C589BC74CA556158DA32EAD64629BDED7D3AE5205535F92D8DA29782A187
5C6C8E74B0C86C0D3A604CE160F8ED1C2FE09E0AF9A45096060911999B94126D
B0DA5E108DFE59AE74C66857C7516D99DD1DB170A10E67FAEB5FCF007BAAB24E
5088794F62025380E1B1985AA631AA151879B37FEFB6F84B7EB6D57CDE9993D2
AD4F956BCABA7F25705254707445E43F11298F2B2836FC9F145DC459ADFD7815
41EA03A5D6704780155DE7E7B00A8B99E733AA64B78236F752DCA4D16C84E03F
22C9C61D0EF5C2431DEEC9C12A440FC332666E5F5A99C9ACC79B6952D59C46B1
586141301B6535236B09184689D672FB302CDA74DB0C43A77A643142F5804346
C1264135E15756B43D90E252FD16B3D1D07C190A30D72F4DC185613B31DF5DDE
2713384F4A9810BF94FA7E0D033E338E149518B5493D7E3500577099B505E655
9BB8E9664CFA5CB68AA71040D5DC521E1CDCBD27F6AFE6B8BD4E941D2FC154BE
A826E96D9C215ADDF45C88DEB19A25ADF96AA92AED7E26BBB3BBAD087C4DBD66
34637DCCE4848D2BF6E4764ACF0D6D5F26D6B5DE97BBDD74252B3DDB8CBD26D3
8BCBF23B4CC377A5BCFC19948EF5E45DAA4B5A860155B96B4CD17D25C1F69186
16CE476C12B33F2388C1E140DA4004919027257F2186CF716C685176C94E1A15
8E799D50610BA45F2003568AF44E2EE4DC9904BCB4CBA088D3922EEE7150107E
3A46EAF7928ABBBF6F2EAAA1C54F2F501AA172055892C47614A9035E79B01536
93796F91BFA1DDEC196549ABE28871B49AAF2BFD4E836BE55BACB3C737A5C73C
170B6563DA6A0785D44A92E180DD7550442AE3E0F8C1178EFEEB5152EB512122
E9A215EBDC5652B555D498479D289A015F8545F681333A6EAC4EECDB1B8AFA3C
E22F8B07A8C48FDD4D1333898953AEE8244542BFD2849D497F9F8E166005CDD3
ADE33F6D4B2E9C167ADCE832575A237C9637BC3A58D7BB96AFD1BD3F1808F707
5FE193F6C8EFA3CB01B31B63E3DE2D592079B66CFBFD74E98EAD3245271BCF81
1FAFEB8B4AF97E8EBEF4ED0334BF03EFA1554980E13B37FEC33DF3B23FC7BFED
A3E15BCD8494AEB75615C7A8F64D13FDBD4FB5AE98A4AFF2CEB1F92DC495B23E
AB87B339CD87B09F18BB72913812F041D5C00E90C1BB3D58C1A115B39B76EF79
2F7CCB492E4F71538878B4522D1AEE2980FC421B2977AF4C08DB2DC98289D2EC
32B466D21C9B802FF1810458E2756AEA1FD732B806286039E75042D590F24D8F
E9F50D35EC6D1C9950AB0402644E83479EA265192B41D8F3E81B4761EEEFBDEF
7E850602B6815EBCF3E19A3AD3094F5C09C98519210AAAE8AE94F744C02BF2E3
4544BBB19D1B5F87B2B89BE7CBEB6ECC8848D17A70BA8DB8DD6E5B41F5D52781
B40457D3C1C200483C0CDAFE837D984A761286C76125B491DCE3489FA322F968
E512AC8A5FB7C4DADB75C72FF726049E86265687368420C97F3A415D53BCD1CC
19ACBFC6867B4BAB0208DB3C5DD474D8829CFB026CD1F9D4B7A5B18F88BC747D
C2510E822259DDA43D30C33E916524C5E3561BDFF89136385827B7980C2FE0AC
B1C470121D9FCEFBFD625B7348402BEE59368220EB2EC57A6F5DF049C399BB8E
5B26813C6054B0EFD355444F1EFA69BE5A72B52D8380C5112F4CBCCB78C3DF9F
8D82D9EA22FC46617AC1DA9EDB3A2ED55D49DDDEFA61EA1F01DADF99A7D2E492
2E00C3EE943AFDB0739F75F0F1D250DE5B233FBB1B124C8D80AC2794EDB253BF
AD5DEDF0222EB7D72274BC7E475C56DABAD14F32804F0747A3C6E7330B156AA1
E3C01687A658F558B8F61516680DB3C059EECF1C3FDF8417EB931EC402CA0F24
50CC18B4D22872FD58121FEE981541B50456D7D18E788D2DF9753691F4823461
92B463FA2680A5A1E7FED1E46283199D5A2682BE207E04BD4B435A2949159C47
091A0832D4CEDA6CF0852CD2FF4B5719114C0DA6D1B0AD44E8FDB48008504174
7A1895896B8F275D9423DBE3730633BB053B59020B7AFA82C7CD159DC7C72517
CAE1994A0A790E475C4970EC656B89AD428BF4E1035E92E55FB21E639AF66E6A
3A571A8250C9716F9F265E0F76FFF660C54AC08131B56DF060B63E750342AC61
5286E4AC04B289D3EDBE86B8052D096C5864CA94CD5BA274FD97632C6C0F0067
967A1A308B96D5816166A81DF85561DF48DAC4C5DB5A2AA6B01BD0ADBEE35AFF
BD0A14469DBE041582D8B1BA5D736869A1DF71D59811D25FDA43865CAB8E8A20
A9326D2B50B9700E88FD90913D77B6417FEE8C039C12D8CCF516AA5DD9CA48DB
26F515B6576AE85A29BA65112121E1DEDF8153AF59E1B079468F08130FF077F6
6ACC0449643C295D82C70EF177EC0C2D3AAD49BD2A0BF511A722FDCCD19348FF
FB8CC7A4CFE322EBEEE15E3395B062B933EB55FA52E425B02401C79FF0F48D18
32E838472A8F1A94A91A8330634BB7968281E22133A947416DA2238038CC1475
89C36C8196F901BF6D9816FFA07969DD0CEA6C9669890092316F6A01DA7224B0
6AAD1687DBC419EFE2BDAA0F4D090D274A7CB5AC380B1B2006B28BD56725C287
44060877B73087CDACE34651547823DA7503D50E7C2E9451C8658FEB205E020B
27F5307E54B6F4A4858CEF9F21FDECDE3DC0B24BBE34AD7B572EDF436436EB7F
ED0BABD23AD8FCBD71934F0597C65122BD563F761BA4732E96D5BF346C211267
BEED7075B675167872F7A506F4B9E4896A4AA5AB5B5B58046899C9C5993E7302
C870678DEBEB07503EDE0435F57FCCEE637518F5812EB351B6558151AE0B43E0
25D14171FA920BEDF8462A59235F808BFBFB410C50E43A1EC101E5DAF2E71827
28B38441B5B6FE9AE8268540A9FF11ADA29B5A795C29AF1758A378BBED7FC315
2013534861328A5E4673A4B180A8AE1BEA97194C88BA5E67BF880AB2CBFB7909
B93FBE74BEE6955D3E495130BB3D28B42945DA4A9455103CC33474390660C14B
978158418AEC18D647A6DA9DBCF5A10C5007ADBE32E5D0E412FC23069DF8D162
A2B400EDE05DF412F5D3AF80887D36894E21A64F50AA7D53090F61EB25B9FD9B
CCEF9933F75C879222847F855960CC952649426FBD46FBB44432D9D6D92DDE4B
0DA61C03BF4360FEA49064FDE911D20A240ED2B4513467DD2E9F214E625FA0CD
4248B15A936034060334D2136641C1AA345C7642D1913555EA13D1678752CBB9
7A140C81DB516E544E04813437A0B89432E2929DC4A9F5B183E06D2DE8EE9FB8
3985B96CA9D8FDB132881DDB7B0ECCFFCE5E082CD7FF922805C21AB9435E2DEA
D0690379DD5578A156314BC78AA750E91BAC03948D44CE6AA5B6D92365D2EBD0
B357D962770F37D4A4C27A17BEFFE96B9154CF9B9E70BE65FBCF5161148E1C76
4E93EF4D2B88C75F569346AC2B878782D12F909516F74D56C5A927A2E7001730
D7CE823CA5968AE062DA5A54C5CF9AD095E0BD9530D515129F59FC510A6ED785
9DCC5747C69296B7999229531B651E4C98B0BD07C1AA85C261C55F6D7C5ADF69
1D4C163883BB2994826A94CA34D9E5B9B0965C52B191AE01721D88A03BF5FAA2
C6D0FA6444C3920853346594F0D3026F4900770B39B288622172E4D6171BD9AA
3BEA81915B81C56CD5055CD7F5232CBAF282AF59619638A93EC62A029471B607
8CFFD8AFD7D9B25F63CD8CC50A4FC59C2F3F6FD9963174FF863B57D85D994B25
A9E343F133B43FBA30C52CA8A503F3F93E3AB7AF6043F860D5D548B166C25921
D8DDAD33982A420DA8B0FBCED45414AD2285ABCE7D352FBDE6EB1E0F52B0D234
F2618EBCA323CC1B73E3AB241E4E95C8D833871AC8EB9E6A94AC62BB8D3E8500
6332DC7EA4CBCF5EB59A95A2B515DA86A293CD507153759C247901EBA8C4D36B
5C5E989B17A3A72248A138A3CA8622749CD748154EFD706AEBA91893597A866F
289B75B6C623DDC0E21C7E6920076B0AEAD03AB485F43DD669E9F6D78F7F3A3A
F0E163589DCDB652FF0580BE54FC52BD298B1DE626D7398E8DFC0C7BA115D338
8CD49E15D50DF45AB5BE763310556E5D82BB9E05390DEEC769C63967F79359D1
B292A2B968186C25AD5CE0BDA86D6C602F27D4D17370D21B4429ADC336A4AFAC
6A910A6B158DC42E97769D57AB2898FA62921A8D17FA331966743BB807BC62EC
CE310D8DD33666152E7DA26D679ED4D87F89B2D3FF1A88AEC672999B6FDBDE53
381FB28546087A7B8E3203B60A8DB8357CF639B2B4830DA2FFDD7B721978DD64
1CDF0C0459112C4AEC29A28E43DDFECF131E27A82FC1B8BBE36315E41967D1E0
1B09FE682EE128C28E930169DBAF16CB022D5D7BDB13E2A460620B8ED0372A76
B058E4BC1F616F6CFB2E9A0EF9AD85DAF560741A702B11CE084913296F4A3C5D
27DFBB1F3D0BE971812A7A83450DC0675C45C27A1010CBB79A5BCE21BFA46CCF
D6B4158BE06C768C73F344A107706B36EB97D9202C5763599B3C05E1464BA145
F368FAE4C9D1BB679CBABE4996D7829CA57157A0C21ACC8EF55F8E9FF435AFF8
3A7BFEF9BEEC854EC912ABB90EA785DED842C2A0642F862E14B66919AFD491F9
8D841A2DB2F981BFA79544B1A2F756D81ACAE235A58C64DC17B47C1C7C3A820E
A12732D95E3C21CAA8F9B9C27FEE8DA4DC31DACC0163FCEAC4FA882EB97C8739
69EFA04EE0627DD4C2D071F1C8E049E657F5F14377D75506A96CEEE43E33140F
8E91CE236EBFA996C51679100212026FEEE44CC3409440737FCCF58A9899769E
BE684B749A1D5C37CBFF72C7EB5AEBA5C7A3D9BDDCD1ABD7F3AE4C917B3A01F8
83767E8A5D9EB331968579C3DEBB3E382BC15B2751BC21E2E5AACC0CA211F50A
13075ABCF9F440C99FD25A8FEB3C0FB8C09606DF50490C7CAFCE844147A025DA
F903C17E5B0BC25F89AE84006216080ECAF450D8F1E3D7ABD94719F604EA68B1
108EBB5BEBC3EF465BDED4C73738D894770AD27F2BAA1A8AC49D55D311D7B27D
B7CB8AD061C3DC60016EE1F4848CA1A8533BE7D472D0AF407DD9F6C4238A71C1
F3511F227119F68C6EE144530AE8BD1FA0531017D74B47E173553F7727CAB5EA
16F460023E48C20D335FFE5E7239FF72332FA245BB59D385B940205426B2517F
B74FF8E56107FDF9585A1A1DFECFC086DD0D6D414ED8BA6E0D92A29E25918B5B
56C2935B4622F20B9A0C4CD3F80103A6459421C53711953FB5D85F36DDE63115
3EFBD5D42216945BBD05647ED068DCD0074F3A2B08A4CFEDFBB907B363DD79AD
C98AB074AA1C50EDDC6EB68C5B4DC1328B9E56BC0BC1104FF39EFB2360FD3BE0
34FFF6E650B0D9C5050670ABA64C062B5BB10DAE3331C3E3C1B56AB328435C99
64D0D5394345768F4A78E26D7BF1AC08BDBB8351C7F5C1C666E4E0987446F1B4
2166292D0CFAB1AAE6541A3DB6A5707CE98CADD70F81D892B4D2DAB0BABA6621
75C52E526A643F7FA4217D853967AF5E3659D9628533AE56E657371F3508EAFB
FA1E8FE0EE6A8E816CB79B2B26E424A78CFB02CECC37A2BF35D037B2C2EAE5F7
0642658A3C3543EFFD0999E7B2EE12E26D4E4C1998280DA60236796D84A935AD
41A3573879103DF7CE5F167720F3A7F94F2720FF757C2D2BFAF8B3DA862DA1E5
E48C0CF13D0BD5FAC207B7C7FC5AB1BAA9B3A11D34FDA62658B43CBCBC5E8F5A
A03947553BAECD57F4EBDAA673AD0E3ED5F7E7086C53B79066834B3766930924
14F780C2504096C1090865B9E036CC99A4EEC434992490906571E52F477395C5
C5040492FE6426FEDCC330BDFB5B09ECC3EA37300DD4FA4F7BBF2B252A533157
512E649A7B7F199EC63345AAE11DB0D025D8AD3593577DFB0B52B5ECEE8F47E6
C1D8A30C4E5E880AA0EEBB2A053C893FF1AA912ECBDE9B49AF18F66D1BD7BF73
82F89FE9492B2928C308C0373A7CAC1D612C9F3A9ADCFCF2099128D1C3565C6F
5FC2D898DF5C1E59CBDCAF4903835F153170BAD72480247EE13CC0281DC3FCB3
860E9ACAEC0BF95204DBF32AFA9DB2C058F11BC061D8BC48CC05727B71589342
370F8A366E11B3623E4443766368B5169A98B504DD1602FBCC202CC8046A8A60
AA24F57CFA5CCB8485932F527838C9E2F1889D11BA06271BB84AC9AAC072FF6D
5AFDC5A833E61CE4EDBF5868EE0A5930150D0AB4682B25D8FBBB10124FFCE47F
7C93CE9C3F929B0536AE7B9E288A7EB26E63EA1E98F44C92FB6074006BA0A1E1
A4A307BD9015DA3F03FDCA07EBDF9B71492C4F03427D0C1ED063847FD3945335
DCBEE971834F0AD7CE43DC88D5C9BAA5FA0F4D62066C0B7064578316C7C7DF63
49878E52C52E1051BD8785CA07029D855CDF298982AAC5EE9BD88BA864E1A1C1
86C7A2A8C8C70BC438F87957BFEEE5BC5752A4AD500E86ABF0FC0FCF15D09DF7
5C25F8B99BC1146D1509513ADF1CF627BC4C0D8984D01EEF7E17116174B74694
0DAB65039011AD4C5F22986EA0FC188FA30CB08809DA9EE88D490FE15EBC6A69
56477E8B7DAAF1AE28A6B251C5305E493D7A642A63F8C286FC69F1DE5A80C4C8
B98AEF06344921545DD99DB567D5486DF8C29864621BB2A03EA4F70B7ADBB35E
0F1641F668817E64481B4479C7387C9F8F912458C1965BF8BED4AA857E62B7BD
008DCC0B7951B385F7A70A6C3D6D39AB0BDE4E8A048DE4026A9AC527109FB09B
ABE1DE6A9F210B590563EA94F930201DB615B7373759BE4A62F1370FEDE056CE
E265838696FA0D3113738E35732216736F12E3E76D416DE431823060F980576C
90A5A37C5AD57E9AEB2A8717F653103DCAFB4E169855DA91D630F30DF34012DE
1F4C98E20602B36EB9C4EB49C7683B7056EE108F5296FF68DCD3E59302B013FD
FB3268047B4C03A37A680D1F806296BBF9424289AF41637F1864CE423FDF8BF9
B3AF739FC73D34077A744AA6D4D4E5B2BF51908ACA6489430DC92FFFE690A0DB
944262EF894985B1EF68F2EAA7AF9A3574C30D1D4FF53CA84EA834BC8DBBC201
865DD685BF133F7881BA8822D56C27388B0EC125B64BE6317C9BF4DBCE888278
926234B1A806B6DDA724D58044898340527DC91EC9A9A4D22ECD9BA6C4DB5C68
869E97698478CF49C2FA073AAB78D5EEB828B2BA0301AF9FAAF86D736602AF9D
374A8D11CB5F883B5FD6AE51F45362FE19DD066DDFCA49FD3906B7D32C787DE0
6908B02C5F6A9E36799C7822398C82C22A635BAB5D9FB381736C401936521879
1DA09A09C7AB12BE2E64A6DA55B6D50CE1CCEC0FE6ED74FCE37B42320F08639C
21E2A9455CDB01575A2180793394A0E1030EEB320FE1885A52A9BA8F613CF40D
D5AEE9976DD7E75F82C089119BAEC60CB65F11381291193A712212A6425836BF
B7BA7B0C86C87BA65742504DB1CF7C854DD6C6680E12CE77ACE2F4D31C0D4E1E
F83C805ACD94C2BD0401740C0E41DBEFE21209DD13BB4A5D5BF7E2981B87B73D
560A8E6EE0BEE3408D38C8E6AB4C1C7ED9F52818FAC02AC17A1D5484A8ACAE90
2CE9F5395204A7BA3D11006B763ED08B3EABCA1644E74824B92728B491DCE348
9FA322F968E512AC8A5FB7C4DADB77BFE2F3DCA6DAAB758BD7FA7D29C266129C
91A2A5804C165BAA2937974DBEB542E195EAF9D49EDF6190BCA5556700F11CBF
727B0E325EB254CF8F155C6EEA98CA31FA41117D53898BC4C53F469D84294458
62B0D901E4C6095A0F31CFB809A7ECB96980A5074D286ED71A9C482E00FA6412
F6D7A5FF13619795D13D4D739EC41CB885A482238364C123D24E6BF1F85A176D
DA23594D09824B51DF140157FD9954B3CE4C9FE714783E7391DE33C0C05B40BC
ED90CD07200665630896637DFFF8E3C3BE03C7C33CB54FCE37F1FD33C37C611A
FCBF59B67AD80F8F4D376E1B46A28A6E16C1D0A47C331FB855E174EFE813A62B
E4F0FD65715A7B15F3D0B586BE098465B7C1DCD5C9E3B84E1234A199A350D10A
B59AD65E34657555D9DBF091329A4C04DBDC48BE59495C29181964C7D81988B9
2091EB13E2F1277BA6BB7B0772E386CED36FD33CF7539004D4ACBC940EAF782A
3DD97E9D9C38B45594AD68EE45E874625229E7C4090734C7DEF2979422B6513C
C7C19248096BA7FAEA6747165330E085296C2C6FA393DA5D5EEBD9F1716EDCEC
7F291B0F56627438BDF3F29A4D69733BBF3FDCBF836FD5BAE7AE33C0D20B9B4C
E333CFF4D1EDD10BD74E5473A41499E485AE308B92650A286628FE70E07414F4
11C092F1DDB6F6D0887A85E30966A059B1636E4B1AEC751061030E9698C16AD6
D07C9A198489AA1D0FA3717BF3CD52E7FC86C8FE3C7977A14DF4431DB3E8171F
50DD33D78020E9575406D4032E09092A9C413C838DBAE1E76D2BBB2ED50CBC41
2A90190C806D5A035A04E3CF0FE3A71921ACE8D9BBBCC1F8A5D0D4CD7AD9F3C6
EA65504D9B742F99AF7F5AE6138953A982A7A78D7EB862446733B7CA2FAB2836
0724E0928C85C21A9F5D5DF7C234CCD1C14AE308A9DE8E06E047C76391ED93D9
810AC8F694B7DA252B4BABEF2C617F5933E0247210E7507788879E11A2D878FB
2541B561AEC1AFB3BD19017BF75A3E989BB3D1C77BF9ECE6A91142D95593EF9F
D51E9849C7380B4F6D6DA2E75BA9995538603D1E43CD12C950ECDE7E71917C4A
1E8A0D4EA9E7891EDCA725CE52A4AFE9A5E03C0141CF551118083D4CCCDBC9FD
23877034BC39F53BCD2B1D5E20C42CC6EE9775B7BBB561A00DDE1103847082CF
3058E645DA10A428178BA48DF74D54DDF7FBD46D78D457CD1912F93210F98194
A7DC809B6620C88AC1B10B7BFACC1EFAFD38D3EDDA0F89CDDCB653B8EEFB1214
87E9161E9A091684715B666D74F575E694983CDD4CDD976F16FA6AC990433A43
0B06E78424C90FF18A0243A8972172915ADB7131F254AD9E2C534A411593D10A
71D7D05EFFAFF37F9AF74561741AA5E41C758944B9AEF8D40818F06E21855D7B
A2A5D8C022B7F5F331994740A0BD185DB9D94F068D73C4E7576C59C296CB3001
3397EA8FF770AC4F62CB3AF8B17490893712912790B41EF43230CA91E2599B2F
6F443D3D7C8DBEB9FECFEFFFADBDE676D98DD6204B3EAD5002C29FE6D7A8605C
B9B576F4A07C53B4CB1B91F60C618B3560823A7386A25CF46386D6975B70E300
02CEB0144F2AC22C3BB66A51D65D864AA64B5B352D305553A14C59508C8DC825
E8B2EFB8E2803754084084CF308B047CD4389C12B3A1FC467F98A7E2F4511DEB
9FBAB2FEDC321C77CF13B21204776A715DE0C28F61B1C5B1B6CDE7CEF529A009
1209B70BA56CBBC8F894B06AB69A867B1C0322F16D016E992C7DACD8026D7F4C
5AC1E5D796C0E5A79C6083ACE132AEE5BDF71E90DA34D547ACCA61BE6D41EC37
F649CEA273F000F765D1CB762C01F0925CC899206487D69B87184F081BE4FC92
0915ADD1CAF234CCEE71ACB008439D7E0ED44D117E1C942F56B51E615267D9FF
C193186EEDFA412F2A917B97A920878315D488D1E15CCB1D18E9F76104D76978
B921AAF1E522B0134527426997D44471EB75304F9A5C8286AC95FD505FFFCE93
1B60115AFA35544EFEC21F1B21DAB103F2ECD03C45978D34A9AF4898439450F1
21F0DEC0F06B38C966A0AB56FB40FD3C6C4A6F1B92489BC74B93B7D7BED04206
674BCC38AA86F074419F816A5CCE657A26E927CAB2BFFBF4CC1A24A90064BB2E
0CA34E3C531D23DBC3035A95679F52ADC07DCB0BD1F9221EE576454A86A0C2BD
F0AE6914D6F36FA04AD771517929814BAB6CA2E090BC14049FD0BE5940E6A86B
1414F36C25B48A14382CA331926819999E1A5C2FA63104188731A458EFDACBAA
48397E97284B8A8C849D61C1D7D1A30D35C693B9AD261C3CF603FCB87651205D
6CF7D2AECDB5133E5A5D0B5019F9E1D426843264201C49B5F005D081B1C32432
485155F92D59DD66907ADFA1F18B28A8F1795FE08342FB4FA5F83392B4B54E43
ABAEC2B611954E2DE8DF3B36DB44DA46BB19EA1EAF0425B8B8CBF768BE5811DD
097EB0065B1E01ABF5E2D8428D248B1063727C5A6AF81F6238F1912F06CE23D9
B929E7E8CC2459C0E78A7B2FFB41C4992C8CA30CE5024BC62C59AE5F15A7C165
1CF31D319EC3E946CFF341E7B705B7CA5811F503F1E23A866648B75738A5C893
0A07DC64E8794EF123B66C212B7041AAC2F7A021930A6E91115F2FEAE306D1F1
C5ACF4307384369A00AADCE668ED7E814E32669BC829EF1B7EC98568A720100C
C4C8079BADFD302EADA542E45E04E10A6045F46D432299F879232E98F9FFBC32
6D9D0B73DA2804A813D9B83BA91C2B1EA4B102EC16763EE0F5092CAD9090F5C7
F6703D1EF5AC4FF555D8366BEFD891834EE0CCF512FC14D9AC7341D5046C96E9
8C17C37FF5841624BACC8EE6C44899633FD2E401CF66BCB8365EF29A3AD76A07
B35273CDCE50516A57F191028439EC8E5B8122A9C4B58D6C1A9D5A4E40821EE8
089BF5521A19117A0EA41112EA832CFF38AE62A7C42F405EBB4BE70A441D30A0
9C7A64A9C4CF1D411322A0A37992E6EBE6321C5E5B586AA1E12E4D9F314D84F4
FF5E0C0D729CD6C400E312293CD84D7FCD0058393BF81943537DFDEAB03839B3
A0481192391FACD2C83BBB9AC9E5E6BC6F373161076941FBE23CA6E81B848B33
A5D05FEA4DECE4EA88FDA3670AA71ED77DFFD3BAB2373B27FB482E06C093E9EB
E22F3B9FD5B28AB8931F1C96E4584559D47C3240B0D4A30A382DED5AF585C938
A804FC0854BA5F4ECA8379F7F7BFD9CD497E66CBE3728B69B85EB75D9B390B0F
B0E5C3F4CB0D2C1D1430C83390D90697DD4ADA95093D064B0E699C59892B661E
5A0CF700ED157AB521513CD600F052831A924C5DC9771CB880E017A30E64F2A8
7F902F283615BA37673DFAF9E0D2ECB5FBD10BFDA804BD47C3D4933E3B443D47
65DB43B2BD1433C8BCF47A40B72A0344627DA12399A086B6202987510581B57E
EA86ED95F3811AD256DFFE665809102BA715F8EC188EFEAE13FA319E5F388B89
BF950C292C152AE9B95A04D585E6AE259EA0C1E060B1C495ED215C9E3B5A7285
FE3568F5F91EE275365769916EF1BF70C062A45334FE88CFDEFF949914C4B69F
50F6628F9EEC6842B798950DA2A5A6416617A6D6AFDF832B4DBBEE2065A7C30B
63CB9340C50778EDDB5E0A218C79625498AFDDA452036F05A697FDD95DEF8B2D
573EFC2CBFB7C4F51848BFE652FFEB23AF2E20702F9888B531CABC31F73E1809
D29542B8B5D24ED5D673E26A25811D4BCA9D693EF8ABE7814BE8007BEC5BA79B
849449A58453935004FFFC8F5B183F7A4B9DE98FCF9B0FDA17BB2C917239849F
A8B3641B901E5A41C07518C027E399132512240CA99B02A0410974AB1197F948
7981AFBB4D5126B16E72D95B28D1EED1B4040E98E8A74B22C7D8CD3FF06B9FBF
62FB1443AC776F44F0AF34047C9A780F3B520A8E750230D501CCA84CB279D57D
905123FC23D46286CDBD70C1E35DA15F1BBB8EDF5FEBD36C6E600300261D453E
F3794BEF64528D7B4B91515E5442156C41984984E051B9F413865ED26E38CC6C
2563591CE129FDFC7520C5D5CA51DE48C5300CAE606605E951148BE1B66C45BA
04871565797EC537E26B24A4CA076109F2381E24C381185CDE9E231A78C23918
DFDCAECA2B8B7F8EAC363D0D75730D6DEBDCBF85188B95F8E5E17BD5C1FEFF38
2FA7B9B0B46073D4F6665C658431E7FFCC75FE1811BD701298F763AA466B7843
7709A5EC0784A852A32989A63805EEEA8B14A64CFECA4BE02BA114A4CF5869C1
6F750F4788B6B3C3C2776D4DDE23DFA1490CFA3B4C7D0B8794E078FF15A4159F
644CC8DD9EBFD8ABD8ABFBA9D53C42A61026E5BDAF59973977739CCF0FBE3A63
A34884DA9097C0F903F0F05E0F77EA5E07867117D1908D958AD0EFBD5C6CBE68
4E8993B9C485D8B4476F2EF2991878E11F38FF36D1F1D67E0A154F2D264D9813
78A969A5999E0F8A20B81D18E1961AE265B3F086969B4128A52251DB3EBDFA8F
59FFCA5E7FC82E25FA551CCF5E9DD8D6D3A5DB1E28A4B5BEDCF9AF7F4409C627
5E034FEB45E9425DBEF583887879AD93C362A37F0C069E6E22EB77ED0EE9E3E1
0459B9AA355E912CE927A1AED4B962FBD95ECBC414640CD8456E04A5E6F024E0
1294FB6906739CE1B4567C1C777D47A7F2D78950A8F84091E541E0DB8CFB173D
518F9C51019EB4FED063631D168D1A00B9B346B62199A1AAA40D8B35AC2F519F
A7ABF395C0BCAA522AB5851F8574ADB710CCB3FF48D54FE2C65A237E02A7621A
CE732ACF123824D61FFBB85FDC03D7B779BCD8BD13107973003A71F5147CA479
EFC1134966E442A2EEF5D51BE02AC50855B9158840F97FA94CC03969B2DDBC38
390BE7F6F9768E584BE5D3E02209C9F5C6398DB9A763F1BA3386E051BBC1C7FB
8B5CBE3D295F3E94C6484CD39D18A81F7389979EF408D778E57338EDAA1C658F
9C1F6BF01E8C05290B07F87D83C4498EB6B53E33D46BACA453D38B476C7B79AA
3A0EBFCE8A593AF6595410F0F59A79448D44E92E5A691F651E0B095682492BC3
5BB71CE21A3E9C1D1AB20BD6C6CAA328BF57F4FBEA068F1CF5B88FBEF9974213
7438E51623CE0E21C27ABA2D3805F093A069196BAE8DB7E6581F81C57C6E5CCB
B5BB7DC49648D46F2741B3A91D9032F24ED8F7853E8878C5315B93F0F0DCAF80
757EE1EA8A78049B8A9E998818F09E1B5E8D34EB46F04E8ABC5F4D367639B421
6AC785C142CE42FFB593697B786ECFEA320CD49838B5DAD7F3FA0DA3AF073C9D
ED0369646F6B36693E9A3C0BE4919F409768372CC0E84BCA86276BDBA1914660
83845E147A52D5DFD4043ED3AC4DB1DA120971ABC83477E84B2BD3E91C105784
6B76616532B79C929723445D51E55F2C97F1189BA69836D76D228AB453597E80
B7D3FD49E1D3663256360E4DA56184BE9677D3547C4F2765665237408FB4D1D0
7C190A30D72F4DC185613B31DF5DDE27133DB26720E36FF2D28374CFAD56A12B
00C3D409420B491B625E4C43A33EA29CBE2AB98CD0305DD935D8F0F5EE34E73F
44E9909CD4A49E4600DBC7FE9A727D18EA999ED7618E33DC61135BA3E5397F55
DF844F9EFE1E760903FBC228B55B1CF4B2482D465B5835341350E215B0D55DDB
690E1502018D0F42D2C05275C5EE7AC03CDA298908B414007BCC5CCBC4A7C3D0
AD578D0B0451F2767A6BF81979E99EBD6CB8017A27E311AE62FE08BEE58F2B33
AD6C2859059D8D3F20870038B6EA3C5E41A3E6E6EAE70E659701CCC2256A7CEC
A22D415F21FA095C1BDD305F557FA21DA361255FA634F5428046582F1894DE3C
9CF2E56BAD8A834ABCFD39A3CCE63CECBC5962EB3A03C8EDF831D63D2A5F4F9A
5ACF9D140BB42BDF2B5683587B8F7263E4C2C43A4C530DB3EA06EF9672983138
D713933F6760E2C0D9E3811F6D24F00B3EE58C56CC7E9CF8704FFCA8D35C141A
58CC2A46228F2F642101F5B23CE1ED3A79FF543B60E9DC22081E65320BCF3099
187ACC0F680A66AFFE0840D63870B38E4100D67ACF9EB4C072D3196F99F999C9
5A21641634CA6C9B6C1CEFBE4CE4B59F9895ECD8ECAA56D0136C16C2109C8762
7A1CFEA2A6707D6B09A9278F772433F92EE844A6DC01584B8219388C5D8C2630
E1D39F3430FD313C4E64190E98B0FE3A2FED197C64A2F173D67B96DEF8498BCC
17589A700E889B5EDFA8FF2A7CC570159B5621D374878E63B56C35023AFCEB53
97728E52E86616FE3023CDF8F2E3205A114D00FC4CF71B706FE7BAEC876CC50F
A0C3717E91F68E6E2C6DA9D1EB523DF48D10D441ABFA40086967CF3CEDE338D3
76450FAC53777A02A6CC5310ECA24348652BF62276DFED27FA15B47B5D48BDE5
E74F96C82774AF2512D837DB53D1C4791C4A31C1486D6B0646AFBEE8172CD48E
FD8B73CE708704378306780B31793DC3588A170E5A20B20B7C7E7B727D0620E6
F45BD57DB169FD3568C8E044865DE7308E8CBFA87DCB0FD9A4D39EC820E0B658
1A24EB1391BB3DC52178B378B00586F8A890443897F479F5C27BAC92012E8C26
625EDA3D3CE4E46821457498301C03ACF66F2F7EC5CA2D541D3617439C0069B5
5CCBE8D1F0523ECFF6004882B93CF5618D139605D06B8EF066B8FDFF0A4DF05F
CE76504BD81147F35D8989D2CA44BEDE6B8BA09F5117C4480EAD193A55D17766
E680F2D445758324D4264B34CD6D2643914BF569EA1F9CA8277788FADE52905B
6910E32ECBE6E8710E44EA188EAFBF5EA958EF011BE0E24D0F88BD44B30C8B42
88CD98CC5E56DC4D1333DBA8FDACC0DB85515E1096B1240EDC18A0F3BE451E29
C23A32A806529BD07349064CD9EF73D7A938B5AD3D1304F2C6FB438EAC993894
2455FD2F90BDE47DED116F3966B7915695F9EAFE5579F3C80495B6BDB1F24037
096741E04B3165928EC4FE7BD46E4F1C6B9C57378D414E6D7DB7466631822AF1
182EED5055418B4541E469969E60C53858FBDEBE4F725F66138B7C516819F0B5
991B1EFCFFD98E6D7F086B8DCD10391532F33C17437827D857FD477BA5042250
CED0BBFC6FD9825A5826DF34CE0B2C78229F24FFA4A3217EE0DAD89D3D58ACDA
20FF3FFAE1A1D2A73BB74858A015BAAF10F06E1384C1114F45BB3411F870A452
3AE84487D44CF7EA1D07131A8A62E3E9DD828C4C431A7B8BB078F8E328439E6B
8AB2B752FB49612F0D1A7126B450FAF7E16B807ADFEC622AF603CA211390BFF4
8AE9CC71BA9B8CEA1FEB0155DB9C23B3F8FAA8E0D93AD351171C1178E5F66BC4
73B74C3E6292079C2B2D43A59F09A158994B6F2DEC606802157CB31F7C7B524F
D9A7A57E3881A280D8F3EAC2E25EE41E58BC96B9FFA3B04C17065B1C34F194BE
EF98DDD55CA31A58924EAED8F7E8BEAD5304B355ECF4767A0950858BE19002D2
B4CB6DD56D0731B7552E12FBDA45AA1538B9DF9EFFE960AA42FD34136C401767
858310E8CD7276AA1FCA90514C00CD97FC5A09CD8B8D4A3A66DC9C5296DF3A93
ECFA6B76DC3B8C7FB8EA1F69471EF9B5F8628FDCFA2CC3A34B4A5413722E3A76
CC09A48F9C05C8EB145A9713BA7BC97CB557A128D43EC7119599BA999663E0D7
4313CE89766F8BE3C491BC98FB025C7AAFC2022271FE620574767E479BB2314E
0A20F00CAB37A9220ACCFD3BEA219CE217CA917354CD7B5811BCC4EA6D8BCD52
72A11099E6503AE6B47A9A116672553401B7157D0AE9F18D7CB8E40CD6C4FA69
1BE19493F58C953237B311F58B834EFC7A6196D4252CAB7B02B423D0DD2BCD7E
98FD7C35F7D446C5CAD90C19A1E7897D17E6E87BF17577C8E3A8A30165033249
D533856A2CB6E9C1AA0239CDAFB33902020D6EA45A8BA60731A9CFF651E03F1A
E3C2418EC2351DB956BB402DD25D0A48DEAAA63DC1CA574B8577BC542F76EB3F
DFD8004AE796D430B275395D75A99A2C14F47C5FC32202DAB656204D19FBD837
A6EC010C42084701F5770B0BF36DC8E39AE8C87D07ED9337F0F86C9551C6207F
BBFE3E8592626675EB20610C4C3F89BEFB3F1D0975F73FBE95C38FF0132F2F9E
C4932A19D7626D401865C3F32F4D178711861E7CFF54796B9DA96AAEB0ABAAD4
EAFD50EF789E313A3F52526390A48FDBEA688E80115FBB6BA8125BC7045B9ED7
2403B1EA544EA643B82782C150E294DA02F9F2C3BB0375BBA603EDC932F1F72E
59199FF3A48D907D3DE17655C8C8061B079BA8C845935E4E49F0CC9FF306C34B
1F3B56DA90A7697E1BF0A3553661CDA92CF3A581073A646B2EC998E8A7467630
91CAE08357D2B9C13593EDCC27B258C07FB0E279174A3265A1E2F6B63FF82311
62793416FC043D3DA7176DC3676B0D95192C772C129FCD2C9A9E58AF13DAEC63
1E8741BCDF96D62F37E7DEC262DD87B8D34C8DD3C20EBA6483DD41D48A5197F9
8F35348F25E9021FE50176E44F6203BE984312E98FDDA72D2D82687F527E0B67
9C0D5FE02EB2949453CA6ABCEE1E618D485E9895A8E8E5AF35CB731918D2EB4F
21CBE7759D3911F1DA71D12F4202E63A250F94457FBB6951722214D357292DE3
4AD59D0E96C7EE077EFD2CB107838CF298CE66E65983EA86332F8FC11BBBEBB7
199C057AA13B3DA10F76CF915257B58BC533356B6BAF578D802622B5BC8DDAEB
815F9DAB9D6B648631B5538BC3B05B2C9FF37E8805F8F1CAA95A3E493F5BE74F
817F95F102DDCB48C8B666E79D29824774274E960E1B6A2CF26C93F0A2756348
052AE1A2CD4C3A0653
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMSans10-Regular
%!PS-AdobeFont-1.0: LMSans10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMSans10-Regular known{/LMSans10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMSans10-Regular)readonly def
/FamilyName(LMSans10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMSans10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-420 -309 1431 1154}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFBD8A43517ED5F05168EBF9D3AFE
25EC2992AF87F286EB5CBCB7AB5454926B000DE86BC7DC7722EA9CC5AF351D71
F88C22A045179501515ECAEDA3F7CF9A23FF4ED29532BCC5A2D9C4566653DC0B
F99B58B303B412848BFDFCDC0BB4CB9FDF30F98236F5A2863FD3E28016CB2182
2E10F5EC6419BBDF2A9031E1EA217B147A06BABF1F87C9585634C5265AD31FFB
EB313C8110270894F41E54896FAE4A5E1A9B04BB8EE53CB5F143D8A3B77AC1B9
96AEFAEB5EA99D855A53026FDEE6A856D3616D7EA42379EC96B931867D9E55CE
3ECD8877C379F6C2FB63E92F146942350BF980AF3D7DE17DC4C2E4B304AFEFB6
F4A34CB06164596B7DF119147C59AA2A1A8D448EB219B2682388F94393CF4D74
532926ED5F2B9D281EF3324258F963D1A460D08DBF08127EE66D40C3C74B98AA
22B9AD6BB84113F84B085EFD4982BFBC507D1215DF109AC39E0B12230FD6DF02
C4B69CAB0B3375C9924071A89A799AFAAC3EE2010B8FC82E42BCBDF021C9DF72
D2D02FBD2CD3E161AF409AFC0828954F2BF56A15E1ABC0815ADB9C244B0AED7F
4B9A54CFA2A286FB4D9DE215B8B5879444B3E683FCAA95D0F1520A716BF2325E
E76716BB5C5DB5600A7CAD11F019AD5B3965B61494D228A3473256E4B8B22A6E
08F055AA199E8E9FB2B6F04B01BC31664D95FE7CAE16648E0344934054BCB06E
44A33F278B8A2215F77018BE752B8FBD6518461CCFAF61F07032398367B284D0
B0AAEF9509F632534C7084BEA8B52EFAF676C38D4A720D4078C0B3B525B7178D
9F85BD44B13272DA283BEA7AC239A3E1A0FEAFD3E9F7AEC9CE3296A054919E74
51FDCDA8344A2E134E285D682648203E81A5343EB6EB96FB42F1034835DD0440
3968C3E86CB7B20B53F9CF8FCB188D635FE58370AEB11453FE69A0DB8341039F
EA654B8FD7323E5536E130FA10100643C234CBDFB8E1CAF1E0C1D9073C3299A0
24F2E4D71EA82005EA002AB6A047F536C9A6F1A73B7C1F1434E29016204C9D6F
DC7AF044AE87EA84552B064222C277E1AC513F8E680C0E0571BC88D99DA041CA
779631639CC03525A001FB54EDD95140AA2EF9FE7CF81EE3DAC83CF76657860C
CA854382AA5CA7D704C65455EFFD4BEA1607F0B0B5FEE06533568B420C9C24E4
1C6E007AC9E398EB33A7BD76C46836B33CCA7986436F26BDDD67D0110B833141
0F1DCF9E65E7338B42FFA4E4C9E8D54121CA17B97876FB07597AFB867B9019A5
BDFB1FA225CEDE409A83E8E129216035F189C787C5709112938ACF9BB2E01187
FC035CEA0FD5C9800D3BD58F5D44F0B16C88AFA1A33F9A3D8C9DE5D7C3AF7709
8424004666BA8435FE10EC622EBE16E4EFCB517109806DD2CB6704EBB0D4389D
1217080B7634462119C3AF991B3613B485BA2B63E25767C311C66FFC607364D5
50859170B4CA391D713F3A00A36877744CF0B1B98E14B1CCE43D91B137EE9096
80E472B6ECBAE2DC26FF4CFFB4C707B8CCEF0694F57A327C4159A74C206BE178
320D01B4DF145D6DC515C88CCA30DCA19A3E01CE3A2143E7A9A40EAFFD714720
506AD33F9F31ACD035E1B6728821A9FD8BCD0CFF5C14B050E2E06CE9466B313B
6255925F7C908937E3BF94DB319EC3E9AACB6E1659234A264036C6017B46AF95
9F7DA2614BB9A9DD0AF18A2C283506A62524C3113CEF99A5748888F24F4FB46F
07CCD2FB9583937F0BE8B4197979FEBEBB6D10180E9B5F6CB91C8ED4E24B5E8C
EBB42C2E8A1B23B3EF2FB80E29405A632A951499236AC8E72CBDD2FF361ECADB
0F684F2BFD518308BB408C2D801C20AC2CD1754FC84C0C6C1FDCEE4FC7238B6D
3A663EDB1FA029A0CC336CAE135D6D755FD5099B07C3165FCA6968534E8104C7
4C1847E4DAF520EA19339A9B639713EBAD1CD13FE4F4BD5FE5962E50A5C7FA6D
03D9CBD78CF0670144E0F0B60153FE37359A60E233CBD4306186957AD9A2ED31
221E17B0CC3A3A5AD57EAD62A642F7BC52D0064D626BA54F938936D0F0342EE7
2FEA3514606A3B03A8BE0F77666628CB978D3FC2737DC5A99B9BF2F55A8A2A7E
3EF7E1E1FD98697E21F7AD3CF2FB3897152B7E9F7C4C309F5DABEE0776B1A98F
C2D040C14DD87114A9B084D1198D71814BE7FEE42E6D1EB7644C10A722A01437
1FA4FC20C44470BA5BFECD08F2E9B0678F1C75B4349CD9A435A7FFE09897138C
27770510D95D6D99B372D498C58349BEFFC4449F832807549F2403488CF2897F
C8C3CC23E1FD81849C040C7EE7BEFF04E2E860631F690DF27B789D5597FE88BC
DAD2925CFF60F5A8EA637DAE1556EF2F1D0008DABBE17FE3FC5AF8E86B2E07C7
AF4D0F51CF4E726240B63095D44A790435D7FFF4197ED9F52818FAC02AC17A1D
5484A8ACAE902CE9F294D6F4EEEE809BCD936FF4B76DDB821EFFF0BF9419DD5C
0B144E32263F5185BC8D9743E4144180D45375DE831E8E3374981B68564692AB
79DC4CD406A5EDCDF08F6E8615BCD0E6CFFE077688C365888921E4560D3E3A6E
550D7779D1096790EB7D8991E2D2BB4E21AC33C1FFD3D1EF05061D80B5E3C87A
C8A76D16591A3005B3DD37E2A69EF059754C9DB7308F6ECCA18D7BDB19D2B251
83B442D5AB5D9B4C62FE9472309B13097D4DD9FC46A680DE6AD32C1DA66D42E0
5B62979D6CB4A70B19A0039DEF9FD337345C43C74E88A8A1E527B0E77BAE6286
8382DA7159842AF43D57F70718498FD85E7A99EAB7423DAA511B77B862B9F111
E663E7538F927A87C3FCB97298CC94737BFCF9EE4DED1841F703375E81298CB8
39DFA418922F97CB79720246673BF3BC51B6185221DE66692C02772B16F6E715
4C570048AD99925459B26B502EF216ED2887C57FDBAB63E602D113C81A461ED9
58FDA60B9E7F7F265666D7579BCEA6D053FE58FA2BC93F38ED89742286B3620D
C94A514FCDCB1CE84BAD177BB834C783D8B7162B0D094CB5DD44E6AE702FDC9D
3AE156C66377776EBAB2E91AF0BAA75B8E9F4441F44DB33AB07C8875DE7D9626
1C02AF3B27E36352F8DC9D05BD95426B83175316E6E2ECB7BDE6902166FD5B99
941A05F216B73A11F4433BE9D56D2125766949D366557E9F8322CE0099BE78AA
BBE501C2CBFAEB6FE80D84E76420DA236D8D4E7B48130E59DA01E46A79ADAC4D
8634286AAEFCC802402D904B43CC0FDE715A12BA158FFCFD6FE8447932BEB150
E3A400CF8B83ECE8548BA7A495DC4CE31D05873260E8287897F8C652860B9E1C
242D395273D98D7A005395D8821E2A6B0A65484A3C3A5A4C993290AE8C069E02
17311606744A28C01186BC2F48160E257BEE60576DF6C006B65A81BD0438917C
6C2E033240C86703508D2380278FB9B8E12B461FC067B29749B49E74A594BFAE
0CF4E8415EDFE04959FABD2C48903EB29EAC610ADA000A7D6D9CAAC34A93CBD3
17817EDCC1726036E156CDC649D036DA3EAC15C9B362B32A001779973DEAB1CF
F05FE0BED478A359BD102BAAFEAF854C1B48B036052A3D727C0501A2BCC1CDF4
692D601ADE5D83133EF0A5D0FEFB9C02EC26782C59DF2A8D383A09280F36634B
F9DFDB4979477B51F09D2625AAAAF2A089D94C253CDCE59227204FF59AC38997
9AC060DCC4606454904FB9E7BC9FC18A3E9E0ED87AFE17F524BFEE7DD10D8298
67EF20BCAF6172B1230956529EA49D7B913374D69F65F460EA1E5927D4524FCB
FA7625C922AD1FFCA6E074100D8E90D22AA56597E52A7CAD9144F3A409468FD1
52C0CFD0662D318787C108CF6922C96AD6D3D9003547D36E0DA51E215709FF69
322D42C893A3018FB012534B078982F2C051BFBC92187B119420B8F4D27EB1DA
256678EE073EE3098DC9CF8BBE54D707A429CE40D04D61E2BA36830559BC1E8F
F0C3D790FC123EFA3DE2A058EE2076C77C33A93F2FBAECA0A0EA93F04447AD38
65B14F9B9780576A5621DBB3569022B6FCFAABD370D5384B34D68CB4E10E0625
681DEB0AABB765EA8FE3B2E77F515CF05968797241B5BA06E19A3282FD226B13
69975F6276B34A7453D932AE04BA8178FD260042AFB4E19A95C7D9B71C7D6374
20B70C12ED55BCDFAF6D1B30C9499E1D9BDAD32E10DA7F6F667DA5EA495069A1
DDF11DC589D2E91C1514C2799C5243DFCB8A2F8972427A47CE65C55791AC67DF
9ADFAE70D6A487155E6780C7B2C82C0672CD9899B12E15AF03904C0FF33EEA48
ACCD58D8B69468E67AB377C6BD16D11D73F89EEB8923E618E8B15DC7EAE61682
53C97322A2DB0E2BF1FA3284186CC6BA6A41105AF4BE60E0FE5C1E40064923BF
1A75C78A77CE2BB4368A7C8F48639FC3A0B6DC9261EC12974B4B88A0AD2FFB44
91A03346BB7DA1558C9520A88021B70DB89EC4B9C642582DB27E6C1A558A2338
55D9FF7B893CC31F7949ADAFA7FD22C8F9537DE4736D806CE627529201F1A70E
D484FE92F0C684F4A045EF4C8BE1802D61128023A737F14760FC23ACF398BA02
40BBEDD4403C382D29751340F63D14C45D0C8ACE829CB8B6448230C4611B3376
7D290398B07A09A94DBAE60E345F7AA9B51673BB078799F0A752F3F7DE5CE579
78C7703191AE33625AE0D5FC43EDF73E39A7CF1ED1E1CA038B1F19A9C0B0BB98
EAD3B5ADABB830C68513A5DFAAB7FD4892D77FBF6F377E25D2EBAAD8AFBC9DFD
ADFD2B6DA925BB879BD6062EF555AE24118F105F6770EEF2A57C5C9B7BF14A36
F7C6CD3036C8A458B0206B8ECADB543A5C017F51ED2E5B611274D0054BD5FC84
5B7F11B88344F64A4CE5BECB71FB97DF1E62023B85CFE6D9AFB6B9243389C136
DC8767B74025EF5FAF470A272F57F548D73DCE0A0323265EB13FC896A9733CBD
9F87A2FBC724621D6A531AF122DA22C4CD306406B316B1705EB7C713DAF0A0B2
5214CF6CAC749486C2EB98B5C918F0139932876A8DCC70169EF056EA05AD5FEE
80D736244D75CE65F20FD6CB964248444FCA4DDEA8FDA9B882F96DCBEF94CAC9
CA46838749BD66A3B6DFD76BDE579A02AF74678F6F32BD546E5D82BB9E05390D
EEC769C63967F79359D1B291FB8AF466C2AD2AF67E91EC2B4B1BE8C704194D72
A79D373A74B27190A9AFDBCC06B86960FCF0C723D2F44766A4F185CBB6D378C0
AF8680D88E744861352351811FFE555EDBBCF4A23CBCFC76BD0A3CE9AD88DBCD
9CA636710E7B96A5687BD9F33D193276CDAA152C0C500791C76B9E38FC754BF8
8042FD98C3040855DE8339B25C51257F7EC83BFF447255A99CCE4EC0E8B41828
4452650AC9F1587DB90D4C37C4E6C970F7D4EA4D8333C5B27CAEB1C223BDDB74
CE8B716878066CEE28B54BEBC6818380E335F0E10B5F05F98041C13A2A98357A
F1CCE46D69A9E54E47425EC0212C697D91FA63D6E5955CAA4FFE0F06DD5CEFD6
56CA233093AAFA54FFA50A3C775B46790D67CC0E5FFA9E19D9B48709CBCAECB3
0FDF85C8D7EC43C53CFB4373691AA267859AD4C6FEA6A5915F4BB60337AA67E8
C1C5A3A79D573BB077085030671EA04152296A8AF5E6C7071BF88AD26FB7EE9A
331172C242FCC8E3D582A3A53CBE485A88D8AB7374E485E944CF50142B0C84B7
2B2BC6B538CAB1FBD0396565316179A6F61EF4865326D5710D71E01C0FBCB856
474C1D32ED249BA1FC48995AFC745FFF64186EA9C5E4B14BF26A5DC40551FDC7
2EDDF851426E46EE4A3F0349311B6AB1110FCF6163A409D01F6753955189C29D
F8F410C6BDC20BC853E357D674717EB85BEE6C98F92E3A81C8BE23BEE4B7EFC2
30F62253BC19F624919D12354AFED37CD28F168AA61BB6A1D0581D68597A66BF
775292DF056CFAACA8C087B4C0BCC2AAE1F23FC483EC747BB813857F88843B1D
C8E80EC1BFEB6B1676B2D68CCD643589E2F3A40A8B9AE0511D70A2FC83895A8B
ECE0F571B108C0E17D4C5C38FAD743973C6C91950924D5E19A9D1C769735FB86
5860424EA7F5CD9AC21EDFC73200C869DDC5AAE04253AC240F7A64999F242193
F8F196832AF6AC529FB8BA5F68FED42DD602A9644C80813B8607F74925947194
5843331BB382EFC1B0C41583866D0407DFD556E3AAE3C6CD20FC30E38AAE46D5
DD4E02370BFEABF563ECB5AF94AE88F4A6FE4FE745496C1079FA3D0A62701D18
826FEC47F867C4FC966D23A12CD3ACD9FF1D94F0F773B7D545F7521C2C0B0340
F42BAC749514DF18126F3577E87ADE936A6A10BF199A9527D50E2EB3E91CFC17
FF79588A0DBE8669A47636E612EC667E013B3A3F46401469C834216DF6E346AA
93E4203538759C089B99F92E8FF119E470A70DF3EA7E4118FE0FCAE935B9E588
0522F4837C25D4A33FD6693CDCA2BDBDBB790BBB2C48A4FE17289B0B15C33C20
06D5E5B097E68F82D2A0B3C180B2316A5C574393F75495B78622194410F23087
FC234A9A8AFFDD8600E51B9CB4135359FFF6B335C54700A78C7C9605BFB0F037
9CCDC9C0F54B4B689DCAAC170408185E91647F364BDDD7DC5356AB355013374B
68132A30576D4DBD04EAC244CAD6F9BA69166CD727639D26DD574C550AA3864C
AD2FE404C03C041E5BE69F2FB9FFD46BF3CCC4319A1EC5A83FBA3557996D8DC5
ED70049138602AEBF6B5E5D5E8459680BD21BED5ABD93033AAD7057C0C767885
0AB645FFFDD40118E414CFA31029F8E45D5A2095DD40AE0EA50D27056001957E
202A9ABAB575909F630826170B56B07DDF69CDE02D397FF5BECDC098C7D011DA
F6ED1AE0ECE6A43A7A222F9DBFF1CF4487E0A932F474ED91EFDF386E7DB94CE4
83739FD7DB91967163946DB98C7A8B8C8367ECA28445C44D2D36AB334DFE50F7
2B508497462FA7C43F180277B30225A75A1B90B73079E26AA33FD37B81F7D60D
EF59053E1EF8DA47CF97D4BBA0064B7339877DE9B4D3E5CCEF19E076E25C4799
D60C2CC73610B087F668AEBDEB1C5FAF7677CABB7247FFED461F7A88F8971180
CA1A08798BA195EFAE0619B1DE7B3CC92DF933592F622BCB191B725AAD72FA5E
35630F265AA60FD4998773A095A03EC1FDBE3250BCD22808E4C2E2442F285A81
A0DE2767675387CA88D3E224CC02A49A5710951883B78DA708C33340589D3651
EDD7EF98B627C657944A22B273DEAF5C865DEA06501B0FC53002A0B802D43F88
3E1C794B9D3EE9AF8A5CD10A347EC239B96D376C4643295F769C4B52529A054F
6B673D04B8C760758F37F1B4CB61B37C3230FF3B6E50CEAD45ED2C03F9346EE6
21E1375BD57EEDA0239884B2F48FD7E2FEC9D6A52E0210B9848E6FB91C81497F
C1AA96D6B481714DA1872AF2B85E7C1C3E750A52C070289822BB030285209F89
6A60017B4E5A7B06FF4D1360CDDCEDD19C2E12D46A5B635B952A1F13A9B38472
BA055A8B06A024D984B282AAD6EBA79E856CA230E36ADA96A3BA24963A252BA1
E99E39BE7E11187243094943F2FFF8F1BD3BD8F42BB2FC3662D7BDB14726C382
D837A7FE7FBAE9F372C30CBE0298C7CF0424F686A19F92762B1119C8FC5EC152
984A0D172D7B3F99DAA47DA0AC3798AB415E6CB6014A911751975AC7A57F25C6
238978E8F130575910EC324FD2DF976CFC21F029256876F346627EADDC9F2827
BAC12E0E45B310AD8C11FEBBCF5D2AA4AD73D4DD656B5C082E03BA4D824E7B83
3E8C10FD8BA97C63E4670B912619A20C13063E6730387C5E7EAD513AD13B562C
5EE145AB39905815D6C3E8B60AC6F738DCB1F8AF334B793677DC9D0D6B2CF2ED
2DD2300C04B05B36FDAE4FC31181D59149ABEFB70C66BC259484EB4DB4418FB1
4E9FA56A696CF4AD0473CAD3F3FE409A8319BCE056A0158E03373577B6D2BF8F
DC26D77EA9BCE83960BE55223C56908D00199B1D2D941076B1C64D9A6D402ADF
6C0B8DC625164B44742676C8A12E7009F4D1BB72F711AA5345C3B278190283BC
A557CDB6667F50427911F75BD51A52BF0D97B34C9CC06CAD4BEB4AD7FFF2BF34
C73BCCC0F2F81D7ACBBAA1B71056D018CA5CDFEBCA5CFF375FCB3A86BFE57FB3
3BFF89C94364C54F45851F8FBBD83005D8EBA6244D7FB96F3E09EB1562468422
C15A30B5C93C144FD17EAB19CB076C36396D4C7506C141B29B172EB3758DE43E
0A91DE993454563A528E1E6CF3E542ADDA9D81C3F56A8738208FFB82C0AF1273
22C452CAE4FE4CC5F070174140B9901874A34719D07E1ACCA4CA3E5C2F360401
9C1E6EBC56418922D37F9EFAE47C154B85003A3C5705F7C6B2F2D6F91AC62749
BD9C54F6FAC7E39B2AA47BDB66816F5C2444346F2C6CB57E619AC8C4E9C0ECC6
F912AFBFBAF1389BAE45B2989DA004534A8042A1EC77FD3EEFDC15E662E4E766
AE5F6AD0EDD96734314FACAE006BA2064623902C8AC479EEEBB609EB6801C8BF
13998C676F5633D42863F0263EDD8FCDF7AD1F2DD81160B6A5A4468B2B2585EE
EF01CD882063EAF596544CFDD4F2669AF631077308D7EAB2EABFDBDFF58D1050
0AE4DE1B9AFE745FDD97A8AB335A47E3505ABAAD4341C4DE465FC53E50F199A7
3C1B4EC66D314A9A4AF8E695D4AF92BA5D627FA697E110BC240CD8069D8039DA
35FAC888F976BE53A8E2F5D224FEFC2DEF84ECFA903AC00A2F67009817A28C28
1C3EBE5C2C46A6AC2854462B2CB23239EA4B42BD9BDF1CFE6774250E026264EA
6B1AFE72D38567245A095F8C91294627FFAFF0399CCEB87EFDB804713BB63FB1
C3717A3F9E507D6D8C32671862B7514BC70D16F721EE8768AF0C5A6E66411D46
12096425915A43A46E499F719764BA6BF861040855EE306D3D8527BF68186C25
AD5CE0BDA86D6C602F27D4D17370D21B45D1BF3E28B666F7D0CAE721AC37CD76
176902336820FF6AF404114D9A5A4BE0615A047B77289CD1998D457E8DB8FD16
61523AE5AF8DDD8B198AC29BD3B8DD91D49A04E0F90542E9E515490079815C20
00B856C14AC12D7506D4220A1C15988847BCB5B01B04F5C3A01B3BD243936125
6E96BC1C1E95DEC7CD47FC235E96D3BB3D354DEC5651C3F11EF27F1C85D2D2F8
6B2B420E9D7325DEB5AC6D7D79F9C3C1353B559859C6B14B1960E18DAED68296
5458E224C2C68C1A85D18199E0C313BF1E3064C18D28209689361DA0D7AB8B97
9BD91DBF43FB52495F20DFBE60BCC2394BC9355CD59870B8C57F2F7EEB6B877B
91785515C9C3A83B0675726AD12544F2864E4811F7AB3C025793D3F8B06202FF
8DCD698B56544751347E9AA3520A66FE06D303CEEF0D9E89E6660D609C17A3E2
095F15EE900139602F0B1F0FEEEA7EE276418D27F5CAD8E573901EF5E9D4902C
2219481F2E2E4718FCA2A1DAA2649DEF7FFF7FA372D5CF659CB8BCC3A264110C
2C6A35909BA5996E7913C796CAC09567214488B8CCB2721972CF98BF60E2FF2B
32BE0179DEBACAC5A6DFD51F6B5047857681230C425D8D532C284799723DCC04
CE3A194D0D05C3E29AC806C2E49CD8D7CF9FB27D90834AFF6D3AF0118FBBD83B
426EB0E6D69461F38D18878CA1FBABACC7C75C1FC9227268652BBD3CF858E539
037C18E9052A1A75C73C5AAAF581AA672B92965E2EBA4725344BD3C039A064E8
7360CFA865B49FAFAEE9506D2F10DEE673E177D6279B6E22FB175658468CD6EC
A301D7DF996E76C827664C50F58BE37057DE0BC5B2799B4A6B62A9C9BBCF1FC0
273A5C94A3FBEAF9140B86917135468FE006F159D3299B3D42C0757FB28F8FD3
9312BA79A229868F2C81C2F455F03EE38F30906003D98F0F6A1CEE4A6444BFF4
3C8B73F0635DCBDCFC8AFBF4EE5E7A2C6227B341BE13F628CBBD54C59A068F7B
F8682C988BBB43DCF241423ABBB9FB8B2FF2A55216E5C0F451BC1C6C550703E8
4C757F24256C8D68B724A0AB02F25F032E14C851C05AAD242C78106175898BA4
484C7191BC0D3213F60CDC546ED84D1F231C51BE056A497B17D31A9343E48371
2AAEC2F0EB03E3EFCF16C33D4FF442F40AF64CB76961831E5F2BD08BE631D5F7
06BD4AFA8323B32617FE09DDABB4DA5C9565A5FC72774F5108CE1FB984C9C5B2
1CF8236154D849C83E32726405974D02A8D6C95F5714B2886D0A38261697EBFD
F6EDF150E92112CCBD815A60CA119EBE7E37AC81F9D4E270954145975B2DD760
BC202A2300B50392C923A50E5D2A0EF27A5C409A3F6AE1F1D3BE143CEC0C46F4
BEFCA6EA741DC2B9D578DAF502D940AEA08876BE071C01DC548E01867D04D3D4
9F5F31B0A04AD8EAEE5761B51B323B5C059D40E2810C6AB44DFD60B2BD572D01
AF735E4E1CA358F50893E391398AB4EC04059368E01F0739ABE2D01D40E3E00F
45773DC20480C8D6BB75756FFD8F5C7A6D6598F739D55E1AB926E5F1230538D9
6AB2484EA11AE1C81A97E520CEF18D77C93470857058A2D4E08CA6D34E1E2011
1B23918EF93CE8C1147B93A7EE8AAB6F15B37545001949483D3BE38D9FB4F96C
2C54591C85D37B447DB794F4426E5D273581A6D2844444D82093FB03482A7982
CD0EC8659948F84008F4624A4F41B8DDA112B42DA78B696F299A0821E42C97CC
50E6C4D6C1ABDAA045D8584B0EAF501057E3A9FF7B3D1A0671ADF319AA50F056
90A944F4BBB849BA89F2AE5877339D1F2ACE6E53FF054ADEDCF81DB674AF26BD
3389F8ACCDF1DCE3D915F0FD4EB294F344716E2AC29402824FF967E18EE39082
BF842CD5FF491FF07CBB06A3CA7C3F21222AD7E0721D9B29BDEC116E5F5C2F25
A54FE587E55C037EDF4C9BC1D95D77CAF067454217CB82BA0F846091839CA49D
29195773CC6467CB0493EE58D7114581FF800CBB95B97314FBD41794BC35FDAF
30EA27983A25D956F3F545D5FC78AE8572FE36A7D076155155214A256768C846
557A983C753D39AA3B9F18F4022B5293001DE70E6840F613E8C5CD0BA45D06F6
44205E11D810C3394BB359F98A79F25C60A2CC8A3B6999DB5E1A4CB1BF6A6F67
F27976C6BC9545702F58782334244B767EB7651FF0B70681E8AFCB5865581389
214494EEF9B605BC284EE34062E3B392D2CD31532EC6C54B05516837307DB8AC
1C0D02ADAE4B0CD3C1CA56D37E4BBE80618AE6B86D9812B7DCD557FB92419B6D
5A43261942ECB01AE636FB87444046DC3EA7786BF97BA629AE24F3FBBBD9947B
C5A800F9DA6B7BAF861C673F9D3EB854E2350677895DC6E31E6A6A9AE7E37727
8A35640F4F520C5AAF132A27B809011676A70056DED9C4C85153B81D6C955061
B4CF384887BA2A9A504B2A0A92D64B624AAD88699BBDC9D3FE09EDE49A4B4785
A6F1FBAC3C66806C33974F0312ACD1605720B548189D085A7DE397EB26782C59
DF2A8D383A09280F36634BF9DFDB4972E229397DBE404BA26E352CBF1D23E685
CA897AC54A3AEB9D40CA8BFEAB9B506088DB3CF99C78613AF62054AB8AAB252C
572AAAB15FEF7E934F5D0498C4BE4D042DBFB2C3A3A1A1BE80ED8FF0A9C50942
0006D2229CC525B3933DA6097C93F217F851A9E251C407E655C9C0304301A5E9
53355A9128B523E2DFE4AF1A5646EA8EEC99E2089C933EC236A4D9E44AE3E5B4
4B2AE9041C1553FBBD52E76B0299D8043C4F35B031A2488E7B130462CAC1C61F
B2E5D583E52C3488C72C90387B5DC63F9284F658F5D954C4DDA3108450BDF74E
5373FCD4127D1F4EAA2AB5EA69845E813406778E1EC1CC156EFF2B00A8E11013
1027315266751A5C0A81D6171E5D1E0CAC8E185F99A3545CC3CD8D026D6D6CAB
0A90A6891CC6A139CEBFDD923098B64E9D99F833D72AE088F54DC0BDD441EA5E
B5A1FB873B1BE4EB78C1A95CFEF5D63253821A866F13CE96048BD15E023C7CE0
560525A8DA4CCCEA32F995DB32130C3882325992D95DB9B45BFA74F9361A0D65
BD272128AC74BFC5C457B2B4B6AD53D22C67800381C5E71D4CA126DC34B2AC6C
9B90F80A589C2C8E6BA68B8A9403FF86C781C8D85FB8D395DBC847CFC3AC4C36
967A941825BEAB6B941E431962EAF45BD57DB169FD35C38292154D3476BA006F
3197BD483E27774209BCE8792C2C4BD16E4F9B939191E142344B6D591ABACA57
A4DA17B753323C8B162FA8C577040F6389F4146E85E54F0F31C712346F9DA394
C88F490F71BBE5F2EA19036D208AF8F2B498885FB4B27A6E3743017FEDD9AF19
7B98C9CDF8D3192089852D90D46BBD8F7B95A7BACEF0F59D7A86D619FE054F06
5A4B7704DF0394656DF75B0DAFAB5A00545DAA9E5F7AB457EA8FCE8009D30DFE
B19A02D18CA44689E5DAB8F35D92D7D997842CF3CA6DFAE437D0740605CCC918
75B38A5D350AAA08318765F1F8406A7234AB0C0FB1B0DB8C8AE3F98DA779BC4F
16A0689AFC47D623761A3ED9FA2E818689FC1D671C08E1E75F771EAC2F986116
9AC33926791FCBBA2B45EE70D055487D7BFBAED5F6C684356949452174434B7B
4FD663A020348E19F7C6442B5C0F4D07D2363CD74FE05D9F20A02966E5F53E51
0D08CABAD55FA6AF6EAE9AF67B29CD9CC8C334A930662444688D599370515116
2D39FBAE3B37CCB5FD136F67417FDD3136C3741EFC40376739E8B514227E913D
B1BE7C905652CD16C1D76669DBD8FA9A0CFC2D221EE4C0BAF1C49F2B4D401373
148A823D65DB474E4CEB9861534F3854CC252589A61927202AD2A97C1A052EC2
492DAB3F76E31319B72754B5A78B1D3EC8C037B95DCBBE843EF3937880CFE237
E4174C3D50CE568BF10EF9BF27CD9538EC4370502B177C295D26AFBF8CBF2EB6
D1EFB57D815A8383798A69111D66BB6AC9ED98FA08086DD2D330B2DD93293A4A
50EE65DD5A40F120D28A14B7E33B9A352EE969978E94F003A195663FFB3A1235
FEC42224E08E3030C575B44CA2606E24DB906C4339D227286CB577215A369735
EEF8F01F994D24ED9E52374101D73EE92FED74C3CE3871A0E627460CD0D40559
5334D7E2710B815F79D4F72E0762B11F073F9723EC9F7CD8E010ECE7441D14BC
D153D3DA88456E36F56AD1811525972D9D0DB8C25134DFEF671002EAC7CFF69F
F334EFCC0311F80DADFB951F81CEE14960FF0CD943A1577BD89D89DEA9BF7462
5739FCE99B64D38849751416C9EB562F65C3DB7A4AB69D26B5BF8D90B7D2EF67
E397298427A0A7A59C4ACD748A13881C130EBC36334047FD284ECF25B6240F89
12E6B8DA8C737FE573F24CF878D91C89A203CCAEAA40BFB7FAEEBCCBA265C77B
5F07D686098CD4C026A95D67FD5396B2EC56E1166F10A577F70DAB727B1682F0
0920A5FDE34258B3011775895F6B63928DB1E198B5CEB421CDBF31009679C538
8432CC84D08BA7F5CC3EA951600EDE5FD33C9288B423421BB7DA59291A239C1C
AD58A02BCFDFA7B2AEEB52D242448B756464160CC709D2F02A87A8ADBE2C5574
7D7AF3101C5F1A2A1BF6C0E437B304A3C238DCFCD3AD96645559ACA5056F7FD6
95D5C3051B4CC993A9AF084A8D82C5E24E3A304AFB4241AD531D28D97F1EE6A6
30FEAA7E220886B3A57BA549FBB6408AE46A66C1D73A8143C8A24C4A470432BD
989259DC4B0655CC1665B0458EDC336CB029F5DC16A771552DF0B1865D7EE20E
A7A111A443494EE0E87098E09AD2608D924846BA02EFE26B967C16CC36DC88D3
3F56B50160C8E1373F0CC094C6F19B2493E5C37020C0906C01A24EFCD7FD732D
F92BCDE2F4E57A092DD9537EB1D396324102B18E4DA0F749EF07041A438413AE
A5BCBE01C8018286F62D73C378AB530372EAE07A1EAD58C4E828145404330E75
575857F0E6D8CA3BFA45DBFD3AAA0C951A08B0132327FC9AAE3322228A26B037
663A266EDC730956765D637B7CAB7CE83409BC9369B35D8A5172BD967747672A
13408E337142D40D04540FDE66982208EDB267490141D0F9F1E7BB507041BF58
A9DB7917EFCCD18351296DC5CF8F4574A392FB75943A52DD268923E1ADD09FBF
62E5C21135E845A3FB4C1681C5828BD386E6C1BA46D0C203EB676795128D0C9D
92CE1AC3301B7E99A4A14404AF24867F766A6F481D4F7B40F065B01D1C41C9D7
3C75DA9ED18010B361E5A94D176626572DB26FA4C566E76C74B5C24F2C117F6F
40CB8387218CD94EF127847A48B648FD0B62BC4A6D9D3104C43DC8C81BE4EA32
0E3BC95C439EE695D93669F5354845CB093C082BDF45E1094456BD982698EE84
FCFD9F1B3523CFC02DD50D55C0575EAF4EBEA0BDC2FDE48E4212282BB7BDFC55
B4522C394B3A5441598B92AE451C29E535A2435C3C00C5CA23DC0CEB40DC2ACB
741F3FAF353AEF3EB31FDB3426D23D1D73D277C764E1A3AA4A355FBA4E4E99A8
8103935A91A910B6AC680A8F68799B8C11F4DC6A1EE18BFA4AEB8E8FCF156548
0CC5A854BA3CF445B08FAC37BF352FB4A942CC07D024B7519C29C9AB6FC6D10A
F305373E1B87A5E462AD7A71280B76568F0D577DF22473C89EDB9F444EA9DA27
7A0ABCD84D129619BA020984777DC32533D1B154381BA3ACDDBF1CD8DB840541
44022BE6620E3BE3BCFF07C029D465A7D31111402EF5BBDBAC1FC39DB9BAE783
83486A34CEE467AFA1DD611045BD9EBEC8F177A8022199D0A7D13EC45C1F0743
47A9CD1C4F12145EAF482EEFF168D3385ED50CB71876C1DB3A6B32B70C9CC4B2
7DA28E97CCA8A8826314F27D165264869A4D5EC574FFF64076FD6BE210151828
60BE07B7B0BF78906E3F8B77B9C2F428FAC68C9AD6269551B19BAA854EDE7AF2
89C24BD5D031C90648238CE802E372A1FD7BDD577A273AFDC1A318F77A31D384
48EE312258C750110A03208A81CC2FE254863CB2898D95041CAC34C9E9D272BE
D502E97A66EB8A13012C6B8EAC45421240850599926BFB60AEC2B30D2A634055
3EFAECDF191B8839074F73F9FD6188C4727BD199CDC8B4D5404035371F2AA523
BA4ADE325CE7E648920DF308FF9AC52C23503CB3D8D3959AF1F3B2502521D924
A36A4DEFA252E47AA3FD32C1B922D3D4B3AFF2463ED4E9C7C2CA8F7E6876111B
333C97D6080239526492D67323142FA687517E44DB06312890028671FEC25BE9
2D77C765BEE325B4C784EFBF74859197831FF9D1DB870B5708503CD57BC0A9DF
C2DF579A8C1E5ABB7915655C54F2B88C06C928783AE7E32CC7F03BDC406BC407
4F8C397A34C42CB977A3CCD90B96ED207BDDE1566D6A8672D6AD3E0F12CECB75
95C5E680E31F06B8DF8C7C4E34A0A1B92BB98F32ADAE3D3D0D60999FF81AD0F4
E3534464FF1B63899BB364EE8847B033D5A12CAD1DB938C4D184E6656CFE6D2A
1A68C78C7A79A202BB5A04163E57D4FAE6BD0253C0C81E6C53CF5C3A9E3FCCD9
AE710680584644F975CC568F473DBDE6278D74ECB3172F525ED4F730344E37F9
1B322CBE82AE7C765CA988D678E03CFE25EF5CC6B22EDC09857D3E5F676DD05F
584CCE1D6C255C7B1F1047F47883359E4FFBE3857AF495A7F2B6D1F489820C82
19999879C1BDB510F36CFA5A1647F7FE4AB0DE017D2EE6B73A28813DFB776574
2E60E70E5C5BFD6E8A80D4C665D405CAAA6D6A29C995E0D51CD606B69BB15856
B0FC7626D42E7B65AC7ADC46008D953CD807D912B9B0A39590295049AEC2B509
E09EEB88297CC9747413FB1E9AC14A1FC533EFF5BA5F1C74DC3A24E5C007D0A5
FEAC82A8998C0204D4F954529D2395D6191F3287E27AC8A4F76C9B6DD93C12E4
9D04DC071AD33B118362FE0218EFE114AFAE4C5E3ECD9575C7D8B7AEDF7D8034
F1C6506795A0DB8B4685BC3AB6F14583DF18AF52E530B58862AEED31751D9139
C94CAE2AECB95D1D16340FF239980EDBFCD5E9907E38EB02257D7F32DDC1190A
F61B71413005E9D6622174BDE3AB3916E34B9EAF5DEFC753AE380453F60EE0BB
86C4FEE17290D7535F0BAD8499A558E8706B50613961F9E542A99E1E9EAB27BE
F2BCF74FB40DB20B9392171DBF9964BBEC03013F324BD4B1E3053943774E7D35
BD18745DE29942902818A35E1689C4D58576C157F0CF4A14D82145BDFB969DD3
7E964BBED075B1DB626E6AEC36C38FFEE58A7CF412C97859BA2D699B615F5828
3005D97035874D2B9AFD4D3F29B4B1E6EDE30AB2E5E9DE7E2CDA94DF2AC0F9AE
7A0DBC6620917821E3DADEB3ED5A0DA71350E6329E4F082C00FBD73BC06D8258
DCCA901F57E05BA8B4D829DF4684CB74785537AE10978A537FB7E6C9492C2FC9
F5B3B18C4FA5BFE8A5C211B7F71F8EAC3A9319C5612F3D365D1C76077A53626E
C06275DFD5C14FCE8730E450F3EF5EE824F5A5E98DD7FCD831EB5AE65A5E2918
C3A495932870352301F34CEFF1BA058AAFF1C8CE6DF6D01240E3031BA2CCDB48
2604F556E96391FB6731C02D847D0A2374A0F4627ED82BBB5056891819E74895
D1B415315CCCF6ECCD15CD3C0C3C3AB1F6ACAA3F20BDB5286981B17F8932DC58
0D22FC84A868773E7FFFA94B4E72EE284C44A9C294B2B18D9A2E50D90E72B6B8
0E04623D0517232107B05D32C2DE49274D4F818C0C01D40612F4B2EC81023B5B
9E354CFE201E2EF6277548317060CB54C640DCDD7CE47338B92353B26F0CDA4E
67032E94AA7E699152CA8A979DD0407F40E90051CFEC249ABC3A605343DF722D
CBF1C27AB8A8026A725FAD78BFCDE3C5ECC63492962B685F25A4F543D4D6DE58
23DFA15DA58787065A9FAEC1498C2758676E07DF08BA15F2CB6CADA2BBCBF2A2
42957918BA49E5937B1A6DF1E07C920346A97A0AA2EAA2FD4637BA630E835B27
12D6F84E63A541739B3F161891F0FEF72185C44E7430DC219D372F01CC9034B4
501671E251976003C56BD12C6F4CA60029710E20D2B78D8421212F54FA73E169
5B2FC03932F2514B5897FDF22568582A5520D7561D55C9E03EBB587B340A358A
65ADDBE9EF398AFE9B32720E93FEE80FCA58A4A752A9B3B6C33B84E9FF2FBD41
476A887BC494DD0813A44CCA6CD43A262E9BB85FF5F6677DCA7F1C959023B655
F22809D752B9BC2EAE3A082D9EFCADC2BDD04583C106BA3812E5070281D9B1D9
68F0729A5A1D1EB41ABB67B9BA1735E4E05559AA8F4723504C746D801C6BE04C
DE0D28488DEAC62730EE20BA7D57D89A691D2FD404BF90D03657FFEAEF857C62
456810F44C4701C1737E7C75F5191C5D2AFC986B0A63D5968A21235C8DFBB74D
AC70A7CEDA2DED1E0A30EF42D0A1872141DE6FF4845014B6379A7F72F1879084
AD369A7EF603BAD307528DF5312399FE4A770520FE7060B426C5EB2D08CF1183
82A92B6F946CCD210E57E5A1DF2597B96FF071BC1C3B8023F9F47A64E9F02623
E0997ED3DF962EC6AE415CE7AF5AC0FFC6BFD118722A55A159707CDFBBA48F65
2EF1C3AFCB19D0A0AA9B58CE598FFE2215958A21EC955C2532B1A884523A0634
F67D863030B2DCFA3621899D8C72270A9A4320E8DC181020981DD865B69D9FE7
0A9C4D0076715533B2F948ADF90E8319EFEF04C27EB562B2CFCC6C8E30F658A9
095000B8CFDA07DEA24E3AD3F267F646450EB7DB5799E8120D2A48624745AE9E
2F9E1923604C1C63D0F397C89053E3E3DA39D1199B9A9986E65D8D5EFD9B0E8A
CAE8A5B1B40C38CA62E7926DF46DF3CCC3028052B8104186183BEE1D7A63E590
01F052D5A5804947AB800D7BF4221620F1E6543DB5D8D094EBD746F00D4870ED
44C424519F5A651177B3D358AB127B6B6C6133A18BC4FB8CF81D3E8E7050D043
B09368E43CEB4EB4ACAB454C6CB74F0E4BCD502037451B79C52B101ADAA48FB0
A4614612258EB9CBE503F6FDF3D90D232B567830C7EEFF5F93E3AD1463726432
46468572F84A6C7DFD02A58EB57540F4BD873F5530E60F7BD257B07D53815532
6C5EE8E3238959CD3AC7DB6A267733EEE15CDA5D8597493D825B14C2FE7BC31D
28A9EF2072B2957D98A12B7D4072EDD342E3811BFE5509512D622B23F00ABFD6
759758A409DB1C7394DB536CA383DBF1AE8B44DEDD7C92FA3787EC523534848E
285E3ED2D4F69A23BCC5743A6DF5F634D5A1793EB14626E9E5062D720A8E05B3
19FE16FE42ACC4F8B1F8FB794125947D5EB4DD00F5FA142DA826867DE93E13CA
2549CB9F9CC588E29BEA16B3FD22EBFB9D13E7D7EB59D757000500206F5C1DFF
E78F9FB4B79A06680D81C64C56F09A36617F19CD582733B90F838458FAF9A69E
0C91C2B6079FBFA85D103528A79957F00BF8849A73B9D49874E6C747F32F4C32
ED1ACE9C30DA3D7B34C2DC4F35968EC320551DF41714551C2356DB2D6D0EEEF7
C4406550C1E0AA04DE2D6AB5B07064C07CCE41472971848451A245DC37CA47E7
06C508835CB5ACF60BA71FF3419336AA66887BF2B0E4F0CEA192A34CAEC47A37
ADBEC739FD624F67734FA400929ACC7E1FA027FF49E581739F38141B8B4F5C84
2DC31D1A75EC143818F4C6D89877475BD1510E117E015340E6298B3B7A30E87F
9D6EF48AFBE10EED9B1E34F30C19E72FC8AE9D835BE39DF765ADAAA523C72A63
5C3593E1219B298DA01C6F8EB2A860446C717D6BFCDC036294832C8EC9EDCF02
2E141A5DE5496F54EF7A0056FE475C5BA1D48A8A22F2FF86AB80143BC0C81D5A
73E1EE27F9729847B5A4A1E37B766568C833B98C74B15420259C996477A763C3
178F38BB3685144A0D49172E098EB35F4A92029A126B06199FD6AFAA85F5A4CB
384F98ED64C0AC80B807BDE5E38EAC798B8E410268717EA1D478CEEBD882D4C1
88A20430242586F243EA5426022112C49317807D06434687FE13EA3C02F9DC6D
FC201FE269C39DE41CF29780690190D2E829323F3BA9F7ED7D399CE557891649
96CD000671173E48D4A90A7DB5437D587ED8908DFF2A11595E35671969AD361F
C98BBD2831F4EDCE4F5D331D88268066E5C7FC9F71A1D00411D464546F5FE86B
CB75E7DAECA154625D290753F8A8446BCA2EBA98DEE2D604C6018E7285C9712F
76BFD82B5151EABE73549792FC287C5803B56F4058A19FEAC02F63B3708C71BF
3101F966B13DEC5A5D7DDB8876A06FFBBBD35F531B47184B2DBD42627082CA3A
4A3D0D202ABAE1E46EB10E81321FF72B455074678DFDBED70D546BC7E2C50ED4
DC519E58D3260A5EEC79FE5C0BF386C4D67F02904D0CA4B655962A7E6669FAFA
E131D0C9EA578796B4888095E721698B2E38B8304C424757E029E43DF9CD565B
380CFC3E457DD80141CFC69B62A9EA6B300D08E8929D7014098261E35BFFF4FB
BB8CD834845AE5ACC4988201897A62267235D07A191CC377126A41EA96394170
A5BF25824F7A53E361D3FDA49A37473D1979C3B59B75C3064E8F923D2251F0E4
1DB036202EFB584ADF8F82E270D23A90373D4CC41B242ED41737C237A6CBC815
C3E911E5E3D25D0B009D53D88C3FF60A8C9D26CE00F152DEC98F89AF22A553CA
AF43172EABD8D0C79104D2E173B080DD050FC4AD130C07E799515496C142D484
DD2FB5235AB9484989D071F00E8416824E45E6541AAC3BC7EDF542EB98666B64
E449E61213F8168F3DFF482FB7C9109DF46D02E2D342E4D2D214356F2F45DBAE
B9560610E8BC8794666459CA32AA7158471CDE2C3225FA6E393C673988CAF059
8155C3A06FD0A1E1A553A05978A4FBFF7D591254A5E3A260EBE9853329025D32
2D8AA0C5BB40DE983CAF4351425502D84EE68060A81E14EE323080F4DBF77A19
7944E1DF0640056D3EC28D85BB53EE04612C6A0D8E6BB90C96AA3FE4376EE46E
7E218A3868A1F35192B6A29EBC2AAB1F12331061BA53184111DA5E9394DCEA8E
A947CC9AC12121F52756E6730A8DE91A44B3DFA2C96C256084D6DA1E45D381C4
D7BD661B312D892128751FC9990AF815FFEFD39A7963284CE761801461D61C7B
245C0498165673ABD3EB5D4601A8834048C2F40563527AC4DB5221EEF186188B
6E8D7BE4E26017804965CBA5ACCD58E4C1858E9DCDC231A1094CAFCFD1AA6E87
F704695C32C3FA6607A0D7DB0ED72208246B1132BC6AC99EF357806EC5476E3F
287A775D5940553419BD119D07F29C6889396A4489D046C099A57397A07F5CB0
58FDFBACABB8859781A88518AD8B2AEF3E5238AB3271A5B75ECE9721E484AEA8
DEFA2A76B443089D7E46502B22D03FDD383C388C068DAAD15CE3F32DAB44A60E
6395AF687EC88E429815282D632366039A306AEFC575FAEE1B5EC42CDDC027C7
AAC514A42B4218698E454F25DA98C8E8D69C80E11ADD6DCC8B88C785AE2CF84A
6734B92BCBCF272663ACFD83E27409C51831304D089C0A6E1E7B4D9287CE7171
8F81073EBCBB4382F29CD1754D4287B17F5613AF6ADA1BCFD516055656B88F32
24DB6E57E7174C063A619A14029B25D522E73080C524694C3A5C7F698AF2C21E
8301D1D4D1EE19236BC6A85E362016840676DE91F62737BB54C4AFB0862F3A75
C66B0FA98EAF74A87B9AEC2D29AA0087D516607A78F4D642F4B65616E2A22223
B0E9F7715EE1E8617FCACF41EF3BC3AD6487B679963A4CB62633A522F3617565
32EA2EF03F94DC211CB2CB94A27524A4C2516A81623EA059CC80324E85925D3E
CC13992AAE7B6DE358244C2BA1AE1D1009AFC847156F96D9CD38A764D0EA70E5
E9B1FE21FCDF197CA4A114D09F0F66093B087E153C354CF7366DA636A9B0CDA1
509D95CA8A85A9EAA164A4716C578753B788329B50602BAE656CA4B90BF3E7B1
D0F320AD113693E69C079DF7B66876301AE9D423EA39E046EBD09E6F3344E8A9
2F9531A9E80120614582D4FC6F6A4DE5DE75FCFDF50D7B6B369728F9C9646BA8
48529E3D9078E512220D0EF7CB139D0745C61011010407B5F2CAE372152F7ED5
B36C3AD33E1B31038F25819C130B7BA3A840F57D84B51D8C3E4B86EFCFF1C0E1
9F4369AD260BA77F517E9D4B958FC9C413E5FDF7E3F203BD2D3299DCFBC25E34
0B37288CA08255BCDFD9CA2916B54B0A1F4B3C427E655A60AE68490AC4A06DCD
B3A1F3237F7522F404099C9F7696B2DBD18DC081E29A4DDBD91DFF437FF75345
192C6CB4EC40857946FD8AF62FBE99C8E9E6F3D32E9A1E6911750F761F9907A4
38DDF4506C6ADBAE868F8E32F463249BFACA0785AA219F85DC4E78C139FF3A8F
B5FE07FA8FCDBA92637D2CE33D4EEBF0AD2A8782CDF9E251209587E2295BD474
8871D5A349370AA3F656B45B5A3935C4897D51AF17B9562670633526DA154F2F
C6BEEA1C20C75DA35DC781C4FAFA29D8D29059AB5E706E5EB188DEA7C73EECCE
C90B036F773A35572FE436EFCFCB5531011E285ED697D69314BF897C98CDE5B9
CAE03A7B37917CA7F06A3C36A4C792D168DC61B0E00C91D6056453728FCDD337
56619AF59ACB9D17A3ABEAA6C652186D6533F5321DE47E229F38C9420958399C
B35137F6825D339CC05E14B984A78CD1C3D6EF460281C530F4A61CB06ED69555
FD81A22DE96084D7181957F70B74CB84912E4111DEF096540F72A7AA528BB009
E0FC966D03BF5EC2AF61DD33CDB6803328A3D52EEDBEB18DD80446181DAD8E6C
7C54DDC4E736CCA22A08C53436AFF4E299178F3738C102B9EBD541AA9FBFDDEF
1F775BE0C411788B054AA9075A2D008E4175717E5AD6E1C31BCFA60156CF25C6
B3E6A7933112319B188C5CFAB0844DC751653992B7B4B60A3F7EB5D20A9AE354
8C78B7790828C28A540D3EF7CF503DD7FD250F199B37A3881511E276B93C1749
4BD3185DE8522327EF91ECB2F78E79BDDE2E93938EFE5219EB59A53C5FE33A2E
58A225731A7178C2F2CAF85B721F7C43F1E5296ACBB33FC157518D34FE6F057D
23DA585F9631C323F78669EF8DF55A96FCB38C609614131EEA9A4B82BA1EBFD1
52BF96A69802107EFE8803402664E16F142578912684944C0663FA9D6D4C26C4
B5FDB009C8283000342754CCDD43716FA35E1448D71A7005FB8814A9B091997C
67919EF391687686DB022B99F26C5F4261A3EB1B05D9EA6CFF8B99222D21DFEF
F4BE28B064B9E575B67C26D06A35A077E6116F9572387591BDE0FF25DD7E6DA1
BE0A6AFCBA4DFA035A941B70AC843375ED8C0B89C3781BEA2278A65E36711C4D
1F19044E9A34E995D348E370A4EDAE2A150AF3C6E7B6B3572D01FFFF3BAF71EC
E831F3CAE2914ED3015956D9F804528ED569110E6641FEC07500E8BA8F6F2AC2
615C55F3E80ABBF482A30D1159FBD2D63B96CDF2760A41B61A25BDB414C852C8
CBC4EAC24D0DD45A9A59D9B72FF00396B227390DE35AC5CE15B364A3B03EA457
17C4EA62AC71FE6304200DF4CA16EB943AF05A6DADC42BD024F1941E44598D48
0D0CE94E77ADAC9390EC4E790133AA572042B1A30690AAFE2BD8F1FF235BFCEE
110A9EC9BA4FA1661D656C27C486DAA7FDD68F5A27154DBDB41C3F1896CDF276
0A799EAA3737EC98F4A6F7EC126FFE5B4563496BFB529F2A652758DB1EFF2353
34C3F33563669BDB5FE2EA3708AEFF3A0E6E57214934F9AE0347E2EEEED9B4F6
54DE0D69DCBA4ACCEAD8247E7B621ABE5DE002B3593265C979E04478CD5C7834
138A16E9F85E6C05C0CA309AF7361FED200EFC946833B864D72EF7EFCD4FBD84
BA8AA381E0C527DEF1D245B257BC06E5CF75ABE63A1926D6600DB293FF841FA0
624F5449F8EFC1272342DCC9F404FBBE128D8FA3249773A80B1741DD7D23FB1D
E3086102E55C534722DF25D6CE699D608B55C15486D7C493
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMSans9-Regular
%!PS-AdobeFont-1.0: LMSans9-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMSans9-Regular known{/LMSans9-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMSans9-Regular)readonly def
/FamilyName(LMSans9)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -131 def
/UnderlineThickness 38 def
end readonly def
/FontName /LMSans9-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-433 -313 1466 1155}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFBD8A43517ED5F05168C22E86C2D
D12593E946875124533F54EE92C84CCDD41D879C6E0E72E102A6BA8E6216290E
420EA6C3A00EA0B66D73057289693F0BFB52F15F2363C6B00583FD3EEF8E4CCA
A79A6BCC2EF6C7231FB14299759EF1A9B8C3628D99CC9D54DBA59123CFB8B800
B878CBAE626CF605ACF437310847C32926A854E5AC418544B64D4D2196DA6881
BF63A721E607AACE25B9FE231E8F859DDFDFE4EBB95A804C081332AB8042A58D
6EB61D2FCDF79C92F93374A07FEF632EC8EC250A85B4EB19A5802FFFF6A9A974
54AA5BD93F6DF03AC4D2662CFFDF5E9F473409DDC72D93E20A9B34CAC67B1409
740DD096831F88FC77ED0C3D02275E155AA61E7C3CBF42650AEBE9A30B5759AA
CDD858AE7090AEE6DE9B0C12CE69F9A24ED9D7265EAF3A7222652A9E8D6BD354
76E0EB3959329CCDD68359B21580DE07B33ED5C145845BEF3C6952856E72C348
573E7A387EB68A58ED7FB821483F5DF092A06E5086EC20CC27C1697CCA4F8F35
93137C47FE81196814EBA378F320D2733631BAC11BEC6CC1AD4DD44E0033C590
2BA0A569E7B388D6BC21EB26C30697705A8E2BB68805D0C91F964680CEF2FCBA
028E0B34E21CC7179E54B4184A1872ACDBE2E054C5F99A986C25A4B3FB60DF90
D18125F9B44C88A107D0DE2A9083FF9C399A9BE6A4B786FB35B5658DF3935DD1
E457D9648EFF7D7484A121D51ABE0819EA6D258FC0338A77ABD8282C3F2BE2FB
B2219A494FD0147DFA99AEF82993B8D3C42C3E162A5FA187F7D9F9D2C9405E4B
DE429024B185BB945AA3F5B71DA62E36014932F8DE41A59AC4DE75407AF0AD66
1CEC1FCBE5CCD35AD7A1921C809225EDFE9402FD7D03DE4B60F9C538BBF4909E
ED0E3AF62B6B4153F63698E203ED14E9BA26B336B788DA985E07ACCC55338880
A95E10D3CD76B4C2CC94A61B742F244E6D5083AC9D18F1241F57F4CD272AE717
BB482607D684EA727C64051BFEAB4BBB266CF642DD8A886C884FC44CAFED396F
68A43CA37A0B74A47F21F4536450126607848A6F7FF0693EE4F9884F5B9A2F3F
131450F0DE4D3197C6081BB1F324666128D66DF5DBE2E04E25E232FD0A9AA0BA
DF717AD3D206B6B056B9A6339D5B4AFAE1B7D87F43426B64371271E531346BA4
EF81277BECA97564750253D5D4614622C9DF93BD5BB18BEF1D2C0B1960B286C9
7EB43BDF9710A69FE60AD51B30140CE83AF772E98E8CB3158C0C324C6C762F7C
6EC024BBCBDDA2519088F3823665B10806DB0E55CCA40C37B251270944DB64EE
E0EB5716FC088BE73099943D762D20ABC42DFCCF4ED0E151DCDC6EC1B70A9ACD
B172BAB4BC144943B3D3FE06E95C6B6D34045AAB661615810AF7ED7C6593BEDB
64F65C63D5ECFC19DEEFB52EC0E80B8F4A66179756C6668E13765438CC326BF6
3BA1331B9C1D9CFE9B875E8F942D66163FDE031EA1CAE763E41AF3807125AECD
FC2B1A24A599A2B2F592AAFA87A5D2351E00F3470C278AC43E90608EAB1E4645
EB7D1271EAC040A9272A53548767B24846294C55F890EC1805347D10189DDBEF
FC14D4395D57E1181660E7EC9261A296A742CF5073AAF79426C720B0CAF9C20C
967E0EEB1C7C304449084A11FEE5AF25260F2E92C7807C74EFED2B132A2915E0
454C2ACD6D7EAC386165819C19C75470FB635CB7271D8A2DB88965B8D22AB04A
724DED273BA060E797C1BB73CF35BCFC3ADB587959D05FAC426FA4A439A7AEA4
97F13E68160AE0D42A628E9CEC9E0B59788EB9B9FC10E4245E1F1A6B012114F6
CC526A2939FAFB6C30A399FAE5E0F97FC9B58B6A605314F854A16AC3011DA8D1
44B6C814E2F47D48B84F12297AF2D267279A477BC4EC6AFFE3CDE50F7693D5A4
D6BF6BA810B780AD3D7817E986BA77EC41DBACE2826B07DD73D336E5B30DA51C
210F7DEFAF8EAE58FC7836FA160860805C42467908A77EC9CFB375CFC635036C
F27FF9C6AA952844DF49F6C532D429E5C86F89D1E697FCEAF009EE8ECA30D887
85FD165B58549F12163570DD73B007DF25DC59359DAE2A50B98AB2D2D3A6081A
B507238D0C64F81BABC9E046AEE8866049379032547DE7545EDB3004C44AEAE9
2C7D6E49A68F23BC5D249C485912C3823ED9D1FCFF6B51EFA6D574E59DBDAC80
1EA0516AA18F35C7CC9A7C8D719E8FCE2E4AF1F3B7407DFEB6AEB27F89F410C8
CBAA8F91583D376801939325C72235C37392697AF95FB4F1AFD8CCF42255F336
355E49F08A25B6B242E36DAAF1DE150D2674F35244D5D217ED437B23DE309A36
0FF60CA82A8251BE567758F59784794A0288065E86D7F5A832B11D5CDF6CAFF1
1C5FEC5DD89072F6A6708A2EE664643888AC42C2D2D6E842A797547F96F92069
35478D5133B9E7614FDE68A9A8A77C343B645717155756D539A41B7390B4C06D
E73E5A06C67184BBCF69B32C4F358A707613C0AB403149E46F78BB6AC81DE809
BFBCF8A569CFE3C71064657D64B43EAF4ACBAC482D06AFD458F0DC3F445538C3
BBF97AE7C6C4425883165E85D442D6F6CE74A0325C44AC6F52BDDE513987D5ED
51662BDADADD49C65416042628EDCD86876B9AD32BF87142F762E1001344D17A
9535FDD857AD224A2DB7270781DAAA348CC0F755919054DC900685CE73A8D573
8C2BC3A5CAA9228F44CD9D5F5127D99FA2132E6C41628AC3150F9FA4490CFA3B
4C7D0B8794E078FF15A4159F644CC8DCE94D3ED8950B75AF0B6BEDFCF429BEAF
8B3559A6C055707445E43F11298F2B2836FC9F145DC459ADFD7C58C650007149
78E352F4D301B9688E76ED5AA7BAEC9EE91E40D571A0BDCF87581D59EF8B0F11
669B511393A17D4F415D8447ECF70B67DBD46643BBB2D9CA0D2AF08079CB5D0C
E2CEAF2D85E987DD9FBA00895D82D1F487598CE1C576AC85423EC679AFDA95EF
3F0F96503E091E4820C12FE47E3154789E02FE363C31913D73B7310879760E6E
7AF5B06207BC4D8321734432C0B47FFE6D22505EC7C1DEB88CA5BE13F85373A8
73383406C3D7F3AA612E0FDDA6ED16BF1A0A0ECAA2D7DBD9D2FBB63DE146E1AC
092E3FE888245721D1A0993294CA0C92948EEF95C118FACA7BB622E36E4EF950
D1D54FAAD1CFF3BFEAA81F5D11DD76BADDD8122A4AA2D271B7F94B263E2C7A3D
9D0248A076E7C94D63E4E3742BC018EDE986D00D3F68C0CBC50521346A87A21F
ED42C617F6B87D60D24F43DB65F27BBE55B994DB826B228EF0C0B8703123FB21
53DED6B9D4555BE6678B2F90BC9B72C3D7C59B116F163295C36BFA0E83CCBC27
FBE600F1D9DD0E0ACD84D43E356F2F4279001DF731E08E449796673B540B4178
9B3DDD14A4167F184EBFEDD74632BF6B5B93EF12B9365E8235B2F2617402C81F
2B16CC460BDD35D4B5D1F13577D32B095322CD1A13CFF149F643EC607E69394C
A5141B1DD5E631C4E862363F66C0DDD904FAF6AB01A82A5E230905B3633F816C
E50B05FEC276B53FDC21DE0755EEE6F50AB0DE60E2A8E037290EACAB5FC3D90C
30A01449D0F3E698518DB9EB523CFDB347EAE7611E3C332FD10EF7DDE4687D91
EB5B8F0E20A4FD5984624C21F595F9DDFE69D4156710F4B18312D7422FA8FD72
CBB746750A970B89D6115BF34E660434E53077206B06696878E0825D2AB80B00
8837ED8F6D3B41CC803C6B5EECC114A1B04BF1E611B73B0DEE3AC8F44C4CA15D
BECA20C353938028BF4BE0A72AAFE74199DA8D088056F1F132343FF9ABD46CD3
CBEC0C78624CF7BC577F1363169B554F14BCB334503F9F4AD87247E41367FC2C
EC2A5A0ED8281BB7AEABF17F24254496DA229B295EAB9A6869A7B5A37F8700C7
6BB5CD1B7261505A235EAFD1ECF61CABF9616E20B6B12B517C1E56B18A51C229
D3091D79652A91073F2FAFF465FCE050524F299B22D35A69928EEDA068246F36
7E88835E166A90FB1A389A342D17BB3BF446C9FAF0EE7EE51BE13F6E5753A079
54448E0B843EB069607E2DF3CBEF995D23785546F11A3C74DE150F272BB5BCCC
F77226C214A1025627A31944C10E108665DBADEC977F6E7846D73F03396B92C7
CEAB400829E6F649EABAF8BAFA31DA0FF7F8513BDE06CD872EADAA457F6BC078
B85EA3793D0874E17EF4B743CFC5807C551651FF922639E5077C139E3FF390D3
2ACA3A0D44585E55AFD968135F6492A9381FA2D63A3EF1DC48BD8BA01A6D0961
29CD99FFFD3CD8871C995A34DE5861E0AE858C398D95179E007A6CFE211D8D3D
BBB5AE2D6FF99C5A65AF5D9F1D5A2F357435AE71B465D23A6D525C496D39AA72
83D43FD9ED89B8919A64A57E8B59A5FA8DA61D2CC4A2247218EC017302C9A10B
8D828F273187F24F9D209D78E0A2FD3FA71C28EDFC157F6F0AFF754804073767
DFE5B2D7E7609F2E5BFA7BFD98BBBD2C4D7890DF8420A589993F6D8F83980871
1285EB2FAE0E789DBA81CB4DDE7D4A970A3162D903EDE2880FB37540BB8721E5
EF326085016F9E506375D1E089C676ADF77F0397CD075EF9CD41082CCBF63E84
9C48835E1051A5F2526D0272FD1B8220A2F5882788FEBDF78B312D14CC9C8FC9
7FAD356E02CC507E81CADD7262FA3D6C4BF3133CA293576476D8AB9050ECEECC
F35182E14D08DBFB5FED1801D2E1E0890E1A6EC8766C28863DA14FEBA3AC6300
4D436C27CC46EEF80FA1A05AB90D788643BDAF8C77270DCD43B21860B734DC01
663B0D93C5C6A15E5D077F7E67C90E0CCB24824503570117323252722787576B
08B3ABF8562E1D016CFFBCD753899CB8F87ED5B96E2C3B625724CD4ABD2941B3
FCD5A155C783D9CCBACC162D50B2D0CB4106B105B825722A1A0FBA8E217CDBFA
D4BE7BBA30853A9B90DDDF7AF372B76FE598D19AC35D7ABA8742A1EC77FD3EEF
DC15E662E4E766AE5F6AD0EDDA104DDC7AC4D4B4C56E14EFF907A412323CC89C
F70581E2A50303DB98DBC7FEA6FC0C4C86F21D98814DA3AC40CD481C635C595D
D6FC8268C8DABAEDDE41FBF8349AAAB438D46FB053EBB67B9D376E328F17C74F
1DDA7C8FF4DB3E768EB5A9DF8F572F92BEA924DC028D183288214D1D826C7B0E
650388639A4C63D7AE52877E2F61BEEE56BA8B254B09ED15BFCB1DC55382255E
271D25341EB5D597DC073C781162B11E7949C57EF2F4E1BD09F0CD7CA8EDA710
13A492F5F4B1F0A6DF35BC2A47CC76393F4778C93238ED70E86F742C3B5D9421
E2AF8F2412E78CA828264F7517CF6F42243C234413756CA68A0F125A0E7C1CA2
9C0B6EF07098D4E97FEBA8C650810E23D6351C7E66DA37435AD8B5690C5BCA6D
17B9E51F0E0BF50829783A528E055AAA4B08E97B5BD3466C6897065446F76534
46F2164C3F5A3DDB5381CFCC78F31123A59E84A773A3DEF10484682B19C37997
84C1394A7F95FA260EA13D49E1523291ABB04CA2D32CDD53F0BB71EBEF1D3FAB
9CEBFA1A382296A5510B31F2F70F2E3B2CC8F7CDCB7F42AB48434EFD12AAE3D4
5E10BD736B633C8ABF3817168828BA1B8A65A82A1D003242430EB6FF1DBE8C3D
96F2BAFCE5AA41D66A2997E81963E5A017B4FD5A0BF82404A36AFA3CA02B8E5D
150CB3584CB2DDC5796F17B54A16ACA137BBF7CE6986ABBDD4EF0DF8D274A5B7
A04B57F2471D335FF2DA076F94B31AE4EDE8237218A12D5E9DEEB9EB267D9143
97085B1317D50229D50FDABAEA021D86D68B06B2AB7E5E93A08414E5CEAD55C5
F2EC61150D2E80B53B635F4E9E5DCC2E4B1C631F005C08F4251173001AC878E7
5A0951E0B20F41B614C43F5ACD9126970121B0F16C93412AD930F7F724A305C4
DB7BBE9E3E9D166FE9AF620BE755EC61B46F490A77118A2D65E8A6B1CF630553
013C3160EE083B6B1BE15CB05582CDA0CABA193A175C371C045B266FF717B83F
0A43E40CE4644AEDA86E3FBF3102224D75D4E8D155C822226FC199D26116A22B
52C238D7F9F55C21A04F1A9E33AC6E8F9629DAF7E132AC46A5AA4DD3312F0347
A4DFF91B1D7636794038D4BC5D6DABA9931AAD2F23042C5B66EED4F921646F56
0829E5A4C737E5A4BA6170540E9DDD953DFD01CAEBA561F028611754F949BAA8
8CB59E0F97561179C2C0F08E832E2DDBE7C66ADCEEF9D9CDC225B90255441E91
55C36D7218EB07D98F1097ADACA562347DD12AFE72E2FA971F0B7F498FA3DA42
D7FAB4B7464966DA6D4D3C67A1F5D60F9D4C78148EDC1798F6714AE0B564BEBE
2FF35ECC4DCCD14C35346631E44F0C4641BD58F0EC389FACADA308A1723A5C24
92BA061B6479E6F9500114962E610D7B12F5EE56B8381AA5924C4F5F423B9F06
5B6810F9CC1D312FE2FFD0CF3E5B55F0A7492A8E73B103D855C312B5BE83B18F
ABD32654B2CECB901989FD377E9541C03FECEA0420BDED07210EA1A1619F298E
71FA5F5C833A1F13C03AD805AA74F65566957680618C923BABB060F3ACF0679C
37303CF8BA999FF36F22473C8A133238F03FCDC8D71DAD38C0EF448DC010FF32
F01B63640A3A63B23C8F791B16AEDF904C7D4395BF211547456696FC3AFECC1D
312FE2FFD0CF3E5B55F0A7492A8E73B103D855CAF7540FA825DE6E0B910F0CAF
88E6309CB00AA358C27FCD59E8576E72A8186570F0EBCAA0CCCAD7FE46D9391E
753C4BB8B8E6121EEB51C5F469E6A082DFB54CAA49AD06E322B194E71A7521A7
1AD931844838EE9A0A6AAFAE79A4821E48802F50EAC63D9917C10E24B9304C22
24A5A4BEB17C11463A393EF2F9C04C700FBB29DF2FB188DCF21F61FC2EE6DF51
A16B4969B5619E2B15FEDB0F70BCBE4B2BE6F8EDE15B5BA0B0D168F09C7C58A5
44FDF0DE5752ACF12F16A5BE9A050B0DE704CD8EE4010F393820137AD2A30F9C
DE995E06A82E0E3D4D0616EEEE39E65512CD6D836AABD89D461F44F96A1C9F16
6E156FE7A76F6A9700C081553E214361B2B57EDA19BBCCF098E2466E5C8CE317
225BEED285D6C70FB97F26245ACE93862B19ABF9616E20B6B12B517C1E56B18A
51C229D30915E17CA052A6E26D52BEC23C21EC0C0FDE2375719E962AC0513347
E62FC98AD6EAA19C4C512AE4EB8090679A0AA69C29EBE121EC0A2D8191742514
B5769D6E007E09C279985B507224389B666D1055EA6632D55EC2DBD14BFD4E29
D3CEC3F7DB1333A4EB3C05B28980AA04D5FE4732A11DC74156D1C73DC64C377C
8A4BF7E0E3A0E93D890FB8397C641187756FD690E185CD0FD6180D25ED5EF277
FCB2BD5451F2BAC4AF89052666E690F8ACD132C6B29918AD79A5038A6C4DC880
7DF5F6C137D67B87CB0EB1B622E68F36CCB4227621D3749DFF82898E01228F32
24DBF94F788AAFEB2E05BB7966CA5034B8EFD58FC08C1C1BBAABE16DDCC8CCDE
F2831F90989292F02540466927173D9E2DAC227580ABBCBF4E94C8B8863191F8
77DFBA47B20D36858E64403E0894616BBD9691E64833B16F5BD0CA37CBF94483
C1D7C5CED7572391776C13384D3DA97BFC760B0F05CB4E8623072F9884ED79A7
5221D2A3772B8CEF0D973B0468FD4F84E83950B76B1A05B4DC730087F7D31462
6D101B4E117C63F2E7A60627DC40CB9AB16340BFA952C646ACD11485A8590386
96FCB8814EA6FDA92E9F98D37774642CBB01A1CD423EB147F95B5ACFEF157AF7
13BD355CD844D0F88C47B267EAFA1585B4ABAAA80F155D2359AD152CAC44BEFD
085CA5CFA8294D816AB165AE27CB98A914D22E25B41FE35179D5E020790534D5
825031DEE791C64EA44DE3016231B72467837CF7FBA911AFE7C86504CA41D356
2F89437CA7CE8267C80C7AC5C11B8731A458EFDACBAA48397E97284B8A8C849D
61C0208212F4ABA9ABF1ADE79C00350F35CA47DF4C4C6CE0F6194D426E46FDE4
70D568BC4A17A44A31E61DB881C20437E442E4A7B0DAE50CAD34EE9951CFBB3E
23E96C76B5500EA460E36E1FCC24D0148C458B745876A5FE59181A278216A45C
23F6D07CD4466A31B0CFF132F8AE3AC5B1E86BA1E22403433D97EF143C518E3B
E33F0B75634DFD834039B3D9446D6F27C2CEBD637401A381FAE7F3035643F629
0E265C8A88331305E67BEEEA9A0395059363EB3AF9D85D052DC85A50080668D9
F648ACE56F31BE56702835B9789FA83E1FDAFA7FF188F74F08626093D94D5A70
CB0124DE9784FF7538DC0F88112C0E8D91E5330643CC242BE6E5420E0D145E3C
82485AB07E93D34E70BF0A94D56334B16EBDE16DA9FCCCFE6933499EDC15F234
D875B6A8F1FB454E9FB4B782858D42BCA7E5BC5F6C478A4A0645BB84A6B098DC
C8D21513741301029A9B2BB2FD5A7D0B103312B17D16087D670D7F854D5740F6
01C62A4BEF8F61627487113ED4682C5B84F61C5C8986923FF885B65EE0DCF083
0C02BEA2CAE21DFAAFB537D8D9F3CDDDBF8E8FAF25DB3B6D6796FCCE2711938D
605AAC06A82235D5DC734AE3AC5EEE6658D792EB62131E1DFBA1C5591CCEDD11
F7C39B765BB942E979AAA1DE3496DAAA8D5E81FBA297938A3C986ED15B14730C
7BE579410027C0A77768D5BC79376ABF5FE2011EFEF3B181EE01AEB54EDBFE3B
1F87CA1A348D8E1439A4A3193EC28271DF44E5A526D1C9DD766FD65D3A9CD450
3AF4114D06702D22F71AB0962894CBDA32FF2B70B21AF4D158E0F746526BD1CF
75CCA0A2F73DF858B6CDA2D02BFAB88307660277748F9FD8E30152DD5AF9200F
8AC8B8FA39413858E8A92171873F17FF9859E31BCB657421E04C0914C44CE561
4A1393BF0533EE75223739B2C40F0B848E5F1C5CA9A1D6E26BA0612FF316DB41
855733B0CEBAFBF72CBD3CE1E530C78BB32742316AED9FB75942C9699A2519D5
9B15C7CCB305D9C4587AC495570DF9C4F05525921AFF53DBA05D1E1EFB7AF0F1
EFF4F1FD4C20B8E3F22CE2C0394985FC8C838BC00D349557D51B7B124C64E889
02FDBCC5693560EA2059B5F7BFD55E90340B4244BADD57DA5902E11E529B6477
A04A0A7893B2E7D3B5EA0E324E24E92A2BE4744E08F74DC71B56B74D876A48D5
D3179BB9B285BB5C071AED3C0D409CB163EA4EC26EE2F867AC5947D6556DE28D
4059507EF2E015E8D9C0F64025C76E0550BD0FC05F0FBD1F3C2FD03DC6001C32
60B7800347C89FDC7FF96E18DA533BB2FCA2267FD97ACDC041F923737AFEDC43
5580C68F07CCB083F2445E82187139FBF00F1BD6C9824EF0B0D02BE90F7DBBE4
7A336603D97A6EEFEE66B6E1D2F2BEBE39239ADB477FBD2B0D86B7025004216A
7A114BC7389985CB4F5A32031AF9C7AD1B3986EF4BFEA5B29EF7E7FF54D1784A
B514FAC0FDC8DEB8DE95405EC9BD2559F1CA6D3B3B36E991FC1F66E54A3EACEF
4390B566C688FB09D2A8E94D0ADB138953A982A7A78D7EB912B9BBEF8C466E8E
71908038D3C02B1F5E8293BE9BB81B1AD6ACD81856288366086F50154919E5C9
9CF62A770194B4B65591F8093CF02DE362E6AE90DE241983B0D11639D18FD69A
B6F539560F9E8D4C9AF6C8BC23B0EF14184FE5399237AD01061BCDE92EF88DF3
CD9B962A65FB081F64CAD316ED13DF03C99757CAA452FAE46DCDAF8B796DBD34
2E796FF285F008E8815DC181F7BCB30C27745FA5EC414E0B3A1A6C53FC6B951C
E935ABC955B81948C9ADFAB83995414E9D3900926FA8087A61383E01E64C0AFC
DBCF314E86EEAC33E4D2C1D1824EF8B65209F7072A5954A83BF518CDD4370AFF
9D077D74D8C7DCD2F7AB118FF185B2FD093493DCCD90A97F22BB0B70B8DA22B3
0B7004EC5A0C83CB1E8577E6A96552ED07652914BF06CD2759CB14E227493728
83A262140C4E6714F5D76BB72A7BCEB393F90304CBC796437C5693AF04F8447E
9EA5945885BD6420F6F968B2F6AE2133A32FD0C3EBBC3CE61F3899F7EB4E1D1C
5ECFA2D925E13BD7D67620B5D4DD4C35E6CAEAEE832EAA7D5B6BB5D9D2D263B0
C712FEBADCAA3ECD62EBE43B473FEC1F76DA6C55089AF3D95E3ADCF02A87A8AD
BE2C55747D7AF3101C5F1A2A1BF6C0E5E8E04D25BF3D41D92425E94CD05D880C
4EC59B599F5E4857CA484AAE98AF60C2AEF608A1119AA13FB6FA40C5D4C2A7C8
F8272B4C34FD26058AA9E35E6DE5D8F2B1B3482422AB847F88919FCAF407C96C
3AA0B2F20F09BD357FCB83B0C2426B358A2CD7AD380EFAC172D225FB207454B0
CD1CB0F12CC3632AFDA9076C2B4D0CA7D89ED2FC5C441EBC1FADD0B0AFCEBECA
917E174E7CD4A7D383F3036FDA213D0ADF020BC4EF5A869DE583309A303CEBDD
281AE38A8BA0578E48711390FA2878C9CD37249AE4434F1BEAFA91DF6C817009
D66181D65E4B00FD203DAF0985AD7675B583D2947F2AFF2E0FFF984F022FE12D
3D43D204534410236EF3A1CE03FF4E1682D7956E57025E7B57017E7D2801778F
393B2383E55FEE3E8FE1D842380B9A061B4BCA8BC0A91867D9BBE00B986837CF
9A24DD36ACB8092854DAA7B54F9E18142403BE85D1E2F89F7713FCA214D696EF
93DD9F32C5BB3CAFFB9ED72DD8062C5CE2F86014FE4EF56765855524D5E38F1D
85396E7C5D3D5CDDA436AA19EA664C06312C7A75806C41BD8CCC4FBDDD8E5817
83BB9D29E08772D7252FAFA6739687225704EC8DBC623D906EC7632CB075B9D0
13C9266B223C04E45CEC5CA1F3D3EE2B04DC4CBE12FC99DA94FB2648B844301A
B52F91F43507CD4475810C2C0738174FDC062FF1894A77C3751BE6F455B48BB4
52D8EAB1CE63B7362019FA628EF15E932F1B9CE429F3850ED936A4BEF78AD529
CCA20C5BDBB11098EA4DBDDA6D7C9B6ED96D977564262858B657A8CAE5D2967C
5CC9F2E3A459FD36E8A91D54A26EE21979D46B3889645A70910C1BE55E21AC93
9A2485F850E545F8B4A47F83349D8EF01B95F4A6458B0DC2B2877732C88CB7B3
B227C704B59B7E91A6905E45242B431B1FCD2E114A45B63AEBC9C6287D7E6A23
F0C5817A7B7F8B2CDBA530E9795CBE691C141A143280C65FB2A68CC79062A6F0
E358BB96C815AB13296F3745582FCB78193991F38E8A011FDBCE922A16CB7859
48643D0596E5EB9315FCCA90D78E299DDD66A941CE305961546D01BD7CC71FB9
D17328E842A71AA9C5EFF83D869015AE1AB3D951E04215CA250B7C6831F55435
E628A295E895BAFF8B720A71FAFBE2C80951B24AAACDF129B2BB843A32A852E3
1A8DA7AFFA42839CC734E717BDD52F97832A206F4DCEA03BAB6258E19FA15B2B
F1F6366EBA112970A09181D865F513A301EE8BF7F102D61417D88F8AAD637A50
D73C02960FDF5C2837063FA5F5086E621AAF8D993E86DDD02BBF6595273A4905
497531262C3F2B02D02C5FE984BFCB25C643F9E39C16951B8843D4A251CF97A9
FEA177C0BE201D5933E4914DF6D1979CC161981195B13A937F07734476CBC853
C4D70AB89AA521B1CA6C9D3963CAEAAFB7B61C72BC62083BBA8A2D5292B5F316
B59E7BB99EBC7521DA5BAEF8AED3B848E2305DC09EA5D64B5FAA44144D1A6F2F
8BFE9A6DDE8802BE6AB699DA8B9BD6062EF555AE249A6C3767AD4E5885C24EFA
BAD995D56FBC5DCBE4D8770B6708879BDF8F28D5E86F74E7D8F548E8AB039F2B
754EEA4B85EC7D06C4CFA986D4B361CF8B04CC217697CC7AB7C9A4BA50E33855
DA72D24C3581F7F1AC53DAF6A166F0A2E988FC20F16EB782F9BF109726F7FD1E
6BDEF96F89B8F3964C88A29A2EEE681000ABB9F171B5E47F005F96BCA53567BE
9F37B141AD125EAB46DC237322E59F6DADD65B24887FF6137DE29F4865C1BC5F
F9D754656E7BE6271B252D67E3774CD0605FD1E93B27F3296C733FC7489A0D0D
5415DE0DA8F40992ED9BCE277024155EE3A67C4310C6F380B011B6C12327592F
8B086ACDB860B1B84DB9BCFC7A6B50D4D2004F7295D860A2974B73A9E8B594BC
89684B9811F3515CC01B842228D954C8279B7C45C8E096806C81146E0271E215
FB6C52D696C91C62C88CD8FF8C321460D7C2D3174873F55307E929B392CE3475
109E23FA8367433D2BD104B323DEF03F10A6716CDBFCC261B169C498AA9CC651
6DC7A0660CC2B0B3C78EA9652D678292A9DD2AB665537FEBACD5BC7C774D53CC
63B57F7C9DBA166773B49FCF429D4E3BEFAD53CA47711633B178FC98B7C1EBA3
C863EA78B75E396C9D0A79992377F5A3CA98AC8F0E89D879DBFE3C5DC96C88DE
5F5A921E75668CF30934A8CD1ABAE3563DA3FE04F599EF929476DD3EA9E90BAF
E947CE35B96E6A0440DB6EB2D02709D11600541ACF50E3DF54B83FCBDA79DDC9
A6EE9ECDDE8DD5AB6A6510CF16E8CAA48D18DE6EE020A5AED011B83E7A2DDB24
B70428F4F83C6A42CCF994F6F5F15B8629340194F3E049F9CDCA8DF073ECF320
2334CFB17179703923FC967CFC31C2766913016ADC86B515D8CFD33C6A641C93
D1257544BE617FAF0D6A712423D17175911D009F0B209BFDC00E460E7DD748B8
F839254BA9139D345103CB03226F4E27FC1303844285752BD61638AECE7EAEB3
6A070B070F3BCFBF21D70A72AA4B05B19BC6EA6705003370A63CB3C2D86EA558
92105E54929F64A3C8A01C8DAA5F5DCA211C9A608D1483BB9D29E08772D78E71
E3049C6E3A69E689CF256DA5DA06F3624CD71B8CFD59655DD97B63C975A3CB30
1442CBB2D9E7C4923407BB60EE872B4B8AFCDE8B8113737EFBC94EBF1B8F324A
4544A23270C1624685EE5E0528B365BBA2B57DE7D10EA7D651D2112D36C1AF4F
2E921D25551AD8B0066B051DD9E902E81F262602C9D87938B75EF30E0C3654CA
73F0039CED38435ED0611E20E3049E16BFD0D831442F409F848C2646EC58EC81
81601B97C41B96EABD3B656701A930476B878CC54F294DBD5F0DBF2A9FF1F557
542D61CC0DC9510C95183E2D5DEF0634548E810BC5704620D9C40AC94F0B5E57
259CDAE5AF6EA9E6A8727BDCC5357E6ADF9AD8C35E6A43B6823C4E3D2E01A273
2D3B4A92B34FFB6273EF4F8128FCB12A4F2C8D1374220B8B5EEAD8E0241A38E9
93C5466FA10496515D1B2D171BCC7D1D0E4A13B262BEA658AA67B8FC1B135078
7E9CA5CB78AB29639EAC0FB970108E6B7C8C8B683C0A087A04566C45E2582258
329F7B0EBE2B6C07C22C0B84C665EF1EC0FF099FB318E2BBCC6C72B932A3169D
46289E48FA4A6D52914AE4878DE4117F05362D88ACA7EEF2D2CBFFA77D888272
36660260C19CA8BAEBBE60068CA93EA92B61077C98F38F7F5112B0EB836FA9D7
CD4318B836A1AD6C126688A8201112F4D5FAD2386DA11FC9B70D550933F93C05
1098E8536B97A03EACA63F11943B9FB230D41028432E91C7ADB5183FAB228270
38D5E2DCF97D2AB8EAEEF6071317CC3475F44D84D0893A31E41E4CFA0E9F124F
D73991B3D28A9606AE2272FFD1124BFA91C2B251064F8F0B8FD51EDA308B355E
C78DC9EB4AE83D1CB6E4DF546FBC914A6FF2901B8602BEEAEEEB033229E3646B
97042C0403FA6A577AFD7A887790AD66094709274169E75C3923B20AA27DBCD3
B0B0A8BE368C54802B719F0926B3864CF2A8581431A7B449076E191A04CAADA5
C99DAC0E8B0A955302C3E836378BD2EF0242021D85C50EF4F0FA7E8DDAA7E09A
59726F261430367BE8E18BCB39E743E9B8CA7C18C63089097732CC67B3B4F529
416F47A03AC25DD04B870E8EF512B24C5DB5D1804F40E0E7435FCB0B1A3660B6
6C22843B576601F46CA5A0255C146799D3092E6F2E36A913EE91E0EF3C7F07F6
6C4D5E88E3DEC96C17FC95627A6E456099191CF21D580779928108402DF39C62
51D1520559C1B8B391FCD495CC7707D9F299F1BB1E31E32ED6784FBF791FF9F9
776B02C310ACA34F6CDF7B363EF85B00B435D03F0883C4005824D7B846FD1B49
C7286E37433FD40D41A9A1D01FF66A982648D5C9FB29924F8339F12DC9CC7CBD
8B3D7488FA3187A50D1E287E00534C060962CF1989F1179C80ED82109EF203E8
E6F42E7CEC47A96B2BAFC3B0048647DD26E13D6CDDB49C4A6C135AC1AE6B9AF1
3A25D14ECC5FF4C6D1DFBCF8CEE94B2D0382B57AE69AA5EA146A5F40DEA2745C
6DE79084042793F49AFC8AAEF2476515A4138741F4CA2DD30E6726AD4361F304
51CAFDFE6ED5041AE01FF4422B263F601F7D4221D3F61AAF731512BEE0FA9737
A0D756518462AA5CF3DE02ED6E2ADA7CD1198F0F3141293E025334C02E686422
0921EE7D2A520E100556087A666AE1792E06CA9C7DAFB5CA2C18ADA69B0B0FAD
ED0957B2A13CCC8B93FF7BC5FC7C7A37AE0523EF53A5490D7BA7606326881C5A
6CCAAC22D5454B2C1EB01FE6506B23D781375EB5AA3EEA89CEA29065AA87E8B9
91013D8B8116D143E653C64F79B9B48DF5E401CBEB5E50ED14CFA31029F8E45D
5A2095DD40AE0EA50D270562ED16E8DC0876544B886DE6851A9084E4B8F79E73
AB54B901BA799F72C084368760340748A5169CC1883221A673DF727FC16450E0
08B9A2A9C69D704164C36B9E9D448BE88AE9EB227FFEC63AFAB6C4C03FA6A71F
C346A1490C2D78AAAD71499D39CE0567AE52A5102B672820844F718F89244D68
CD89B36A8B939A10BCB5B3DA2152788D46C731E28AA131F3B221F700902F6309
E2988F4E96CB32010DED4C8E79078C518949798F63224FDA1E2B53192E3BCE53
8F58048FA6BD3682FE98BEC0B52B6A1FB25A49DD8BA2F82A8A628BD232F9DBA3
B60F32108AE4AF6442C6388024212A3173E52977BCDA74BFADE0E3863F119383
9C6B39CEAFB6F93DD5506F9AF778B4A8AC4B74D356F94193EE7169D5E3ED822C
E9B183E8B60B622B7FF100442EB3CF4AF955F8CCFA3F64D56D0373C3B5AD0732
619E3836C4EBC9061BDA020B13187FAE0C12F42F91AB015A113A541F9A8628BF
E86B755FE04651DC9DA320F7E3FA4466A52140B9C5FB853E8E14F3AE894A32D4
AD9B4CEB8FC051891A689C15F8205B6464A74F5F5367250B981B95C3EEED2702
1B70697C0E98140017F11EDB28335BBB3DEFDB921C86FBEEB0F238F7A3840FD3
845E82EAF0F9AFA9C087F43AD07BFE56FD1D6ECD3B462A4F8503DDB58EB2B929
CE53EB5D706ADE5FA46BD51F2E5D59DD9301D779B22FDDE54385E98316C88BEE
FB4177142E2E61CCC0992B66DA71D8BE22836E6DE06A53A934BC2A06A959B629
EF7444863CF361D2F7242677C1D0E7A3BC7AF35466DBE6B6F7FAB390C83DE369
C48C9B7FE595CD0440A10C20518264F004513EA7C21AB713B35ABE7901A44E7A
65D278EFE0C676826DBFC268474EA90B87ED7632008080C78C427E8E051B99E9
5D205AD9D33F409E5CDF777020AF551C7388774DCE304EC0C8800BAE666866BC
EF9F585E8CD8010A7DE3083C7B853592F011270BD83B31F2AB4DA2657DD8DAC2
43113CF5A15ED9D04A7D6DEF006CDB04B6C319DEDE2EC73DE49F4013A0DC7E2E
937312089B3CAAA89039F2494B3B4406C2A477CBD1EF75B2332B5998CC22E782
B544B4AF7127EA6D5B8FF5A073543CC9381D534A63B80CAEACF1E3EA8C7A9EC5
C3EBD310F2E74C97F533A5DA8B4B245714A996A44D8DE9C349DA07F9D56E2EBE
0C3F8E456870FC6331BD98105B719F3CDC27ECC9E3FD1923C32789B45410AEC1
8605C490A58B8F58452F80C93A84675B71AF94DE6734578EB4A5B62A1AACF6F8
AA6FA28A2B5FB9653BD398287E439A0E82C74267FBBE740D39ED276776306F8D
5D3805E3CD4E8ACA4688E2EF30182C021C7CCCBF1968BFF32DF5977ED6758E38
A2B545716DCEC01F7A80C3ACC17CB6A528591EF58658F32ECB811357F69CCACA
CF897A7A1B155C720BF92FC59268485D399717A3AE14F384B2D69C75A42B747A
3DF8E51FC473410F96B56B11B7BA4B3B0F935D7B9F8083B359187DD339A1F2AB
6AFC3E79BD199CC74C43983E440019ADB799ACF711607ADA252DE7CDF57750DE
134BBBECEEF68112638EA01C20D5B131A84F69448FAC91DE3BFFACF4DFEE91E6
8DD6A7471F79E4C7B4BEA87D0B1F6360C7E233BF57DEA5FD7A0EEC6074F1B733
4E238D9DB3F3CE9B3FEFE3946CA837B0FE2E97B6A09C36A90A7A9896E2E7B992
4DCF25E9EAF730DAAE9F50BA70DAE150129E5F10B4FD088BD3BE37C6200E4497
4C097DE0CF3E071AAFB0F696C4C97E374632D5969859F9F16E68C2BB2B43F98C
C8406C58FF0958C886D21E0680503D7A796AEF1C9258A9ADE8D72A64F336F904
F18B00488D7316A25DE82CA52C242507921E828D5EC28B1D352911A8E507E8B5
7CEE8C9658F8649182BA4D759FABCC96940F69C1EC36CBF67D5871CD838CFC45
25A7DF69FA4ED223A1189C0B251DB46DD69277A6E9FDED917462DEDAADB9A370
228BDD77C1EC19B66F88C2E08549559AE4BEE134388BB171D097CACA9D161E97
29DDD097218C48E4FD8F1183360FA32D5E4B6753DCA4A6667BB22C841A91A8AC
118812C9BB09870714475C9649C7ABC6136BCB308E19DEA3902F3C33E256F02A
15D35E1E75D365323C29AA241F22D3762F777F177AB16AE7D69346F94167C60B
C6F824D16EBEE9BB220D91995AAF17B17F5FA6407325227ADB0B64C7CD03B40F
E8700632CAE05390CBEA0D372F447F46FE7BC0559FDEFCB205309DA145A55A2C
6763E0D8BC8A0BF42467F61BD9D2611159DE0406A873EB320FD7C4459124722F
D577F38B29E4D30A3D0567A338740FE0120EC4E69137498175CDE37358B3ECB8
06C20082436FE60FDFB7C6A0163ABA54C7A51A0B220E1337D7AD3D3487FFA46B
54D3305A460F868CD85F9BD78E73F721BBCC26CBB47A317480DAFB142380C6AE
B3BDAC6D1C1C7CF6BEF0700968D7CF74E2B3586C8CB4CEFAAECCAC87E118B957
A9E69DF5E8274DA59750A144B92F493BE4774F66DF77395F433DD8A1317B2053
BE6B5603A422D3C9B3F98541C5E6704C90D2DEB61A59B82FC9E0480210E0BA1D
53E704FA24F55107E8C5B9DFFAA298C25CA837CF2D70FE8977957788C0472218
A35BCD87294B91FCFC707E8C95768AA8C3A484036B56546D498AA80732C3CCDB
6EFB39271EA23A272FE9B0B0599D9171D9FE98DFA539CBA73FACC5D04142DE29
7E42A192514C69182AE6D76A7681885E81CB337A63A544C724D078F5299D3320
0707381E4540AD4457EA8C578151067918E42E3037BAE3113A2AC35AA2CB7374
8EC8C5201D79BA01F71E56482BE924C444FEF0F24767A37CAA096CE44601E065
840E1F2B3E694AD870304557D3C22C2C9881A50C3765942F2321EB09ED414AA9
861BFEDCD097F3B258418297C33EB4175AD63C7F5C1E50F0A68CE044F87A10E9
D566B4A07963E6186FC14FAEB626F32774741E4F80ECEB0AFB5B8AAF6FAA30BC
7DDFE923EF6DC58DD3EF01E888148FD13E5CEC59FF9A295E5E09A7116B62DA5D
FC521AC793BD28FCA5B8642474DCDFC2D7022EEB94B894904916531564BA32C9
9A9E9E4A7793BF6F2F92A98F3B1CD18139960CFE922160F6FD8C3EED19CFAC9F
EF2BD6159D5C1BAD178F4433C1522522D8B5497CA173EEA6745F62F0715C8654
22128A163B6C6AE0D98CA9D87BBA57F79554AD8BDA842AB063B025F5E50D42E6
9E5F93C6DF9E1FD89F2F8CEEB870C409ED13E78B4C9D23B6A705BCD7E2F9DD7C
73DE15B222ABDF7DC3B76EE8BC53C87C2C5CAA2F2A5BE02C895D60E536D3DAB7
BF61518C81A02B8E56438EE91BC729D100BDFB65111BAEF062C85CDB6C35CCCF
235725C3E1D8BD899F9150D97CBA1E8A696C70C17BFA087FEE62CA0FD73307E9
D91134BA383EF423CFB21934CE02113E105FDFCB7879A80950B92F5AE34F6AD7
20DEE0FD278EF355C7126F83A8E8BADABA45F9CAF5BA663CF3AE5E00C236C1E2
B485259EA07088D3727BFCAAD955DAEF48CAE860C4E1AC06A1EF4677F534E039
23EDA8E2FBACB8D3C58CCD07BFCAE08D822EBA46A74DA16147589A2D3DADDE9B
B1A63A4047EA20DB022A9B677BFDC99989BCDEEEA8510A8603FECB672876B42A
6B97F29081A7E0DFCE422739C0C58B4ADD86BF533BE719B66F88C2E08549559A
E4BEE134388BB171D097C18838F525793AF97A9CE3BF875DC5D845C884413A44
57DB1215967E4FD41CDD60D6E413059A58FA556EF332768F71E5B7D8D042CB8C
40FAB4644CDDAA91F6F0D712CE10532EE90B7B3D7CAC53C8293DA32993CCB41A
92BE6FB930014A62A5BBB1FB0CD99C8D4C0D16D50CB7FFF7F2460B7E8F600CA8
20DF8B4BAFE515BCC974BCC28E01AEF898DCED579E0B7970CA869CE5F98AFEBC
1391A919BE7B70037BA5661166F3898963472CEE9BE4D23379296B3CBDB90C3C
2A75D382C7F7361ADE33183B5F100176B37EBCEE0AADCD191C733C695B8DF016
3FA0C03A3235618D403D6A88CDF4E0C8D41C64B9B1DEB72F0E9058E1E7499E2C
7C0817245326322B9CC4939BAAD44192B470F3552ABB1116532AD67AEFE0758C
051241E301C7E13BBF5036F16E783FDADA674B361F951D5152C0011FE0B8FD41
7B51F09D2625AAAAF2A089D94C253CDCE592272C10706919EC065CD4A60ED52E
F88C883E32850E2E110793A22169927F6D6DF2BA37169928E7F06723F1FCFDB6
78CBFBFDE052E2961195F6E68F0D83A62A5197EB748E7074D0899B62EC9F8300
62209A942EDA2F5B354E5E0EF6CF0EF766E7D0E4EA7556A9277736B514E7BE15
A7F8F22B05D7FC8FD35C3A2FDA178DC51B0D9F7E1037D75DEE617137DC8441EA
7B8E6A353FE001C63AD0C72E1EB4F71AD39DBD4BE29E699D9E44B7A6E99ACE99
DB14455F00BD13FC942C261D738A72D9EDF590013F0B47158693EB5F8A24FAEA
2264AD9C7AB786BB30C40075386C8F15EE03FE121C6CF638019FA59777873D64
A78C27A3B3F9DE72FB0540D68A8B8B619F8EEAC1396B66693591F60DEBA8F47D
149B38A0D7E4E4342CFDD22C780278D973CE36D31CFB42CB821E8FA5B5B93BFB
454C7CD598BCC5FE1258A2CD42AEA5FAB6694A64B334CB750BB6A4D0230B8D3C
51EEE8831C28BE115D375CE446FDEA7E089057597F2C401E63603E1FB4CEE4EB
507E88088367C85F813A336588FD28EA91C4C9ACFA21C3E1494156D9706EAD4F
55FCC1B3878978816EB22C4F8680188E87C4FE6365FAFBE78109CAB35AC2730A
761CAAED96AFDADFC034A6A423C7DD79831FEDD65BC403AFD0A9A11D8B4C56F0
B4B911C17FB2929D3E12A8967364952081AC22A41D16F5BFF946CE8D7834A341
0F5E6EC14CC8E4733788DDB7F1C411E18FFE4860F33482293044719077552FCE
AD93DEA28E7C1EDEC044D9422F1B1537040858EB3F512285164996CD00067117
3E48D4A90A7DB5437D587ED893169AA2644EC087D61BD7F509234968915C6A9F
AB3B4B364014B4AD13F8F95AB9B462F7A5950046C9C4A8CBA276D11CAD02ABB6
357F0AEB3073FCA9B33AEC147B3FE06F564F7F9DA1E131D9921BEFBF53CAD1AD
FEE69973B190F4C2DD17352573C90177484F7E742B00B7C92F193DC60504D9C7
7E08FCF101D33E908A71B94B57A71E99CC24CC776B375C6FAE55DC2FEF611B80
2E5B34CDD288B44788BC2EADC60BB6225D9CB6CA887922B117EB0E7B44A22F40
86534390215FED63A94EEA0C4887D955B77AF62CA9097AD89DB843535B0E35AB
E92A93C34702F93938825FE456A79A38623745FC7BC778B3765D421C91593813
BC1D6A10EAC63EA4B4E55BAA92BE152FE8233BB8E1336D4B63AA2A08EBB83D28
8B240920710C102E07B109F0B956A08E2C22A6A080AA60370CA1DBB5C92E82EA
58AE82075DA1E584F63F6CBE684E8993B9C4842EE503713C525D6B12C8BC41BF
641A35D16CD267DE501A5917E5B07CE7C933BD984EB713405D2B3F48124436E7
DB191951C3EE46B13C8E08646484B644D0C25564641A24BB84231E6BF13AB85D
CC12A3A8B9AD5994E179D3D53E74BC691BB3406829CBC9375F9935F53073E0D1
7472833185DEC6C4F8EF454A0A41DEBAE7BF7A16F17D73245CBA3FAD1E46371B
4494A48CC3535311FE6DB43D77687EAE2B6BAD7AAD4B07B3017FBD2BB4FD8FC8
03E7AD2ED3895EA28D42293545F332E16DF2B6BD6400CD0284FE2EEFC0F7D62E
DCAFFCC7F156A760086A3AD46E087784D47E940853BDCFCE63558842617436D3
8D9336FF42FE6B1F188FC5DAE15D31D8DD6EE013B133D422BEAE31D1239719F6
452FC2B34EDDCFA86EC3CECA94ABF128FE25117326C86F3BF22ED110075FF1A9
33A4B511AFEF9DF0FB82CCAE8B895148E53F8ACEA9A5B829A281C77466060683
AE9D35188582562A3BFED022CC9B86D4F4A374052065187867497EADD4C90478
CB58975D40D10AA0BAD99E5D4F5998FCA065A930FB26418818630157FBF2026E
513FF73337F5CC407204DE0F69E4A40D09551A1AE65F9788563B6CAADEDD07CE
524384EF530D481152A1883E29055BC141255C12BFA61D4C9E3B471927181FDF
A09F643B3EDAB174CF4A0030CC17906FF9BDE5FC4677CFD5492238EA2FBDCB86
D6551D8209F1A9890FB697ACE5C7CAB2B935C5219F8BBC0E3B26CC627FEB3B58
2D1FD9C35A98E0942B214E0B783C158216CD230C05769C8BC0E182385885902C
6933C888EB70A56262B58819DE27B9B4D162A62930E4F2AC7BC9A051D67FFA13
83B6AC39ECACA24D655DCE9F23A8ED66704438E67949FA227B507875E601E6C0
BCCCC13B28A8DF453BD547AEF1AB70D18184295CA8C888246BDF7F3F43148226
224153F6F734D8A142CA7B685CB9BBF81806E6F0CD38EAF86474BA24C2B0B5BB
45F48EA8D0BD5DD45745C61429907F1289B815BAC5B361AC5981506139733A15
F5BF0D6ED6D236C6CD11119603EE1300DCC24B26A899E65911D820B5ABC93451
4CAB6A1731B3752F54C04DBD85A72C942420E033881E30487B0772F8D23ABCC2
052EE48D14DFB41319C5303FD8FA311287238B2277CADF712AD8CB5F5B35E804
830F741615EAF8364B28E69CB0A72C447CA6D1BC5C76A3028236C2928799E900
19AB72DB0FCC00EBEFC7159B9CEA1F6B48355460BE4E0C5D8760EF722C758C9E
BE4E26210C9A7C6E61FB9D170D1AF844E38846BA2B3B5C1384E1AEEEF99748DB
646C5A6941F67E50F34DE1CC269861657D3B3DA6A8C9F5E90D6474EC165CB300
5A82BC73DF605D42A4D6C693EB34F57308DB3B7C2CFA21EC29B1E7345F94F871
A2A339FF3A41560BB814200FC0BA7F8BE4485B20C2557425963BA6C9F616514A
D9CEEB86606A40A5990CD867B440745D9A03C204DCD029B2CB7D6C905D6C7718
5E17903693841E528959FD042BB112F43F16466073D925D939C03B73F2C68D3C
4FDF8D458103A56D7C539490ABC155B8058054DDBB0527036484D6CAA5A9C650
DC2A024EDE610251F322ADA05825004A435CF13A2DA6295E6B5E5D54ECA78708
1BE3DC46B480E2BA061F6D0291531E3802917583D992AFE304CA7B586F19CB03
2C8BD143644ED6F8D70781ECAD9BD45E99795F838305DC9B0BE7AE6B143E60F3
D3CF261C4536E5B69BBA0FED23AF9D42E7E92E35566509C1FFAA823F893B7D4C
C34EBF50CFEF43FE7B5CF3172E0627C8628A3E173A5B15848AB19B228A5D762A
BE454CD86D61669C3B13E9D9DAE3B01569F981E91D0F2FDA80D9398958125A38
6EDE35384886B21874FFA731A51D8180EA0DE55F3189517D0FA9C7DE8924A746
25CD396C7AC3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 23867906 17900936 1000 600 600
(/home/fenarius/Travail/Cours/NSITerminale/docs/images/C5/modelisation-POO.dvi)
@start /Fa 137[25 1[25 7[21 2[13 3[23 3[25 18[34 78[{
 enclmec ReEncodeFont }7 41.511 /LMRomanCaps10-Regular
rf /Fb 22[20 111[20 5[17 15 2[22 23 1[11 2[11 3[20 23
20 1[21 18[31 1[24 5[25 4[29 7[22 22 5[22 22 22 22 12
15 3[17 17 40[{ enclmec ReEncodeFont }26 41.511 /LMSans8-Regular
rf /Fc 22[37 115[43 30 32 28 2[42 2[20 2[20 43 2[37 43
1[43 40 19[73 9[53 1[55 65[{ enclmec ReEncodeFont }16
83.022 /LMSans10-Regular rf /Fd 22[34 115[40 28 29 26
40 1[38 40 61 18 1[20 18 2[23 34 40 34 40 37 17[57 1[67
3[21 52[38 38 19[{ enclmec ReEncodeFont }23 74.7198 /LMSans9-Regular
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
% dvips-unknown
statusdict /setpageparams known { hsize vsize 0 1 statusdict begin {
setpageparams } stopped end } { true } ifelse { statusdict /setpage known
{ hsize vsize 1 statusdict begin { setpage } stopped pop end } if } if
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -525 -608 a
SDict begin H.S end
 -525 -608
a -525 -608 a
SDict begin H.R end
 -525 -608 a -525 -608 a
SDict begin [/View [/XYZ H.V]/Dest (Navigation1) cvn /DEST pdfmark
end
 -525 -608 a -525
-608 a
SDict begin H.S end
 -525 -608 a -525 -608 a
SDict begin H.R end
 -525 -608 a -525 -608
a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -525 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 1 TeXcolorgray -600 1668 3024 2268 v 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 2424 1668
a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0.2 0.2 0.7
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 1 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 1345 1579 a

 1345 1579 a 1345
1579 a


 pgfo

 save

 0.68 0.68 0.88 setrgbcolor

 0.3985 pgfw

 save

 pgf2

 restore
 0.84 0.84 0.94 TeXcolorrgb
 save

 pgf1

 restore
 0.68 0.68 0.88 TeXcolorrgb
 newpath

 restore

 pgfc



1345 1591 a
SDict begin H.S end
 1345 1591 a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88
TeXcolorrgb 1395 1529 a
SDict begin H.R end
 1395 1529 a 1395 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1395
1591 a 1395 1591 a
SDict begin H.S end
 1395 1591 a 0.68 0.68 0.88 TeXcolorrgb
0.68 0.68 0.88 TeXcolorrgb 1461 1529 a
SDict begin H.R end
 1461 1529 a 1461
1591 a
SDict begin [/H /N/Border [0 0 0]BorderArrayPatch/Color [1 0 0]/Action
<</Subtype/Named/N/GoToPage>>/Subtype /Link H.B /ANN pdfmark end
 1461 1591 a 1461 1591 a
SDict begin H.S end
 1461 1591 a 0.68 0.68 0.88
TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb 1511 1529 a
SDict begin H.R end
 1511
1529 a 1511 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1511 1591 a 1523 1579 a

 1523 1579
a 1523 1579 a


 pgfo

 save

 0.68 0.68 0.88 setrgbcolor

 0.3985 pgfw

 save

 pgf4

 restore
 0.84 0.84 0.94 TeXcolorrgb
 save

 pgf3

 restore
 0.68 0.68 0.88
TeXcolorrgb
 newpath

 restore

 pgfc


 1523 1591 a
SDict begin H.S end
 1523 1591 a 0.68 0.68 0.88 TeXcolorrgb
0.68 0.68 0.88 TeXcolorrgb 1564 1529 a
SDict begin H.R end
 1564 1529 a 1564
1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1564 1591 a 1564 1591 a
SDict begin H.S end
 1564 1591 a 0.68 0.68 0.88
TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb 1606 1529 a
SDict begin H.R end
 1606
1529 a 1606 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1606 1591 a 1606 1591 a
SDict begin H.S end
 1606 1591
a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb
1647 1529 a
SDict begin H.R end
 1647 1529 a 1647 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1647 1591 a 1647
1591 a
SDict begin H.S end
 1647 1591 a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88
TeXcolorrgb 1689 1529 a
SDict begin H.R end
 1689 1529 a 1689 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1689
1591 a 1701 1579 a

 1701 1579 a 1701 1579 a


 pgfo

 save

 0.68 0.68 0.88 setrgbcolor

 0.3985 pgfw

 save

 pgf6

 restore
 0.84 0.84 0.94
TeXcolorrgb
 save

 pgf5

 restore
 0.68 0.68 0.88 TeXcolorrgb
 newpath

 restore

 pgfc


 1701 1591 a
SDict begin H.S end
 1701
1591 a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb
1742 1529 a
SDict begin H.R end
 1742 1529 a 1742 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1742 1591 a 1742
1591 a
SDict begin H.S end
 1742 1591 a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88
TeXcolorrgb 1784 1529 a
SDict begin H.R end
 1784 1529 a 1784 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1784
1591 a 1784 1591 a
SDict begin H.S end
 1784 1591 a 0.68 0.68 0.88 TeXcolorrgb
0.68 0.68 0.88 TeXcolorrgb 1825 1529 a
SDict begin H.R end
 1825 1529 a 1825
1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1825 1591 a 1825 1591 a
SDict begin H.S end
 1825 1591 a 0.68 0.68 0.88
TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb 1867 1529 a
SDict begin H.R end
 1867
1529 a 1867 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1867 1591 a 1878 1579 a

 1878 1579
a 1878 1579 a


 pgfo

 save

 0.68 0.68 0.88 setrgbcolor

 0.3985 pgfw

 save

 pgf8

 restore
 0.84 0.84 0.94 TeXcolorrgb
 save

 pgf7

 restore
 0.68 0.68 0.88
TeXcolorrgb
 newpath

 restore

 pgfc


 1878 1591 a
SDict begin H.S end
 1878 1591 a 0.68 0.68 0.88 TeXcolorrgb
0.68 0.68 0.88 TeXcolorrgb 1920 1529 a
SDict begin H.R end
 1920 1529 a 1920
1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1920 1591 a 1920 1591 a
SDict begin H.S end
 1920 1591 a 0.68 0.68 0.88
TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb 1961 1529 a
SDict begin H.R end
 1961
1529 a 1961 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1961 1591 a 1961 1591 a
SDict begin H.S end
 1961 1591
a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb
2003 1529 a
SDict begin H.R end
 2003 1529 a 2003 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 2003 1591 a 2003
1591 a
SDict begin H.S end
 2003 1591 a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88
TeXcolorrgb 2044 1529 a
SDict begin H.R end
 2044 1529 a 2044 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 2044
1591 a 2056 1579 a

 2056 1579 a 2056 1579 a


 pgfo

 save

 0.68 0.68 0.88 setrgbcolor

 0.3985 pgfw

 save

 pgf11

 restore

 newpath

 restore

 pgfc


 2056 1591
a
SDict begin H.S end
 2056 1591 a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88
TeXcolorrgb 2131 1529 a
SDict begin H.R end
 2131 1529 a 2131 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 2131
1591 a 2131 1591 a
SDict begin H.S end
 2131 1591 a 0.68 0.68 0.88 TeXcolorrgb
0.68 0.68 0.88 TeXcolorrgb 2222 1529 a
SDict begin H.R end
 2222 1529 a 2222
1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 2222 1591 a 2234 1579 a

 2234 1579 a 2234 1579
a


 pgfo

 save

 0.68 0.68 0.88 setrgbcolor

 0.3985 pgfw

 save

 pgf12

 restore

 newpath

 restore

 pgfc


 2234 1591 a
SDict begin H.S end
 2234 1591 a 0.68 0.68 0.88 TeXcolorrgb
0.68 0.68 0.88 TeXcolorrgb 2292 1529 a
SDict begin H.R end
 2292 1529 a 2292
1591 a
SDict begin [/H /N/Border [0 0 0]BorderArrayPatch/Color [1 0 0]/Action
<</Subtype/Named/N/GoBack>>/Subtype /Link H.B /ANN pdfmark end
 2292 1591 a 2292 1591 a
SDict begin H.S end
 2292 1591 a 0.68 0.68 0.88
TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb 2342 1529 a
SDict begin H.R end
 2342
1529 a 2342 1591 a
SDict begin [/H /N/Border [0 0 0]BorderArrayPatch/Color [1 0 0]/Action
<</Subtype/Named/N/Find>>/Subtype /Link H.B /ANN pdfmark end
 2342 1591 a 2342 1591 a
SDict begin H.S end
 2342 1591
a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb
2400 1529 a
SDict begin H.R end
 2400 1529 a 2400 1591 a
SDict begin [/H /N/Border [0 0 0]BorderArrayPatch/Color [1 0 0]/Action
<</Subtype/Named/N/GoForward>>/Subtype /Link H.B /ANN pdfmark end
 2400 1591 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray Black 0
TeXcolorgray -517 -517 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -517 -517 a -517 -517 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -517
-517 a -517 -517 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -517 -517 a -517 -517 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -517 -517
a -517 -517 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -517 -517 a -517 -517 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -517 -517 a -517
-517 a
SDict begin H.S end
 -517 -517 a -517 -517 a
SDict begin 12 H.A end
 -517 -517 a -517 -517
a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -517 -517 a -517 -517 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with Beamer class)/Author (F. Nativel)/Keywords () /DOCINFO
pdfmark end
 -517 -517 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray -467 498
a
tx@Dict begin  tx@NodeDict begin {10.25 5.75 67.4757 33.73784 2.25
} false /N@Objets 16 {InitRnode } /NodeScale {} def NewNode end  end
 -467 498 a 8 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.0 SLW TeXDict begin Sepia end  0.3 true 1.0
neg 5.75 neg 66.4757 10.25 .5 Frame  gsave 1.0 SLW TeXDict begin Sepia
end  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
25 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.0 SLW 0.75  setgray  0.3 true 3.0 neg 4.75
neg 62.4757 9.25 .5 Frame  gsave 0.75  setgray  1. .setopacityalpha
 fill  grestore end
 
@endspecial 0 0.83 1 0.7
TeXcolorcmyk Fd(Objets)26 b(\023)21 b(r\351els)g(\024)p
0 TeXcolorgray 529 498 a


 gsave nulldevice


 529 498 a
tx@Dict begin  tx@NodeDict begin {21.09999 16.09999 49.99452 24.99725
2.5 } false /N@Classe 16 {InitRnode } /NodeScale {} def NewNode end
 end
 529 498 a 529 326
416 4 v 529 425 4 100 v 629 395 a Fc(Classe)p 940 425
V 529 429 416 4 v 529 528 4 100 v 582 498 a(A)n(ttributs)p
940 528 V 529 628 V 583 598 a(M\351tho)r(de)p 940 628
V 529 631 416 4 v 944 498 a


 grestore


 944 498 a


 gsave nulldevice


 944 498 a


 grestore


 944 498
a


 gsave nulldevice


 944 498 a


 grestore


 1379 498 a


 gsave nulldevice


 1379 498 a
tx@Dict begin  tx@NodeDict begin {10.25 5.75 101.80676 50.90338 2.25
} false /N@Infor 16 {InitRnode } /NodeScale {} def NewNode end  end
 1379 498 a 8 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.0 SLW 0 0 1  setrgbcolor  0.3 true 1.0 neg
5.75 neg 97.47343 10.25 .5 Frame  gsave 1.0 SLW 0 0 1  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 25 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.0 SLW 0.75  setgray  0.3 true 3.0 neg 4.75
neg 93.47343 9.25 .5 Frame  gsave 0.75  setgray  1. .setopacityalpha
 fill  grestore end


@endspecial 0 0 1 TeXcolorrgb Fd(Objet)26 b(\023)20
b(info)n(rmatique)h(\024)p 0 TeXcolorgray 2224 498 a


 grestore



2224 498 a


 gsave nulldevice


 2224 498 a


 grestore


 2224 498 a


 gsave nulldevice


 2224 498 a


 grestore


 2302 424
a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { /ArrowBc
[ 6 2 roll ] cvx def ArrowBc BeginArrow 1.  1.  scale  false 0.2 1.2
10.0 0. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T
1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave  1. .setopacityalpha  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  5.0 SLW TeXDict begin OliveGreen
end  /ArrowA { moveto } def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def
ArrowBc BeginArrow 1.  1.  scale  false 0.2 1.2 10.0 0. CLW mul add
dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave
w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@Objets
/N@Classe InitNC { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4
copy /y2 ED /x2 ED /y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub
x2 x1 sub atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth
def /dArrowPos 0.5  abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1.
1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos
mul y1 add ArrowInside pop pop } repeat } ifelse pop pop lineto pop
pop end  } if end  gsave 5.0 SLW TeXDict begin OliveGreen end  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore gsave 3.0 SLW TeXDict
begin OliveGreen end  1. .setopacityalpha  stroke grestore  gsave ArrowBc
ArrowB pop pop pop pop grestore   grestore end
 2302 424 a 2302 424 a
tx@Dict begin  gsave STV CP T /ps@refangle {NAngle 90 add } def /ps@rot
{ } def grestore  end
 2302 424 a 2302 424 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2302 424
a 2302 424 a
tx@Dict begin { 0.0 tx@Dict /NCLW known { NCLW add } if 49.21194 6.25
0.0 NAngle 90 add  Uput exch pop add a  tx@Dict begin PtoC end h1 add
exch w1 add exch } PutCoor PutBegin  end
 2302 424 a 0.64 0 0.95 0.4 TeXcolorcmyk
2097 450 a Fd(Mo)r(d\351lisation)p 0 TeXcolorgray 2302
424 a
tx@Dict begin  PutEnd  end
 2302 424 a 2302 424 a
tx@Dict begin PutEnd  end
 2302 424 a 2302 424 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { /ArrowBc
[ 6 2 roll ] cvx def ArrowBc BeginArrow 1.  1.  scale  false 0.2 1.2
10.0 0. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T
1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave  1. .setopacityalpha  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  5.0 SLW TeXDict begin OliveGreen
end  /ArrowA { moveto } def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def
ArrowBc BeginArrow 1.  1.  scale  false 0.2 1.2 10.0 0. CLW mul add
dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave
w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@Classe
/N@Infor InitNC { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4
copy /y2 ED /x2 ED /y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub
x2 x1 sub atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth
def /dArrowPos 0.5  abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1.
1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos
mul y1 add ArrowInside pop pop } repeat } ifelse pop pop lineto pop
pop end  } if end  gsave 5.0 SLW TeXDict begin OliveGreen end  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore gsave 3.0 SLW TeXDict
begin OliveGreen end  1. .setopacityalpha  stroke grestore  gsave ArrowBc
ArrowB pop pop pop pop grestore   grestore end
 2302
424 a 2302 424 a
tx@Dict begin  gsave STV CP T /ps@refangle {NAngle 90 add } def /ps@rot
{ } def grestore  end
 2302 424 a 2302 424 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2302 424 a 2302
424 a
tx@Dict begin { 0.0 tx@Dict /NCLW known { NCLW add } if 49.1844 6.25
0.0 NAngle 90 add  Uput exch pop add a  tx@Dict begin PtoC end h1 add
exch w1 add exch } PutCoor PutBegin  end
 2302 424 a 0.64 0 0.95 0.4 TeXcolorcmyk 2098 450
a Fd(Instanciation)p 0 TeXcolorgray 2302 424 a
tx@Dict begin  PutEnd  end
 2302 424
a 2302 424 a
tx@Dict begin PutEnd  end
 2302 424 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0.09999 0.09999 0.34999 TeXcolorrgb
0.09999 0.09999 0.34999 TeXcolorrgb -600 1751 1008 60
v 0.09999 0.09999 0.34999 TeXcolorrgb 0 TeXcolorgray
1 TeXcolorgray -340 1732 a Fb(F.)16 b Fa(Na)m(tivel)29
b Fb(\(Lyc\351e)14 b(No)o(rd\))p 0 TeXcolorgray 0.09999 0.09999 0.34999
TeXcolorrgb 0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb
0.15 0.15 0.525 TeXcolorrgb 408 1751 V 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 1 TeXcolorgray 912 1732 a
SDict begin H.S end

912 1732 a 1 TeXcolorgray 1 TeXcolorgray 912 1732 a
SDict begin H.R end
 912
1732 a 912 1732 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 912 1732 a 0 TeXcolorgray 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7
TeXcolorrgb 1416 1751 1008 60 v 0.2 0.2 0.7 TeXcolorrgb
0 TeXcolorgray 1 TeXcolorgray 821 w Fb(Ann\351e)g(scolaire)f(2018-2019)
p 1 TeXcolorgray 103 w(1)7 b(/)h(0)p 1 TeXcolorgray 0
TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -525
-608 a
SDict begin H.S end
 -525 -608 a -525 -608 a
SDict begin H.R end
 -525 -608 a -525 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation2) cvn /DEST pdfmark
end
 -525 -608 a -525 -608 a
SDict begin H.S end
 -525 -608 a -525 -608 a
SDict begin H.R end
 -525
-608 a -525 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -525 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0.2 0.2 0.7
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0.68 0.68 0.88 TeXcolorrgb 1345 1579 a


1345 1579 a 1345 1579 a


 pgfo

 save

 0.68 0.68 0.88 setrgbcolor

 0.3985 pgfw

 save

 pgf2

 restore
 0.84 0.84 0.94 TeXcolorrgb
 save

 pgf1

 restore
 0.68 0.68 0.88
TeXcolorrgb
 newpath

 restore

 pgfc


 1345 1591 a
SDict begin H.S end
 1345 1591 a 0.68 0.68 0.88 TeXcolorrgb
0.68 0.68 0.88 TeXcolorrgb 1395 1529 a
SDict begin H.R end
 1395 1529 a 1395
1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1395 1591 a 1395 1591 a
SDict begin H.S end
 1395 1591 a 0.68 0.68 0.88
TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb 1461 1529 a
SDict begin H.R end
 1461
1529 a 1461 1591 a
SDict begin [/H /N/Border [0 0 0]BorderArrayPatch/Color [1 0 0]/Action
<</Subtype/Named/N/GoToPage>>/Subtype /Link H.B /ANN pdfmark end
 1461 1591 a 1461 1591 a
SDict begin H.S end
 1461 1591
a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb
1511 1529 a
SDict begin H.R end
 1511 1529 a 1511 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1511 1591 a 1523
1579 a

 1523 1579 a 1523 1579 a


 pgfo

 save

 0.68 0.68 0.88 setrgbcolor

 0.3985 pgfw

 save

 pgf4

 restore
 0.84 0.84 0.94 TeXcolorrgb
 save

 pgf3

 restore

0.68 0.68 0.88 TeXcolorrgb
 newpath

 restore

 pgfc


 1523 1591 a
SDict begin H.S end
 1523 1591 a 0.68 0.68 0.88
TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb 1564 1529 a
SDict begin H.R end
 1564
1529 a 1564 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1564 1591 a 1564 1591 a
SDict begin H.S end
 1564 1591
a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb
1606 1529 a
SDict begin H.R end
 1606 1529 a 1606 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1606 1591 a 1606
1591 a
SDict begin H.S end
 1606 1591 a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88
TeXcolorrgb 1647 1529 a
SDict begin H.R end
 1647 1529 a 1647 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1647
1591 a 1647 1591 a
SDict begin H.S end
 1647 1591 a 0.68 0.68 0.88 TeXcolorrgb
0.68 0.68 0.88 TeXcolorrgb 1689 1529 a
SDict begin H.R end
 1689 1529 a 1689
1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1689 1591 a 1701 1579 a

 1701 1579 a 1701 1579
a


 pgfo

 save

 0.68 0.68 0.88 setrgbcolor

 0.3985 pgfw

 save

 pgf6

 restore
 0.84 0.84 0.94 TeXcolorrgb
 save

 pgf5

 restore
 0.68 0.68 0.88 TeXcolorrgb
 newpath

 restore

 pgfc



1701 1591 a
SDict begin H.S end
 1701 1591 a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88
TeXcolorrgb 1742 1529 a
SDict begin H.R end
 1742 1529 a 1742 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1742
1591 a 1742 1591 a
SDict begin H.S end
 1742 1591 a 0.68 0.68 0.88 TeXcolorrgb
0.68 0.68 0.88 TeXcolorrgb 1784 1529 a
SDict begin H.R end
 1784 1529 a 1784
1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1784 1591 a 1784 1591 a
SDict begin H.S end
 1784 1591 a 0.68 0.68 0.88
TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb 1825 1529 a
SDict begin H.R end
 1825
1529 a 1825 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1825 1591 a 1825 1591 a
SDict begin H.S end
 1825 1591
a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb
1867 1529 a
SDict begin H.R end
 1867 1529 a 1867 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1867 1591 a 1878
1579 a

 1878 1579 a 1878 1579 a


 pgfo

 save

 0.68 0.68 0.88 setrgbcolor

 0.3985 pgfw

 save

 pgf8

 restore
 0.84 0.84 0.94 TeXcolorrgb
 save

 pgf7

 restore

0.68 0.68 0.88 TeXcolorrgb
 newpath

 restore

 pgfc


 1878 1591 a
SDict begin H.S end
 1878 1591 a 0.68 0.68 0.88
TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb 1920 1529 a
SDict begin H.R end
 1920
1529 a 1920 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1920 1591 a 1920 1591 a
SDict begin H.S end
 1920 1591
a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb
1961 1529 a
SDict begin H.R end
 1961 1529 a 1961 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1961 1591 a 1961
1591 a
SDict begin H.S end
 1961 1591 a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88
TeXcolorrgb 2003 1529 a
SDict begin H.R end
 2003 1529 a 2003 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 2003
1591 a 2003 1591 a
SDict begin H.S end
 2003 1591 a 0.68 0.68 0.88 TeXcolorrgb
0.68 0.68 0.88 TeXcolorrgb 2044 1529 a
SDict begin H.R end
 2044 1529 a 2044
1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 2044 1591 a 2056 1579 a

 2056 1579 a 2056 1579
a


 pgfo

 save

 0.68 0.68 0.88 setrgbcolor

 0.3985 pgfw

 save

 pgf11

 restore

 newpath

 restore

 pgfc


 2056 1591 a
SDict begin H.S end
 2056 1591 a 0.68 0.68 0.88 TeXcolorrgb
0.68 0.68 0.88 TeXcolorrgb 2131 1529 a
SDict begin H.R end
 2131 1529 a 2131
1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 2131 1591 a 2131 1591 a
SDict begin H.S end
 2131 1591 a 0.68 0.68 0.88
TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb 2222 1529 a
SDict begin H.R end
 2222
1529 a 2222 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 2222 1591 a 2234 1579 a

 2234 1579
a 2234 1579 a


 pgfo

 save

 0.68 0.68 0.88 setrgbcolor

 0.3985 pgfw

 save

 pgf12

 restore

 newpath

 restore

 pgfc


 2234 1591 a
SDict begin H.S end
 2234 1591 a 0.68 0.68 0.88
TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb 2292 1529 a
SDict begin H.R end
 2292
1529 a 2292 1591 a
SDict begin [/H /N/Border [0 0 0]BorderArrayPatch/Color [1 0 0]/Action
<</Subtype/Named/N/GoBack>>/Subtype /Link H.B /ANN pdfmark end
 2292 1591 a 2292 1591 a
SDict begin H.S end
 2292 1591
a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb
2342 1529 a
SDict begin H.R end
 2342 1529 a 2342 1591 a
SDict begin [/H /N/Border [0 0 0]BorderArrayPatch/Color [1 0 0]/Action
<</Subtype/Named/N/Find>>/Subtype /Link H.B /ANN pdfmark end
 2342 1591 a 2342
1591 a
SDict begin H.S end
 2342 1591 a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88
TeXcolorrgb 2400 1529 a
SDict begin H.R end
 2400 1529 a 2400 1591 a
SDict begin [/H /N/Border [0 0 0]BorderArrayPatch/Color [1 0 0]/Action
<</Subtype/Named/N/GoForward>>/Subtype /Link H.B /ANN pdfmark end
 2400
1591 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray -467 498 a
tx@Dict begin  tx@NodeDict begin {10.25 5.75 67.4757 33.73784 2.25
} false /N@Objets 16 {InitRnode } /NodeScale {} def NewNode end  end
 -467 498 a 8
w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.0 SLW TeXDict begin Sepia end  0.3 true 1.0
neg 5.75 neg 66.4757 10.25 .5 Frame  gsave 1.0 SLW TeXDict begin Sepia
end  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 25 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.0 SLW 0.75  setgray  0.3 true 3.0 neg 4.75
neg 62.4757 9.25 .5 Frame  gsave 0.75  setgray  1. .setopacityalpha
 fill  grestore end
 
@endspecial 0 0.83 1 0.7 TeXcolorcmyk Fd(Objets)26
b(\023)21 b(r\351els)g(\024)p 0 TeXcolorgray 529 498
a


 gsave nulldevice


 529 498 a


 grestore


 529 498 a
tx@Dict begin  tx@NodeDict begin {21.09999 16.09999 49.99452 24.99725
2.5 } false /N@Classe 16 {InitRnode } /NodeScale {} def NewNode end
 end
 529 498 a 529 326 416 4 v 529 425
4 100 v 629 395 a Fc(Classe)p 940 425 V 529 429 416 4
v 529 528 4 100 v 582 498 a(A)n(ttributs)p 940 528 V
529 628 V 583 598 a(M\351tho)r(de)p 940 628 V 529 631
416 4 v 944 498 a


 gsave nulldevice


 944 498 a


 grestore


 944 498 a


 gsave nulldevice


 944 498 a


 grestore


 944 498
a


 gsave nulldevice


 944 498 a


 grestore


 1379 498 a


 gsave nulldevice


 1379 498 a
tx@Dict begin  tx@NodeDict begin {10.25 5.75 101.80676 50.90338 2.25
} false /N@Infor 16 {InitRnode } /NodeScale {} def NewNode end  end
 1379 498 a 8 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.0 SLW 0 0 1  setrgbcolor  0.3 true 1.0 neg
5.75 neg 97.47343 10.25 .5 Frame  gsave 1.0 SLW 0 0 1  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 25 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.0 SLW 0.75  setgray  0.3 true 3.0 neg 4.75
neg 93.47343 9.25 .5 Frame  gsave 0.75  setgray  1. .setopacityalpha
 fill  grestore end


@endspecial 0 0 1 TeXcolorrgb Fd(Objet)26 b(\023)20
b(info)n(rmatique)h(\024)p 0 TeXcolorgray 2224 498 a


 grestore



2224 498 a


 gsave nulldevice


 2224 498 a


 grestore


 2224 498 a


 gsave nulldevice


 2224 498 a


 grestore


 2302 424
a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { /ArrowBc
[ 6 2 roll ] cvx def ArrowBc BeginArrow 1.  1.  scale  false 0.2 1.2
10.0 0. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T
1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave  1. .setopacityalpha  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  5.0 SLW TeXDict begin OliveGreen
end  /ArrowA { moveto } def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def
ArrowBc BeginArrow 1.  1.  scale  false 0.2 1.2 10.0 0. CLW mul add
dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave
w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@Objets
/N@Classe InitNC { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4
copy /y2 ED /x2 ED /y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub
x2 x1 sub atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth
def /dArrowPos 0.5  abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1.
1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos
mul y1 add ArrowInside pop pop } repeat } ifelse pop pop lineto pop
pop end  } if end  gsave 5.0 SLW TeXDict begin OliveGreen end  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore gsave 3.0 SLW TeXDict
begin OliveGreen end  1. .setopacityalpha  stroke grestore  gsave ArrowBc
ArrowB pop pop pop pop grestore   grestore end
 2302 424 a 2302 424 a
tx@Dict begin  gsave STV CP T /ps@refangle {NAngle 90 add } def /ps@rot
{ } def grestore  end
 2302 424 a 2302 424 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2302 424
a 2302 424 a
tx@Dict begin { 0.0 tx@Dict /NCLW known { NCLW add } if 49.21194 6.25
0.0 NAngle 90 add  Uput exch pop add a  tx@Dict begin PtoC end h1 add
exch w1 add exch } PutCoor PutBegin  end
 2302 424 a 0.64 0 0.95 0.4 TeXcolorcmyk
2097 450 a Fd(Mo)r(d\351lisation)p 0 TeXcolorgray 2302
424 a
tx@Dict begin  PutEnd  end
 2302 424 a 2302 424 a
tx@Dict begin PutEnd  end
 2302 424 a 2302 424 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { /ArrowBc
[ 6 2 roll ] cvx def ArrowBc BeginArrow 1.  1.  scale  false 0.2 1.2
10.0 0. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T
1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave  1. .setopacityalpha  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  5.0 SLW TeXDict begin OliveGreen
end  /ArrowA { moveto } def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def
ArrowBc BeginArrow 1.  1.  scale  false 0.2 1.2 10.0 0. CLW mul add
dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave
w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@Classe
/N@Infor InitNC { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4
copy /y2 ED /x2 ED /y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub
x2 x1 sub atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth
def /dArrowPos 0.5  abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1.
1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos
mul y1 add ArrowInside pop pop } repeat } ifelse pop pop lineto pop
pop end  } if end  gsave 5.0 SLW TeXDict begin OliveGreen end  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore gsave 3.0 SLW TeXDict
begin OliveGreen end  1. .setopacityalpha  stroke grestore  gsave ArrowBc
ArrowB pop pop pop pop grestore   grestore end
 2302
424 a 2302 424 a
tx@Dict begin  gsave STV CP T /ps@refangle {NAngle 90 add } def /ps@rot
{ } def grestore  end
 2302 424 a 2302 424 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2302 424 a 2302
424 a
tx@Dict begin { 0.0 tx@Dict /NCLW known { NCLW add } if 49.1844 6.25
0.0 NAngle 90 add  Uput exch pop add a  tx@Dict begin PtoC end h1 add
exch w1 add exch } PutCoor PutBegin  end
 2302 424 a 0.64 0 0.95 0.4 TeXcolorcmyk 2098 450
a Fd(Instanciation)p 0 TeXcolorgray 2302 424 a
tx@Dict begin  PutEnd  end
 2302 424
a 2302 424 a
tx@Dict begin PutEnd  end
 2302 424 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0.09999 0.09999 0.34999 TeXcolorrgb
0.09999 0.09999 0.34999 TeXcolorrgb -600 1751 1008 60
v 0.09999 0.09999 0.34999 TeXcolorrgb 0 TeXcolorgray
1 TeXcolorgray -340 1732 a Fb(F.)16 b Fa(Na)m(tivel)29
b Fb(\(Lyc\351e)14 b(No)o(rd\))p 0 TeXcolorgray 0.09999 0.09999 0.34999
TeXcolorrgb 0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb
0.15 0.15 0.525 TeXcolorrgb 408 1751 V 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 1 TeXcolorgray 912 1732 a
SDict begin H.S end

912 1732 a 1 TeXcolorgray 1 TeXcolorgray 912 1732 a
SDict begin H.R end
 912
1732 a 912 1732 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 912 1732 a 0 TeXcolorgray 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7
TeXcolorrgb 1416 1751 1008 60 v 0.2 0.2 0.7 TeXcolorrgb
0 TeXcolorgray 1 TeXcolorgray 821 w Fb(Ann\351e)g(scolaire)f(2018-2019)
p 1 TeXcolorgray 103 w(1)7 b(/)h(0)p 1 TeXcolorgray 0
TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -525
-608 a
SDict begin H.S end
 -525 -608 a -525 -608 a
SDict begin H.R end
 -525 -608 a -525 -608
a
SDict begin [/View [/XYZ H.V]/Dest (Navigation3) cvn /DEST pdfmark
end
 -525 -608 a -525 -608 a
SDict begin H.S end
 -525 -608 a -525 -608 a
SDict begin H.R end
 -525
-608 a -525 -608 a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 -525 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray -600 1668
3024 2268 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2424 1668 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0.2 0.2 0.7
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0.68 0.68 0.88 TeXcolorrgb 1345 1579 a


1345 1579 a 1345 1579 a


 pgfo

 save

 0.68 0.68 0.88 setrgbcolor

 0.3985 pgfw

 save

 pgf2

 restore
 0.84 0.84 0.94 TeXcolorrgb
 save

 pgf1

 restore
 0.68 0.68 0.88
TeXcolorrgb
 newpath

 restore

 pgfc


 1345 1591 a
SDict begin H.S end
 1345 1591 a 0.68 0.68 0.88 TeXcolorrgb
0.68 0.68 0.88 TeXcolorrgb 1395 1529 a
SDict begin H.R end
 1395 1529 a 1395
1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation2) cvn H.B /ANN pdfmark end
 1395 1591 a 1395 1591 a
SDict begin H.S end
 1395 1591 a 0.68 0.68 0.88
TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb 1461 1529 a
SDict begin H.R end
 1461
1529 a 1461 1591 a
SDict begin [/H /N/Border [0 0 0]BorderArrayPatch/Color [1 0 0]/Action
<</Subtype/Named/N/GoToPage>>/Subtype /Link H.B /ANN pdfmark end
 1461 1591 a 1461 1591 a
SDict begin H.S end
 1461 1591
a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb
1511 1529 a
SDict begin H.R end
 1511 1529 a 1511 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1511 1591 a 1523
1579 a

 1523 1579 a 1523 1579 a


 pgfo

 save

 0.68 0.68 0.88 setrgbcolor

 0.3985 pgfw

 save

 pgf4

 restore
 0.84 0.84 0.94 TeXcolorrgb
 save

 pgf3

 restore

0.68 0.68 0.88 TeXcolorrgb
 newpath

 restore

 pgfc


 1523 1591 a
SDict begin H.S end
 1523 1591 a 0.68 0.68 0.88
TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb 1564 1529 a
SDict begin H.R end
 1564
1529 a 1564 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1564 1591 a 1564 1591 a
SDict begin H.S end
 1564 1591
a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb
1606 1529 a
SDict begin H.R end
 1606 1529 a 1606 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1606 1591 a 1606
1591 a
SDict begin H.S end
 1606 1591 a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88
TeXcolorrgb 1647 1529 a
SDict begin H.R end
 1647 1529 a 1647 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1647
1591 a 1647 1591 a
SDict begin H.S end
 1647 1591 a 0.68 0.68 0.88 TeXcolorrgb
0.68 0.68 0.88 TeXcolorrgb 1689 1529 a
SDict begin H.R end
 1689 1529 a 1689
1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1689 1591 a 1701 1579 a

 1701 1579 a 1701 1579
a


 pgfo

 save

 0.68 0.68 0.88 setrgbcolor

 0.3985 pgfw

 save

 pgf6

 restore
 0.84 0.84 0.94 TeXcolorrgb
 save

 pgf5

 restore
 0.68 0.68 0.88 TeXcolorrgb
 newpath

 restore

 pgfc



1701 1591 a
SDict begin H.S end
 1701 1591 a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88
TeXcolorrgb 1742 1529 a
SDict begin H.R end
 1742 1529 a 1742 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1742
1591 a 1742 1591 a
SDict begin H.S end
 1742 1591 a 0.68 0.68 0.88 TeXcolorrgb
0.68 0.68 0.88 TeXcolorrgb 1784 1529 a
SDict begin H.R end
 1784 1529 a 1784
1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1784 1591 a 1784 1591 a
SDict begin H.S end
 1784 1591 a 0.68 0.68 0.88
TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb 1825 1529 a
SDict begin H.R end
 1825
1529 a 1825 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1825 1591 a 1825 1591 a
SDict begin H.S end
 1825 1591
a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb
1867 1529 a
SDict begin H.R end
 1867 1529 a 1867 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1867 1591 a 1878
1579 a

 1878 1579 a 1878 1579 a


 pgfo

 save

 0.68 0.68 0.88 setrgbcolor

 0.3985 pgfw

 save

 pgf8

 restore
 0.84 0.84 0.94 TeXcolorrgb
 save

 pgf7

 restore

0.68 0.68 0.88 TeXcolorrgb
 newpath

 restore

 pgfc


 1878 1591 a
SDict begin H.S end
 1878 1591 a 0.68 0.68 0.88
TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb 1920 1529 a
SDict begin H.R end
 1920
1529 a 1920 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1920 1591 a 1920 1591 a
SDict begin H.S end
 1920 1591
a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb
1961 1529 a
SDict begin H.R end
 1961 1529 a 1961 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1961 1591 a 1961
1591 a
SDict begin H.S end
 1961 1591 a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88
TeXcolorrgb 2003 1529 a
SDict begin H.R end
 2003 1529 a 2003 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 2003
1591 a 2003 1591 a
SDict begin H.S end
 2003 1591 a 0.68 0.68 0.88 TeXcolorrgb
0.68 0.68 0.88 TeXcolorrgb 2044 1529 a
SDict begin H.R end
 2044 1529 a 2044
1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 2044 1591 a 2056 1579 a

 2056 1579 a 2056 1579
a


 pgfo

 save

 0.68 0.68 0.88 setrgbcolor

 0.3985 pgfw

 save

 pgf11

 restore

 newpath

 restore

 pgfc


 2056 1591 a
SDict begin H.S end
 2056 1591 a 0.68 0.68 0.88 TeXcolorrgb
0.68 0.68 0.88 TeXcolorrgb 2131 1529 a
SDict begin H.R end
 2131 1529 a 2131
1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 2131 1591 a 2131 1591 a
SDict begin H.S end
 2131 1591 a 0.68 0.68 0.88
TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb 2222 1529 a
SDict begin H.R end
 2222
1529 a 2222 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 2222 1591 a 2234 1579 a

 2234 1579
a 2234 1579 a


 pgfo

 save

 0.68 0.68 0.88 setrgbcolor

 0.3985 pgfw

 save

 pgf12

 restore

 newpath

 restore

 pgfc


 2234 1591 a
SDict begin H.S end
 2234 1591 a 0.68 0.68 0.88
TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb 2292 1529 a
SDict begin H.R end
 2292
1529 a 2292 1591 a
SDict begin [/H /N/Border [0 0 0]BorderArrayPatch/Color [1 0 0]/Action
<</Subtype/Named/N/GoBack>>/Subtype /Link H.B /ANN pdfmark end
 2292 1591 a 2292 1591 a
SDict begin H.S end
 2292 1591
a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb
2342 1529 a
SDict begin H.R end
 2342 1529 a 2342 1591 a
SDict begin [/H /N/Border [0 0 0]BorderArrayPatch/Color [1 0 0]/Action
<</Subtype/Named/N/Find>>/Subtype /Link H.B /ANN pdfmark end
 2342 1591 a 2342
1591 a
SDict begin H.S end
 2342 1591 a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88
TeXcolorrgb 2400 1529 a
SDict begin H.R end
 2400 1529 a 2400 1591 a
SDict begin [/H /N/Border [0 0 0]BorderArrayPatch/Color [1 0 0]/Action
<</Subtype/Named/N/GoForward>>/Subtype /Link H.B /ANN pdfmark end
 2400
1591 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray -467 498 a
tx@Dict begin  tx@NodeDict begin {10.25 5.75 67.4757 33.73784 2.25
} false /N@Objets 16 {InitRnode } /NodeScale {} def NewNode end  end
 -467 498 a 8
w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.0 SLW TeXDict begin Sepia end  0.3 true 1.0
neg 5.75 neg 66.4757 10.25 .5 Frame  gsave 1.0 SLW TeXDict begin Sepia
end  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 25 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.0 SLW 0.75  setgray  0.3 true 3.0 neg 4.75
neg 62.4757 9.25 .5 Frame  gsave 0.75  setgray  1. .setopacityalpha
 fill  grestore end
 
@endspecial 0 0.83 1 0.7 TeXcolorcmyk Fd(Objets)26
b(\023)21 b(r\351els)g(\024)p 0 TeXcolorgray 529 498
a


 gsave nulldevice


 529 498 a


 grestore


 529 498 a
tx@Dict begin  tx@NodeDict begin {21.09999 16.09999 49.99452 24.99725
2.5 } false /N@Classe 16 {InitRnode } /NodeScale {} def NewNode end
 end
 529 498 a 529 326 416 4 v 529 425
4 100 v 629 395 a Fc(Classe)p 940 425 V 529 429 416 4
v 529 528 4 100 v 582 498 a(A)n(ttributs)p 940 528 V
529 628 V 583 598 a(M\351tho)r(de)p 940 628 V 529 631
416 4 v 944 498 a


 gsave nulldevice


 944 498 a


 grestore


 944 498 a


 gsave nulldevice


 944 498 a


 grestore


 944 498
a


 gsave nulldevice


 944 498 a


 grestore


 1379 498 a


 gsave nulldevice


 1379 498 a


 grestore


 1379 498 a
tx@Dict begin  tx@NodeDict begin {10.25 5.75 101.80676 50.90338 2.25
} false /N@Infor 16 {InitRnode } /NodeScale {} def NewNode end  end
 1379 498
a 8 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.0 SLW 0 0 1  setrgbcolor  0.3 true 1.0 neg
5.75 neg 97.47343 10.25 .5 Frame  gsave 1.0 SLW 0 0 1  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 25 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.0 SLW 0.75  setgray  0.3 true 3.0 neg 4.75
neg 93.47343 9.25 .5 Frame  gsave 0.75  setgray  1. .setopacityalpha
 fill  grestore end
 
@endspecial 0 0 1 TeXcolorrgb Fd(Objet)26
b(\023)20 b(info)n(rmatique)h(\024)p 0 TeXcolorgray 2224
498 a


 gsave nulldevice


 2224 498 a


 grestore


 2224 498 a


 gsave nulldevice


 2224 498 a


 grestore


 2224 498 a


 gsave nulldevice


 2224
498 a


 grestore


 2302 424 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { /ArrowBc
[ 6 2 roll ] cvx def ArrowBc BeginArrow 1.  1.  scale  false 0.2 1.2
10.0 0. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T
1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave  1. .setopacityalpha  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  5.0 SLW TeXDict begin OliveGreen
end  /ArrowA { moveto } def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def
ArrowBc BeginArrow 1.  1.  scale  false 0.2 1.2 10.0 0. CLW mul add
dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave
w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@Objets
/N@Classe InitNC { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4
copy /y2 ED /x2 ED /y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub
x2 x1 sub atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth
def /dArrowPos 0.5  abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1.
1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos
mul y1 add ArrowInside pop pop } repeat } ifelse pop pop lineto pop
pop end  } if end  gsave 5.0 SLW TeXDict begin OliveGreen end  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore gsave 3.0 SLW TeXDict
begin OliveGreen end  1. .setopacityalpha  stroke grestore  gsave ArrowBc
ArrowB pop pop pop pop grestore   grestore end
 2302 424 a 2302 424 a
tx@Dict begin  gsave STV CP T /ps@refangle {NAngle 90 add } def /ps@rot
{ } def grestore  end
 2302 424 a 2302
424 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2302 424 a 2302 424 a
tx@Dict begin { 0.0 tx@Dict /NCLW known { NCLW add } if 49.21194 6.25
0.0 NAngle 90 add  Uput exch pop add a  tx@Dict begin PtoC end h1 add
exch w1 add exch } PutCoor PutBegin  end
 2302 424 a 0.64 0 0.95 0.4
TeXcolorcmyk 2097 450 a Fd(Mo)r(d\351lisation)p 0 TeXcolorgray
2302 424 a
tx@Dict begin  PutEnd  end
 2302 424 a 2302 424 a
tx@Dict begin PutEnd  end
 2302 424 a 2302 424
a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { /ArrowBc
[ 6 2 roll ] cvx def ArrowBc BeginArrow 1.  1.  scale  false 0.2 1.2
10.0 0. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T
1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto
gsave  1. .setopacityalpha  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  5.0 SLW TeXDict begin OliveGreen
end  /ArrowA { moveto } def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def
ArrowBc BeginArrow 1.  1.  scale  false 0.2 1.2 10.0 0. CLW mul add
dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave
w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@Classe
/N@Infor InitNC { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB 4
copy /y2 ED /x2 ED /y1 ED /x1 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub
x2 x1 sub atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth
def /dArrowPos 0.5  abs def {/ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{/ArrowPos 0.  def /dArrowPos 1.
1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos
mul y1 add ArrowInside pop pop } repeat } ifelse pop pop lineto pop
pop end  } if end  gsave 5.0 SLW TeXDict begin OliveGreen end  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore gsave 3.0 SLW TeXDict
begin OliveGreen end  1. .setopacityalpha  stroke grestore  gsave ArrowBc
ArrowB pop pop pop pop grestore   grestore end
 2302 424 a 2302 424 a
tx@Dict begin  gsave STV CP T /ps@refangle {NAngle 90 add } def /ps@rot
{ } def grestore  end
 2302 424 a 2302 424 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2302 424
a 2302 424 a
tx@Dict begin { 0.0 tx@Dict /NCLW known { NCLW add } if 49.1844 6.25
0.0 NAngle 90 add  Uput exch pop add a  tx@Dict begin PtoC end h1 add
exch w1 add exch } PutCoor PutBegin  end
 2302 424 a 0.64 0 0.95 0.4 TeXcolorcmyk
2098 450 a Fd(Instanciation)p 0 TeXcolorgray 2302 424
a
tx@Dict begin  PutEnd  end
 2302 424 a 2302 424 a
tx@Dict begin PutEnd  end
 2302 424 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0.09999 0.09999 0.34999 TeXcolorrgb
0.09999 0.09999 0.34999 TeXcolorrgb -600 1751 1008 60
v 0.09999 0.09999 0.34999 TeXcolorrgb 0 TeXcolorgray
1 TeXcolorgray -340 1732 a Fb(F.)16 b Fa(Na)m(tivel)29
b Fb(\(Lyc\351e)14 b(No)o(rd\))p 0 TeXcolorgray 0.09999 0.09999 0.34999
TeXcolorrgb 0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb
0.15 0.15 0.525 TeXcolorrgb 408 1751 V 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 1 TeXcolorgray 912 1732 a
SDict begin H.S end

912 1732 a 1 TeXcolorgray 1 TeXcolorgray 912 1732 a
SDict begin H.R end
 912
1732 a 912 1732 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 912 1732 a 0 TeXcolorgray 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7
TeXcolorrgb 1416 1751 1008 60 v 0.2 0.2 0.7 TeXcolorrgb
0 TeXcolorgray 1 TeXcolorgray 821 w Fb(Ann\351e)g(scolaire)f(2018-2019)
p 1 TeXcolorgray 103 w(1)7 b(/)h(0)p 1 TeXcolorgray 0
TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
