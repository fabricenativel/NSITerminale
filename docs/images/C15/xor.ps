%!PS-Adobe-2.0
%%Creator: dvips(k) 5.999 Copyright 2019 Radical Eye Software
%%Title: /home/fenarius/Travail/Cours/NSITerminale/docs/images/C15/xor.dvi
%%CreationDate: Fri Mar 25 11:13:44 2022
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 363 273
%%DocumentFonts: LMSans10-Bold LMSans12-Regular LMSans10-Regular
%%+ LMMathExtension10-Regular LMSans8-Regular LMRomanCaps10-Regular
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o
%+ /home/fenarius/Travail/Cours/NSITerminale/docs/images/C15/xor.ps
%+ /home/fenarius/Travail/Cours/NSITerminale/docs/images/C15/xor.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2022.03.25:1513
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 872 2018-12-21 20:39:31Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup xGridOffset add y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% $Id: pst-text.pro 891 2018-12-29 19:42:20Z herbert $
%
% PostScript header file pst-text.pro
% Version 1.02, 2018-12-28 (hv)
% For distribution, see pstricks.tex.
%
/tx@TextPathDict 45 dict def
tx@TextPathDict begin
%
% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def
%
/movetoproc { continue { @movetoproc } { pop pop } ifelse } def
%
/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def
%
/linetoproc { continue { @linetoproc } { pop pop } ifelse } def
%
/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def
%
/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def
%
% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def
%
/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def
%
/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def
%
%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint
    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
/warp {
    1 index
    1.4 mul
    cos 2 add
    mul
} def
/warpmove{
    2 index {
        newpath
    } if
    warp moveto
    pop false
} def
/warpline { warp lineto } def
/warpcurve {
    6 2 roll warp
    6 2 roll warp
    6 2 roll warp
    curveto
} def
/warpit {
    true
    { warpmove } { warpline } { warpcurve } { closepath } pathforall
    pop
} def
%
/circle {
    exch neg
    % .5 mul
    90 add
    dup cos 2 index mul
    3 1 roll
    sin mul
} bind def

/circmove{
    2 index { newpath } if
    circle moveto
    pop false
} bind def

/circline { circle lineto } bind def

/circcurve {
    6 2 roll circle
    6 2 roll circle
    6 2 roll circle
    curveto
} bind def

/circit { true { circmove } { circline } { circcurve } { closepath } pathforall pop } bind def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.03 2020/01/09
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 }
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% calculate the line coefficents Ax+By+C=0
%% x1 y1 x2 y2 -> A B C
/LineCoefABC {
  0 index 3 index sub % A=y2-y1
  4 index 3 index sub % B=x1-x2
  3 index 5 index mul 6 index 4 index mul sub % C=x2y1-x1y2
  7 3 roll pop pop pop pop
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% calculate the 2-order determinant
%% |a11 a12|
%% |a21 a22|
%% a11 a12, a21 a22 -> X
/DeterminantTwo {
  4 1 roll mul 3 1 roll mul exch sub
} def
%% calculate the 3-order determinant
%% |a11 a12 a13|
%% |a21 a22 a23|
%% |a31 a32 a33|
%%   8   7   6    5   4   3    2   1   0
%% a11 a12 a13, a21 a22 a23, a31 a32 a33 -> X
/DeterminantThree {
  % |a22 a23, a32 a33| * (-1)^(1+1)a11
  8 index abs 1E-5 lt { %a11=0
    0
  } {
    4 index 4 index 3 index 3 index DeterminantTwo
    9 index mul
  } ifelse
  % |a12 a13, a32 a33| * (-1)^(1+2)a21
  6 index abs 1E-5 lt { %a12=0
    0 sub
  } {
    8 index 8 index 4 index 4 index DeterminantTwo
    7 index mul sub
  } ifelse
  % |a12 a13, a22 a23| * (-1)^(1+3)a31
  3 index abs 1E-5 lt { %a13=0
    0 add
  } {
    8 index 8 index 7 index 7 index DeterminantTwo
    4 index mul add
  } ifelse
  10 1 roll pop pop pop pop pop pop pop pop pop
} def
%% calculate the 4-order determinant
%% |a11 a12 a13 a14|
%% |a21 a22 a23 a24|
%% |a31 a32 a33 a34|
%% |a41 a42 a43 a44|
%%  15  14  13  12   11  10   9   8    7   6   5   4    3   2   1   0
%% a11 a12 a13 a14, a21 a22 a23 a24, a31 a32 a33 a34, a41 a42 a43 a44 -> X
/DeterminantFour {
  % |a22 a23 a24, a32 a33 a34, a42 a43 a44| * (-1)^(1+1)a11
  15 index abs 1E-5 lt { %a11=0
    0
  } {
    10 index 10 index 10 index 9 index 9 index 9 index 8 index 8 index 8 index DeterminantThree
    16 index mul
  } ifelse
  % |a12 a13 a14, a32 a33 a34, a42 a43 a44| * (-1)^(1+2)a21
  12 index abs 1E-5 lt { %a21=0
    0 sub
  } {
    15 index 15 index 15 index 10 index 10 index 10 index 9 index 9 index 9 index DeterminantThree
    13 index mul sub
  } ifelse
  % |a12 a13 a14, a22 a23 a24, a42 a43 a44| * (-1)^(1+3)a31
  8 index abs 1E-5 lt { %a31=0
    0 add
  } {
    15 index 15 index 15 index 14 index 14 index 14 index 9 index 9 index 9 index DeterminantThree
    9 index mul add
  } ifelse
  % |a12 a13 a14, a22 a23 a24, a32 a33 a34| * (-1)^(1+4)a41
  4 index abs 1E-5 lt { %a41=0
    0 sub
  } {
    15 index 15 index 15 index 14 index 14 index 14 index 13 index 13 index 13 index DeterminantThree
    5 index mul sub
  } ifelse
  17 1 roll pop pop pop pop pop pop pop pop
  pop pop pop pop pop pop pop pop
} def
%% calculate the 5-order determinant
%% |a11 a12 a13 a14 a15|
%% |a21 a22 a23 a24 a25|
%% |a31 a32 a33 a34 a35|
%% |a41 a42 a43 a44 a45|
%% |a51 a52 a53 a54 a55|
%%  24  23  22  21  20   19  18  17  16  15   14  13  12  11  10    9   8   7   6   5    4   3   2   1   0
%% a11 a12 a13 a14 a15, a21 a22 a23 a24 a25, a31 a32 a33 a34 a35, a41 a42 a43 a44 a45, a51 a52 a53 a54 a55-> X
/DeterminantFive {
  % |a22 a23 a24 a25, a32 a33 a34 a35, a42 a43 a44 a45, a52 a53 a54 a55| * (-1)^(1+1)a11
  24 index abs 1E-5 lt { %a11=0
    0
  } {
    18 index 18 index 18 index 18 index 17 index 17 index 17 index 17 index 16 index 16 index 16 index 16 index 15 index 15 index 15 index 15 index DeterminantFour
    25 index mul
  } ifelse
  % |a12 a13 a14 a15, a32 a33 a34 a35, a42 a43 a44 a45, a52 a53 a54 a55| * (-1)^(1+2)a21
  20 index abs 1E-5 lt { %a21=0
    0 sub
  } {
    24 index 24 index 24 index 24 index 18 index 18 index 18 index 18 index 17 index 17 index 17 index 17 index 16 index 16 index 16 index 16 index DeterminantFour
    21 index mul sub
  } ifelse
  % |a12 a13 a14 a15, a22 a23 a24 a25, a42 a43 a44 a45, a52 a53 a54 a55| * (-1)^(1+3)a31
  15 index abs 1E-5 lt { %a31=0
    0 add
  } {
    24 index 24 index 24 index 24 index 23 index 23 index 23 index 23 index 17 index 17 index 17 index 17 index 16 index 16 index 16 index 16 index DeterminantFour
    16 index mul add
  } ifelse
  % |a12 a13 a14 a15, a22 a23 a24 a25, a32 a33 a34 a35, a52 a53 a54 a55| * (-1)^(1+4)a41
  10 index abs 1E-5 lt { %a41=0
    0 sub
  } {
    24 index 24 index 24 index 24 index 23 index 23 index 23 index 23 index 22 index 22 index 22 index 22 index 16 index 16 index 16 index 16 index DeterminantFour
    11 index mul sub
  } ifelse
  % |a12 a13 a14 a15, a22 a23 a24 a25, a32 a33 a34 a35, a42 a43 a44 a45| * (-1)^(1+5)a51
  5 index abs 1E-5 lt { %a51=0
    0 add
  } {
    24 index 24 index 24 index 24 index 23 index 23 index 23 index 23 index 22 index 22 index 22 index 22 index 21 index 21 index 21 index 21 index DeterminantFour
    6 index mul add
  } ifelse
  26 1 roll pop pop pop pop pop pop pop pop pop pop
  pop pop pop pop pop pop pop pop pop pop
  pop pop pop pop pop
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 1990-2020 The LaTeX3 Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
true setglobal
/pdf.globaldict 4 dict def
false setglobal

/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict~
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-mathex.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathex[
/parenleftbig
/parenrightbig
/bracketleftbig
/bracketrightbig
/floorleftbig
/floorrightbig
/ceilingleftbig
/ceilingrightbig
/braceleftbig
/bracerightbig
/angbracketleftbig
/angbracketrightbig
/vextendsingle
/vextenddouble
/slashbig
/backslashbig
/parenleftBig
/parenrightBig
/parenleftbigg
/parenrightbigg
/bracketleftbigg
/bracketrightbigg
/floorleftbigg
/floorrightbigg
/ceilingleftbigg
/ceilingrightbigg
/braceleftbigg
/bracerightbigg
/angbracketleftbigg
/angbracketrightbigg
/slashbigg
/backslashbigg
/parenleftBigg
/parenrightBigg
/bracketleftBigg
/bracketrightBigg
/floorleftBigg
/floorrightBigg
/ceilingleftBigg
/ceilingrightBigg
/braceleftBigg
/bracerightBigg
/angbracketleftBigg
/angbracketrightBigg
/slashBigg
/backslashBigg
/slashBig
/backslashBig
/parenlefttp
/parenrighttp
/bracketlefttp
/bracketrighttp
/bracketleftbt
/bracketrightbt
/bracketleftex
/bracketrightex
/bracelefttp
/bracerighttp
/braceleftbt
/bracerightbt
/braceleftmid
/bracerightmid
/braceex
/arrowvertex
/parenleftbt
/parenrightbt
/parenleftex
/parenrightex
/angbracketleftBig
/angbracketrightBig
/unionsqtext
/unionsqdisplay
/contintegraltext
/contintegraldisplay
/circledottext
/circledotdisplay
/circleplustext
/circleplusdisplay
/circlemultiplytext
/circlemultiplydisplay
/summationtext
/producttext
/integraltext
/uniontext
/intersectiontext
/unionmultitext
/logicalandtext
/logicalortext
/summationdisplay
/productdisplay
/integraldisplay
/uniondisplay
/intersectiondisplay
/unionmultidisplay
/logicalanddisplay
/logicalordisplay
/coproducttext
/coproductdisplay
/hatwide
/hatwider
/hatwidest
/tildewide
/tildewider
/tildewidest
/bracketleftBig
/bracketrightBig
/floorleftBig
/floorrightBig
/ceilingleftBig
/ceilingrightBig
/braceleftBig
/bracerightBig
/radicalbig
/radicalBig
/radicalbigg
/radicalBigg
/radicalbt
/radicalvertex
/radicaltp
/arrowvertexdbl
/arrowtp
/arrowbt
/bracehtipdownleft
/bracehtipdownright
/bracehtipupleft
/bracehtipupright
/arrowdbltp
/arrowdblbt
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def product (Ghostscript)
search {pop pop pop revision 927 gt}{pop false} ifelse{/BorderArrayPatch{}
def}{/BorderArrayPatch{[exch{dup dup type/integertype eq exch type/realtype
eq or{BPToDvips}if}forall]}def} ifelse /HyperBorder {1 PDFToDvips}
def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx pdf@lly pdf@urx
pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly exch def dup
DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx exch
def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 4.00005 0.49998 moveto 2.00002 2.00002 lineto 4.00005
3.50003 lineto pgffill 16.0002 0.49998 moveto 18.00021 2.00002 lineto
16.0002 3.50003 lineto pgffill  grestore} bind def

 /pgf2{gsave exec 2.39105 3.38733 8.26909 0.79701 pgfe pgfstr  grestore}
bind def

 /pgf3{gsave exec 4.00005 0.49998 moveto 2.00002 2.00002 lineto 4.00005
3.50003 lineto 16.0002 0.49998 moveto 18.00021 2.00002 lineto 16.0002
3.50003 lineto pgffill  grestore} bind def

 /pgf4{gsave exec 2.39105 3.38733 6.97394 0.0 pgfe 7.80008 2.40001
moveto 7.80008 3.20003 lineto 11.20012 3.20003 lineto 11.20012 0.8
lineto 10.4001 0.8 lineto 8.6001 3.20003 moveto 8.6001 4.00005 lineto
12.00015 4.00005 lineto 12.00015 1.60002 lineto 11.20012 1.60002 lineto
pgfstr  grestore} bind def

 /pgf5{gsave exec 4.00005 0.49998 moveto 2.00002 2.00002 lineto 4.00005
3.50003 lineto 16.0002 0.49998 moveto 18.00021 2.00002 lineto 16.0002
3.50003 lineto pgffill 0.59776 pgfw 8.00009 4.00005 moveto 11.00012
4.00005 lineto 9.00009 2.00002 moveto 12.00015 2.00002 lineto 8.00009
1.0 moveto 11.00012 1.0 lineto 9.00009 0.0 moveto 12.00015 0.0 lineto
pgfstr  grestore} bind def

 /pgf6{gsave exec 0.59776 pgfw 9.00009 3.00003 moveto 12.00015 3.00003
lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 4.00005 0.49998 moveto 2.00002 2.00002 lineto 4.00005
3.50003 lineto 16.0002 0.49998 moveto 18.00021 2.00002 lineto 16.0002
3.50003 lineto pgffill 0.59776 pgfw 8.00009 1.0 moveto 11.00012 1.0
lineto 9.00009 0.0 moveto 12.00015 0.0 lineto pgfstr  grestore} bind
def

 /pgf8{gsave exec 0.59776 pgfw 8.00009 4.00005 moveto 11.00012 4.00005
lineto 9.00009 3.00003 moveto 12.00015 3.00003 lineto 9.00009 2.00002
moveto 12.00015 2.00002 lineto pgfstr  grestore} bind def

 /pgf9{gsave exec 10.0001 -0.49998 moveto 10.0001 4.50003 lineto pgfstr
 grestore} bind def

 /pgf10{gsave exec 0.59776 pgfw 4.00005 4.00005 moveto 7.00008 4.00005
lineto 5.00005 3.00003 moveto 8.00009 3.00003 lineto 5.00005 2.00002
moveto 8.00009 2.00002 lineto 3.00003 1.0 moveto 7.00008 1.0 lineto
5.00005 0.0 moveto 8.00009 0.0 lineto 12.00015 3.00003 moveto 15.00018
3.00003 lineto 13.00015 2.00002 moveto 16.0002 2.00002 lineto 13.00015
1.0 moveto 16.0002 1.0 lineto pgfstr  grestore} bind def

 /pgf11{gsave exec 0.59776 pgfw 8.00009 4.00005 moveto 11.00012 4.00005
lineto 9.00009 3.00003 moveto 12.00015 3.00003 lineto 9.00009 2.00002
moveto 12.00015 2.00002 lineto 8.00009 1.0 moveto 11.00012 1.0 lineto
9.00009 0.0 moveto 12.00015 0.0 lineto pgfstr  grestore} bind def

 /pgf12{gsave exec 0.59776 pgfw 10.4001 1.60002 moveto 12.00015 0.0
lineto pgfstr 0.3985 pgfw 10.66016 2.49069 moveto 10.66016 3.15096
10.1249 3.68622 9.46463 3.68622 curveto 8.80435 3.68622 8.26909 3.15096
8.26909 2.49069 curveto 8.26909 1.83041 8.80435 1.29515 9.46463 1.29515
curveto 10.1249 1.29515 10.66016 1.83041 10.66016 2.49069 curveto closepath
9.46463 2.49069 moveto pgfstr 1 setlinecap 4.00005 0.0 moveto 5.08101
0.0 6.00006 0.9 6.00006 2.00002 curveto 6.00006 3.10002 5.10005 4.00005
4.00005 4.00005 curveto 2.90001 4.00005 2.00002 3.10002 2.00002 2.00002
curveto 3.20003 2.60002 moveto 2.00002 1.60002 lineto 0.8 2.60002 lineto
16.0002 0.0 moveto 14.90016 0.0 14.00017 0.9 14.00017 2.00002 curveto
14.00017 3.10002 14.90016 4.00005 16.0002 4.00005 curveto 17.1002 4.00005
18.00021 3.10002 18.00021 2.00002 curveto 19.20023 2.60002 moveto 18.00021
1.60002 lineto 16.8002 2.60002 lineto pgfstr  grestore} bind def

 /pgf13{gsave exec 1.5 0.49998 moveto 3.50003 2.00002 lineto 1.5 3.50003
lineto pgffill  grestore} bind def

 /pgf14{gsave exec 1.5 0.49998 moveto 3.50003 2.00002 lineto 1.5 3.50003
lineto 3.50003 0.49998 moveto 5.50005 2.00002 lineto 3.50003 3.50003
lineto pgffill  grestore} bind def

 /pgf15{gsave exec 3.50003 0.49998 moveto 1.5 2.00002 lineto 3.50003
3.50003 lineto pgffill  grestore} bind def

 /pgf16{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf17{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf18{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf19{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf20{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf21{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf22{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash
3.00003 0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto
-1.65689 3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689
-1.65689 -3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689
3.00003 0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc
pgfstr grestore newpath  grestore} bind def

 /pgf23{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: LMRomanCaps10-Regular
%!PS-AdobeFont-1.0: LMRomanCaps10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRomanCaps10-Regular known{/LMRomanCaps10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRomanCaps10-Regular)readonly def
/FamilyName(LMRomanCaps10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRomanCaps10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-496 -290 1501 1100}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53E3095EF5AF4F01AA2B5C2934E5345
1D88D311DB46915432DD0F408112AADBDE54032868560673D08129A1793B6FDD
D1D82ACA35A8223DA18ED7A03094DE92156D5D0B42FF6C449A1823CEF7555FCA
B35573829AE5A55A1381600C734661125E28C2C51EAD103F3DD496F6EA7096EE
8FD3BEFA4FBD7391DF4FAAFA38FCC474FC632D8A8C890F5276629AC2552B74C5
3C8C4B1DF8FC58A3050CDF2357DD1F98E83C4D077AEE399C268ED59CDE9DFA68
BFE8629B52E8DC41DEEC0C9E84BDEA39B4AC552839755CBE2DC820864DC9612F
16D1A532150DE0137F647DAE154785D152CEE57AE3FF8F671B20EFA22C5711DC
B9F8AA784F222AE1183B01E2AAC6254D7994624D1B351DFF6CBF3B4F7B1DEC63
CCA90AEB60F15A33F727877927E80AC8722C27C584FB671FEB518D1DE33FAA48
3173C60B382AA1F0B22369BE368CBF749E7559509205B38DF4326DF6A6161C4F
E3553EE51C42032B00F69252E9043B7928B2824FCDB5189B3020CF1D596C59B2
135BC9D16D037D87C31B091D7C4DDDFAAB32D68F9C396CA3BF22BD6824BFE582
93520934A63EB6473935B1EB4801E3ED6475320DBFBA8C2F3F98F03DB06C3F05
B0B06847EA50E8220C87171F32F759EC361701793C97953550ECA6D4B28EC2FD
607D51FF237723D79DF208680711F2DAA6172AEBF28B736756CFE9D56EEF0156
FCC46EA96AFB2A804A3BEE06E0A59EC3652633189E85E68B5F3EFA7CBF91E3E1
D7472E66CCE86A28D2FE799AB043DA1C74EFBEB5C5AE6123A71702861463B56D
7BC98F38D9C0B29C25645142AD8BE57953956B838F815285B8802EE4BD0817BC
404C04D71B0FDFF6DC455B51B305A005DD7796527CD8561337EFB990C47DCC87
E2A042ECD49871111D71785275257C303761638CB0EF14492762F5A1CB7BD472
F0B01BB09FC6863455F33DE4BEF212E60A9021B94F42EE04735AF673E3D24A74
35BBA4EE640862CC2C49FD18BFD4A21FA259DED7A5F13C74E62BB9A4633098E0
15F6E5DD084E687F8909E2288265BB98D64189CEA29065AA87E8BB636C3FA965
32FA00F88F4C98217A140A3162D903EDE2880C3743AE61EA1D3E2DA8EFD0F95E
E88605CF6872260A0C808EB620E9F9156627EEF4B4F07CFF943A70AA730E2B56
3A5912AA256C9519F4F8A46E512BBA9F099FD0A4E11C873E88DFFCD25D0F0805
B0EA04ED10F3D442573A56648C90B3D8C4C44741A535D965E48F0F4AD114076E
79FD9D0DBBC50EDC121CA1ABABDCA567BB9D28CB3E5AE17F756273333E84F341
637A1BDB292EADD055C971FFA94B4E72EE284C44A9C294B2B18D9A2E50D90BEA
A161415478975E25D1E928C5867A495F88565BA02CEBBA62BBF3976782EE4B45
DF434B01660CFF3F89AB4FEF6BC7F7D7F83EED9F947931149B6CFA3CC38B537B
6C89BBCCE6C448AC5C61D17285F9E2E321C96C5501772C32C2B6183CA0BB5DEE
4B7C3C8F0D77EBB70D341E595B5A7BFE2B471EAC3CE6C0BB9A046AFF0D3CDE8F
81C142E70727135017B39A5A1AFBA562AA96BAD4D66958AA329DDE6CAB90B3FE
38E49F75EC083CE28D488E75BBF597DB49E3F42610D596C1D91A878EE680EB84
C857186645C467EC0164AB6086D2C2D95C1BA20D36E2E8C1494640BCF0294FF2
103926BD4D83104F9B660EFF434CCDDC96CC25E9F54CDC9E19D966D068DAEE4E
1255BF293797A1BD1FAAB9AF2BAB48057DE0E3C276E3A5117350E877FFF97EAE
242EFCE7ADE5DAB83C34AC97C66C21F4CE4812FA0F007C12820899207C35F3B0
14133645FB9F8E53A6E2A1CC08CED4D33CE9B69E7A5D0E31726EC3BF9FD98C0A
E5BA1BCF5166779F26081CE1DCF8FCBF985B41005EA0771D91D5727FB447795C
A639A5C9057E97FDC795EE6B7C39AF1AB0338BACA1A1E179F1AF0EABA623864E
553A210AE8C03A525E467DF8744A8B6DB57E04C99BF7F568041BF90B5EEC2B73
9A109B37B07E8A668E68D117A3E0C46B11617838874E7F840DAB45050FC413A5
037107717FB43013DA06FF41184DEF3526C06FD5BAB6F3763BD358D6931EEA4A
860E1A17079A59DEB9C7A4C0FC68AF583ECCBE6FE0329A031820D4D1DA9D11F0
2D650DFEAAD917E7F290E617903792223A2AA23AE7069154690EB370F940BAE2
395473B7C2F70EB4DF0E94468FBA1B6D5F1CCF350E3930ADAE5249B3D5CAE21B
281B22FAE6EE3AF85762C36421F291360670443326A44F1F4EA0E002D8B94CDA
144057B4D5F9FD416ADBAD209422879682A8D0D249CDBAB31345F45FCE24252E
D45316EA9E34A9EA03A6C950682BD7E72A81DC4FB2B9CCCA501761022009926B
5F55C9CB2855D5D049D3C73CBEF771A594437E6E1C6B0F15FB3102DB7A3DDCB5
3BF882D33E5A43EF201EC0B415DC701E8FE4FD3505B993F5CFDB502635117336
387D170AB42F95FFE8C79DD1C5CD4860749F82198FFFDAE1393586EFD3956EE1
0F7A3EC03DBC1045CDBCCCC3950C6C443E1EB25180C92F0640CE6A8AF3AE7EB1
81C2E4C11086C2ADDBAEFF30348287C9C3FA8B34A76654DD7AD692702C462BC8
6360DF3B3C743459AB088BEA49C5D06D6EB67124373543A2C18439DB2227247B
30A41C72B8836026F60961F8EA96BF0A4F3E778B9002DD7488DAD1A42BC257C3
C7149CB99114E73DDD3F9A78BBE152E1BAD8C1A22328682504131249C8468ADA
F74760105E07065AAB5CFCACB826EFB41D1A7A6F59DC8AFFD065CAD27B9EB202
0C908E91E81B07A92AD544D202816662873464594EBF58A0B38A156331EEAA0D
0BC24BB44DFFFCBF4181A86F0A4BD25C3921CD2BA8360AAD322C021122E962CD
756DE48DA93798FBDD034F4304D5EDBBA164DC9E9B3414D00E9F5B712394804B
D4BDA26FE7C2418EEB63B7E393108CADDA24C91C1962272359F2535FA1D1A508
FB5023D07D392FDDDE2AC0E0708B430846E137E6CA0B5436653A968FE24DF8D4
6D2003B45B60BB1B6D62DA735DA6689C2C03F196ADC11B27E608674E546D2074
A3AD2FDED543CBEB81B9271E5EDD5DEAA97BC86C948570063933291D78AB5298
EA92E13430C7CA1FC658FA031AAD0EA5B01D22253D6C26BF3F435E6A6E9147BC
1B68EA135225157DBB906F75C799F437E74F0E185AD518B7E446C30415CE5799
01D43D8E2B08A04783C5E1AB77A3E641BFCD7753EC20A9D8AED089AF77F0C5D8
96228A3AF8A96329A5F0EA14F929D5598F4437AB944A06B5EEC3343EB29A9271
70DB0EA31A11EE7634FD75CAEAA480F411AFB3A933234276082E17993B297043
B2F75674AA08FF419E5CBFB6407856406CC9C52353EAB3C79BAAEFD74B08910F
452C7FD271C1B9BACA52194DCABDB4284B77C573C5A7EEA60AC017A3CBD6BA59
A1AC2BACF1545011EA84CB75B2C5ED13C702870ECCCD60554EE8C5D4B9F2FB5A
92DA2D93B04417CC9240E9C692407250E7D47C97F9B3A11C8CB3EA31F589BDA6
00E115E70395E2E4C0A29284FD2C9A8740851EDC442490FAE8321683AE4A530F
EAC44A63E2B90731652CCDDBEEC58F573951454FE7AFA29CDDEF96E951AAA9B8
EEB3F9BD5F13210AEC71AED98317186244404D4812EB1E27A42058A387726A74
FD74B84CEABDA95CAA798540DFB193A897AEC52D74BB6747FB9CD5A633DF5375
2834D9E6147A844A7DC46DFC69EB7B63E6126545B566CA3099246CC6E5F85E04
5FE750DA4A9B403FD293CC4363897147A165FB658A4E7A74EE6C22C2737A8107
63C405C5DD41D7ADF7112DB70AEF68FF3B8773848FB918BD1D4D4963B96902F3
A84599D73EB3303D7B74883137EA5EEE14B739F60D45D102706C99D92E1CA501
846CC8AB6FB3AD6AC55575E66721F58FC39D634E3C68CB3E2E24D61819BC8515
9520ADC69ACA26ED5D96EF04C2AD0153759083DBE7DA9B89D877992A8DC821FB
5A141A58CC2A46228F2F642101F5B23CE1ED3A79F2C6006E04619B81578C0EA3
C3A72402DFB9B35C8E59BF582621648F48CC413EDED067EF9BEEEA1134788A6F
839F2C2FB22529A38153E830445FFF661BCCCA767DB0BCACA4693DF0370A9804
2E527BD65EC1E77D32A07DD7E1149715178A46263EFFFBE20CF045D1F128CA45
50BA9D6D6DA61B84D00CBC9FAE5924F8209ED49D597C20A0CAD1C2D3424E9CD5
8A179A2BB40AC54D2E45D206928BE43A964D2311F07753D0CE4ED2AD6198A473
F1F9EA821DEE99E27D331F0559477F0CF1D9731533BEFE67747FCBD3460F9E80
3E409065E158DA49560DBF9060489CEEBE735CE28EE4ABC81450157CB7DDACCB
72A0FB560345386569D9DEE8754EBA551B635693EC4FEEA9CDAE3564D5DB1DC8
0645A5DFBEDC32C58223FB032506BA87BA582862CCFE1FD43197B1C7953BD8F4
DA1AEDEC773D5C063965683DCBA5BAA51ED9F1F601F0F088C4C2859090964202
143D72C13B747461135CBEC72D82A7C1602B824629FA3F773B665ADFF0135A65
ACB5311765991CFE59744E7CC201895FC7C2415439EA0112F1804CEFA65F5653
92ECDDDC6641E651C4CAC35F163BC67A18CC18839FDC4EB001A723EE59734A18
EB12CD7C54DBA9F8C47428CFC2B96879AC6792E812426A33CD78A844120B5B67
120BA7884AE4336F3FEBD08B7B93B550CC6D1ED120AC16308B6DD2B9A8F686D6
AA020E49172C02DA888DE03EC12D4EA38E7D327F0F4C117F34AB17610F5D7F76
C207FAF88C8FAEF2476515A41387CA09174006C8F2125DB485D1F37C940A8F4B
3E4DCC91413C3273DAC2A3FD2C49E3C9AB8FF8EFC8DA34C873E57D38B01DF487
3772137582971F3249E6694A24DA005C84176455BA74C8A97447861732DFDA1A
5752B5222EDD9012B45CF0DF0644B2E5B7AE5DA72EFE54D294768DE021DDC1A7
C76EF77C6E740449BEE713B7E40F77F7F6EBB4BF933204D9E5E28D522591D17C
997D66D0491D2D29CFA7F4C88869E2D53DBAB54563CC5357F755C48E49F4F103
4A8645A68D436C42FAE21F2C158167C6BA509BED34E0B0DA099434D7FE957C3D
52C2AE0E9177DB0B86627B9DE43A7CAC25E8A1D8B592CDD4375AD01D63E8F687
46B8029C831A0871A8F9F2E264EC10133C444A86EF7C38608D246A1B4379C45A
7C34D82EBEACACC718F5905E864DD54CA062EA1FF406D9E2E42031876A1CFCE5
8D611A8435A8459CAAD2B618D4BF9115DAC5B425EC8BA4590DD3555C2E4BB601
97FBB232487FD786E57CA1229401BF634D445C93FDC157796BFA5502F105FB79
F31A554D8BF98B8303CFD661ABF9A72CA0629AA65989A7AA9AC8B6930AE574DD
D32FF4BD7C970D933C47EA4515043C418049903E3F36885AD45509FC3CF6F31E
975595338AAC667E1ACC0A3D0AF0B6A0995FA0FA6A1C7BF34A0E25EFB2AD7503
D23492E7E980B2C4324736378E0843451E4D9840AF87F800D3B6E0248AC51AEB
F052E92CDC3ADAD81E2D2AABE09DD98F5AE00F69DACA0535AC90368B31AB3110
CB4EB8D00DF6246BA012FA3416E1EAF822DCAA6C0C4142A552F0D97037FD695F
92137A8CEB212797BBE778DCDB2D0F6726BCF115DA15374CB688BB2F98BDC3B7
21DB34D4C6186E5CB2E597FE2055304950D905D6AFB4390B62A3173B522240F0
D3AB72588D98BAC8AEF2D4837251BBBF065C283B7C7B3BD08D7708CF72309950
D176CFAA1D155312586A9ADC136D9155C3C6ACBDEF8BA575387DD0D73162CDDD
96166F795921D90204DB9F3E3FBE084A2DECAA1964AD31D9D2F4743E73B73557
69B7ED30FCFA10238AB9E263F42C980A603B024C1844C08D06E40C58072E7D12
43257B02B8CAFF2AC2FB7868A7FC61E6AD2CF8C5CA6111D592F4184FABB849A3
676A8D175D44E71B9CEB49676700958F17D09D8B8D37746E5AB46052350D2D3D
6947F4B53D2B14FD50B4CEF4398D2D2BE7E7A3103A10B82E0E27702BF83306A0
C3A89D9AD2A517E03614C8349282F97AF2292BEEF24F886427E846C0BD15A807
62263CD8C96EAA02F137C2134A47241E3F15A881F6A2FE15BD745CE175B92169
7F9D9FF0803559FEA211098B4B45E88443AFB83F96DECD5E0B32C5EA329CB342
00253C789CF8F0CC740618BA5DCDAD4693F4E17363864CC8AB69FF9238E0B18A
F4114B94CDF5DADB44EAF5DB260D8B8BC3027ADFF7DBE2AD88CA3261C59CFC1E
C0418A91E44F1718D13CF485B3CAE0E01B327EE29107319D27F242A8681C2397
F448C46BA164AC7BE0C0A73FB423A2AD05E28D490FE15EBC6A6956477E8B7DAA
F1AE28A6B253A55B77C969975DADE58C1A863D53B67DFFDE2F48652558A2D707
BE5A2C968491730CC85A6FAC2CF9D670F1FB69EB4966334402F76388AD6AB9DB
661A04037C111998C99A0A09C9002478AA31E4240F13D73182F04410A11A88EB
D5278ACEC4A55F1A082D537B3C1EE890A6FD2ECD5F4D5DE99814AD4A07983923
64FE0BEFFF89A5599AA47087D62EBF48C20DCB99FD2BAE6853877991059EA431
7ACD1B3B44D9E5F789B7877ADFBD0F5BF0D86E0DC7B68A3F2D8B66E59BE53EDA
B3DA137D59CC6EFA0F579F8A1C5E4FFF0AF7FF5CCE31B93E4048CFBFCDADF56B
75CC3A9291183CA5F1FCD9BACF833A9D58F384DC27B11B3380AED6F7A6719B66
AA3E4CF7A10D86C2E63BB1BCEFB27E668CB9A72C46083DD42729C37C41DB7347
D16B9C41AAE346617AC1DA9EDB3A2ED55D49DDDEFA61EA1F01DAD0A1CEAB6B77
A4F4A47CB6269D49966E24FE51C7D95B1FBCC83587A2536500DAFBE0CA7772A5
89F8D9CDE0932B5D3A1819CB2732460837EDC62035D7D232AD000EDC4598F22B
950DDB38150538219C18735C6FE1823BC63C569503A4B5CBCCDFEEFC01872476
101D65E487A587BCA95243A1EB5BA0431C918A879828150795CF2BA78D4E55F1
FDBABB8BF813CB9DB27CB44AA47AA0D4E648240D872FB7614B5068382C766444
22AE18999FFE37981189CADA735CF09EBF4678CFABD1A6D3FBBF8357D4DC0524
BC6A4F583F56C127E3666DF8476D5A8A6CC0A5B1420DDB2B7E75B0A8C76AA6C9
98C9AD482CED7C243C9688323D96A3F96517CFF904BA26767486441050388419
88EAA2FE0155EA8DC3F8EA9DB943789A191542089E218EF40FB4942319C28B52
2ABAF817F506EF45F7262128F935F4893B87C2220034C6F979B5B3DE3BA5858C
38C9C1337A638C0E5C575727665665C88AD38E13EB02AC3AE5CF08B53BAB7FD1
3E263C2549247D8DF74C6863D43B0266C927FC0C7682845F3E4266B7D327312E
FB770916FBAA37015011999870F0AD19B5EB1B9D54BBE7593C45B8F41C203368
AB891AA0006AFDE458F28C88624B7CD1FEC7F9EF2C74697D12EF1AC78B34E566
672E71A0A5B53E6FEB67E477C72E6CDA1458BC8DB8E1DA62D42F448933905E64
F93DE35FB61FDFA5A4C78E426D6F68DFE42F76B1CF5F095DCFF46884A1AD7C81
AD55FEE036634EFB88A2B1ED19E37CF0B527D14F008E134FA0711FE40BC8A925
3E5027D8FE5FE873E98EEF621E059DF969C14E19E1CB4EB43B64E6957AEEF5C1
7D832383CC11E5D6419158E6A838BB3106F54CEB953F0C16D9F1CEF47274C469
0FA0620F50E5BB14A0F359C4C172951461E884747D6E5D29114039F59776D65F
0A6D9E5088AD245098A9CFAE5B44CB364AE68381B4DD8789E1D35D4AE06A0511
07EA4D90D3FFD25223604AF01B5F46C739DDC81B47978F0BDBD79F9A6A53DA20
0FB56DC483BBA3EEA535009B3A8AC750DA63EDE128761D164A9843955BBFEC72
13307B78378886F93C1C822EFA66A75E01A68758FD97C5928BB2B1DCDB63CA10
90BA2CDF850F9E1A5C5856D41D8FB730E048E0EA435515BF52FD453207213F3E
13FC83A36F2D86CBF4AAC4ABBFA39688BB222A81685006706434FFEF6D6EE0E7
0900D14EF927A2F0C3A8BE6E4CBC44070FC79D85C273074A7E31F7C63BC4DA2C
8E1C1CEA7000F63CA5BF75389D057C364EB8747A414F55FB4FDEB79A695E89B5
B2C3987863CB4B29ED6BC20B0687BF97346B111AAD8EDD835B26DEE73E360BA2
4603A6B42398895F1F95D5F0D0225D8EDA64581718ADF5FBD7277E57E9919BD1
0558E3A5022F158043BEB6A6820566EAD71325D69BF3460E9C3C7E0C0F1BB457
048ED47325A221E91DC93BC429BB517890A8F857C2F54BA01FAAC221D701C672
36E08C7A56288E339620A52776770935A6A193FA21A3DC25DEE1FF03955E5671
C075DD53A5A82FE7F773815B2AA555BB03CE19B2B72268C40F772CFA2CD7A598
A024222D413287F7481B9AC0E13B169DD71090499B415AD8AAFD99AB5DE2BBC1
1B40ABFB7CE655281EAE4F27B1E027C2A23E63378F5339306A9F79BF2523B16A
083F710C102E07B67194745D7159FCDBB10B6459273EFD03520F2483A9E6C0E5
665B54CFCA5BBE96B39E69D388D9229C1E361D6C47FF84A49AE0C70F71EA41B0
2E1DDF2DE8630CFC5F2C8AE1E5BCD78411D194A831BD263880153BECC873A9C7
1796A7807E2345AD02481ACECEE7243887DBA28E28217389829F4D31CECC14EB
7C948E6E6E104A080B9441E0BC3624493ED50AB68A0B22A779D7D816629D1E36
FBA83C5BD9BC2C57BCEA7F9A6886C9F13EC903E886DCB7291933374888A65847
44692F87A67A218BFBCC8896E57E4DF116E24E0B2C3DACF2BB4D4F11C5FE4243
E79E7B7164A60BC32326C2D36742C0D71D21C63AA4DEC82918F11F62984C5F85
3516C1419DF929D29EAF4490A01F57EEC3A27B18E547B77AB0DD203BA47E66E3
B8932462C277481778614D372B043761D928D66FCB9D760D3096B5CAB2A1DD50
A23E443D8A30572DD2A12550B2D61B5B8D3DA00ECDF9FEBE424C8D607EF6BABA
6D1482E9C494671BB7A2FFB0FFC63B7D9F12B2F4A61E66537C09C6F27C5348D0
4809C49896E18909ECD6892BFD2B0D73A84B6E682E463E69702266FBCF04AC9A
0CAB64076EB9EA884B2F5A13400556D1D07217CE900C16506F570143710E9AEE
87EB93711F2A49C15DD57EA42ECA4E6E8D58BC4A195405629408224D07020749
9DF2F43E7D52E442E951CEB1C926563979CAD433B91341797AC8D4E9842A2025
15A73ADB4AEAA456ACCF3FA9FD5C0D7DE2197E5C96CA1E77BBDA711E73F6CF45
F31613A24A30023BEA9A207E8E4E119B5356CED765F73F6935478D5133B9E761
4922209C25478E0A63F78F3460EDD4F64B4D2A5B3E660B614F62A53AB284FAE1
FEB947C50CE8BE18F24922B066F392E4321F75C42A86C70CC8E4AE8F6F84FC65
3EAE2D03CBEBEDA67F83FA8F1322A68097441DA3511D8FE63394AA5E6B7F441A
D12126999FA71ECFDD70607C4FFA2A1D6C138C8A750A892DDAEF50284D2CEADF
C997B78F9AF18E63822DA479E4279465A6CBD43EB5B5DB8B72E96306900A09C9
002478AA31E4240F13D73182F04410A119C72285F06F1773BAEB6FC8CD2EAC6F
0799C903D18C64FE378916128CCEBF8943967A33F856A40BA5B302782175203C
082BC703ED67F8956F3C757799D61A801701C34E5F0311D00A7FF64F31505AAE
C9170516D38C247C25CC98E436D6B0129745977065519D41FEA05DE277A2B681
6846BF7BEEBF9D323B549CAD581F17DB11717FE745194FD74DDFA29EF38C14A7
D31F074565A14EB60996DCAA0762F3C701390274F4A233B7C21EABC56271E0D2
6F4D8222E82DFAE6D7CBDB0C2F268BB8BFFF2897D51564ABBBFD16D44724C916
7C7F909DCEC3005810B42BD9CA1B33DDC4B3D69A6DDA20E104C5BAB68F3D943A
9B0E24B8327345DBD550F4D3A85FEB2007E09F408B6FB0408AEBF36BB9459C6F
41B3B4EE5B63571F18E7077F1990611E243FB8A327EFE9CBBBE8F9B76ABA9F6F
7335FDFC57213D5D25DAA9FF60D639DE068E6459B14ADFA9FA485D2B692C522B
F8E5FB4531330E02C9A8EBCD6C3AD71A1E40A4D3F1B93134816B1E636A2327F6
240BFF595E24EF8941707987E8E672F486552480FFE3D56EF1EC01FC6D827091
334762A700EE46CCFF0F8222069A239E9C090C056C50ED33CCDF1DC4CD54AF2B
27F3898D35DBACB95E33FD81D89FFDEA459395AEB1FD2A2313C4619C3924D6CB
4C7156FED518164901F83DF3BAA6A0ED3E1145BF13B94FD26442237EE2121C14
F116A1114838B333EF11ACBCEC26CB9945AA4F8F616FCC76E4B0D7BA8C76364C
F343FDCB3945F586BFB542B229FECFCD917788FCB6F16B6C1C40E3E00F45773D
C20480C8D6BB75756FFD8F5C7A6D66A69276CF920B7BEC2E368A095DC1E3A421
F0C532042E003906F07403A54AAA87A7CC1465CB48ABFD9A879E5B8A847E9323
2C034664E2C43DF499BE3810C38A4BA01A31B5C80138263B8E0DA1FCC4238D71
517DA16343332416C4BFE510F180C63CD039D399B1D9C4208BDE9F2A8208512E
1E9EB36A96421288D8A846DA9F3D3B8DC89359340E6D6E4BB80425136F59F84D
8B2D3548C5EA909142D33AE8B2BDCC9705D1EC8848293ECD9599CAADB700A176
76B96C607DC49759734D8F1EBBF10A7E363AFBA180CC2897C588A09FDB14647F
570BBEE55DC7F2AED3E75B7AAE70ADAA461BAE73B4CBBA029A5BD8AB7E658340
5263C510185BC34AAC67226177133AA7CD431BB67C5261595CA2A18E0FD97413
5F38D540014D38ED97AC4F6058C1B834BD195096C9A61145921EBA98A70B52C5
BCA89089361DA0D7AB8B979BD91DBF43FB52495F20DFBF159A58F3D4BCCF3638
857C25C73B78F5C35FF0DD1AE8036C3620836DA8BB5CE31BAA722DDB36BA5642
CE4110C57A3A4D95D4D5188EBD111ADAF13004B95BB6A1F91C919C28F67F64AA
534A2AF512C1F2BC5BEE9F21801512D2455DD4B94E0C5EF66E5F4252E5511A19
172AE7E16B6E84C13265E7A78843F80CD719C44633862B102690CA956190CC61
CEF424A54E62107D2ADA1C19405B9CB4C39694E52AAA56E56F82678A4327EB6C
A34EB5A6A8B1C41ECCB9418C1094CBAB96EE405DCF58E3A569DF07092225A683
511770EAC39ED55DADB32778CAE943CE6E928D5C8A44F0B691350DC0E4B38E4B
5B5868A34E643E6075C7A82C17F569049E4A119632C47683095845CE5281573D
CCA18F596C2A638DFA3A2A0E4088072A3C9E36431D9A9656D60135F7B7941CCD
EA0BC0168ADAE8A1716BCAB61A1FBE56DE145488C0306C6EE589C2E71F0433B9
B8200015BEE977FEA781C3B8034170F9FCF6324AECC2554A56897CBF7F8B7139
ADF77EC4DA414C2CC5424CBACBFF09AB4F4962A697CA30668A1809DD72B71A4B
BF6C618A4EE64F0673FBCDF58BAD19C9CFA9D528D104702E4AD8F19711F44C14
87A8A062B0E7D307423CF2852AD05690FE1912DDF6CFDCB995609788A176928B
EB2B6E6007ACE26260537E178406C35173ADA131F8880C15E753D7BF2E4BC089
2953EAD550817FB700822EB157C4BE8DE18B2AC08FBC05291063120165B4379B
1A4DC9D967DBF6AE8C59B9584224CD65C6361095861A84EA1B7A991DD837F2E3
96EA1B598CDC2B459A81B19A090AA25E8D0036616784228ACBA46F5DDF43D3CA
439B4506CCFE90F24ED9CA8B3498FEDD429B1B1B8550F2219E7EF9CC64983581
38BF2645040109A3D2D98CB563D4CEB5C030A7D2F6DBF55063AB7EEC2FC100F1
26DBD977068AC186C94D6BDC3E849EABF685A634431D9FCCDFCB4A1195C76A6A
D5138A35588B794EF9FE03CDD26508432F9ACEEC0C86CE8744277F5C32166AB5
39082917BFF7EF652D589681C60B99DD4F132248742876953526D119551A8B29
CCFE9D9B35C9A04CDB15B160C3E2B285BBCFE14C06C490185488510704D87E32
41AB1B0AE52F898A234931F910D5DFE85FE2218C80C58E34DF3EA0718B7C8E2D
6511B059092391D17C997D66D0491D2D29CFA7F4C88869E2D53DB8DE6F4258E1
A49C6B865B75EAA21C02F7007978FF715C0E3EF03E39BD49697D30B8BCE8B934
1D2DAA72F7FDE1FCA3BF72DB85657F4A3558D4585AD1918E86DAACB86231F261
EBA0BB60C59D40F48DF92AF2EB6EC67815D27BA9BB672751D8A658C45E07B955
8E776E94EC0991B31A4BE92420B6D9F5E6FA1855513B7131C7A04B00038E48F3
936442CB14BD2C5658C938BC685FADEC8C6514A728C83D7E00DFD4EDBF4044F0
E247D957956045B16131155F4296C5D97BC3D1F1C93A6E82767543FEF3277C1D
AC4869CFA865B49FAFAEE9506D2F10DEE673E177D6279ABFFF8E757851AA4497
5855AB9D1E3310DC01B08B5CAB5346609FCB048910F3D70211659CDBCE05F073
3AF96804623A11636472F5845AF507C8EBA6518215D75034119AF4A4A9D8A9F9
24028ED77937B477662CCCE77BADAA08B20B9392171DBF9964BBEC03013F324B
D4B1E3053E4E12EF73AD5B6DC764101CD4CBC3FC2A4F1010CC1DE442DDC48044
4449DB76A321ED1517E750F551AAC934621B52AC90EE56F9DEE0666C2484BBCE
C64AC7004C28C6681794C0E2CA89BB581FF57DDBFF7865063A2AFC57C76819BE
9B78D0F4DD3B3B23D69A58E2C82C1981EB8E18B5EE80058433952B6985256120
82298F0E6E36968C8C0932BA0E02AA42C71D9E27302A88E52BB8B1924F057B9A
498D69CCFBFE7E3062895E706E20DE8096399754FB32677CFC456E5CBE116BC3
DFC67B18E95621D03FAEE1831A15D5205891AF008F869D7AF5E4EF1989FD377E
9724F1BD2A06FC203245246BE57408FCC7B3586AEF5F4BDD49CBC31AA72B65C3
BBEF8EDD9B4EEC32CD7D3C7C2FEC51FE0DA9A33F1C12A392750F3D1D4FE99AF4
D9A1772129A3C3490B8B4529805E0E306E95001663F0EE156891E1537A7E03BD
98EE97FA23D768F48EA462E9C8ADE136814E40E9494038C8C4146D9E400A2CF7
0467645A2898C551E43963ACD7E7868CAA4488EE815D40E28CA54BDEF9122801
8A6DF526D5C66A9F11AEC07A100C7CCF00A1BBB7177AD139137E1E992023356C
5C546DEE5401E08A00FD38A70551FF9C8A68CEEEC3E24A8A8D78F1B9CA757727
B2A7D3A46798F5F975A2784717BCE6E4D0B66E0000BA7FDB864CFE04BD7CE607
0FC5EF576B1DE985AAAC8126AEABC40B64A430C0AA868759E4C0A2689D828D2B
468A3858BB337F0E6842EC5D9C0D5D2596ACBE7E4BB9B5198903BEE40A9F1FEE
2CE3375D67D77D11B92C07A9CE1FFEC4FD57B0891FBA2E75BD5D5D17618A9ADD
DA75ABA8C339C5AAB51AB884232E9D200A40A68E4799E5E842BFA51FFFCEAE9E
1A97661A47326B6308D41B37E844E66954DA9032B1333396FD545000E364E7E6
A79BD95977419E006D51A92C2CF0046A5F542DBC264C611E8BD569D4E7894668
52BDABAADD6B9E6E1B71655C46DE2F505615AB470D93AC31E7FC99288D9FB5EB
919A1D92B466676E57429E6BD74FFC6257A2E0CE1910FF41A7B70BE8A29332C5
DA24457DF7F2AFBA61F8B754C7582A8C089F5553B7617187C50EE0D0D7941F08
41112068656190221491CAE0922A3C733FB9D45F81757CFC8ED6BAB5630EDD86
4ECFE0D6959D5114EAAF1612C970CAA2C9472CA9736B50613961F9E542A99E1E
9EAB27BEF2BCF74FB40E6263AD649C32D00F99B504DD1602FBCC202CC8046C60
9E8D29EB8FCDA4F0323901508EC6D0D3A034E320755C9FBA42428460AC283786
C0E4C0F45DA2C8C78EE355C3B5C349CFAD8F885A3D4CA30C74613E0205AF23AA
2719BC14013E7859D68CDF0BDCFE954601924C473B761EA72FE8B82C2A961083
82D4DE8073A483A2C65E3AACDF4106A11D6366AF685F88D99F32705FFB5C3190
91904AA6F8C52B2F1E9E66AD9E7C3C3C96F6FD1D2A69856DE6ACF6E51395ED67
AD441581D7A43EC3324CFF3DAB7E17D9D291D0CF9CB9086D116D56152BCE3296
95FE8A830CCF318CF0DDD078FF2E319A37EB5CEFDBF36492D265A24D538031F5
D1B00F3C41E627B1DB9876EE658C50AB2BD9D2B92C897D83ABBA76105BFF7E79
29B8B36A0F3C3F8378B427A87086EA10A597E1623529F8734C0E096F1BCE149F
8B0F4C80FD9ED2073D21FF50B841774BC20AA8870AA9DB4ED19128C657C8098E
D5BB7691BBF8C1F6ED0358B085054144022BE6620E3BE3BCFF07C029D465A074
684244F63F8367906C7C4648EF33244ECEF4405FCD839685C2BD7D5FC1353416
8DDBA44083519C586F6BCA610DA67BCBB18285BD9C0C838711A76C5B5D57F356
EA414904DCBB1C1FF12E5BFED5253156E3A76B45CE938395E129746ACA103A34
C38A7E6808E1BA082060EE975BBEE0EE2360D53A6C2EB0393A21C2984E95892F
8AB221D586720A71FAFBE2C80951B24AAACDF129B2BB843A35372A2FAE18AFAC
C74586D3DD54067F7779D9DA069D7897314C617685D05AE401C710E8EC03A64D
8C462D8E458ED29A12F56A9D3FC1A5A59BB391F99ED1BC64F8850BD7F2551F3C
144EC0BFA8529787A6F7E7F29C2C9D31F4094F9E218E053ED37FBC0EB204AAD2
53FF338FEC59B284251A985F7377BEAA49275B5E62BC871BCFAE9AB64224D592
847AE57C85675CF04BFD1410B56E616F68C39FF5608FEAEC6E72A40B22AB733D
F071D6B92B62F165192F48C0198F2957A103CB2F0D1F55AA122628853277D256
C2107390CC3E2D2BBEB1220329E86A68680D1F9DA963B401CDD3C429BD4CC3F9
6584C065FAFEA3EEC98A137AEAE50529E1F15174DF4AE9067EC4E67725672D65
4D5081FCF2663644C985191135F0156722F0BF1DFACDE24649CA49CBA47F93F0
201678944115499724D8B9052FB4F6E0375B8F8640A75773638943DE96B8C4EA
EC254CBA1E05D8C31B9C3178133782ACD3465C5CA2D45C688F3CDDED343F64C6
CAC65D8218E75ECDA7292A0F2FBB4F6B9DA8379C3AADF23AB9DC687ACA989BF8
6F24F23F6F74F71AD0561F50EAD7CB37952D1A0E9F744FBE8041D1C3EDBAED08
9845046259EA79899713DD1E567F28531E7B25EEE41EAC3D35A3AAF9348E13F1
671DB099C4BA1079D778A6FA8FA13E04D067B55F84954495EA3D40E2620204AD
69A42D29B4D95429C7651244276269FA385532E9B57F1C2D2652933D4F316B85
7DD80D0BF6EC0333F920B9031F7626389BD3E392CFB2EEDE173452C0642741F3
C72D84A0DB18152D56A72ECE236FD3A3914574309A3384CE66C909B7040538B5
E7DE80B6DE055DC28C1B394FBCEA0BDDFC44213AD960278AA498A967D890C295
77ED868877C03C1100D8EBF3CECA4AADE5DCBB3F0CFEA4E8A5DAE149F6483523
881EDF02DAEDAE3EE928160342AE6170A01E13666A84DFEBC5A5DC04BFB1D49B
F5BEB4A8F19D264A7F4B1C259E4B1010AC355CD9D1DD0C6F18999CC47EB3AAC7
B89EEEB9E2F9CFC6BCDFD9A438C10C8C604E64AB2F9488EA7B1344329A6DE47F
D59BF4A2987AD80BF0054F72ED0CA0451E5D8A813AD6697E53A43ACACCADDACB
20AB6BFCBDD95D322B8478B7485BE9C86F055D7217D0F46FDC29D08D6CD71B9E
1DE1C50C1C3C85C14940A830DDD392F93F6CE1294B62411E6DF77D4A4A4D889F
D9D7A6AC1A896380F2762679E60FA6E763176E1B2512B04580233972D9211954
9CBE53B0896667EC7ED9C97F909B8B374E4975E93D9FD32DFA0AE84699D182CF
6C029A8E6564460CBE4D5EE06C24C4F502E4EB602446673621049928B01E78C6
FC5FC52B1CB9BBE02BB81F2886C558B9F2EB0504A2F8002B1B13E2A496759FF4
2496772170C511EE704B4308A3727F64393E392FB6E0369BEFA855C8CF4E76AE
27517A9B3ACEEE42F3101F44998749B33FFFB35AD715BB0DCDBB2D35B51730CB
8CC9D14A39917EA3055C85D171C0378299712D1177AA7469F470279E73A0EB1F
BE7B70C8CE0AE57426572795B0826AC0D3E445C98DBCFBB63EAE33B6E75C7E71
157123DE44DE684057683F923A2126FE2A788552F7A3483384B6E646EC0415CF
6D4002CD9FA8779392B0A780E97EEBD2450DDD1ABDBA993B98A90E50CBF66121
08A4F43DBE0FE09467C33DA6A1C61F02BC5847C65C187E5B23DEC4C625C286EB
9AC7E30F0BEE1991402F2BC62D606C038AF2B098A79351897E7B6222B6D73635
3AC4E3D4C203CC50342491D2F70A528226650D38258FE2EADA6E4E1D582F4723
F2143CD07E0E6958254B6D96C9E5485E26B07047B80849C0A77BEDA560ECAE3F
CD7FF41BA0AFCC480F261D7CE694477F749F82E5B4AFFE12BA90C032157C7688
7E325784917AE505A158C5B3D37C1041ECCA0BA811777B5019CCAC36997DFE14
2D7DD000A0E766DFE0F272E311047B6227781696AD545FBE5A80E2A32D7F8462
912966E9E97A67D036FCC3FC5375A979B78F473EE7AF6AFC189BF5E14FD0D21D
656B3EF50D47E923F43BEA1BE16CC04EB2A966CBF4FE707BC7472D56ED0C13A9
66448345074B1F2C00C537A79FFCBB1A784959B43E58965C260A89E7E3BB7ADE
BA9C882AAEE60A026DA25D51A46651A1EE03A2CA61DE42D78AEF016749873529
5CFFA292D5B7A1FADD93BD3CC207D8623EB59F6B3FDF302403A9C2D794743851
18652EB37CB7021F80792262A4D2F354389D1ADE3C1E4BA1EB8855BBFECA191D
4B80212DECEE21CB16BE0DD2A5B6AE12B959415091545A96B78F6F4DDB5CDAB0
611B3248836DD9E54650EE2D2F3EB92489594667525BAF1656DE0175464EE264
860B6E310854C80BEC744D529624024E35566FF0EF71D60ABD9581F43AFD7EE4
A7099844282972DDAB121A040D3D7CC97870F88C3874BD5C497F391141F2094F
8EAB4CC90B12E10F8AE6DC2081CC4C4860CBC1DC3427060C9118E755156C02A9
9A7EF38084D649289E4600F5A67256788F406EFD36886F531DB9D7ECA48701B5
D4511FF86644AE56F46392D5804039C0FF5C49D1AD996A67AB0914D83D859C06
AA049CA26AAE7F316592E7DE134F775A835D46A69D1C4BBD6B53124D7433EEB4
4C724ED69C8697D06A5246DF0C49444B5390076A43C82C91B982B19D7AA8B615
16F4BE3585A899E98988CAFF8DCCEBF494D5676912D5E868E3877779F910B174
AF933326ABB47935AC900487A2273F6AA2BF735C312FEA9A1AC7289E4B43B953
D2EC568761231C3119E073DB7DEED7DC4A04968B69F792644FA8B627CF923CFD
F8CAF8B9C8FB9AC27C8F2C2F86FEEE11AA06BBC0027C40E0F9DE9385F79D5989
98FCADE704A1035C780BD03AF71BAE6A930CD02B6C4D07D6D0998EA18EC7CBE2
73105CE6378A2ED913F14D20C272D14060533ADF2FAB44A60E6395AF687EC88E
429815282D632366039F37D3D55E93A63A397B46FBB2B6757DD564C0BF55E0AC
8EC66E031CE51B2D7D27AB41A21D646C236DDEEF1A23DA64A61F0DBF36B86A59
893F277DDD906E28FFFDFAD7E4B7610E6A108DE7F71F178FC7448D4C2E985072
E0811881511DDFA4A3C730DD7CF5C1E29104673D7270F35D580E8F3BA9BC94F1
31ED0110C946D421B42532E5BD4FE3D8B242EDF647251781ED6CE249DEDCA4A1
FC94E0ACCAB225D733E123302C0C9B054E97386886E8AB5D03167D702466832B
32DC035DFAF601E2EB6615E116FA9A44B8D0586FACDA34A0D0DC74662C3F4FA1
736A4D67CE0650766E29A79AD6ACAE003485A4C21B389F45F8022593DF513D31
54E07738A2E39D6AC9429F1A359112CA28BD92DC4EDA5C72C6F813D53F1E9C37
34B81C2CB5207702A9A0194F0DA8D335635EE2174E2DB99DAE9AF89BEE304763
BBA1AA81F9D74B24FA7EACEFBCAC72DA4AF7C3A7C06483A7FE49E9118C94F79A
DB280E5CC383595D57C51F4C969C464C1CB1712283C42A77AE7874BD4EE0AB63
64E2FA747EE9A89161F93F178D7A24AB2C747B80BDF0816DA99795CA28792796
8E85C3FE71046BF6F87A97CD03FB8CB1FA267164742287C9F05BAB96F90F2374
8B2DA4315C703763D6B35A4836A2AA71B39B7AF614B09A3D9FE54E8B1AADF323
785074E2F023CF26547355053A5B40A0BE90965C2C34C42797BA6CD6DB3BEC3E
2ECFC061F2F9BAAF636F17EB88960EA70F1F0F037DDF2061921A72E46589CC08
EA87EECFDF36B819B07306C00D700345CA2E6113E992D2BE44DD9B12DA394FF3
5F44EFD4D133019C4ADC916AA6F4F5FE8A642DA2E54F42220C01688C94717B2F
1204BBE9A32B02C569FE47B75784AF1D9300E4D8EC13C0B542DB50991CB26D44
DFA0957D4DD0665F0BB9EFD60F9D0ACCDE739B576500ADBDD6E0D981C2149AB5
368FF41481D6B8DE8662E73CAE558AC3FDD6C48D353FC68A77014365407D48C1
350E58ECA8C0532F762F64A11900664ED4E6D4DAFDF0C64F9446C356216312C5
F614AAEE0D8590A3A26854ED51C4A9A1C13E40363B10533A8BE1080729D86FEA
A2193FA6D6C34422C34643DA9557ADE417810A48AA2D73D0E0E9674BD4C83958
81C15ACFCEBD5772A959E2C99D13BA11BFAFF1112E2CCB84677CE03DA00972FD
3106F8FB5AEA60ACB194FB8FD49395A70058C942F80C2313118CDFEFF258E569
E39372E34E3FF5AD87298C696722D1D562D4A8478555769EC2C44150D849A0C7
D966B2EE653CDBDBE9C8F352887F8DB03D70F9E692F0A5A3160110CD4097E3E1
FFD0B18758DF9ADE231B76140270F0A05D53FD964DF5CB87A377ADBF202718B9
E47B1DB784435B7EDEA4BD19388DDF3C5B474F5374D80D469AED90BA08D8A04E
A2CF32810C68ABDAE536D95D46BCDAAFAA5A8301F7DDCD3BFE10B6C23F1C7ACA
39A6117CE4DB91E197AE348634BF44B2108CE10CCBFA1B838169A4577A9B225A
BF538D4B10A9C5FDC801B144AF82BBCCC3E63B027A4C3070D38586C67E8A16C5
60DBC0D4941CB6DF6A0D1E7492A6DE009C0F464678859A03070758C38629FC34
410FAEDB24E5DA8ABA2868658526B74727FCB164F21405F988059A1BCCE6038D
184DC74E2E186A664391B7B84E2281ABBAB44B8B81D92F63481CCEFBF4264ED8
900D17D9632421541DC60BB39BB060ED6495AE98F6798010F76FBF67CA47E5CE
09E60F0839874318C8389E298F554671CE327B099B0AB9BDB8192271B478CE0B
38151243D996CA5AEF4354211E3953CD7AD90239C1FFCA061A21652100B8E2F3
DCA6DAAB758BD7FA7D29C266129C91A2A5804ABE9DBD230FB37711C0E606B1CD
01AF00122F9A948F54FDFAC13A9C437607321D3E4C10059C1091823B03DC61BD
809BB14C7D4FD2C4E6057BE5F5C51A242002726250A2AB4E8AC7F70BCD0AEE3C
4CCE6E1793589423B942DFF7E8267BE5FCB0B209B090009718A49C6D7256EBE0
D843690DF3AF3420D94859E53AEFC9D1DD75BF4A02A4E2C44D18720A9F9D707C
9D341698A75314282E4770738AE96FBE5811DD097EB0065B1E01ABF5E2D8428D
248B16047FD72F0059E35DFEF5A8F444C41D300E540D53723F45F0E20277695C
CC2E54A25041A959AC738AB6CDEA6486B7EB9914CE42558ABC90B623AFF1FA2C
B3EE64202FB703CBE8249A14C37B54C54CD69DAD2A5C2183103109D6F82129B1
301EE091D9F7A4D345114235F4BA289528C04940A830DDD392F93F6CE1294B62
411E6DF77D4A4B7EEDDB6330756507D8BDB3F97266E6A31040AE138A8469E758
4D0670E527BC95332D13B3980549FA02073BC0A45FD5AD5AA0468323052D1205
BBE6E794D7FC7861CC42DCDDDD4A4A3EA5B0A1FA84E55ECA7617A4112459597B
716E81960CC0321BF3AC8193758B4610EF33F894F09C9ADB7C4531253BFAD318
0DBDF8DEA31BD5BB3282B15C22014FBA359AB5BFF346F5DDB0BD589A54893931
D3F46EC04582CAC86BBA5E5E515335B3ACA75A5A7E5F16E27E8CBF4128859E2E
97D48C02844AB8D43C84FB19D8B311E2E8146C7D3D076F43B3F9EA8A848D7E8D
0E219B61F71B5D50F4DFB79975EAD0E794E842C213CB237B187A7B54F41B5443
3526B5BCF13D2DF1472686B200B23FCE6AC13FAE056EA1B304C5FA713A88B4EB
663FD7959C6D491010F976D4C7EA2FA6C18E22DD503E8981DB670CF5CBD09E17
6E265CF148A20091BA8B06B993088E210C91279AAD5922A3546551F93A076B39
3E4219E0EF172C72ADE99EA91ED60447A31981F8F13BDB8CCAC4361557D938FC
4AEAEA9E88AA0FF61ED04C6C105F0258CE2084F898D7571091B18B212D48B43D
6007AF07A0FDB7C9FBC784A1C9E0506142709DA99718F36F909299F3C570E743
FBB19F4F841939609B3A3D2D388DA4DB9FFD25C55A4F377E53B352830FA336B8
CDA7B5752C68FC0637C661E3ECCBB47543C20271E2233F7FBDA8094346C06AF0
1FF1D4784AD33491DBFB17AA6A4C7C8B2518C12DD5F849263DA8B6B2C38E4741
21239515E3E3BC6B36475154CACD25A07C74FEAA2928802611B05C9CA0ECCDCD
40CE7AC49715D8BD0A6803D8B14E755118F43CE13E54945B0A6BCB5633B1D580
346D913BACDF1DA8EE9EDC8540FA56F817D5C135D554004829A6E4566D3C3D4F
50453B4C997ED2C8725BFB415A30E47844548A823BCD7D0D5F3A1B0B5789DB78
6BD92416107B1E59084B5F758E509DE66F112F49E63A16F60B6795CF0D93839A
E2FB6D0B74207F0434C9599D055D786DC25523AF3CDCD9D834D54D210461A17D
F138F3D9F5C7AF9CED4243271A1FE1B018462BEBE17138AA07373412B44023BA
4E204AF4BF3AD6DC4CF005D393672AF65F0D015C86E975DA6622238B837FDE02
71B310BDB076E1E5D2187136E1E88EEDCACC0DC5B4F3268A8831F3391A7B2A17
E1A8397AD1D30455CE9BCFB29BFE08071774366804FA232E4AE9688E40E61987
035623AB8DDEC101D55543FB93BA5928AAADEC03C130570142D6849BC5B3D044
5B30D984FBAF9F56E6FACF7C07F249FC058275A863D921A182DC7C205A93ADC9
40D3EDD5D675EE14CA60D33D1C57855BBEF5F5B024656B80578308ADA3B73C7D
92DFFA19F1A79AC9BDD3F2F88D9725FCEA44A75FEA44CE4C991729C5792E1052
A4216B17742ED304B2996DC77BEA528DD00039AA51261D5401AB2ABD3C25D5C9
A2FA8C392A82F8DC836C8E33A5B5A2FE1B6C18912CECB8E244A91E1AD8064357
046BF2F498400D6D7DC137A904C96EB7B3CA2E65F64E840DCF69234B15780303
EFD10F9B6887E40A5D78E6B1EF8305A4FCE9C00A5845D1C7E8F51710B4F1A4DB
D8E6BC200679470F5503B71479FD9AC22E7818EF7BA80719844ED6735C3EB876
E244D5CDFE745A089F2679B720C105764DA0F3744E683F88050A9CC76AD73A11
DD873632665A06A2D13141E35806D8F53E8F34D70DF5C324DEB566724FCB712F
E0BF7EC9416F02C2C3116926FBA26021B38D6E21AB7875CCA19E45CF37211113
56D1F3E208CC54E7684A70232F0EF82F448559F8CB85DD9909A74AD694DD99A2
3A6BF1BBDD51D96BA4A5207AF1044E917186B01F946EE08ECE7455EDEA610D0F
B69A58D32F41B39AF49EB624CAA6C346A08DBE65B1C054C0587AFB35100BC76C
C64E05B36DD4226A16A7822E6D523A4B3970F587F38A0E89A05611B3A13BD144
BDFA564DABA6CEAF8A444AA157E95381808E974D7CD402B571D2CD823D1E7014
31809B56C504BDB1B7D50B99310A0DAF0C020C04EF94D0D2D096B734CE3721C3
71C213B6AFA0E73C0622E2AA49C4DE54A05AFB1AA6C7CCFBD9F72150DE24DFA0
F0D5FF99461F3A9DA8509E7EE6AB98B4BB88F67796EF2B133E9F6AAE0CDA18F2
428EACE52EE14B5FE74DE6D3E114246049948C187FABF401324F9989DB792F77
814729157208E3B37B9CE3F1D0C616D951BA702DBBFC2C1B953BFC6CCA78DB0C
094BC82EC4F0BC92833AEBC6E11B70E1C0F3A18E54817F7BDD3895DF79E9BE61
9F55E9CEE03B1AAC8C7642DA07EF2F28988112405F80F2BC8A63F2CF41C075C4
DF19A0F0AD8A46F5BCC2BA12C4D68D803B840ACF32FFBFD9E8DC6ED9FA9FF379
C70C8E439578725B3F51746691838E600146F6C88E1BE994C9B91F45C562A5BE
309D5D926AE5C673625845E1981A3316F98A77F4D100499847E1102CC075FA12
10881D95D6EB2E7C492BC58C366F903F717C1A9A37719070DB1E340FB5AE3AB8
F380A19F5FDCDCFB687120DD2BE5305363019BEC0F407C2D4DA38EA432F0E7A6
D8221F23B7C33CFA77D83480566E36545DAB1BB0423C34755F88AD24878354F7
52B9EA1278E210D305677B9A4739C67ACF82AAC653B48D8D7589DAF8148D380D
77F8E7DE4DAE00D18C95C7E50A7AD744042B565746C211F30813630C7EE7DC31
054612907A0811E8EC4075D24EB0682E7602CC252BA8AC0287850F9073E30FAC
A80736C0BF828DC7E5A8F8F4569CBA4C2C3F91912C485C5DAC43C435E2F5527D
647EFABA9D63753FAB6F4BF4D7B35D01E3A198153B354914BA8E4C0BAC128B7D
4D61C2AA87093F0D9188350856B6E34E1109B826A3F23AEBD548E10C71A93759
6710EBCD5651DFA0566AF29195C653FA085F712258B8A1B9AABB8A860492155A
DDA8E704EC5CFDF86D3B00CA7934C295363D8ADB04340CB71315D89A0A06D4C8
C61AEF51A2BD2410FF027C40E0F9DE9385F79D598998FCADE704A100379B7D9E
02960F7C0D013CCE063154E006EC3DBFD9106F331F128C794D9D6EF7E18E8301
0405CAA3AF558B2772A5EB6C07862D3090AC8A81D8019BF968EE312103282494
D6472D885F3CFAD49B63B96DA5105CEC17F4DE04D7DB69822968706EB94D1720
FB2879E596D3A7EF942D50173D24763E96F2C385B9F9C34E0382F02EB8C8BF9D
3BACA0FAB8F42D90434A48E3F4993DDF5FDF93C9E21FAF162C920C27726380FB
D329D29ADDF290883487CA328A0102AF3247216D8F96EBD8D1EC18D48FEB29E9
68BEDA93F92B4398FA2E1D6CE1F398ACBABDB5DEEFFFF4DA29E095CCD0114C8B
49875196489903BAEB958166DA9C2088BF9C76C921024B55FC6D5DB5BCCCF772
26C214AE81832A9157AF1175AB47229D0F348EA969DF366D3E164E497528F422
DFFD3B72A168E84519D138C233FED4D468568036B06C33F7273ADF8875EA0E53
899CAA8CCD652C4D5F26A7E0A25B9C7C4F5C4199F13DACC7D8F943E964B009D7
64D79C3C26CF9EFBA94B4FBF6CFE9C75C0F505BE6261EB9A2CB750BE2E146ECB
DD16A1584F3EA2AB3D9A3783D8743C3597C357ABD25D6B8DCB78E81FB5B8D5C7
0217AA3648ADD641A983CA3BCD930955DFBE0DA8B9619E7108A8EAA94000C80C
AB2AD7ACA1D2D0827EFFDD05D4EDE9C2B589686F3F263BC002C8884F38F3BB6E
09768DA7EB3BC1496E363543F04DE5B6F6A9812C7757E990268FFAEFB175466B
422BCC69E8B69400CDE8AE2CF394292067CCAF4F4E32669BE217C096E518A781
20259FE222179A0B410CEF30DD249F2A5D23E5E47C9ECD23288E6C069F496C57
3ED18C446A9892616611F8E6172063E0FCB7C1518524619525DAD95ED33B70A2
CB2356886E9B27AFB10DB195E5EDDB1006AE12755599CF67E27E753AD25C1FC7
5E2D35E33B794FD8F19F03162747FB4086DE7B1C1C800BFD4F229399392038EF
1BF9E659792F783316889221A826EC20ACFEE1E14ED854D3DED0148890086099
5F1623CF43A1C00109AF4F59B91B71B9682CE60E17947EB7915938EEC8A66836
140F02D324C7B4B70BED56A8FF4C1A2EAAAFDAE8BBB5E8E952B17C07E69BBE73
C205BC659E191366CDCFD2BD52526414BE2E70272CE823A43FB0D77B53B2866E
7F21C96896DA4DEE11C94AB03CA1A32018C4B034272D9B8876DAF47EF08D2DB5
D2936909F3E8BA0936E751B73E754A73DF6685DE51FD6A9989881AC4465318DB
FF9E0E5E13435B4A830B5E77C42EE8E41CD5CA9BD0C6E714DAA34F8DC7594332
E895054E5FD3DF1EA44126CCC0345812AFE08FC784E7C4C4287D887EBAC1683A
8CE358ED73989053E0F420D2D4A09E9CFB29726F821A7787E5F817FB905AB350
D466B4D20EE18B679FC1AA857C307C4D2AB54597F47496C8889CF6CF6C6E377D
41AA9E983FF07D8B6356917744AFA6F67477386B69D3DE885AE1F8B52B0FC756
5D358E8D01FC5A9066DBE8E1FE86726B646E864416CF2B7E1E9366A136B9837C
80FB068B3D2290FDC35C286E35763A02A8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMSans8-Regular
%!PS-AdobeFont-1.0: LMSans8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMSans8-Regular known{/LMSans8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMSans8-Regular)readonly def
/FamilyName(LMSans8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMSans8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-446 -314 1510 1154}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123833081E024C973A102E5EBE9986
D95806FBDB9DD41BBEC9E98875643E43D499FFB2E48F58EF7FA59843B8CC092D
AFB67604D9EE4CF2B87CD20222F6DC988B80418F8EBCBA06EB7577DC5FD0473A
55FC62B9B4DBABB8776941636268C7D4F704AFF1C85927E2D0C03585B60D5DDC
D07A1FE61288043CFE477BEC3F1A0BB96666D44F8286474186BD74037C208527
135C090597DEC81C9F985DD84C889A3A32B3805B9A653C816C523D14F6215B89
5E57100A2E43AD20344D45AC8419E928E4DC97E1B1B2285602B23DF89E149B9C
975AAB575A17772D4BD861C8DA1CF693AC37BA57CC51B9CB825607CFDF41347B
D09648E797437823A12DA3ABDAED3E3E1042F4B4BCEC0A9CB2517C0047ECDBDA
507600F57BF0F93B33764E47B5572573253F1439C293C4CBD1F018FCF994A313
30701B46B9E83B3C16E17036EAF2F0072D5CCC8AB293EC15697C72C097565D80
BFDA02AD9357437E60FB57F31BD6E172895D0E1212674C1401A3CE2599E7CED3
EF0A11750E622958C887E58600672A1AF43AEEA1D9BDAF69147E613C610E127C
9C8190A5B3F5F9A3CBC6A9A61D1970F030ED0D623FD6AAE34DD12E7F12B00204
42C239808277550593ADE8004B53B5FC0BB124F58965745A82152F9860FA6FFF
94BFDF287A8FC265B6B0411ACFEFA520E402DA17AA6B6D0904D8DCB1A56E96FC
6A1C7300A4455F6FF98AA6226337D5FC699B1A0900F049453DCF3FCDC8A3E397
C011C9D2E55D0C2845297B4C50597F58C82B0348AC299172DD191715C1FC81E2
BA9F00D26B3D3098006622D2740A0EB0743B1ECEADE8F9697C7F782265A58C4B
7D8B174654EC7F3BB8ACCAD729170D100F5DAC4CB7CC0EEF74D662EEF94702E7
9237CDB6E3DAF2C65E5A10DDD52EB236C227C3DEAB315E5CE479878DD60BCA19
564DA461E2EC66ABD6E7B4952C21C2D3E37C7B97175C5668DB4C64CD1CC23F71
36DE0E644436C67784A3CCE2F3DB601601B011F527AAC3DFA31A51A29C8C564D
794FDAA23AD6B4540055EC4403642C9A62E6138192E19652A050AC81B2D1D4CE
B9E40F7A0C351F8C72E4CBC21733BDE3623932A66FAC82D253D8251331B62150
06FB1CC2CF016E6BCC1D7732019B86C11D799B79F33BB09CB6771F637BEE71E6
FA1A18E90331A61A3162ED7589B05BF937ADBEC739FD624F6763A3B951E33C7E
F5F1AB73604DFCC2AAE3C9DAB3E303F8B56D1161CAF14DC202B636DB484CCA84
03197D7542BC10E7F9CF2FDDFE83B006FE1A6D13C6312FFAE07D32B62AEA32B5
8B8D127C00F3B953CDA49BBEB1B913570A51B2F96D302EF8913C6BB60B5D3924
78A32E11CECAEAFB7D4C6127C4A26EAC47FC77E895E36ECD8881C06314B93496
2984C7FE400CCA5A5007E9E2A5E16116D8483EC235D20B206326C7E4FB54256D
88CC4BD4DC84B5EEFE217BE0B436583B1D92B5C563266755B07C1E9658B8DA9F
48C8E10FB7F29D1EAE6A5E1AB2F9C2FBE93E979D8C74B1ACB91AA5D9EA54F207
742D31C0B69DDD41BA88727A80869626C7998F17B7D86D4D6F2D1C5324484C73
C05C61C3CCBDF28D048F84AA23178B60E4042034918287418FB5133B36447469
4193A44EE745F76035D5073240736B4F1BCE96F57A97F831842958E6B6517018
BFDBDC3423CF739AC5B38303C3D4DF196C462C8742A5F062F69B935148E81C55
7C4E1B77F5441CDA5FCF63459352EAD6B4A2A666CC5D85855641CB31507D0100
B13895988AD2D1F4DC2FB40840A0CA3622532561939CA66F3375B5C3CC39D956
0C010A1363F725ED71E3442C0A00DD938476920CF67869A9DDF5A299FBC13BD0
1C6450DBD0DE1D9CD163520429734028AA2CB185F711441471ED972022B4D84C
F007C1D9B1D7E625D684C53723CEDC5E42A4D17F35791CD367DFB3078ACB6507
E89B97158EADF677C788A0FFC3EEB38D5ABCA560E04852E7DBC79C2DC8561F80
5C0DA1E125B17E572A8DB0D0565F05E271CF122E3770490B395E4DC4AD00B46C
36448FE2DB35CB45276DFB339097E9EF935AE0DE2D8839376A78D70FA44F1974
ABA413D7143EE4742916BEAE0D21F24A3E4D146DEBD198727ECFF842EF5F146D
57D0287D62D1A34793E173D032F71193B2E2990ECE96EF6D712B4FD780875393
92EA302BFF0EAC108829820238728C6305754EF0BDCC8B7204CBBC597F2F9C95
9B69948674FA133F77935F24EF5D7522B401F3A783BF474B153533C05AF2DF8D
DA960CEED2FF28FF48234265B4759B50D24BD711DAC557EF4F768148C131B265
25D173F07ADFE2C2AAF32AA0B556EEE562106998F7FBFAF7313B1FA589C0DD6C
A9B5A8D9DDD843E6E80330277D6DD2356D80BC6180F2E924BAEABAA6E2628007
B37A2029F3D9F5E1728F408B89D85806D6A6AD7618A93DC4A85C4076A95944ED
748D1BA12F86DCE859F1F48AC037F26DEDB1C48ABA2768E9177E799855334DAC
3760EA1B589B5562F3D48655DACF49BA37A4AE429B79608716438BD99613EC67
5F40200FE34CEC934F99C14E909440B5457AE7487221179B9885F7A063D99B45
1BFD666E82909A1D82572176422757988D43159FD814DAF574818FC2CBB20431
9D5AC85C1B43EB9623DB369D2E0217DE72D65B0B051B0CAF9FBB9BF6FBD49BB6
7E0D942F8A6C4128F6504B102B0745FE0B75AC33767B7F328A8E8E537444EA52
7D0ADCC055264CF38070833FE36F3E9E75ED639A567075C6FD56077C00902CA6
AAF0C12EB5696A397E624F888EB2B5E2F8CD8F21B4A6E6FCABA356F58CA99ED5
3039A1BFEA1C40DC1AEA90C0959232198D1F4E26CA8339782ACB8A908C5E7CE6
98479ABD173B95479825415B084F754454ACBF44DCF4961F68DBB06449776DAF
07138F356959B8327FAA6CD71CE5EC69F97CCC84646C78399E063C0AAF44775E
6D1570F08B3085066DB8C38AFFAB5CBEBC7567A0330E68DBACCE1DBF6D7A0ADE
9BF8F8AC548AFDFF12971C763213CD781D208D0E5BBB31FA3647D2B0AA7E0124
3B0C3964184341D8D1ABFDDAE449FE68185327170B046B27F59EF54E9FB7783C
8A81FCC602CCD47F4BFD25E5D4B24CABEDE1436754701F9823D97F39E01DFCD7
F73BDC4069607F52F09F53B087A3E5284B1C41859808C27C7DFDF4D22DCC6CAD
9D6A335B2BCFA6D000A7C579EA6EFFE9BBC688FC7FB98005BF250E91BF91F719
E5568DA27D69EFC526F59DABA970CB94B8CBACF31A8EBD8AB754A936A7F9A209
8050930339C0DB023D08E568308EA1D4D5663E33173E5C99CB752EB3EEB45A26
663E123B8852CA9D2E0F4A930BEDB6F4CE046EE0A9BB4FDDFA475AD631D13A80
2CB7B6D960A86183FAAAA649948FB3F0D55900D5F58F37B8866DE8F3052007F9
104EED7A5DDFC7AC37A6D9E49F46CA0B3AAE98A934A36CCDE8EDA8362FE97F20
9BA574B5D5D039A77BA46591F6E45F73DCA2513811A6517DBDFD7D818F48E683
5C26FC0C7682845F3E4266B7D327312EFB770916FBA0C65A20305AA1A087B1CC
97528D5088D1E07DE9A23C9D41F23C77C5072809B2819B32478FD58A974363AA
8F4D622C39534F12614E0DF155D72F1EB25082796DC38497B4850BDD181EB8A9
6ABE64730301A06C16A74FE25A3C3068A83A513556D05359A393B6C6929BADBE
97502F351D81614CD73E27F230046F89E913D02B0326F68EDD3146F069085199
CC16681FED2AD0A7B141001A3FC4C5D21126A66592F51AB6DEC1CD3393B65C2B
CC478177F585F15CD2912847D0F53FF2986C63691FDB76EAD40D9798E28E803B
BDDE19EB95FB140A227DF24CCB36C662C7BB5E8F7DA664D1CEC437E17D6BF29D
BA2BFA67306C1B77FBCE256EA412CD417BC3BB4B243FC3A0CAE847B3AD58CBE7
B8C5C86283EB434163C89CE51D484F7E49765600A125D6DD423540B78E744459
2036A2427850EBD6C17EF1545EEE457EAEFDAABEAD2039060F8B6BB4C28AB1B9
A5AAFB7FB945AA4671A6A97BD8C6807C21360D0C3F7742F47CBC27562830521A
7BE2EF1D993F75619EAC1B3A7A43761856730BA49A3260BA0E094D9116F8D9C6
46740F45157716658C23144649A72A043685E0A6F25531307FA0CB5148358692
A287F5074A8C01BA5518911789F7767BD4551B1A301528C4F0C5008F19618E63
B50C60FBA08F6449B676DDFF2B9DAB14A41206C3350B9DFC1DEC1CA57547928E
BF55EC09503BF1AFD89227A574BD8D6F6283BF7C4A30E256A366A29BE5ABE787
9DB7FFB127700DFE7357E50376A9CE8E4B6C4211CBFCF9709AA29144F3A40000
E75FBC7E5D5A2A65C07D4FBCBB8FB94BE05DFF2B3FBD09F11CA9C72A278C045B
1D2572EC08DE1424D242091780720E28A4055091ED6C0F733B035CCAC9A2CAA2
8BC0DF33C013CBF06EDF7DF34EAFE36D3104DADE5D30F2104A0C54D49D520611
165AAF3711B005AD3DFBE56FD60E89A4C5C968742603F4FDB0B0B6D446B29F4A
0504DC2F9B420111821EAC567FC09B4517D9443FD0145DD7514B2E09AB2960F8
D54E965C4D8F99DE6CD69EFF58A2B6AC9AF7769E0A6E389AD0B2A5D10CD4C41A
40097EF75607A937A95839A181E6E55835DA3E81C8846980EC5C16651039C0C1
ED728808427CE96611D1F832FA6DB2B8783BB484E18505891086618044B4EE0F
4C3D3AB7CC8FCC4707DE223E7620AD1E77F2C9F7045257D254633BBD96D5D6F4
5696C589BC74CA556158DA32EAD64629BDED7D3AE5205535F92D8DA29782A187
5C6C8E74B0C86C0D3A604CE160F8ED1C2FE09E0AF9A45096060911999B94126D
B0DA5E108DFE59AE74C66857C7516D99DD1DB170A10E67FAEB5FCF007BAAB24E
5088794F62025380E1B1985AA631AA151879B37FEFB6F84B7EB6D57CDE9993D2
AD4F956BCABA7F25705254707445E43F11298F2B2836FC9F145DC459ADFD7815
41EA03A5D6704780155DE7E7B00A8B99E733AA64B78236F752DCA4D16C84E03F
22C9C61D0EF5C2431DEEC9C12A440FC332666E5F5A99C9ACC79B6952D59C46B1
586141301B6535236B09184689D672FB302CDA74DB0C43A77A643142F5804346
C1264135E15756B43D90E252FD16B3D1D07C190A30D72F4DC185613B31DF5DDE
2713384F4A9810BF94FA7E0D033E338E149518B5493D7E3500577099B505E655
9BB8E9664CFA5CB68AA71040D5DC521E1CDCBD27F6AFE6B8BD4E941D2FC154BE
A826E96D9C215ADDF45C88DEB19A25ADF96AA92AED7E26BBB3BBAD087C4DBD66
34637DCCE4848D2BF6E4764ACF0D6D5F26D6B5DE97BBDD74252B3DDB8CBD26D3
8BCBF23B4CC377A5BCFC19948EF5E45DAA4B5A860155B96B4CD17D25C1F69186
16CE476C12B33F2388C1E140DA4004919027257F2186CF716C685176C94E1A15
8E799D50610BA45F2003568AF44E2EE4DC9904BCB4CBA088D3922EEE7150107E
3A46EAF7928ABBBF6F2EAAA1C54F2F501AA172055892C47614A9035E79B01536
93796F91BFA1DDEC196549ABE28871B49AAF2BFD4E836BE55BACB3C737A5C73C
170B6563DA6A0785D44A92E180DD7550442AE3E0F8C1178EFEEB5152EB512122
E9A215EBDC5652B555D498479D289A015F8545F681333A6EAC4EECDB1B8AFA3C
E22F8B07A8C48FDD4D1333898953AEE8244542BFD2849D497F9F8E166005CDD3
ADE33F6D4B2E9C167ADCE832575A237C9637BC3A58D7BB96AFD1BD3F1808F707
5FE193F6C8EFA3CB01B31B63E3DE2D592079B66CFBFD74E98EAD3245271BCF81
1FAFEB8B4AF97E8EBEF4ED0334BF03EFA1554980E13B37FEC33DF3B23FC7BFED
A3E15BCD8494AEB75615C7A8F64D13FDBD4FB5AE98A4AFF2CEB1F92DC495B23E
AB87B339CD87B09F18BB72913812F041D5C00E90C1BB3D58C1A115B39B76EF79
2F7CCB492E4F71538878B4522D1AEE2980FC421B2977AF4C08DB2DC98289D2EC
32B466D21C9B802FF1810458E2756AEA1FD732B806286039E75042D590F24D8F
E9F50D35EC6D1C9950AB0402644E83479EA265192B41D8F3E81B4761EEEFBDEF
7E850602B6815EBCF3E19A3AD3094F5C09C98519210AAAE8AE94F744C02BF2E3
4544BBB19D1B5F87B2B89BE7CBEB6ECC8848D17A70BA8DB8DD6E5B41F5D52781
B40457D3C1C200483C0CDAFE837D984A761286C76125B491DCE3489FA322F968
E512AC8A5FB7C4DADB75C72FF726049E86265687368420C97F3A415D53BCD1CC
19ACBFC6867B4BAB0208DB3C5DD474D8829CFB026CD1F9D4B7A5B18F88BC747D
C2510E822259DDA43D30C33E916524C5E3561BDFF89136385827B7980C2FE0AC
B1C470121D9FCEFBFD625B7348402BEE59368220EB2EC57A6F5DF049C399BB8E
5B26813C6054B0EFD355444F1EFA69BE5A72B52D8380C5112F4CBCCB78C3DF9F
8D82D9EA22FC46617AC1DA9EDB3A2ED55D49DDDEFA61EA1F01DADF99A7D2E492
2E00C3EE943AFDB0739F75F0F1D250DE5B233FBB1B124C8D80AC2794EDB253BF
AD5DEDF0222EB7D72274BC7E475C56DABAD14F32804F0747A3C6E7330B156AA1
E3C01687A658F558B8F61516680DB3C059EECF1C3FDF8417EB931EC402CA0F24
50CC18B4D22872FD58121FEE981541B50456D7D18E788D2DF9753691F4823461
92B463FA2680A5A1E7FED1E46283199D5A2682BE207E04BD4B435A2949159C47
091A0832D4CEDA6CF0852CD2FF4B5719114C0DA6D1B0AD44E8FDB48008504174
7A1895896B8F275D9423DBE3730633BB053B59020B7AFA82C7CD159DC7C72517
CAE1994A0A790E475C4970EC656B89AD428BF4E1035E92E55FB21E639AF66E6A
3A571A8250C9716F9F265E0F76FFF660C54AC08131B56DF060B63E750342AC61
5286E4AC04B289D3EDBE86B8052D096C5864CA94CD5BA274FD97632C6C0F0067
967A1A308B96D5816166A81DF85561DF48DAC4C5DB5A2AA6B01BD0ADBEE35AFF
BD0A14469DBE041582D8B1BA5D736869A1DF71D59811D25FDA43865CAB8E8A20
A9326D2B50B9700E88FD90913D77B6417FEE8C039C12D8CCF516AA5DD9CA48DB
26F515B6576AE85A29BA65112121E1DEDF8153AF59E1B079468F08130FF077F6
6ACC0449643C295D82C70EF177EC0C2D3AAD49BD2A0BF511A722FDCCD19348FF
FB8CC7A4CFE322EBEEE15E3395B062B933EB55FA52E425B02401C79FF0F48D18
32E838472A8F1A94A91A8330634BB7968281E22133A947416DA2238038CC1475
89C36C8196F901BF6D9816FFA07969DD0CEA6C9669890092316F6A01DA7224B0
6AAD1687DBC419EFE2BDAA0F4D090D274A7CB5AC380B1B2006B28BD56725C287
44060877B73087CDACE34651547823DA7503D50E7C2E9451C8658FEB205E020B
27F5307E54B6F4A4858CEF9F21FDECDE3DC0B24BBE34AD7B572EDF436436EB7F
ED0BABD23AD8FCBD71934F0597C65122BD563F761BA4732E96D5BF346C211267
BEED7075B675167872F7A506F4B9E4896A4AA5AB5B5B58046899C9C5993E7302
C870678DEBEB07503EDE0435F57FCCEE637518F5812EB351B6558151AE0B43E0
25D14171FA920BEDF8462A59235F808BFBFB410C50E43A1EC101E5DAF2E71827
28B38441B5B6FE9AE8268540A9FF11ADA29B5A795C29AF1758A378BBED7FC315
2013534861328A5E4673A4B180A8AE1BEA97194C88BA5E67BF880AB2CBFB7909
B93FBE74BEE6955D3E495130BB3D28B42945DA4A9455103CC33474390660C14B
978158418AEC18D647A6DA9DBCF5A10C5007ADBE32E5D0E412FC23069DF8D162
A2B400EDE05DF412F5D3AF80887D36894E21A64F50AA7D53090F61EB25B9FD9B
CCEF9933F75C879222847F855960CC952649426FBD46FBB44432D9D6D92DDE4B
0DA61C03BF4360FEA49064FDE911D20A240ED2B4513467DD2E9F214E625FA0CD
4248B15A936034060334D2136641C1AA345C7642D1913555EA13D1678752CBB9
7A140C81DB516E544E04813437A0B89432E2929DC4A9F5B183E06D2DE8EE9FB8
3985B96CA9D8FDB132881DDB7B0ECCFFCE5E082CD7FF922805C21AB9435E2DEA
D0690379DD5578A156314BC78AA750E91BAC03948D44CE6AA5B6D92365D2EBD0
B357D962770F37D4A4C27A17BEFFE96B9154CF9B9E70BE65FBCF5161148E1C76
4E93EF4D2B88C75F569346AC2B878782D12F909516F74D56C5A927A2E7001730
D7CE823CA5968AE062DA5A54C5CF9AD095E0BD9530D515129F59FC510A6ED785
9DCC5747C69296B7999229531B651E4C98B0BD07C1AA85C261C55F6D7C5ADF69
1D4C163883BB2994826A94CA34D9E5B9B0965C52B191AE01721D88A03BF5FAA2
C6D0FA6444C3920853346594F0D3026F4900770B39B288622172E4D6171BD9AA
3BEA81915B81C56CD5055CD7F5232CBAF282AF59619638A93EC62A029471B607
8CFFD8AFD7D9B25F63CD8CC50A4FC59C2F3F6FD9963174FF863B57D85D994B25
A9E343F133B43FBA30C52CA8A503F3F93E3AB7AF6043F860D5D548B166C25921
D8DDAD33982A420DA8B0FBCED45414AD2285ABCE7D352FBDE6EB1E0F52B0D234
F2618EBCA323CC1B73E3AB241E4E95C8D833871AC8EB9E6A94AC62BB8D3E8500
6332DC7EA4CBCF5EB59A95A2B515DA86A293CD507153759C247901EBA8C4D36B
5C5E989B17A3A72248A138A3CA8622749CD748154EFD706AEBA91893597A866F
289B75B6C623DDC0E21C7E6920076B0AEAD03AB485F43DD669E9F6D78F7F3A3A
F0E163589DCDB652FF0580BE54FC52BD298B1DE626D7398E8DFC0C7BA115D338
8CD49E15D50DF45AB5BE763310556E5D82BB9E05390DEEC769C63967F79359D1
B292A2B968186C25AD5CE0BDA86D6C602F27D4D17370D21B4429ADC336A4AFAC
6A910A6B158DC42E97769D57AB2898FA62921A8D17FA331966743BB807BC62EC
CE310D8DD33666152E7DA26D679ED4D87F89B2D3FF1A88AEC672999B6FDBDE53
381FB28546087A7B8E3203B60A8DB8357CF639B2B4830DA2FFDD7B721978DD64
1CDF0C0459112C4AEC29A28E43DDFECF131E27A82FC1B8BBE36315E41967D1E0
1B09FE682EE128C28E930169DBAF16CB022D5D7BDB13E2A460620B8ED0372A76
B058E4BC1F616F6CFB2E9A0EF9AD85DAF560741A702B11CE084913296F4A3C5D
27DFBB1F3D0BE971812A7A83450DC0675C45C27A1010CBB79A5BCE21BFA46CCF
D6B4158BE06C768C73F344A107706B36EB97D9202C5763599B3C05E1464BA145
F368FAE4C9D1BB679CBABE4996D7829CA57157A0C21ACC8EF55F8E9FF435AFF8
3A7BFEF9BEEC854EC912ABB90EA785DED842C2A0642F862E14B66919AFD491F9
8D841A2DB2F981BFA79544B1A2F756D81ACAE235A58C64DC17B47C1C7C3A820E
A12732D95E3C21CAA8F9B9C27FEE8DA4DC31DACC0163FCEAC4FA882EB97C8739
69EFA04EE0627DD4C2D071F1C8E049E657F5F14377D75506A96CEEE43E33140F
8E91CE236EBFA996C51679100212026FEEE44CC3409440737FCCF58A9899769E
BE684B749A1D5C37CBFF72C7EB5AEBA5C7A3D9BDDCD1ABD7F3AE4C917B3A01F8
83767E8A5D9EB331968579C3DEBB3E382BC15B2751BC21E2E5AACC0CA211F50A
13075ABCF9F440C99FD25A8FEB3C0FB8C09606DF50490C7CAFCE844147A025DA
F903C17E5B0BC25F89AE84006216080ECAF450D8F1E3D7ABD94719F604EA68B1
108EBB5BEBC3EF465BDED4C73738D894770AD27F2BAA1A8AC49D55D311D7B27D
B7CB8AD061C3DC60016EE1F4848CA1A8533BE7D472D0AF407DD9F6C4238A71C1
F3511F227119F68C6EE144530AE8BD1FA0531017D74B47E173553F7727CAB5EA
16F460023E48C20D335FFE5E7239FF72332FA245BB59D385B940205426B2517F
B74FF8E56107FDF9585A1A1DFECFC086DD0D6D414ED8BA6E0D92A29E25918B5B
56C2935B4622F20B9A0C4CD3F80103A6459421C53711953FB5D85F36DDE63115
3EFBD5D42216945BBD05647ED068DCD0074F3A2B08A4CFEDFBB907B363DD79AD
C98AB074AA1C50EDDC6EB68C5B4DC1328B9E56BC0BC1104FF39EFB2360FD3BE0
34FFF6E650B0D9C5050670ABA64C062B5BB10DAE3331C3E3C1B56AB328435C99
64D0D5394345768F4A78E26D7BF1AC08BDBB8351C7F5C1C666E4E0987446F1B4
2166292D0CFAB1AAE6541A3DB6A5707CE98CADD70F81D892B4D2DAB0BABA6621
75C52E526A643F7FA4217D853967AF5E3659D9628533AE56E657371F3508EAFB
FA1E8FE0EE6A8E816CB79B2B26E424A78CFB02CECC37A2BF35D037B2C2EAE5F7
0642658A3C3543EFFD0999E7B2EE12E26D4E4C1998280DA60236796D84A935AD
41A3573879103DF7CE5F167720F3A7F94F2720FF757C2D2BFAF8B3DA862DA1E5
E48C0CF13D0BD5FAC207B7C7FC5AB1BAA9B3A11D34FDA62658B43CBCBC5E8F5A
A03947553BAECD57F4EBDAA673AD0E3ED5F7E7086C53B79066834B3766930924
14F780C2504096C1090865B9E036CC99A4EEC434992490906571E52F477395C5
C5040492FE6426FEDCC330BDFB5B09ECC3EA37300DD4FA4F7BBF2B252A533157
512E649A7B7F199EC63345AAE11DB0D025D8AD3593577DFB0B52B5ECEE8F47E6
C1D8A30C4E5E880AA0EEBB2A053C893FF1AA912ECBDE9B49AF18F66D1BD7BF73
82F89FE9492B2928C308C0373A7CAC1D612C9F3A9ADCFCF2099128D1C3565C6F
5FC2D898DF5C1E59CBDCAF4903835F153170BAD72480247EE13CC0281DC3FCB3
860E9ACAEC0BF95204DBF32AFA9DB2C058F11BC061D8BC48CC05727B71589342
370F8A366E11B3623E4443766368B5169A98B504DD1602FBCC202CC8046A8A60
AA24F57CFA5CCB8485932F527838C9E2F1889D11BA06271BB84AC9AAC072FF6D
5AFDC5A833E61CE4EDBF5868EE0A5930150D0AB4682B25D8FBBB10124FFCE47F
7C93CE9C3F929B0536AE7B9E288A7EB26E63EA1E98F44C92FB6074006BA0A1E1
A4A307BD9015DA3F03FDCA07EBDF9B71492C4F03427D0C1ED063847FD3945335
DCBEE971834F0AD7CE43DC88D5C9BAA5FA0F4D62066C0B7064578316C7C7DF63
49878E52C52E1051BD8785CA07029D855CDF298982AAC5EE9BD88BA864E1A1C1
86C7A2A8C8C70BC438F87957BFEEE5BC5752A4AD500E86ABF0FC0FCF15D09DF7
5C25F8B99BC1146D1509513ADF1CF627BC4C0D8984D01EEF7E17116174B74694
0DAB65039011AD4C5F22986EA0FC188FA30CB08809DA9EE88D490FE15EBC6A69
56477E8B7DAAF1AE28A6B251C5305E493D7A642A63F8C286FC69F1DE5A80C4C8
B98AEF06344921545DD99DB567D5486DF8C29864621BB2A03EA4F70B7ADBB35E
0F1641F668817E64481B4479C7387C9F8F912458C1965BF8BED4AA857E62B7BD
008DCC0B7951B385F7A70A6C3D6D39AB0BDE4E8A048DE4026A9AC527109FB09B
ABE1DE6A9F210B590563EA94F930201DB615B7373759BE4A62F1370FEDE056CE
E265838696FA0D3113738E35732216736F12E3E76D416DE431823060F980576C
90A5A37C5AD57E9AEB2A8717F653103DCAFB4E169855DA91D630F30DF34012DE
1F4C98E20602B36EB9C4EB49C7683B7056EE108F5296FF68DCD3E59302B013FD
FB3268047B4C03A37A680D1F806296BBF9424289AF41637F1864CE423FDF8BF9
B3AF739FC73D34077A744AA6D4D4E5B2BF51908ACA6489430DC92FFFE690A0DB
944262EF894985B1EF68F2EAA7AF9A3574C30D1D4FF53CA84EA834BC8DBBC201
865DD685BF133F7881BA8822D56C27388B0EC125B64BE6317C9BF4DBCE888278
926234B1A806B6DDA724D58044898340527DC91EC9A9A4D22ECD9BA6C4DB5C68
869E97698478CF49C2FA073AAB78D5EEB828B2BA0301AF9FAAF86D736602AF9D
374A8D11CB5F883B5FD6AE51F45362FE19DD066DDFCA49FD3906B7D32C787DE0
6908B02C5F6A9E36799C7822398C82C22A635BAB5D9FB381736C401936521879
1DA09A09C7AB12BE2E64A6DA55B6D50CE1CCEC0FE6ED74FCE37B42320F08639C
21E2A9455CDB01575A2180793394A0E1030EEB320FE1885A52A9BA8F613CF40D
D5AEE9976DD7E75F82C089119BAEC60CB65F11381291193A712212A6425836BF
B7BA7B0C86C87BA65742504DB1CF7C854DD6C6680E12CE77ACE2F4D31C0D4E1E
F83C805ACD94C2BD0401740C0E41DBEFE21209DD13BB4A5D5BF7E2981B87B73D
560A8E6EE0BEE3408D38C8E6AB4C1C7ED9F52818FAC02AC17A1D5484A8ACAE90
2CE9F5395204A7BA3D11006B763ED08B3EABCA1644E74824B92728B491DCE348
9FA322F968E512AC8A5FB7C4DADB77BFE2F3DCA6DAAB758BD7FA7D29C266129C
91A2A5804C165BAA2937974DBEB542E195EAF9D49EDF6190BCA5556700F11CBF
727B0E325EB254CF8F155C6EEA98CA31FA41117D53898BC4C53F469D84294458
62B0D901E4C6095A0F31CFB809A7ECB96980A5074D286ED71A9C482E00FA6412
F6D7A5FF13619795D13D4D739EC41CB885A482238364C123D24E6BF1F85A176D
DA23594D09824B51DF140157FD9954B3CE4C9FE714783E7391DE33C0C05B40BC
ED90CD07200665630896637DFFF8E3C3BE03C7C33CB54FCE37F1FD33C37C611A
FCBF59B67AD80F8F4D376E1B46A28A6E16C1D0A47C331FB855E174EFE813A62B
E4F0FD65715A7B15F3D0B586BE098465B7C1DCD5C9E3B84E1234A199A350D10A
B59AD65E34657555D9DBF091329A4C04DBDC48BE59495C29181964C7D81988B9
2091EB13E2F1277BA6BB7B0772E386CED36FD33CF7539004D4ACBC940EAF782A
3DD97E9D9C38B45594AD68EE45E874625229E7C4090734C7DEF2979422B6513C
C7C19248096BA7FAEA6747165330E085296C2C6FA393DA5D5EEBD9F1716EDCEC
7F291B0F56627438BDF3F29A4D69733BBF3FDCBF836FD5BAE7AE33C0D20B9B4C
E333CFF4D1EDD10BD74E5473A41499E485AE308B92650A286628FE70E07414F4
11C092F1DDB6F6D0887A85E30966A059B1636E4B1AEC751061030E9698C16AD6
D07C9A198489AA1D0FA3717BF3CD52E7FC86C8FE3C7977A14DF4431DB3E8171F
50DD33D78020E9575406D4032E09092A9C413C838DBAE1E76D2BBB2ED50CBC41
2A90190C806D5A035A04E3CF0FE3A71921ACE8D9BBBCC1F8A5D0D4CD7AD9F3C6
EA65504D9B742F99AF7F5AE6138953A982A7A78D7EB862446733B7CA2FAB2836
0724E0928C85C21A9F5D5DF7C234CCD1C14AE308A9DE8E06E047C76391ED93D9
810AC8F694B7DA252B4BABEF2C617F5933E0247210E7507788879E11A2D878FB
2541B561AEC1AFB3BD19017BF75A3E989BB3D1C77BF9ECE6A91142D95593EF9F
D51E9849C7380B4F6D6DA2E75BA9995538603D1E43CD12C950ECDE7E71917C4A
1E8A0D4EA9E7891EDCA725CE52A4AFE9A5E03C0141CF551118083D4CCCDBC9FD
23877034BC39F53BCD2B1D5E20C42CC6EE9775B7BBB561A00DDE1103847082CF
3058E645DA10A428178BA48DF74D54DDF7FBD46D78D457CD1912F93210F98194
A7DC809B6620C88AC1B10B7BFACC1EFAFD38D3EDDA0F89CDDCB653B8EEFB1214
87E9161E9A091684715B666D74F575E694983CDD4CDD976F16FA6AC990433A43
0B06E78424C90FF18A0243A8972172915ADB7131F254AD9E2C534A411593D10A
71D7D05EFFAFF37F9AF74561741AA5E41C758944B9AEF8D40818F06E21855D7B
A2A5D8C022B7F5F331994740A0BD185DB9D94F068D73C4E7576C59C296CB3001
3397EA8FF770AC4F62CB3AF8B17490893712912790B41EF43230CA91E2599B2F
6F443D3D7C8DBEB9FECFEFFFADBDE676D98DD6204B3EAD5002C29FE6D7A8605C
B9B576F4A07C53B4CB1B91F60C618B3560823A7386A25CF46386D6975B70E300
02CEB0144F2AC22C3BB66A51D65D864AA64B5B352D305553A14C59508C8DC825
E8B2EFB8E2803754084084CF308B047CD4389C12B3A1FC467F98A7E2F4511DEB
9FBAB2FEDC321C77CF13B21204776A715DE0C28F61B1C5B1B6CDE7CEF529A009
1209B70BA56CBBC8F894B06AB69A867B1C0322F16D016E992C7DACD8026D7F4C
5AC1E5D796C0E5A79C6083ACE132AEE5BDF71E90DA34D547ACCA61BE6D41EC37
F649CEA273F000F765D1CB762C01F0925CC899206487D69B87184F081BE4FC92
0915ADD1CAF234CCEE71ACB008439D7E0ED44D117E1C942F56B51E615267D9FF
C193186EEDFA412F2A917B97A920878315D488D1E15CCB1D18E9F76104D76978
B921AAF1E522B0134527426997D44471EB75304F9A5C8286AC95FD505FFFCE93
1B60115AFA35544EFEC21F1B21DAB103F2ECD03C45978D34A9AF4898439450F1
21F0DEC0F06B38C966A0AB56FB40FD3C6C4A6F1B92489BC74B93B7D7BED04206
674BCC38AA86F074419F816A5CCE657A26E927CAB2BFFBF4CC1A24A90064BB2E
0CA34E3C531D23DBC3035A95679F52ADC07DCB0BD1F9221EE576454A86A0C2BD
F0AE6914D6F36FA04AD771517929814BAB6CA2E090BC14049FD0BE5940E6A86B
1414F36C25B48A14382CA331926819999E1A5C2FA63104188731A458EFDACBAA
48397E97284B8A8C849D61C1D7D1A30D35C693B9AD261C3CF603FCB87651205D
6CF7D2AECDB5133E5A5D0B5019F9E1D426843264201C49B5F005D081B1C32432
485155F92D59DD66907ADFA1F18B28A8F1795FE08342FB4FA5F83392B4B54E43
ABAEC2B611954E2DE8DF3B36DB44DA46BB19EA1EAF0425B8B8CBF768BE5811DD
097EB0065B1E01ABF5E2D8428D248B1063727C5A6AF81F6238F1912F06CE23D9
B929E7E8CC2459C0E78A7B2FFB41C4992C8CA30CE5024BC62C59AE5F15A7C165
1CF31D319EC3E946CFF341E7B705B7CA5811F503F1E23A866648B75738A5C893
0A07DC64E8794EF123B66C212B7041AAC2F7A021930A6E91115F2FEAE306D1F1
C5ACF4307384369A00AADCE668ED7E814E32669BC829EF1B7EC98568A720100C
C4C8079BADFD302EADA542E45E04E10A6045F46D432299F879232E98F9FFBC32
6D9D0B73DA2804A813D9B83BA91C2B1EA4B102EC16763EE0F5092CAD9090F5C7
F6703D1EF5AC4FF555D8366BEFD891834EE0CCF512FC14D9AC7341D5046C96E9
8C17C37FF5841624BACC8EE6C44899633FD2E401CF66BCB8365EF29A3AD76A07
B35273CDCE50516A57F191028439EC8E5B8122A9C4B58D6C1A9D5A4E40821EE8
089BF5521A19117A0EA41112EA832CFF38AE62A7C42F405EBB4BE70A441D30A0
9C7A64A9C4CF1D411322A0A37992E6EBE6321C5E5B586AA1E12E4D9F314D84F4
FF5E0C0D729CD6C400E312293CD84D7FCD0058393BF81943537DFDEAB03839B3
A0481192391FACD2C83BBB9AC9E5E6BC6F373161076941FBE23CA6E81B848B33
A5D05FEA4DECE4EA88FDA3670AA71ED77DFFD3BAB2373B27FB482E06C093E9EB
E22F3B9FD5B28AB8931F1C96E4584559D47C3240B0D4A30A382DED5AF585C938
A804FC0854BA5F4ECA8379F7F7BFD9CD497E66CBE3728B69B85EB75D9B390B0F
B0E5C3F4CB0D2C1D1430C83390D90697DD4ADA95093D064B0E699C59892B661E
5A0CF700ED157AB521513CD600F052831A924C5DC9771CB880E017A30E64F2A8
7F902F283615BA37673DFAF9E0D2ECB5FBD10BFDA804BD47C3D4933E3B443D47
65DB43B2BD1433C8BCF47A40B72A0344627DA12399A086B6202987510581B57E
EA86ED95F3811AD256DFFE665809102BA715F8EC188EFEAE13FA319E5F388B89
BF950C292C152AE9B95A04D585E6AE259EA0C1E060B1C495ED215C9E3B5A7285
FE3568F5F91EE275365769916EF1BF70C062A45334FE88CFDEFF949914C4B69F
50F6628F9EEC6842B798950DA2A5A6416617A6D6AFDF832B4DBBEE2065A7C30B
63CB9340C50778EDDB5E0A218C79625498AFDDA452036F05A697FDD95DEF8B2D
573EFC2CBFB7C4F51848BFE652FFEB23AF2E20702F9888B531CABC31F73E1809
D29542B8B5D24ED5D673E26A25811D4BCA9D693EF8ABE7814BE8007BEC5BA79B
849449A58453935004FFFC8F5B183F7A4B9DE98FCF9B0FDA17BB2C917239849F
A8B3641B901E5A41C07518C027E399132512240CA99B02A0410974AB1197F948
7981AFBB4D5126B16E72D95B28D1EED1B4040E98E8A74B22C7D8CD3FF06B9FBF
62FB1443AC776F44F0AF34047C9A780F3B520A8E750230D501CCA84CB279D57D
905123FC23D46286CDBD70C1E35DA15F1BBB8EDF5FEBD36C6E600300261D453E
F3794BEF64528D7B4B91515E5442156C41984984E051B9F413865ED26E38CC6C
2563591CE129FDFC7520C5D5CA51DE48C5300CAE606605E951148BE1B66C45BA
04871565797EC537E26B24A4CA076109F2381E24C381185CDE9E231A78C23918
DFDCAECA2B8B7F8EAC363D0D75730D6DEBDCBF85188B95F8E5E17BD5C1FEFF38
2FA7B9B0B46073D4F6665C658431E7FFCC75FE1811BD701298F763AA466B7843
7709A5EC0784A852A32989A63805EEEA8B14A64CFECA4BE02BA114A4CF5869C1
6F750F4788B6B3C3C2776D4DDE23DFA1490CFA3B4C7D0B8794E078FF15A4159F
644CC8DD9EBFD8ABD8ABFBA9D53C42A61026E5BDAF59973977739CCF0FBE3A63
A34884DA9097C0F903F0F05E0F77EA5E07867117D1908D958AD0EFBD5C6CBE68
4E8993B9C485D8B4476F2EF2991878E11F38FF36D1F1D67E0A154F2D264D9813
78A969A5999E0F8A20B81D18E1961AE265B3F086969B4128A52251DB3EBDFA8F
59FFCA5E7FC82E25FA551CCF5E9DD8D6D3A5DB1E28A4B5BEDCF9AF7F4409C627
5E034FEB45E9425DBEF583887879AD93C362A37F0C069E6E22EB77ED0EE9E3E1
0459B9AA355E912CE927A1AED4B962FBD95ECBC414640CD8456E04A5E6F024E0
1294FB6906739CE1B4567C1C777D47A7F2D78950A8F84091E541E0DB8CFB173D
518F9C51019EB4FED063631D168D1A00B9B346B62199A1AAA40D8B35AC2F519F
A7ABF395C0BCAA522AB5851F8574ADB710CCB3FF48D54FE2C65A237E02A7621A
CE732ACF123824D61FFBB85FDC03D7B779BCD8BD13107973003A71F5147CA479
EFC1134966E442A2EEF5D51BE02AC50855B9158840F97FA94CC03969B2DDBC38
390BE7F6F9768E584BE5D3E02209C9F5C6398DB9A763F1BA3386E051BBC1C7FB
8B5CBE3D295F3E94C6484CD39D18A81F7389979EF408D778E57338EDAA1C658F
9C1F6BF01E8C05290B07F87D83C4498EB6B53E33D46BACA453D38B476C7B79AA
3A0EBFCE8A593AF6595410F0F59A79448D44E92E5A691F651E0B095682492BC3
5BB71CE21A3E9C1D1AB20BD6C6CAA328BF57F4FBEA068F1CF5B88FBEF9974213
7438E51623CE0E21C27ABA2D3805F093A069196BAE8DB7E6581F81C57C6E5CCB
B5BB7DC49648D46F2741B3A91D9032F24ED8F7853E8878C5315B93F0F0DCAF80
757EE1EA8A78049B8A9E998818F09E1B5E8D34EB46F04E8ABC5F4D367639B421
6AC785C142CE42FFB593697B786ECFEA320CD49838B5DAD7F3FA0DA3AF073C9D
ED0369646F6B36693E9A3C0BE4919F409768372CC0E84BCA86276BDBA1914660
83845E147A52D5DFD4043ED3AC4DB1DA120971ABC83477E84B2BD3E91C105784
6B76616532B79C929723445D51E55F2C97F1189BA69836D76D228AB453597E80
B7D3FD49E1D3663256360E4DA56184BE9677D3547C4F2765665237408FB4D1D0
7C190A30D72F4DC185613B31DF5DDE27133DB26720E36FF2D28374CFAD56A12B
00C3D409420B491B625E4C43A33EA29CBE2AB98CD0305DD935D8F0F5EE34E73F
44E9909CD4A49E4600DBC7FE9A727D18EA999ED7618E33DC61135BA3E5397F55
DF844F9EFE1E760903FBC228B55B1CF4B2482D465B5835341350E215B0D55DDB
690E1502018D0F42D2C05275C5EE7AC03CDA298908B414007BCC5CCBC4A7C3D0
AD578D0B0451F2767A6BF81979E99EBD6CB8017A27E311AE62FE08BEE58F2B33
AD6C2859059D8D3F20870038B6EA3C5E41A3E6E6EAE70E659701CCC2256A7CEC
A22D415F21FA095C1BDD305F557FA21DA361255FA634F5428046582F1894DE3C
9CF2E56BAD8A834ABCFD39A3CCE63CECBC5962EB3A03C8EDF831D63D2A5F4F9A
5ACF9D140BB42BDF2B5683587B8F7263E4C2C43A4C530DB3EA06EF9672983138
D713933F6760E2C0D9E3811F6D24F00B3EE58C56CC7E9CF8704FFCA8D35C141A
58CC2A46228F2F642101F5B23CE1ED3A79FF543B60E9DC22081E65320BCF3099
187ACC0F680A66AFFE0840D63870B38E4100D67ACF9EB4C072D3196F99F999C9
5A21641634CA6C9B6C1CEFBE4CE4B59F9895ECD8ECAA56D0136C16C2109C8762
7A1CFEA2A6707D6B09A9278F772433F92EE844A6DC01584B8219388C5D8C2630
E1D39F3430FD313C4E64190E98B0FE3A2FED197C64A2F173D67B96DEF8498BCC
17589A700E889B5EDFA8FF2A7CC570159B5621D374878E63B56C35023AFCEB53
97728E52E86616FE3023CDF8F2E3205A114D00FC4CF71B706FE7BAEC876CC50F
A0C3717E91F68E6E2C6DA9D1EB523DF48D10D441ABFA40086967CF3CEDE338D3
76450FAC53777A02A6CC5310ECA24348652BF62276DFED27FA15B47B5D48BDE5
E74F96C82774AF2512D837DB53D1C4791C4A31C1486D6B0646AFBEE8172CD48E
FD8B73CE708704378306780B31793DC3588A170E5A20B20B7C7E7B727D0620E6
F45BD57DB169FD3568C8E044865DE7308E8CBFA87DCB0FD9A4D39EC820E0B658
1A24EB1391BB3DC52178B378B00586F8A890443897F479F5C27BAC92012E8C26
625EDA3D3CE4E46821457498301C03ACF66F2F7EC5CA2D541D3617439C0069B5
5CCBE8D1F0523ECFF6004882B93CF5618D139605D06B8EF066B8FDFF0A4DF05F
CE76504BD81147F35D8989D2CA44BEDE6B8BA09F5117C4480EAD193A55D17766
E680F2D445758324D4264B34CD6D2643914BF569EA1F9CA8277788FADE52905B
6910E32ECBE6E8710E44EA188EAFBF5EA958EF011BE0E24D0F88BD44B30C8B42
88CD98CC5E56DC4D1333DBA8FDACC0DB85515E1096B1240EDC18A0F3BE451E29
C23A32A806529BD07349064CD9EF73D7A938B5AD3D1304F2C6FB438EAC993894
2455FD2F90BDE47DED116F3966B7915695F9EAFE5579F3C80495B6BDB1F24037
096741E04B3165928EC4FE7BD46E4F1C6B9C57378D414E6D7DB7466631822AF1
182EED5055418B4541E469969E60C53858FBDEBE4F725F66138B7C516819F0B5
991B1EFCFFD98E6D7F086B8DCD10391532F33C17437827D857FD477BA5042250
CED0BBFC6FD9825A5826DF34CE0B2C78229F24FFA4A3217EE0DAD89D3D58ACDA
20FF3FFAE1A1D2A73BB74858A015BAAF10F06E1384C1114F45BB3411F870A452
3AE84487D44CF7EA1D07131A8A62E3E9DD828C4C431A7B8BB078F8E328439E6B
8AB2B752FB49612F0D1A7126B450FAF7E16B807ADFEC622AF603CA211390BFF4
8AE9CC71BA9B8CEA1FEB0155DB9C23B3F8FAA8E0D93AD351171C1178E5F66BC4
73B74C3E6292079C2B2D43A59F09A158994B6F2DEC606802157CB31F7C7B524F
D9A7A57E3881A280D8F3EAC2E25EE41E58BC96B9FFA3B04C17065B1C34F194BE
EF98DDD55CA31A58924EAED8F7E8BEAD5304B355ECF4767A0950858BE19002D2
B4CB6DD56D0731B7552E12FBDA45AA1538B9DF9EFFE960AA42FD34136C401767
858310E8CD7276AA1FCA90514C00CD97FC5A09CD8B8D4A3A66DC9C5296DF3A93
ECFA6B76DC3B8C7FB8EA1F69471EF9B5F8628FDCFA2CC3A34B4A5413722E3A76
CC09A48F9C05C8EB145A9713BA7BC97CB557A128D43EC7119599BA999663E0D7
4313CE89766F8BE3C491BC98FB025C7AAFC2022271FE620574767E479BB2314E
0A20F00CAB37A9220ACCFD3BEA219CE217CA917354CD7B5811BCC4EA6D8BCD52
72A11099E6503AE6B47A9A116672553401B7157D0AE9F18D7CB8E40CD6C4FA69
1BE19493F58C953237B311F58B834EFC7A6196D4252CAB7B02B423D0DD2BCD7E
98FD7C35F7D446C5CAD90C19A1E7897D17E6E87BF17577C8E3A8A30165033249
D533856A2CB6E9C1AA0239CDAFB33902020D6EA45A8BA60731A9CFF651E03F1A
E3C2418EC2351DB956BB402DD25D0A48DEAAA63DC1CA574B8577BC542F76EB3F
DFD8004AE796D430B275395D75A99A2C14F47C5FC32202DAB656204D19FBD837
A6EC010C42084701F5770B0BF36DC8E39AE8C87D07ED9337F0F86C9551C6207F
BBFE3E8592626675EB20610C4C3F89BEFB3F1D0975F73FBE95C38FF0132F2F9E
C4932A19D7626D401865C3F32F4D178711861E7CFF54796B9DA96AAEB0ABAAD4
EAFD50EF789E313A3F52526390A48FDBEA688E80115FBB6BA8125BC7045B9ED7
2403B1EA544EA643B82782C150E294DA02F9F2C3BB0375BBA603EDC932F1F72E
59199FF3A48D907D3DE17655C8C8061B079BA8C845935E4E49F0CC9FF306C34B
1F3B56DA90A7697E1BF0A3553661CDA92CF3A581073A646B2EC998E8A7467630
91CAE08357D2B9C13593EDCC27B258C07FB0E279174A3265A1E2F6B63FF82311
62793416FC043D3DA7176DC3676B0D95192C772C129FCD2C9A9E58AF13DAEC63
1E8741BCDF96D62F37E7DEC262DD87B8D34C8DD3C20EBA6483DD41D48A5197F9
8F35348F25E9021FE50176E44F6203BE984312E98FDDA72D2D82687F527E0B67
9C0D5FE02EB2949453CA6ABCEE1E618D485E9895A8E8E5AF35CB731918D2EB4F
21CBE7759D3911F1DA71D12F4202E63A250F94457FBB6951722214D357292DE3
4AD59D0E96C7EE077EFD2CB107838CF298CE66E65983EA86332F8FC11BBBEBB7
199C057AA13B3DA10F76CF915257B58BC533356B6BAF578D802622B5BC8DDAEB
815F9DAB9D6B648631B5538BC3B05B2C9FF37E8805F8F1CAA95A3E493F5BE74F
817F95F102DDCB48C8B666E79D29824774274E960E1B6A2CF26C93F0A2756348
052AE1A2CD4C3A0653
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathExtension10-Regular
%!PS-AdobeFont-1.0: LMMathExtension10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathExtension10-Regular known{/LMMathExtension10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathExtension10-Regular)readonly def
/FamilyName(LMMathExtension10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathExtension10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -2960 1454 772}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA967B9A7DF802734736F3D61073FD
8ED62BDFAF207E10687AEF931F44AD55F9C3DB174637A34D867219978D9D1BF9
C733804DA26B4CDAF23436F0F8EA2308CBE3665ADFAA59A240036663D9ED945E
8C22B3621360BE02DBDDCC3BFE082CF6230F8C83FA4B6357682B7A7DF35F166A
FD3F889D853655FEE984B52090BB8D6B7EF8DBF3B1D022B6586235B32899053B
0718E16BEE7E146A4753D6E3FD6C4B6BD9AAFC2AED5748E193D28CF6A8391414
41971E41C481638DBFBFDE2638B65D10FE5FCC35EBC520E3520F0A0EC8FDA853
597F3C2E2F60B8DFD431DB5B1796737BE979C821EEB58BCC28A92DD60EEF767E
E861765D087BCADB269D7374E766D4C2328E711F23B767CA5D47241039F33EE8
0DC9D02C1D4D91AA0E59962090F584084D29E26056AD0E2B1FC4C1257DF003B0
748DEEE2A30AE53AEA24FDC43AF62A66BADE0B3557F9F4CAFD659CF933472AB0
8922041D5D0DFC41603EE166FDAC7C89DA8D63EC1CD0E2E23E45C5C81A5663E5
C6952D28B285A1C349378D5D07B5BFD7D742DCE097383EF86C667BB651988158
47B4EEBB5E1C035CE74DBB3D3FC9D00DD3D28DC0853DDADFB3C7E642482047AA
87EF5639DA5CABBEEECB36123995B88946D1D7AF48D7C86E718E1153F8A4093F
79457700C6E57A6BB805A2386ADAD90E2DEF9354C8785D11DA504D44CB3B6118
C74E1B7A174BA2664E6F25EC8AB818169B1A250D9725677C72896D4CD4A15BC1
EBA98BA918D1ADFF45ABE8C162D93331FF301D17DC8998230B8C7918089C70D1
65F57CA3361018FF92DEFC60063E1A6926B7780A75CF71E1DBEECE8BB1295F24
4E7AB8080FD30DBECAF8DEBDC436B4AF98A2328B7EB946668117CC386E257083
7C0EDE2A2FF6EE7DEE7168B436A033249C8326F5ECEE6C952EFC6D271378AFA7
90A3AC4D2C99F23AD08C9753D7532D4B1BA3170AF923DDD58EBC8E8ACF16C2C3
5D2C311ADA85F37120427290A22C12FA0180082634A98BFBB545BD866989F977
51EF8DA88A9EE0308CE367332312FBDFBFE348E0BE63120324CB1857FEB4F8FE
BEF49AACE2AAAC7D3D317AAB1C982F262473EC95D9ED7B1C564626D9CB87AB7B
9379F8A02E912F859AE0B3F9CE0F253FB6800D5D6BB753CFB933FB9303AAAC57
3D7380FC3563D88AEDC9A339CF931828B48A6BEE434017BD459FCF89FA30E028
1A08AB3702602A019C2A4ED08E25C484868F0F35C5B1D5CCDA01DA9BEAA7E70B
4C0C5CB3807EFABFDCF9F836D14E174995D179680584434D8A5C8A4255456DEA
D95CFA482F221D218FE10A5CD04F1526CCE72033B37AA2D622516B67987197DD
3E233670D60B90AD71DB8AD9E5EEAD68F99F8E35E5A8BA66C0F8D4A12FE68966
302687121F7ED5E4ECF1BAE7DD332F3CCAC0F95045D7DB4EF20972682A7EB3C9
0C1B491F4D0BAC2BCB9672A361068498BE2118105D463A64B0FE96460D4BC7CA
3B9C00CA63FE6B7146C722968C11AFA6268A1D7409D629DC87AFA3BC3BA6C873
3B9B2C753FC189D834FFFC61E337DF86FC1BB235B2AD2B6949B5F991238A5F06
C0AE7242E52C697E4D4734A157A81887583CD40F4BBBA355736265C29F49BF89
73465A08227875D9EF36420BCCC0CC054D6EAEB04A7A93BF473EADCC4CE6859F
8A6F605F31FD1BA48075D9D2293EE6E9A67E8335D78185C9B9A7E801574059A9
194427EB21999F89795CFEEB01842DC6970495C05AE5A17290AC5A90B9AA6CF8
A414B689F0EEE11AEDEAAB90D7787A472D459E8081FAD0F18D237C8CBECC0822
66E6EB50B9F72B578E35DAD8E9EEE289E2BDD66C58A70E9FA9B34E2C4EE9090B
E26AAEBEFB702AA5BBB61F1BD68E45E3D19A618C4EF00A1B9F90406A6BC6C940
11A07B70AEA3D0F34C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMSans10-Regular
%!PS-AdobeFont-1.0: LMSans10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMSans10-Regular known{/LMSans10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMSans10-Regular)readonly def
/FamilyName(LMSans10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMSans10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-420 -309 1431 1154}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFBD8A43517ED5F05168EBF9D3AFE
25EC2992AF87F286EB5CBCB7AB5454926B000DE86BC7DC7722EA9CC5AF351D71
F88C22A045179501515ECAEDA3F7CF9A23FF4ED29532BCC5A2D9C4566653DC0B
F99B58B303B412848BFDFCDC0BB4CB9FDF30F98236F5A2863FD3E28016CB2182
2E10F5EC6419BBDF2A9031E1EA217B147A06BABF1F87C9585634C5265AD31FFB
EB313C8110270894F41E54896FAE4A5E1A9B04BB8EE53CB5F143D8A3B77AC1B9
96AEFAEB5EA99D855A53026FDEE6A856D3616D7EA42379EC96B931867D9E55CE
3ECD8877C379F6C2FB63E92F146942350BF980AF3D7DE17DC4C2E4B304AFEFB6
F4A34CB06164596B7DF119147C59AA2A1A8D448EB219B2682388F94393CF4D74
532926ED5F2B9D281EF3324258F963D1A460D08DBF08127EE66D40C3C74B98AA
22B9AD6BB84113F84B085EFD4982BFBC507D1215DF109AC39E0B12230FD6DF02
C4B69CAB0B3375C9924071A89A799AFAAC3EE2010B8FC82E42BCBDF021C9DF72
D2D02FBD2CD3E161AF409AFC0828954F2BF56A15E1ABC0815ADB9C244B0AED7F
4B9A54CFA2A286FB4D9DE215B8B5879444B3E683FCAA95D0F1520A716BF2325E
E76716BB5C5DB5600A7CAD11F019AD5B3965B61494D228A3473256E4B8B22A6E
08F055AA199E8E9FB2B6F04B01BC31664D95FE7CAE16648E0344934054BCB06E
44A33F278B8A2215F77018BE752B8FBD6518461CCFAF61F07032398367B284D0
B0AAEF9509F632534C7084BEA8B52EFAF676C38D4A720D4078C0B3B525B7178D
9F85BD44B13272DA283BEA7AC239A3E1A0FEAFD3E9F7AEC9CE3296A054919E74
51FDCDA8344A2E134E285D682648203E81A5343EB6EB96FB42F1034835DD0440
3968C3E86CB7B20B53F9CF8FCB188D635FE58370AEB11453FE69A0DB8341039F
EA654B8FD7323E5536E130FA10100643C234CBDFB8E1CAF1E0C1D9073C3299A0
24F2E4D71EA82005EA002B65E904A046FE96653F266B625D332C961EB94026A1
3E2C52BF1DAEEC9F50E53B51DD597D57B61C96A427B9A6E85E6DCF6D389B34C8
24D359097AA8BA9219D082CE150C383C7A35A06B7C74B7991E1FCE71517AA0E4
AB9AB75715DD53E616CBD344CE7D714BEAE2710FA343A595982F0AB9BFDE1C2D
1749DC63457405359DC4DA4D31CD388EA7D4BFDA5D2D45C0B5F7B1FF17874AA7
CC620939F3BA8AA5ABC54265B68DE81582F0FA4728B81578FC2EB39C989C68DC
7DB84DEB6DA73092F21F04F718009DBA58BF4FFAE24907573C2C7A684F5B3391
8BCBDC61EB37D5A154996A65A1606C0E1387DD54F5C8BD071C4E9A73D2A62839
2368D68C28ED60CDCE0CD13F54F0F6F9B8AA15581085459FE250BBBC4D930258
426AE5F0EE8933D269E90877555B1E9AF694D44B85295968D0CB1FAD3420926C
4455FE7FCBE124CB47C28D01A91B690FA50680F1872B0C648C191F49B0445E4D
9172E116886714ACD5D2BB98B011650B2A5D8B881D6854DA373E852C74B1D27C
25684C3B97F38034E0EB09FFF000CD16DCD5ED06EC4F5E8A91F925D6B528BC0F
957029EF80058433952B698525612082298F0E6E36968C8EE2116E5F5C2F25A5
4FE587E55C037EDF4C9BC1D95C48519CD63CE8E38A742078EF5DF4BCEFC85437
AD3A71B378B00586F8A890443897F479F5C27BAC920128ED98716C9F052D6C66
D3FAEE0166ADE5F16BE5F1C91532AF97ED907BC5FAFBAAE31FCE73C77BFD275F
6CD467E0DF4748B39BBE76D32933BFB3185C3972FFB25E951D72E8991FD4F07A
583179EB3D1309D2476139B9C0B13F5F5D88044A8E852381042B9A9E06D1DBA5
5F7852F5F7B16EFE87751022CF6D25E63E154A5957C1DD70C8C4850AE8DAF010
FAC2791F4AEC22074469BF0D1D5EB1BE26422297188DB7566B42A4B0CB64B168
A75A8C17EE6E339E5C3279B78C4BF98B23BA5E8D514F2930E596BD6CB249A05F
229CDC2C7B3F4693D0354109D6F3AB7D037E509C5DA4A954235A57F0F59F8568
BBBE292FF30EBAF2055448995FEC91991A3408F0C60C9667C727E4FD346CB11D
121777114AD0F0B8E7F91BA5DA79D7AB6BB91A0A6D6FB96ED1A9AC8C200FA2A1
EF97E5B5E4C753FBF42C1F976B0446A60F14D9901CF49CB3C8DDA06F58DBB99B
72224350C95D74174569F2F4629141CF756FAC27DACC81D3B0B0BBD9CF1437D6
B136DFE42B145626CDD287909F4E902B163799F1FC77504661892F60E5A56033
3458DD227E64A710E38EBA2D3B88B585A260DC483EAF72E4A3209A990FF0F544
CE8C5C086BEC650C87AC6908D0C344FDD23379CBB77C99C5099E69C8798D2CDD
59871A304B16A39307CCE2C1B99B8FF8D5F1651E70F35D9809BA2C6B376D2F26
1E6F833FED1423463869E3095E39976A7C42D48B75DF9890529FBB3D24651664
E84B70E8BE4C1913F5F6C757234D7EDD3618CD33389BB0DEDB0E38DD52105687
59D8B715E4E8722259218D7B8DBAC9A24F299EFE32DBF5035ABCB18BD6822348
79B2440465239ADB5D3E324BD820BC6449A228E70E9C8B67311DC0694534AADB
7CA1C907C3EAD979BA7BFDEC43C11B2733F80AA1938F0353103DB83CCF9143F3
A1A4356E7C0C519F68E411E47A248FFDD79D1D00AA769932C9717D85D4C4E2E9
41026C25847C739B6EEAD718B1C959EAD812623B5135A85BD472D60840A71D8C
A1071083A38A0F478AE6465F7F11D948FB905A29621C63A8EEF136C02E5FC665
9D9B34C3539349E3AD8C27A962DDF433A635DFBB1FA3D448B363C36F9830029D
893B86412505B6FCA5AB5BC8937AD9FF4898D9706D84EB8A78789EFEA3EB8929
EF655F1D5D2918BEB04B22E4E18997786BA72E91BA1D2759753E96A327B6C065
6A94470FC8ABFD342B6906A5399825EC884CFCA8B5A8AB0DB6CC37838A6472C6
01C215037E94AC89459339FBDBF92515FD7870D55FCD937B60978AE0D5CB2472
84C99F5B28FF8772D7252FAFA67396872257014631A2271F032039F412F71DBC
F5EE596AD5B7632711106DE9470F037FDD15E6113A181DCB5104577F60FD95A8
A78B27ED20C2D7A33C1DCBD8AA217A5B8C1FB60DBD3998E1FAF95B38C37DF0CB
58C972E3A3DDE8C85FD82A3607E18301B62AD95200E13DEBE6F2AA12ED5D9A01
0ADDBDAD28D36FCAADE15A574DE45CCD525EDC90B9FFF47FCC219A2556169FE9
8FF9B3CFDF3CBDEDA43DD2ECA72702A4357D241AA942314ED22A7C9D7F1AACB6
BCEED9171CD817476967E255F808AD2EDD51131DF5557EF42876F76EB35EAA4D
FC8050FA56FC42A963FDC006DD6544A13A283363FABB71AEB4A34F5C4642748F
7A1C3EA0BC46A3CBA124AB6B22F93F580D43364C2B89E30AAB7CAE12EE07B0D6
06F78C79385FAF18AC8EAEEB99B34D37764CCA28A466731CEF36A511312DB573
060A7E73001ABA76E395D789B195E6AFF4909ACEB5FA29F511E4EBC1B7A6D267
FB65B453B69718F95AC98AC233A6E65D542FE7142C6AA8254B3535286B41180A
D68E00DF5037586FB1A55007F14C3EA6496A486815A6150C8063B5D2D0C03EFB
23DE7B2E77207E6022E9D50B282B1284DD9EA66137C29A5BBA8965CF383F4F4A
E6DA98D1611D05E59ED9BE0CFB3AA8879CA7DE46E110D9A702E2857BC8D355C9
C3601FDB838B2EFB86A7EB3D9C1A8F97264607F6FED61239932A1BCE4E729459
C43A6F09D8EFEFF6C02E5ACBD6D2B0D7BFDE4F4EED1DA153678F9F95A9E825FE
956685E0AAD3A215685A828CC8BB2BC61D42A9ED903B410E44CC26D3A3E0F450
318BD182CB6F86A9427C870C2A898CF32BAF2418E0A1FA6E54E2459EF628372F
57428D0E9DA501524CD28C00303A6879F7154DAD114D1DCA305FD1D602269C73
C8B107D49B98E5E0C82740B5912A1A4087B40585F1CE54AC20A4B455D06EA7E2
4D1FF6B3A5D9FD92C7D9C43A8255D0B63CD279C4C9D08E167B32B266A48D168A
7B15993737BE0E67295D8BE44233E4E54C8C0255CA77AAA035608BB2F684A826
D6841809D5F0B52D59E6AF662CFDA9AC18A33EB4AC9057A332BBC01217DD585C
9FAD7B6C7AE9040DFE8F2336CB343FC7E6C72759F1A39580FC0C21944F093424
B1667D91544738C9295BCA4C413B347F8EBF757A4C127FF0F2C8E96DF0029E23
A244DB1F4E1CD50860AD79D036DDC4B3D69A6DDA20E104C5BAB68F3D943A9B0E
27DB3D241CB9D6C81C4D965F85EA14F4839C4D3ADAFAD775D11D0F119E286225
A200625466E46DF594E5D193802FBED04CF075F70A8BB95BF53E8BA3FE48CD12
3E24A218AD285F9EEE2D27FD0B5D3310F30B31C9BD5155E41ED462485615B913
A00461E8A7DD2946468FA6CC0A0610DAAA6A39A9DD54CC812427C84198AE47E5
F9E0807326E19226A4FC31C9828CF2AC80B73CE2768B06545FE267BA766180F7
A037E4E7C8D1414676E80051B714940C005CDF9A1376961EC2BE440312FC45B7
BCAA025510547151A13AA596A5D16B68355F68A29263C5559C5E7E303CB55BB5
D0CAF8AFE2FC900790F7F6050818D727B4FB3837538819D054345DF144731DD2
332B0F7F5E84C46AF67CE0C3C4AC7AA8B27CFF05C5E768115C104826CC10B9ED
A4DF63E0D6B5706557B831934ABE6D113D7FCC36B7629A1EAC33605FFF98C7D0
11DAF6ED1AE0ECE6A43A7A28C56F6DA0468D5C98B4E9C99FE1B4DE04B482145F
3927D94F956FC06001C3EF17044AE263A05A625E1AEF537C35C364269A0A1824
B829CD76E3AC5D069E9CED19559001181E0D351A251A3968A2DFB14060DB0FBD
D745B9ACCE3E5E666D3DEEB203D4F868729955E3ED89CDA89A788787EF2A58C5
4D8AB7580EE3ED58AEB83B72CB9028F4653C9F180BFB8D66CA8CE71CE3E84D7B
77D65D423BA66641876B63BCC65722CA958CABAD3A3E384B6993EC4CAAE607AD
AFE8D8460FC48FB39C8126488FA258BA911A19C1B4759C59A2CB5645DE059368
B5AFEB6756F385F6B3ED01DFD581E9F3F68DC6F44D503C233895B9C85CB71EB2
EDE880C30EE66110F3D0C57316578102AF0CB0078D67152D4608394B82E83877
E96D5FF7F7C34ED8E71B5E85B0E859752FB5761518E548D8C1D3FDA14B561E74
EE19E0545F3FA66C8F36F2FA4550F81E41D6E57F80881B3E59A39081F7A1CB7B
7BDAC189A0568797D0A56138DE470E61FFCDF4EE3796E249E401617B569C73B9
268484942278C573C5A7EEA60AC017A3CBD6BA59A1AC2BACF152F84D3C6A9C8B
367230C16751E103E2845FB38FB2C1539C7DD08E56B987062BB57237BBB3056A
36E97E399A7AC3C97651007626E9D2EFFD007A8E985FEC263E6C90B80026112F
B1E3B5437964E2431F7B614CD62017182ABF5EF7CAC123513339AD7F5B19D9EE
63CB585BD427A741E4F98951C644A10ABB7CBC3A579E69FD9DBBE5372C3E6C70
7B66499E99B97C5141D2E05BA86C59535C34BA975EB60BC0CE5C72512D196F8D
1BC0B3FC12DA2D13F4BA599113E737FEF91B42E09200D95D57CD747F029DE976
A3AE1D1009AFC847156F96D9CD38A764D0EA70E5E9B53604EA4DBF6D7855B884
9431DA4E0D14DE737964EB1ED4B2258B6BDD11A8CB27578D696F794DAF2B18BE
63F1EA17D67F016B4990CFB9B7335AAFB1B259A7B19DC098BCF23767A1D3A0AF
7BCC25BFCEA010E023A2FB117C451F2E69FDADB27871E711B7F00F668A0240AC
9A7D179D09F52673BB21073D7A313CDC5FBCB16FF1571FF48BB3F366A50E379B
80399771B0B2912C8BE0428AC71A76D0CF3C64AD63E04E8EBAC26CE3FE8DDE8F
6C30A2362BC44739F4219854F51D3B81A2968A2633D19D19CB2F9733D4574778
5C433D4E18A02ABA38F55742DC36E4FF07A5A09E8C6792D3B1BA80063E3556AD
68D0B2AE350504DC28336D492C4F6A7635B85ECF70EF5733EDB26731D148A0DF
7322C3FEEA48C6B4DFBDB48F7FFD497736E320C2EA32FE2C326F29090704D06A
A53B7559CCD26C3A1272CFA2C28FBBBC520AACBFBDF74AED0B3575A19CFFBD20
C3942823DFD0AA1DF822BB91C547733B18DBB01E4B38BEB534701FC7128048CE
8F2291AE97EF2C4B2446425BCE1E1D939E2B603A03E917000E9803BBF7BBDAAE
F0C88BA83CF4138AC7B430553ED3E8160E813F2C217744EDDCB8CEA62AA27DA0
4D2DC9F3EB1838B3E3E370977998371DBAC5D3BBE5694204AE852E6BAA8F264F
70046B4730E97699266EE3AE8475A72A85EB4E47F9953B6EC5EF71A8A6F5A4F2
1347549C1150C47407D2FBA6F34AFEE6978EDBAA07A27A116C80E837DC740E86
068952F0A57E934D760F1916817FF8ED4A4D2A8A6162B4DFC3D2A17902A6061F
27D2DA45CB5AEEB66CE99FBBD9293D62238AA11D6ECB0057E4133240C63B1F44
69685B58774F0C9551E7F91A24DD7E5975965843EE8BFAE98A1C243F36885CBD
4E5745399DC1A9FA200F391EED389AC49F917FDCEDED8DB5E710CD843327B1F3
60133AB8050418585ED2A1B5D7B1080089A09EF7487C5B23731B3E3C83CA192C
3082A191848F9C630F52EB497E89B5F145D01D566944A59E7EF777EDF5F4B1F0
A6DF35BC2A47CC76393F4778C26D5289C1E61D4BA2CF57E95EE1FA93CC299990
D52348C8C8484B378AD48CDFB645FF9DCE1B9456A8F32CFAA3DA6700427DBBF9
D784583F56DF293DBBC6708700EBECD8BD1C70BCB7143D09AD29AB405CF77CC4
7974591E7388ABBEF0BA54C583F6476720721FA3BCF65F7C1BDAFF8F1CB40CDD
078B2B3129F157C84A17D968CF0EE334272D0C07FAB282082DED26D15E31C78B
B32742316AED9FB75942C9699A2519D59B16F9D121E13894AE7F8B784A1B4BB6
2430511F48686A04D90A9765F9059895E4915405709607F4B3FEDC85A3A23B90
E6E9F1316BFAADBA9135D64A7DDEC789195D756605220387B025179C6C7BCBBB
8D9714249A9A7C328D7FB0DEAC4D1168DC5C66DB2C1ADC28A573914AC5222C8A
7AC6C6AD3E1BA62C2CD5C22EA42545D0BBC786CB840224D35679792EE1E4182A
CCCC95EBEBB93031AA1FAEE46A2DD6DE9FAFF8C6C8D5B42D387575441A9A97AC
7A5634E332E60DA31233D7314E18E98E17B68924D0EF745BA58FDD12D2896B73
C164C32DBBBD09CEF33DD42F9121BB633AE6FB3708C00A4BDE3339EE44F33A75
C620A66B0DFF16B2BA912B155954C03D97A494A568C67AECF19BA86BC407654A
8C311D3B3C8F5901B2AC785B222E5DE7548152B76123C04C3FB31E3D25BBBF39
7F83C2461366636349F82AFF3FF151EDC1EF95339F55314E30DDEE8374882062
1FBD84163C13A65128994D74CAD21F2BA3803D1B67AA1F04A4C533EE8B901CFD
0AF403EEBA2C528D32F7B71B39F1AB2E0EAFE181809E56BD799B6A938581EE5E
D2CC7FA44044CF1E14A026561FC62438E51FE64D699DA860AE9CCAAD3330408D
C5008EF4383FED9887D5D6ED9EB9B49FECBE25FD43EED0CB337CBA10469159C2
E38F2FEE876EC79521622318BB6960F7588E6392FC18798E9BD42618FF76B7D7
477C08779C0180E034A90CB76A380DCAC9C79BE3BA370215A15953B841058296
B4C6A437208A3AA1BE8F7AB1DBB27CD8BF8B107F22DAA863F571D75C8A0D05AD
493E6BAB4100D265D42EBDD432F337CE1C1C78A8800AE691524E1C6FB25F41A1
5D8BBEC927EDA61ED5799165E2C781E6D9C2BE397CAD1E44C4FFE84B0D49292C
9F52F698C6DFC577A7BE7680679B52737DBCECFCC3C7A7D26021EC57199E79CC
100592B42C051856219C5847C0D82F0E866312D963E012DF0DD89992CE5A2AB8
0B008837ED8F6D3B41CC803C6B5EECC114ABAAADAA19182C7E3FE4F4251B1887
A2C605FE1895D30F7F8CA0068316D0DAC23D6366E798FF67671C829F078A2710
0A52E231C267046C4EA27240E41504D3E851A06658D7B23983C0D8A7C9DDC28E
D6221612A20A3068D840286D9FFE9D9192B03A578FBC2A0C9903B5E8B293C2B3
B482638DA625E36CB1C3D5EC97B9D19604F4CA460E1C2B3B3506F5C42C194788
D20A71C7AB8A5E0EF0CFB3468A1463D184C4139B0111BF88E55C4E52F038F5EB
1238F88B74F19CAB46BEE6168EAED2B0EC9606F6300D6B118A8298D1F27F9BD3
9E7AE32E5E256AFF17F7CEEF7E5412971F3193810F97E77202F1B53871F094CD
AF1D7AA97BEB7F756273333E84F341637A1BDB292EADD055C97A12DC9AE29320
74325629DBE7BF3642EC9C7BBDFFC7A167A5E16965289FE28186AFEEC45CF8F5
AB034EDF79D88E54556EC8BFBADBAD045C00A6C3887E0A00795C3712A271EFCE
0EEC76414116026BC6FC01CC7AB541E85B3F38864B416C8D24FC15F45E5961D4
C11AD4C569CB28FDB8EB4024E035D4468AE5C73036F3704B16222179BC12548A
92C5DC2E76D6E4580021301BFEA3CDA3FDE4A4BEEAFACD76E9EF75D86A4440BB
59404C17B1179CB9B56A048AD7A3A1B81718F3A994AA4CEAEAD1F1FB02B3052D
52F8F82DC5B0B8383ACFEE3B6938E48D3D951EE81BAD793A0084F92B6FBCC541
5159C5A2DC2A851524D166CD3B761119E48FCAC8ED6FC8001DB369C80928F841
66B36DE8F120A6BB64BD55409AB4B6A6E92D305E40974B07361ECA57AE78AC68
8EE28C31D597BC0184963FA54A8D60791E130E8186217E2EB7B8A1B9D89CABAF
27BD4EFF6B4CEDE22B273B7B00D0680BE629166D338F02FDC92AE06BBD60C6E8
4B9FA28BBCB712C15A5BEC215FD698B7EA2B0BE0D9707B7DCB885D6B04DF891F
C807DDC7F0A78979D36BFA9D85C9CB0414FA7B15EC02E8C08C8A4F7B275DBC0A
492177451C915FD543B77DBFBB4559C6AC593EC9692113CC15C94DDD29404974
8B473FD5F4AE9C321D2963BD50C964A773F0EDE23CF1142BE165D39AA88C0B67
1339A0AEA21D2A485E14007D8E4377D75506A96CEC01FF7780AD4749A6C5C0F2
0571C577ED03D63028C15B998A49116A09BB7F320F0CCD98F2F7DF378E1BABB7
4B3AE803A7E943672A1CD5715F339292048488706535E4C498C94B6D69CFF950
270DC1AB3B2964A1A9472234CB5C612FCC6F434D3202BA66D3F05F8128A99ACC
3074FE6CD99CEB46A5C38E81F3C5AA93D24A2FA55862DD7F32ECB31E73863967
A4FF7FCCCD04CFD61476B4495F94CEA4BC9645857AFC4009E803348BD23C5B2F
D805839D09932A7D629C80E8D82ECB79DE3D2D5E0BAD4BE9638389B6F7D7E58D
9C61F7C0F8E240A540D6A8F6527DD6BDF75ECC33043D9F434FAE393859A98FC0
B3EA3A0CAE001F538A5673B23AE113B27C840C2A5C22FB0CAAB9C888924691F3
93457B9149586345BC1C0C9BCB39ABEED7ECDEBBD595041D0FC126AADC040D92
12923F8948E5A8C8940A685063F07283E49DBD9FA16BF277FD32FA1257A05A41
E92B286CE765857220244A9E98E7F4D6E5435B09540AD45956870AB65A97D26E
EFF48FF7D81D46E1000ABD6CF8A268857C7C013561FCE2D5CC58CFB186696DB5
39EB9E0287FDE1F2AF632754B587F41F1228E2108036EA9CE43028BA9A4D1C64
53DC9297E371A3B702F504A4549D706F9754F6798BA7B8225E8763679D012D9F
B773C860CF7E1E27CB13D8DFAD0E258D61B3C4F03884D52CDCBFDC996510F6E8
7E3B4D75685B2E9BCC9EF5096B401A7220EF5F67871FAD992447F76CF16F85D0
A04140B193C6188B7A30DE453A38BFE3EEEECEF5EBEC93DA9D3F4E0F52325904
149416BC5E7F6CC39A8288A8839839081E3D6472F480A08459D6E042863D6852
55A23A4BA8B7F64072E73B35400F979AE4F3A74F24ACF879C3B5E9D1E7168609
339270049138602AEBF6B5E5D5E8459680BEDD8D346437812FB523E2DFE4AF1A
5646EA8EEC99E20946D4C517035EBE97F26B0B58973EA9B5E0D111D9EACA299D
1C572809EE861F86F7038D627E933605E9AFFFFEF860A1486CDEA9EE0EE9B475
088985727690C1AD441EE3F46D5A812EFB4132ADFA39B4F873B845ABF2660C73
098A7CDC7A964E28F583EEF904EB6959B1D3A39766550A13204322929D8632C4
BD136C89169D45718A88BABD76EFE9DE7E2CDA94DF2AC0F9AE7A0DBC66209178
21E5BF6512943296B481440A3B2A011233C57EBA78A4B34C42E974105F1F85E3
E21FCEEF31A4D5750105FEB6F0C2ACF20B3AF57D9EAE465FBEF66FE82623DBED
8135D5D78B385324ED3BE8E62A7510075ABECBA8375A5B8302EC738FF1856476
8DF75B1026FF045A5C6DDAC94750B604AB15D9AD0AB05C576853FED0FD74C459
D1F1662445F097EB5A85EEFD4DB4B9B2E9C804FE27C8B6EB69128E5DD1E26872
A5C2A3AB701369C9C627C4A31F0982334E7B49EA1C4688DAE073EEB636927885
DF1D3AFF4BF6EE7F947C5173497398D5059866ACDA6D7CEAC92998DCCF23E930
5809202C698AB39B218ECC7BB9128F40DFF158579CFA7FA13BFEFF0A5980FBAE
2FE3B3F62F20BF5C8B3E3066D69FF23D50EC5BEE2FB95A44F2B2E2DD94C933DB
E800E4BCE7F0FB33F4C1AB8E43790762CC7D2F2B08DC581E77A484D1A7C53172
A728BC83D3774B973AEC1EDCF0743CCE66213A6163B8B44C9A89068E3B5301D2
364D102B66497EE0559C01123E97FC1B226867131D1A1D225E5BCF9150F32375
04C3512122B334CE03EA6D6A3CD87F7597CE0615963F33B07FDB0E07FD50A10C
B6448782207C1F773165050913614F8EF8A85BE29E113D06CC839FDF5442DD3E
19B955F0154DA46F6640F1B0930466DF92C752DB45A2E8BB824F2E0310C59E86
4A74877AB522D5FBCC1041A6FCD1E20CAC60BA728EE459CBFB2869B5F278CEB6
16EFF5F6C99552306526AF1980EDF91E8CA78AFD84BAB090E3434034B8BF9C33
6D7991B97D2C102A0C70AA5D31B8CCE697B76D97367E36C22EB474C88ED06686
83F2F595DEA5468CAAC2B78E5A1993F2B6373BD0EAE684D91E56CE2440A58D27
7753A4D9D6A7E2A9CF10F7FECE6E41E6C4AEF2CE7215F9FB88D09FE4D1FCC0B5
C1A472B27279036B72C900F6DCE1C04FAA4D893D3A456BD134531A21651E03B5
EE5C4FB7CDAF903BC5C04FD0AFB87DC42357ACB54C3E68A53FD4A142CB1C1AC5
FAA16E0E94C94D9627E275FC30DD9DFF1BFE1921F975BFF08B26184CCB17539C
AF6DB91BF6FA48E94D48C1EC30A3128B9741440E8423E5DFCD5FF7BF21EE316A
EDA07CC0571BF14AB9A908E48303B8902D1DAE6A674D9909398FC72CBA726B30
7A8EA9890962512B2DE3CC959848E590C13147B4FD71E602D9D0C1289260B0E1
2B51E1234E901CA2ABAE413C389F9041ADDA5D399FE46B305D0E415AEE30FB4D
DA9E1BD3A55C4D59BBFB7F5EFB232FCBE3C540851DEE273B2E7D2DF24878CAA3
4EAD81BDC76197DF1248FD121CD97988D7002598288EA2C13DBD984020136526
6C5ACF068911EFD0CFB268307F4CD1C56B301380A0F2657F1748F28CBE526D90
398D3840182F35ECB41BCCBE01906D59FEA0253535C8A6DD2D07F4B95CA0B01D
3BD3CD73B2B2A80AB7B924F1BEAB9F601CDA2C40EF963CA5B05975961FDDA498
D72C313AEE1EFF147266263FC2125689FEAE4EE7D82E79E0A5B5993FA4ECA277
1CB4D16A5A039EA9BA857C26578C8D3650A6ED32411F26B22A121F1A03E44B2F
E08BCBE67CB618261D2629A0BF31DA2AF1E6543DB5D8D094EBD746F00D4870ED
44C424569B005983BC088472F9AF3FF9E9436E8886ADB7A8C825D1A4064D3233
150E265FBDF3BC254C83F4DCA56A2102C18F79A2011DDE2CC5C2432BC832B65B
EA5A7D0E8A58C06C5239CDFD85C441C0D7A174C40F2366A89977662DFAE45789
B071CF0454074929A23EC014E6F3D1E6E16AEA824FBAEF47BE3700BA5638E8E3
F4588E2F1A25D33A99DFD790BD49B512DE1EFB3DF0C2A85DB7429BC242A085E6
60F9083E36F3DB62C2AB6342C5D205EB976040B2A60F0A5B9B4BEE1ACDB86500
AE72576A26FACE3A2E762C02DE58740986A9667EFE80A71D28F3A9017780009A
A744BA8FA1032486E7CD2BB34AAA7821836F4126BFB9769219F69E6331D554E6
829242F1E05AA1A3BA678F43E42C22787C49C0D493133C1342D7AD67C1DDA9A9
7933BD32C81CC0370D932C4A4120E2197106766636F5424C82F1DAA71766C9B0
D3440CE049E4FD8F1183360FA32A3704EA4DBF6D7855B8849431DA4E0D14DE73
7964EB1C7277FD2DB400DF06C70397503DF67C10B47377A99EBBCA165A4007DC
C1ACB79739227B0AC59369CAF49162834567093B78A0DEB9119BB0F6150E583E
0AB51C2D9CE83CBE6F0CF35F09A6B82ABDC8CB1CA69C62E1DD1B323000129164
89BC37E66CCF943F77584114CFF5B5E463327C54D992F2ECFBEC965700730C46
F4B358C2890599A21E5B023C7CE0560525A8DA4CCCEA32F995DB32130C388053
C016D28FAA91548361B38A729CF1E6DF63A016E7CA0701B8A20B93FD8A6C6511
665267B075C5D91DDA5DCFCD2CA3F920D15628C16E671D3E2CF4CB9C39E511C1
B326B3DF00FE2EE816E4A1EBB873907CD83428DB80FD5AEE6DFC9CFBED73EBD7
0DE13443F8CD56E8D3510D3BDC4FE003F902FEBC471AD6C6DB3CD6BEBFBA593C
E34B6362C7109103FBDF1B4DA7CE2B7194624D33B42527A74BF072AC4C6B37FE
F23A47B5A4038752E723288E6C577CE5C85DA2A15CA473EF99F82C6640486167
706041DA5AD0F37229EEC652612CE1B974CA7BE24053096A1DCF2FDF2F0B476E
52D38BF9BA9A7880F7EE5E00A451AFE91DA73C461FA75A70C6BDEE0EBEAE6A65
B9ECA67C3500C9441BD30E3554F65A2BDBE89B6F6BB32B219D9AD46589DF864C
97582A155AB9928B3E0676CC131BBB42EEBB32896104DFDA236D8D4E7B48130E
59DA01E46A79ADA932230EFC258A343C72A87D5140274C829F239D989C9E1533
54E56C56A2CB0297E6C99E604FFF638C9DB5F9E1F30C417B18667B975BF873F4
BEA9022072655ECB439AC51759690B138CE1794020155BE6C09E7216168904F7
BA45620491E2C870B30F3A593DA2285CC25AC742E8747002B2E2FCFE6B6E5454
3B4114852AD1DAB86AB5BBFCEC03C8DE766C1B1CD0C012FE9D67B00A9CDC8BD9
66E8169109CA69AA38115A7B7BF7EABED7491492F2EDC8C4B26AFC04C1786368
9678F4DB2ACAF12C743DBB88AA76B20EEA00BF1FC487949607B7D8A3EE6289C4
2C70D1BBBDE50786313AEC7EB165B1931C7E4FF8D3C8422DBD42627082CA3A4A
3D0D202ABAE1E46EB10E87EE5D86C0382E7D2547C9B47869DA6F735671291F97
6E02368552CC5598CEA91C8F135CEA06C3251DD02D57D1F2F54F0E2EBBEC84C9
D839CF9231D4DE942B7951DF1E31E9D00B423765C2FF3AE200C83D5ED0A48664
445010A7E0FB5055592F74B91FD7F78DBAF995F1D86F8EC12C149B0852E4C88D
716A014F38E32CB59218E671C95A9BB1A0DD111DFAF08A68119DC69C2A9360CA
05073141C934304F9D59607E74887779ED5266E26B7059BBB61BCCDB871BC0B7
A2F8AAF27E7E115BE85D71C3003914643F89B1AFCD9F09D428AA79821303447C
940325E2C4030D648A26DFBC3B09DA7A66E75426CEF9DAEDECE0E8BD8A9B1714
26C498D274ADC1D97A103530EFB969DD821150DC0D94CE082C9B9A6C7AF78822
3EFB01D867563247D9E05C3561B3F793D4ECDF9B17AC4E1A9871B92705101562
1677D4C66C7FED09C0EB1CC751A487BA9923561D933B7FE62DAB23AEC8325874
680134F035A044609A75AAAC5FCF90CF47F56C5D0F76AD6FACFB4EE3207884A8
5FD44266AA605F5F0CE1B71D3CE9D446EE178BCCABFC1BB30F92F2C3B62AEF70
77B8FA5B0B126BB87FF3DF515CB8F576378BF839C4F64FD5682CE86CA4A71F71
CDA3E74966D5D925DFAAC92B25E543603F2B5A4EBFF4319C16C03DBB806B7D11
46CDD7B5AF2FE2AF7C8824D328722D6D73AFA5DC6D2ACFC90A1ED23A084C8DC9
4D9AA6C0C3A5D2171BF28EB3ECD099F35E57B907FB238ADB145D5ED4EC55C381
DC535D2D3EAEE7FC64612C6989FD8DA8D5A0761D8D7E9DEBE2775438EF408B9E
D0C6952247BC28B35FFD2683DEAFB7220E9774B3CE53E504C6BFAC2BEF3663F1
C2350D6479115AAA5BA5770C07E17F21A608FB0E51CDCAF05AB723A1B4A6383E
F05A00A57078A6C9289FBFAB908E868942C11A55C067EA8E1ABFAF6486A9DBF6
668550BE7858F5790E58EBDC45A5A65A71E268231C07EC0F3AAC23375364942F
E7FFF998B96AB3E3E182E29B819FD861E52B04E00F9230F4229BF696B159AF03
1D2926ED0C9A92315083DE9E707192B5A2F9860B20D5214B61CD6B1DE194DB09
E6DB377F945275CB4A4692393F561AC3395F6D9B8AE4F802ABC86E45225931C1
02F27DDA7E73EE21449B74855D57AD3553CC5A757FA50D53E6AF18AF09A1B9C4
792EEC11084D04333076CF897B31CA1F10A5D75C8B02FB44877B05C1053090C5
26CA1A8F1197FCE0E63BE2711921CEC0C3C8F811AC5FF0A590473E99DFA97D90
1589C53187E2AD8E19BE0B99F0EACAA52EC073331BABC2B016D44B2E4B673D62
30D5F2776ABE58CB9B13DB857C0A6824B11264DB1BCD36CFB0020B11D1CCC918
6C1571D506413DA4C769234B15780303EFD10F9B6887E40A5D78E6B1ED263B5D
3ABC9D10FA331966743BB807BC62ECCE310D8B7A3EB2178B4192782402D4F78C
39F044ED6AF03CA44646633E1A4D816B85DADE28C0C67A74F8126AE35689ED2D
34C72468503347EA1A45344A43E0DC78100DFE972001B5BEE40DA110ADA3FF7F
79157204E37A4CBBCB1EC761753AFCDAC01BA256DE73FC8BE63397C8EA891CD4
1A43CE04F18BBC35AFB2BDE1E5431BEC51670EF8463D3894F1714FD8C13852D2
65FBCE184CEC42A03EDD7A5CC05BA817B7F1BDB61AE87F1906CFADE3EFCF095A
A187E95C381E88BEDF8B54AFD478D9E939D0D495684660541F5E95F4C2DD1735
2573C90177484F7E742B00B7C92F187480832B76458887F0FD9D971D2C75AAA2
37EFCFBE0A2FBB4F4A58344AFFCE43F339591B0393FF8E84EE70C8FF730AF8BD
9EA83F3B85CF7154CB1AA0BFB965C82A61B68F581783BB9D29E08772D7252FAF
A673968722570339FD98D969E5996187EB83174F748F9F5C6E7C9E45C42374AF
BAA5AA9EA029F95B828F816484772203F3CE700B4D13F52B3921E48CBD1046A9
F5D5BC258A8D370AF958CC757FB28F8FD39312BA79A229868F2C81C2F455F6D5
06DBFF8D706CA6E53AB3114BBCE45110E40E9EC219CF13613549574340314856
9D9741436D2B084C042C4427E65A9BD114ECEAE9E2018FFE5B97E3F9B57EC471
170BF3ED941F5ABC150DB466536520A00546E0F30FCD4D95CFCB2898E1E44C25
8D2B274A9CD17D384B8E746F870BC1E9C0ECC6F912AFBFBAF1389BAE45B2989D
A00455203E6E7D7F5EF270A816607F248C5C1D5C56035A8FFEF20D3A2838B285
6305810D0B9F73DE3B805A31F7B99C3841D74DDFA29EF38C14A7D31F074565A1
4EB60996DA359A9FD6A842FF6BCEC22ED954560FF7A1971E39FD5010178C1E88
3FF01BB562BF7A8CD1C6CD40BBB35A5683DD06D458D51B76C73173263805C120
912C4A40F9E2FE17FDB3FA846C8B8B8A7C02A5ED1742EF3CB42EB0ECB219438B
1FFD3230CB86CC47C8229176701890900230196D3475C377D3C5C7267BEFE151
C52A60427176D702F2545AD93625C5D2D7209315F9E358DC4BEB66160A8FA502
68FBDF1A183AB1941874DBB0AB81350F9F2283A52C662068841D7ED60D954F44
AB46FF87C7C9FC68AAC0A98138211F81404A39FDB273B64ED685BB2F05E6532B
B9708F1A0E202C3F52D34947E0964D0E8E89F6043C0D29774476B8B091875471
0147A13BA938FA06BDFE812F0DD06EC7B79CDCF20805884943DF21C1F7CB9221
317C8A08B3D874CF10A9960CA9559D44949A9023452DF54E52A55B4FFC51223E
DBF645427399C7CF99FCAC032AE640C69E276CC51C86FEBB15424B17BAACFAD0
6CDD337835F77EFFAF8782C30F4FBCD5010D94DDA30568C75286BDEA4879ECA8
315278B0B4D113A3DE9EC13B449FCBD7D7224A3BC46BCC1E5CAB15FF190A6E73
33901B8625E951DE9C801421B2FCB9A96154DD7D01B83978699B881FFF854404
AEB03FEF3B12D9AE0D47CF5332716FA25C28AE049C4A6EAA92E985B513F3445E
CF5D8352F586DE03A4707E169BA850A0967F2B7E3D1903EF47888C851EEDEF31
539F1E94F3C05D2ADB50B7705DA7043E617C4E9E9CF897140E708EB3654A3C66
EDFFFA17A94FFFE3D9F9FFAB6ABBFCF2740D669A3DDBFC05DE11A30BA6976F13
C9DAD6CFE55588A85CFFD9A23AA55B1F15901EFA66F9ADF9529DC7FF8AF9BD34
B9C076DE4CF28D4940F93FA5B83FCBF0CBD84EFD9EC148AF4245BFE780E23BB3
21DA53476676B627A600BE050E645BEC59B1DB14A6EECC6AF55A70AA52C5AA0E
215357F7DC728D263C9A3578EF055F28682A07D87E6D6EEEB3E0B000F04FB364
F133445F9D56EB31531B8EA85AA74FB443296734D6B7F9A7E71D10E2603FC828
D5FB2C9832772C15EB82E86734FF9C269DCFFA887EF65595B67ECBA01F813A96
78108178F33EC60A938C6792D3B1BA80063E3556AD68D0B2AE350504D98B3D7E
021790A1443758736475A38D8E5132C5733B4CDCE88172D9CDEB063F4E4C2205
AE4503C71AEC1836F56AF57CA381B2031371BA1FA319D8FDF0131FA793AE373C
1AB24C8CA056B20E5927F332A1B7A2CC3B6765B6BF8313F99146A0B2A0E257CE
C93330A149C5D9572A20B673BE7A65945445C012E4A2EE26383CB45E7393AFD8
869CA6017AB7E3A91418DEE48399ACBA6A7224324C88FD80EEF0CF90D4A57FFD
C9846F2B53EF7BF3B90C59647ACF6ABA8423CB111552301916EC174222485E97
3BAE14C4485B6011D4FE891B918DC0343A01080548802256FB10EFA2452D8EC8
922E914FB68A6F31C8CC8FD8222D11A8B38294FD8B63FD7216EA3D9D9CC7A830
D54468CD6FA5C5FE898EB349CDBE1919CC375D1D12A1B06B72A065294AC04A62
DCC8BBCCB2D9FC04EAF0AE36B55033A110A2A8BA45363D3B7FDCC2F4A81E4737
0B18001316F0FBA5E3BAEE0B3AF17AA50A1DA4B0CFEF053F44EFDFEA92F04E58
532D7DA349A085E560FA3A13FFD612BE78D9077E1EA366ED709A0C2579ECFBCF
B7E7721E07C9503B4B028BAEDB4BB096DE59622A2EF791B46312F7CB19B8E0F7
6726F2D6775F15948A9D4DC82D6F60D7DC6F714650CB923FF4123DC1F6674B50
8B50A1B889980CCEFA92B9076718D1D92C3B9B65D6D70A7FB61BC4ADA1EF4B72
26AACB227DB52D3E7748E7BC0B19A3C64DB376D4861E84A0E6604FBE708825C7
BA991F36C587C30D3C96BFF904D07E40B8CF5EAFC476AB031A8485DA7CB345F9
EE10B690090D2491AB13FCB507AB79FD0421C5C06B9D5930260284974C323271
3DD060A3874834ED552DD7293D1D3ED534634A369986740FF81ECD6153D837C0
98342260C24C7DFBBABD436AD86BDB2B16400416A7048A811626E1F565EE0BDA
090970F9AD3D73778D2BDD7E552A5BE1BFFC73FBD42AEA82D51BF9669126F15A
AEB8C95877928093514DA793044AA4A7F090ADAE3FB781C6580DBECF4D607CE3
4DD16BB8AE498C7D58312B5451ECFCA7EB8C923B5BED0597A2841500B51C672D
DD9181CFAC6D5546FE7B018B5EEAD8E0241A38E993C5466FA10496515D1B2BB5
516A7B0ED79E24089C3D2E9CB5CA7FBA17481BD7FAF60A6B82284D6A75198D37
09DB41B886F9E10F6E67760E7564618562DABD7DB8E7F480D052158190284864
9E29015C6DB3F15DF83E0185CB1398EDC35E34404FCE1DF074B483758F4B543C
A539850DAAA113F937C6CB188654D0F736708280E7BC03A0FAFA64A7C5FED819
BEB1AD69CCEA398F97AE8DC81463B6EB76250CDBE461FEC4C623BDDB74CE8B71
6878066CEE28B54BEBC6818380E331B92DC75C2244A818019BBE81399BAF6186
5A3684B6E0FB1EFFD2192CA8295936A18B42F96BE5854A7003C28358DCCA901F
57E05BA8B4D829DF4684CB74785537AE114506EA49C7DA55875A3CCD94F522ED
FCAE0CBDD9C92A09EAB86605F30BCF8E570B4341C3751A10FE6C3304E8F7F8C4
9A1FE33CC1878F0CEEE222B10F5FCEA940D396EF93C915C91E637A223A0F6B13
086A33988A6DFAF89EAD9B8871D125317E14B83714D18F84E5C4E50BC74E43B6
47D7FE5C6BC5A0678FB65430FAD099A573D384496E09A2A1DE64B26607D758E0
7D79A9450664751BBAF49C502F992A0CBC0E82213C70F8FAB28C4E998ABFC56E
B416B8DBA1DA800EBDB8202AD344BBA3031C1634BCD70B25BD0F386E1658C134
D080C501D3D8DDD816A28D7BDEA7EA640D89B4B8E897B8A153A3B153A0FF2F4F
59F75B92A97FB0583016699A3FDC333B26080381352B13A32718B865B949D870
43C4686B22B16B2F73C307D1F7291D22B5C4A28780968331DEEC1A418382059D
0ED70285DDC0E5512B667AC78A09A780813B1FF02AA967B12AAFACEF9BE76068
3E6CCC89ACF2A120155637A9CDA2CC2787E232917B6DC7F6AEE22D1892CF2D53
37581A05B27B4EE3FF3371E117F0F7E213BA79517E5A6436BB6907872928F0DE
7B44A58B63AFE598C3EDA15CBB4A7E9B24DE1444340E2B091DBE029CECB93447
111807A857DC545E07454B54CF1D179AC05D5E50D244BC4735C9ED3F75A15C06
80B57B67071A8CFBB6CAC323167D9D96DBE2AB54293B53026BCD278CA322575D
75103851939F8F9C31AD6C8C68E9F34E4D09B3E7D97174925A908E1E9E3FF3FA
019CE000942526F12590D8A239B8AC70E319262AF6A41A09F8D58D4F8CBC0019
9B1E265B3DC015029A4189E4F84886C85174FC32A61B787769985079D60CF711
31977E04C03FBD9C6FEDA5EF8B6778869A1713C9B0AC672EB758FCCF2DCE2783
D4B1B9284D485DD40BCDFCBB490A4420CE5EF8352A3B2C0C3249870E1F82642B
687E0179050B071D37D1EC32C188F311A107CC79FE5120FF314944E684FF5C74
F992A78703081772B16091B3FB2C085ECD52F9D4AA59D7B64AD40E0E8B0D1995
1515A6EF4DF74CFF0F70E977953666FD9E6ED5A705B1433D9B178EDCEDA09E0D
BBB869C08B929591DC20A23F814F53B9901E920B99C77FE5AF2F8A4F93075F35
E31F0F60669F73F90A12F367FAAC92EFC1494640BCF0294FF2103926BD4D84C7
A14B2BB7F38FA45B8809B42D17EE04102304F2F59EAC43446DF8C97971B91C52
1C3C4DF935F68A9237EF9B515521C8242D03E3D85EBB3BE1A6D4EBF7A9FDE0E8
8D64A1BBB90D85756EBB96B5021481EA4E845488B79682B1B9A623061C6A4784
D911FB585269B20E630978C459F5AE933445AEA45169E6F0C558A7C76703D995
9B4267A1B95B9A4F63E82747CBB98970AD3D2AD2C8B193113C8F2D0FA657F157
C5239A213A2BF53DC4A68B4EF2356A3626DCB5AF1919C4F3EE314D0F09A5DC24
D41FDD14AED35AC4BE21FD88A9327C3609D8888F174524917B7561758F155606
4A55FC2CE634031B2D1759C1C252686161CDF475D31590775AC2166849560F8D
49B60CA4A271123CE6974EB6F862421F6F37283AFD0F95C4B889F3E3026F4B4E
32E8600B503A5AC47D1FD7B60137D712DDA34DBD9C4CA4DB6E0CC76939E99373
CEBD7DF217D01146BDEE7C3BA5484CC6C201DF87F0F105C79882D61615978430
05E10F28A51822A85F52582848C432424122267300987CD11336046B5DD23AF1
3B20408F7DE2E0C6BB7996C217C08D45B0926739D960D4614B51D997DA5811CD
411D538D36CD1DCE4AB6E7671F4276E6CBC2A4EBA4E6ABD174EE7766DCCD9B30
F171DDE639B45488B890196AC9A757DD8A491E0A306ABA070C2A4483530CDF6B
37AE47924D2AD33DA5F0E0E54A39325730A438A6EBB464931857F92BF93ACF5E
651F75F1C47F2699BD0DA86F7C5E1F4CF6088A5E41311E9B82067883EDC8BCDD
DFCB6A87C1FDA61C3F3C112ED828E9BD8DBB5A60E88548BB1CB4FC41BC94F08B
BC60B5DB9D19965C7429458730499815426B4B8089D3752C4D8262B3A6BCEB0F
4E6436B4D6BBD536D4996BEEBB7E1A4F11954E669DE14B907CAB448E3BA393BA
FCF313178E02D3BFFC709F92ACB6CB2BA47A5A279E189C18F52673F12725F335
1ADD2CCF348A72E8002C848FC99EBDA38E539D9345F4B58F6B8E3E370C11DCA2
103D8673004C2C2D3E3F4BA1B9C07CA63E47788AF5966D218A737F1330FFE2D6
9F60A3062E15B6DCB2B055810B82ABF2E1429FBDCAC9B4AC43258D84777300C2
C5F96DE9E9776FDF8F02368CB86E01FF02DFDA5691546197D4C1D38F6D1FBBD0
0450828347D2C3A8E4A7B69EA073220C495709B16764232EC412269EF695080C
2C3A54912323B010BC6B425CCB498D7FC7DDE932F5700C93824414E8F0F89FF4
FB395A3BA36F3E2C497B4990FEE236BB5C0B7269ED512EE122AD269544A252F3
9BF8CB822812C74961C1091CA79B01237F9B6EBA7FE78FDE9EA4E542BDD12E16
D1B8DC1DC80645A5DFBEDCDD638B0434C52138F83BD4C8E0C5F945979F681B09
FE53FAA4CD9E8CC9F67192BCD38C2C7E450D413D21AA3B4C26CC9836336148C8
38CBF4FD45D843174687A898B2B598BFFF18ED7AE5FA4C5D01B40755CFF80772
C8726178B436C9E2FE5467FBCDF9E0269E7CC485970ACD0A64C68031059B9746
EEE13CD30B9B2615F7646FD92CA0D89929BB73507DDF4D9807D999B2A670
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMSans12-Regular
%!PS-AdobeFont-1.0: LMSans12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMSans12-Regular known{/LMSans12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMSans12-Regular)readonly def
/FamilyName(LMSans12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMSans12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-411 -308 1407 1154}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123833081E024C973A102D8F460BD9
75ADEB5A09536D6F3C9E0404C494A7531556EFD108E97E770410E56FEFC620A9
58A40E61E443EA13AB10BA1FFC9A8C5A0AE4B3A70B9DDA35CA4FAC9678E39054
2086BDBD692C89708EFFFA5F235831F7A839BBC56C877DB8F713A2D5393994A8
357B4DD54096FEC1724D57F143398862CA36F1C982DF09539CB8C9F0E7CBE7D2
13233BF5F8C425FABD2185591D3722ABE7F23FDC6700C38136752536882D7EF2
65AF1EBCE3D1D0DA11C2DBD4DE61169AD2010446EE632BF9DF6D929733846462
D10A17CDA1BF70BC1B45EF8BDF72CC5BF96901EE0E7FACDC309AD744B803E28D
170937F444782DBF1A9F10FFCA1E96428C339564080B955D616BB9A3E6C6A801
ADF0609EAF23845FC74ED07C0FD09827EA10884C9B6B900F3FC4C2DAA80823C3
52199CAB38314687E16B2402A698EF5C895BF425ED9B2499D4202D0A8D1216A4
E1187557EB50C8249AF9CC836B1B1D9B4A28CCE970EDAEB57538E662AF941CE0
53D88DB0B078DB739F022E2F92A79F2EB23F089A0E3199C3C2FAE7B93A66DB5C
F10E6763DAC5C342EFFB9104ECD0125C6E7D32D5CE68D11C2014A33EADEA70A8
03A83F22CAB36A7EE9AFD9569661D2B65FB216AB8D1FC7A52F1A471D48B5AA41
16746756E0A8DDE70884DB4D1DC78EFCC745E00B803C7496C6FFC65CAE5FF981
CF760C9E8224BB781DB61934E01B2E9197BB6702E6B1A57C454FA5DE2100267F
912D837CCD9A027E9A7B3BEEEBCC3AF72685CA319212891B6D217650738552E1
048F13CD46B6620DC526A8164D1FE7D9D20EBA6F65CF59CA7A611B1DACB00CFE
42BD5BAAF8E4C6076820DB48DEBAE7E5D36969EDD94FF0050D5F880823A40F9B
6601CF5E16B62AC684179510113589997DE43DAAF37144199ADF6D36E3DD98D5
D4B7A8437E6E7F9B01D636671DF223DB8FE2188D1505B5E82FDAF2671D468141
8E63895C1C7A4273E038B480FE61049ABCF2FE74ACA3475D594505629408224D
070207CC4E1855F6326AFE7AF5F4B0854963D365236AC309D47A2668C28A6FBB
8169F69C0D641428143181B7E1827E553A48C936C547CD0C79EBD545378913C1
E8BB064779C78D100FF516E0C93259F7DE3BF4B2B5FFC4C87D544EB1E5B45ACA
F787C842A25D792BA8EF152B0392DD7958F06FC41A77C8E75F715BFEA141E095
5872F63A26C470C8F9697FBA63800A37B6EDB5E58E81BCA267212F3D633FB84B
44F02B39F48375A7D75BC37FEB2784C1A15D68F407CA937D4D90887795B84C8A
54C899C531EFC61D7732019B86C11D799B79F33BB09CB6771F637E09486EACAA
CC508B9D267C79A91646478075E259EB8C971379458F91CD3F83B840B2E72336
283EB997E386B404E48B5B4511A96F0B373299C95C2D501F8A3EDA87ACC3D6E2
AC4D82E661E5A45CB902EF9E2617F7412DBE459C3CC79AE1D2AF03ADBF5D625A
FA29921EB9409CC94D3224E75B5764B9DFAA97EA454B7FA5E39585CD37431DFD
AF370FBC0313D946B09DCF303293ED9D5949D482127CA20F8DD56C8A500C6E34
DE1ABCFC79C06E69FC7987E3727EE06985E1559ADF6B988586E9D210CF36B6ED
E8ABE94C8BDDA908C412D1709F4B5EC0212C697D91FA63D6E5955CAA4FFE0F06
DD5F7604EE916A37FFEE337098C8B53B75ACBAA50F748688B6226EF1B9E6113A
1C31010A4BBD104C7E5AC057FA551EBBE8B2E16CCC5EFD174057C781DFD270EE
45E8CE8C60473C239DBA7010D3C9B6F79B12C6005B9831146AE55A893A5F9B7B
3709B544C8412F8BF64203D044ECC7FEEFA841B2274570DCE510E39D6CC4DB91
F9C3A7C06483A7FE49E9118C94F79ADB280E5CC38402C1E9F9DF9E9129E83B98
8B18A9BC4C44810607BFEFA00940B0624E52F21809704749F6D81E3B829D1441
8D9B930ECC63475BBB8CD1B142632FADD1D6C3D3AD841AD6A54680825267D023
FC3381A9A2CD89BABD30E5D617A93CDA0960657CC231C6F1D98278F2222ED6B4
77A7342D64AC059315DDAD1A2FA1F4E8CC696B00234513431B7D81D89117506F
0E89A63DFEBB88CE500AE7972C57A0BAA11AEEF6BC819027F403EBA7BE1C9AA1
AE684E1539E549972C97321FA0710759B6D079E0E3C276E3A5117350E877FFF9
7EAE242EFCE7AC3A5D542924F4BF5B4F3426C6C6E12E081339CDBD42CF9D106F
3BC09ED496BD9A79025A9683ABE4C7E6D2D4BDE30E5E1DC183CA471A63C5F45A
0225ED905D98ADC253FBB76D129DA851411F7D28F71BFD25F6FBAF766F159B03
5A561C376465F9331E5C7BDD1DA502ED79B2E8AF3DB3E40BE9E22D7346A518C7
B6B74768537CC669D8DC37769E59A5AC6BF061C79FEE265DBB5F0801EE2009B8
B1BB2CBC48AC2F425E8150E0A2C212DAC5B425EC8BA4590DD3555C2E4BB60197
FBB2324D6370D121761ABABD7B6678871BABF0D67EB829004D89767CF909DC12
49B2200374537635289B228121B5E3D7AF90313E70594EB5C354023BFA079124
08F171374EBEA72D599A27C0EED6598CEA99A13F659089458E3FFF42CE5D0AAB
28D29BA62C2BE02FC7C9FCC92C8C52D54E74329224C0D1AF05E482ED4FBBBCD1
5139DE92556B38F254A74BFFF2BEAAFB4F0EA0D1DA71F18A307061E7A19A3AF4
137889983657F78257CE77F79C2B2064115FCC2C0B048E62B50BF64A9A860C3B
91E456C1A83904F00C6F8129E347C6489FD4FC798ADAC7744A506E329C20D03E
5B00CC748B3EBD9A17525FB5101CDB4D94A4EBC6ED848E3EDAF5E6DDE7690BE3
C6CB2F55A12A0B8BBADA91A7C1C1A18789758287708E4FB86B2C028864FE5136
2683301207BC5711AF71E05D6548E39FA117B079C8302B574F7897D9F07AC262
0A4FB421D079F3741B296A58F0D5B4E47DECF584696F1F4AD63F015A117D2212
94A8AAEEC417AA6A4F842120B84252B3FA5AB67BD68C9727006876DC67F01E42
39B2702AAA0A8F27EC86192E30A5239A449B6A5399030B8ED5DC485BB8344458
6FAE57AEB962FA815982A2A9463279CFFDCB820EB0DD10EA298634FAF1FEBBAC
A5055336EA2E3A55F05E65D826D0748FD49BF7D3064DD668D016CD47C8D086A4
C9BA264829CBB9EC5EFFF31273BD8C22F12467B61057FC53C3BC05FB8E64B58A
3BB336E66A2071FFDB24D02862BE4DC8DFCF80A39E4CBD884D4994A7EC9407F5
280FE5690CC53C46F4BAD3A827D42FFA01150302010956C520A7F55F81FE2585
89761269DE4E4E4F911E68000E98D0ACD139BF6423C688F32BFA5256F93585A4
3DFF3C144EEE61D2894CAA4AD7BBB0F287460E60E88B89FFD651A00F8F45B3B0
8141DD5CDEB790D76C36E9CBCA5A906415083489A14C8EAE44E172D358E005C5
5B6413A9215AF9B9433AF21E8D84C50F750434191ECF16684185BEEA512B1FC5
5E137D23FE61B7D69D1EE483631D91DC81CF23FABAC0975AC960D4C07E4AB64B
360AF67CF350E769A7EB0E1B9BF5CD44BE1164638B6D952A9A16171880421569
23BD16CC0CB64264C3A44FEEDD179DB382F2181EC00A0208E0451F6B0CA3360A
D997EA5FD141D570451BADF0EBA854D9D2B0A27A20D8099642B28DE5BACD422A
27CC8CFA6819F92BF68422A2D6CDAF240C096EA124FDA5B87D97FEE3A170D269
A68FDC8BBD23B356B7A1488750A4D98DD79667371111222279FD4712E7CFB155
4FB459F06712270221C598B15D0E4A8C0DFE90BD2AB4370BF03E8058B5A0E097
E2F3DBA7F211C30A4DC08B2473442AB00336285F642D05A7B901F7AB8E77C6FB
72D7CB3D6953F1416C4D716827503C93150922D97E5DA774EBD006978CBDE78D
938FA99A616BBD1008CCD083D9C4180B08D53616B34C18DF8A379C2219317231
8686ED9E447F8E18556F50BC229E49B5D231FE5E26BAC879B6A7E1A6BEAC841C
F417C17343950F65DDD3206D4D9072461F746076EF9C47598585ED0C78B4D7E5
B9422B3CE88E98C241707FC2CDE157EC885EA0000B6E49EA8C144C8F1550F037
67A1D3A0AF7BCC25BFCEA010E023A2FB117C451A2415E08504F525DF166B4F58
7AE41977105175EF736828BE87991F755B2DBA4BD765F7A4F966BDDBC0507DA6
8296988817E8404FDE7B730558C056E1E29D254B3021D0E6CC6B1905140B6A49
6100C45E9108F029E68711C7E50370BAF7C1B52A067A884BEC6465A581489738
2EE7ECDDB8ED8DC1747380E0BF357209D6A4F4EE88E6634FF0A4AE92B580F02F
F2494CFF98E6ED9A01DC44BF13FDC091C45B8261D9FA08099BDCC0FBB35FE44D
C25B24CC704A0E31DB990EA9E24711FEBDC472571A6977855796EA22A64441FF
6949A8AE1753283BF2E9B0A86139AC1EB0C5870276265C795C55AE4E6C07855A
9BC2FBF17E8D546513FC15FDF323A7899A1BA694A320774FC7703576675ABD0F
0CEB9B96FE8BF57624B10D14CBF511921B60DC41B057ABDD59C5F5A07C0EB7A1
F1AE6D768B1763CC67595BA4880CE60BB7BE9A862223C5C6E41197EA826E100A
50ABDAA8951194774A8B20702D160C3450D2EE128ECCF8C27B8893041F84F2C6
DA434EA611EBCCDB60E4DDF1259F366FB11B9A9D5FBF66C5988D929182800618
56219C5847C0D82F0E866312D963E012DF0DD899911C7881228C82C0AFEB9A32
5D7CE7BF9AD7FC50473C92609CE1570BA2AB068CCE168552299361D62A2BC2C0
DDD57D65FAFBE78109CAB35AC2730A761CAAED96AFDADB8530E36B5B02D2FC02
738AA6FA7C4CC66C88F5BF25B6F0570AE15B9882BDC14A6567C19ABE55F81863
65B3090508338A531A7A874DFB11A5F1CA109CE8784A5B2BDC24F03B894B8051
2880391F89EC495EC8F05B5E06C7BD037EE34C9DAEE69D70D010C705403B359B
DAA5B9ADD109BB291933374888A6584744692F87A67A218BFBCC8B3F417DAB70
698F2052A9C6410448F075E158083B2BD43CA2D9ACE4C844CA4FF989A4D77F1E
20200387B025179C6C7BCBBB8D9714249A9A7C328D7FBACC31F8B5061C0CBC62
0D7CCAA0E331EB7AB0AF62CF9D5799030B8ED5DC485BB83444586FAE57AEB962
FA86448499C94A7162FA00F6E05E273B5DB89549315DD15FDBAD3DD5D71B748F
6814D308FDD1F2E214177FB453C94CDD629E4877DC526ACBDE6CC483A11B6093
8F0956B1B27F79F9C3C1353B559859C6B14B1960E18DAED68295A02CC27547BF
62ECB5E25A0AE928DA1E4073F2400FAA310695FD7B7BB37C48B7CC48D99DC9AA
79388C90BF6C7B559438F73AABBFA8010815AD83B7F79B4DD5F1392A2FE4AB32
A13A3DC4FAE0E34E485C31FB2952DAD2A611754147780ED76337619F86AF1FB6
373D0CEE6B46717917ED45A1E9807DE85363DF1E379460259D44CE01645BC787
3825FA54222D3F56DD91A409F5C00077A7B5F0C07240EB661511365081CC4B57
46D7DAA3C8C73B78F1F4A9842205E640375A9CAA5245667D057C95F2CA95993E
712629C891F2FC0CDFB18D8A4D2260DC93D7AC1107B3099C3D0F5BB813A1200D
EB0CEBAB8C20F82F494A32C35EA00D00CFC5CF8008EFBE21C38F9927527A4AAC
3AC93E098DC1B5EB22D5F83D6A295AB9E01BF45591DFC3BF8DAFE5401FA6479D
C0309A89C78837971855488EB554A6B562089EFBECCA2B2664527B384EB259A7
B19DC098BCF23767A1D3A0AF7BCC25BFCEA010E023A2FB117C451F2E69FDADB2
7871E711B7F00F668A0240AC9A7D179D09F52673BB21073D7A313CDC5FBCB16F
F1571FF48BB3F366A50E379B80399771B0B2912C8BE0428AC71A76D0CF3C64AD
63E04E8EBAC26CE3FE8DDE8F6C30A2362BC44739F4219854F51D3B81A2968A26
33D19D19CB2F9733D45747785C433D4E18A02ABA38F55742DC36E4FF07A5A09E
8C6792D3B1BA80063E3556AD68D0B2AE350504DC28336D492C4F6A7635B85ECF
70EF5733EDB26731D148A0DF7322C3FEEA48C6B4DFBDB48F7FFD497736E320C2
EA32FE2C326F29090704D06AA53B7559CCD26C3A1272CFA2C28FBBBC520AACBF
BDF74AED0B3575A19CFFBD20C3942823DFD0AA1DF822BB91C547733B18DBB01E
4B38BEB534701FC7128048CE8F2291AE97EF2C4B2446425BCE1E1D939E2B603A
03E917000E9803BBF7BBDAAEF0C88BA83CF4138AC7B430553ED3E8160E813F2C
217744EDDCB8CEA62AA27DA04D2DC9F3EB1838B3E3E370977998371DBAC5D3BB
E5694204AE852E6BAA8F264F70046B4730E9769D739C71DB7CF2DE13629464CB
5F4A1F760154BF1A88960FCE4C041E61B36E8A106BF35F9060144E812983C01D
2DCDA032E7D4C759CE994AD4BD0065D122E44FFE52EEFF539E3EF0CED8BAD13A
F40588675EF2B1413840E8D3E7146C9A060745B4F20C79A7038E473F435DCC8D
FED5B9071ACAB17EED41E81108B629E81060CE90ADF3FEE957603462E0F9C036
7151C840D11BF79397C17BE61B0803DE1A88EA79242103B3BC5F55E235A90201
A826568CF2C21EE1C72679204F116B2C354852A9E33D2440FD85E483A0A0BCE8
15E3F49E2D6E5CBA9F47D591269CD9D9B9600F500D06F042DAF6C658893DFBF0
DB8BEA767880B7064D05A6A2F57FDDAC9BB599A95E1F1CFD654ADAF5DE725EBF
17B214E686BC0E3B26CC627FEBDAB4FE37D8692A080EAA8ED098C052BFC0B40F
BFCA767F3B1EEA76B1520772E16580B0405EABD1DD34C94719878B9D613AF0C9
401D371E3543F0C4521DA28864D735B28426EFA3D588D038860AAB3B92A806EB
2F90AB0BE445530439E0E8AE43B43A1B6AA35114D0B8D5DBFA2F1CA5C3862939
0622627FCEDE6884228ACBA46F5DDF43D3CA439B4506CCFE90F24C7522498A17
C7ECFFAF85013B5C541204F798245660D391A59B4B308A8A510FF245BEC7B300
4A57E094DB56BE8EE394EBDC3D33C8B63F94DA672C9D042051FB5E063BE17504
EE916A37FFEE337098C8B53B75ACBAA50F7485D29433BBFECE063768C3B08BA6
47BC6CF4B18AFBCBAE3F8EA164B82D3C3FBF6D1C7B96B726329E0436DA0F2294
D48ABE642223D82A657245105757BE84B599C63F2C3858CDE5E43BBB6020F93B
FDE57FE531E829847D1672900092F211502AF427398B9E645141C6C9FD4CF7CD
176B5C217E6B32B701653742F669F54657753742042E992458F260D47645B8A7
18653D7665C79B220005CBEDC0A5E495CD52CF9919C19E9781EED303F8781D65
E8E779B5442C5AA2F385A84BB64B27DA576A7BD8350C28609799A8D59C3ABA73
070F8B3C4799D6498B2F62BC76563115F3E51FC473410F96B56B11B7BA4B3B0F
935D7B9F86B8D12D634ACA4FE2E0A3A7504E4A466962C44C451D307CCE78AC3A
DF0223DA6C547263340213128BC9D5A34CE24219818BC1F6FCDB8314C064230E
5FBC126CAEBF6CD39A86F5A809952F25B26C6557DD62C2B52388A1B7BBD57EE3
FD9780A42ED36A33E97F6D1A429EFC799DDB5074CD05055A705CC4D79163209A
2105EAC6577EA6EB46F5C9C061A44DE0154738DE06D361E0D9154FD2BB8D13EC
CFAF101CDED67042D64FF3624B53DB291BB2F6754CF1AFF83033522871198AB3
E954EDD88B5059BFBB42A9C79F4D9AE66BDDC633EF0ABF651BD35A09736BCACA
A7F29DF885D233DE4656E4CCC1AC1A5762BE48F5FA88A3ADE94F7113FD6D52BE
C23C21EC0C0FDE2375719E96291ADBDDD3E0EA1BC88E523099196F039EB567BF
B06BBFB8FA7D68D16395D93479B3BD866A4BF33913DEB54B4D0301CF72309950
D176CFAA1D155312586A9ADC136D921F396AEB0DCF37DFE3C79EDBE008780085
38C79938E28987AEDACA045F663A3C778D20B652D4C20EC662F2726199A62939
188C01706215B1223128DFF2F1BECFDC59BBB6448230C4611B33767D290398B0
7A09A94DBAE60D05D8768C7E3C3908B4D748B2F1FE882F22297B2A88B26D7CCB
0124DE9784FF7538DC0F88112C0E8D91E5330643C077FAC71FD55A5490C89142
F2844CB7E6352B01A120D5A0ADDFF4C3ECD7CC083D70252227836371FF83844D
7CF632B8E1AE26BA4CC08A38139660C9A3A2B130706BEB708B430846E137E6CA
0B5436653A968FE24DF8D02DC26A1AA148C5E9680DC50E67D95B2D0C57BC179F
1A765EFF7AFE7DC3807891D039AECEAC3F500A09579E6054F2B7EAE3FBE028D5
14C87A680A7A532F0E53AD0E8B1F1397A02EF8DBC323983FE3080CC0BE03329F
B9B40EF27EE622317120AE39713EEC28B51D1A2970F7C8A64547FA80B60089D4
C18F187D265E8494A80BDB1FCB3ECCBCDB4AF2E9B350DB04B85024823654FD33
D3C4D429D37C4CAF7A37864A8B18325C60CB9284367B49478A0E8DD61425787A
B6ACFF6967548E00ABF534D4380E4BBC02BB41017FF1B1FBA0F5D7D4B35D4E24
AC4A11F6D76800F3561044339C2037CF6834EB429617C33666A20F9454A3AAA5
63B6A59B12647827BC6F11BC2C3CD7CDEF8DF249E7926255FD030246AC687884
A3547DA00438951DDFA590B63A76E9B25318716BD59861F51B561DCC115192A1
E700979E292B3B57E1F7A9FBAE495A2A25D5A813D0A74F91FD7DFC6712CE7D2C
ACE19A749B192F87B72ACCB03DDE3CD408714E8E7C016ED719D6A4D045FA24AD
81E1AAADF851722AAC41B5ABF27FD6F447801DBE77B0098F6A9219BC87F66880
4CDB793530EF5B16FA667198C88057746CDC1EC49ED6114400F4724ECFF05FE0
BED47D963864DEA98B2691D0AF9A6EAEAB6297F1DE23785F7A30EF6B71A0E91D
39A856F11BE21F316D94ECBCAD9BD4E0ECC674B6BE583E3134464F5E6D442E7D
8B58020A028A1E226FCEB33E58A669E704123CC218A3E114BDEA9E08731EFF39
67B5A741B252F764BFBC18C29E0A119453CFD04FC736141F03DA35D68D91E93E
80203A62ADA5F3B76236524AA186982F47DA47525569C373B4B066BA74AEC150
52FE6AC212A20E02B86BE559E9AB16B32D0DF74EC475AC3C97FCC08A6E6797D9
D6D4D6794945B39D24804E5B935961125F4E43D88E7B92DCDCB3F560C5391915
6C4AD3607A91673A3DF62988DE97DA96C5C43CC63FBA4965079538C1F9087E6F
C665136B7ABFFE8DBF11827CAB1C331966C80787F35EAB3A94CCB98CF5733C7D
B75DA4EB3D39A3B9FDEF15DA1F1505CDD37755796CD5FD0793D7E8418BBACFC6
60D888697296B7CC6581024CE4DA29A54EA6E94CF68DC85C76FD06BA4B0915B9
EEBD5FE0CA05E9D6622174BDE3AB3916E34B9EAF5DEFC753A8023D4BDD17AA55
05268CA9DF32C3DAB7A37106D82AC8FF565002B13BABBE8D07DC3F0C5D4B3519
48D03668F1F26FDD83522D571226623E88BBEA686CCADB88397DB55F731E1C77
8CAB39F889A684F409BD672C3E6A26B4F2421D47D767D4558876E85ABB0B8396
FEE0C3327CFFED7F4CE855754BC800985A57640B2B6105B2D2C996F6D5724889
6469D83A6A168B34B0F1FF61A2D99F8C01DF70C9EB8B728581AA72EC3A00921D
30E42D3DAA179D9F9D728F290DCB8BC01CBF67436CEDBF502C4013C1C4FB9CD5
F09E057B1A71343DACC41CBCDC0E30F2E76DCB77221ED71F4119E6587FBB3C5D
950A578830C4D8725C47D095527498A7B5262D6F945FD708A4B04A9E22F5347D
E5CECCAB3F113FCCCA9588C7FB72643EAB8F6D8AEAD1DF4E56E92AA7E3D696B9
7D6C8D1A7E9F4CB2CE8882889DD629227B34D001A98B961862B5BA481DA1E4DB
4B8B29B883E85B6CB1AD69A9A97282E8DF9FA97A20E05E027CA299F61F1E92D2
7AEE0923C67DEE00878E5D449CB25E37E5B5348DB0B4782BA6D48AEE80D379CF
EE11E4F1CE43E0545BF465C1E966923DCD1D8AC4D0D2CC09E75AC1D3D6BC8E91
67970E1D356361BFAE3F7F5DF22D8F98C83A959665078867B4A024FC24B16AB6
474F370F7F61C6F76CE0067D2FF9093CBD6788A412D211A3EED9136B5B6C0F73
4A510548DE1788FF9C89DFBB823DF700E40C2E96411987BA74CE27B2C4557D4B
04E7F771105122A7F30AA68962E8A8CB29C6584BD23C0C34D077E4EEED50C049
23BAA32F2A94D9355ECCF69B6298116DF61E574345341D1114A3F53E9A4C8A79
6E104EC899AC0F12E39367ACA998EEC3BD084571DDF97E17A71DBE46014A352D
4B319133E9C9B38EF5D524E99EAD57A66C587F16F3B41280964BFF59B4AE356D
1DB3175DDC2A6AFD06EEE99509185F0BD9E6F5A06182C3B9844843B36660FB31
D933BF448907921383630F2C6D55F3188F2D11E04C8D23621F7BC8C90F4C4593
52F8149CF30339DAA54F8FA10295E55782D1960A12E9EC3C63D5CFFD2BC79127
EB92A645AA18733BD09F1D6E4B8F925E543869180F1374F8B233A668D08BC1B6
87408F072FA391643405435A09C1257CFAF86F446637D795510E5BFA475E8051
C73026B1B7D86F199033EB001C3B895E824DED43C96305B0D042E6D59F5DD763
FF359543D3E20D2F490B50F61445266E23D699CB6B1AF3199A54D8D459907D97
37C5E7929E55AF96F3C9D558B0EE52466D6DDE336D4B5F9F8395469839226C61
F3887B80F89660C0D86A22BE594113A00F62F7A579FD36FD6F1A44EF78C16719
0F3326BA35B2A0F95CD035417C7E909B751F4CDC6547F9D72805E61ABDFC1C57
0DE53DC2D114FA43CE0B06A5B8FB130A3936C4504264CFF7864B165777B02C59
38A3F19631D6133A8A826BEFAAC61EE108B826DE9F26DF59B2995B000E5AE2CE
32B6DF5ACF58BB905440E0ADF465AA599C0B0869BBBBD14E58B469F62197B850
88749F3CAFA40A6A3223D4CED495D4459AE15405AC35BD4A4795277C0923A994
7A2F28A8B889507B3DBB57536F1C9C507DFBBDC3D963E6BD121634970021DFBF
5BC78580A7EF7997467C254D74D5092242276E88FADC94A77124E291CB27BF10
E4EFC417FDB11F8C09C385119682F575CF89AEF4279EB1FB8F7531E5EC8814C7
6D0B673363D7DE151C78BB908A41CE91E857CCA6D5E8F941E8FAAFF32D168731
C03913C82AB96C6B723DD400922EF71403FAB37A820E7DF4E1CF4061D8C6D16E
DE5DD63C6EC51A967A23BE0879A268D2223BB036F4E838DC954C2DC09A14F2E6
98411F9F932836F6804E78DAEAFCF015DE9895482BE9AA96C29817AF06F4263C
6099B6D3B57E8D4806BB3A779935CB46463F4570CC1FCD2159FEFAADFD9A15AA
5610C82FE9B6F9C2CCBC0FF2E710146CB74494C551826A537FBE9B5F897B957C
DB27ABA4802F0AFBD6BA02D3036E3C56FDFD630C2E836FE1207E4025C49819CE
FBB990105C1DED1E18B1755EDCEBE41A6528A38D308552CC5598CEA91C8F135C
EA06C3251DD02D57D1F95EC6F09B8FA5F6FBA1D55BB33E7D9402419FC8772046
E7834B9A083C4CC2401ED331A25863D89A01934A2877AB1C390DE24773607EE2
AF66BA82F846986F1BB03C76288AAD42D9AB73076F309317F7FFBDABE56B4CB2
B291386861828F6251F206B9131C951D1ED4364A9CCE52DA5FCE0F492497BACB
4DB51595758AFDC9C644CC5BF23418D84B5F9009000B752CFA7E50A7F9679101
4712D9E9AA04AB2C81845DE64C387F3AE3EA8386A9CB5709CF8C33314FACAE00
6BA2064623902C8AC479EEEBB609EABEC64590D98EDD86421400B49D576FF925
E058C54966D1FAB8F2E593A48DA79B9A3E4E92BC5172E92EC43876E931BD9D26
DACB5E8A0242A332391A370DEFEA53140B7DA1DBFF84740FD5F88665537D3BF2
79D84C6A19318E7B08B2939078355D6C3F9302988FC5A01A6942F350865E1404
CADB8AE7A83015B55D0FA449D50FD590376AEC5039310EF1F4ACEA1A40014BA2
7BD58490D2410AD3DE649F4F521C20F6B6AF7E151F7AC33A81947FACD655C0E5
3963712A6EAD0F218DAD2781926594A4119E9DB10B9392171DBF9964BBEC0301
3F324BD4B1E3053E4CB8558AB5F9CB60A2B2B7D3726D4D06CAA2CB08BE179789
840B6D116064975734ED3E74E2B1EB9C3682C8040370715DF701C4B69733D488
CBCC996806C997D5326D7D902B8126FA929A433A9A8512116A026D2210B7D755
78FCAD8E3B32647A0292A81A5594A1C5ECFC0FC07EB30F735D4C7F124920F461
86D26BFE14AB944E0B3949BAB173449FD05F2D761B67600AEE88C2282BC39C57
1BD45057FD09085730695ADEFF88717E96BB4B92ED7DBAD6C2DC672BF913ED44
A41A2D1E513C41D87218C21F110ECD864BED08172CD2FFCE0794E4BA2AC19A86
0AC497B2126955553D214FA3C5F0785CDDBA06FAF7AB4D8D807961392FB22C4F
8680188E87C206189B65F6E5571E7997ABF7A447BDF55731E6B46680D9AADC30
E799BEDE4F80E5CF50E44B9D8319141D0F640E86C7C229F5140D0B98341339A5
470B4C89E24C9D72A3A8C9438B74A118064460F8A6CB7312AB9DC7B899657452
8FBC9C6EC91E83583ED5B0AFC5B2DD38B9368C03518848B57E30DCC022B26EEA
ED59B188DCF08F2838AEF8F97FA0DEED0186FB1B803E6AEE1742329536A3295C
3057BE4D15DB780E4255E9382562559FC325940A05FFEA0A7F504EE39404C4F5
E6D391A190FE062FB0791804130249FCEE06738CF090F81C43B24A9FCBD966FF
BF154149073B8A3EEB12EFB77E7AABC37F57BFA2BDD7C3FC7ED277D9A29A3B03
EA96BC30446FA34F89ED1837EEDA8A195AB6AD13AB3CCFEC63A901A9B3B9A5C5
F43471ED8A0FF52EEC38F483A86D33B8FECB35E69BE2380291D3CFA907F17A4C
84ED0BF61A99266AFE0BC2925DEC606B81AF6894363B2114294E66864446DAA5
CE2591121516153380E4E2A0CEA310D96BDFD883642BDB5552535A012790EEA2
3D08ADA7F66A3DC74D6126B8BC8E30EC6CA788E903A6CD768A42943CFA8377EB
3E3F4C64EDBD88EF2013AB4829EF58D62DF6C4CD5658D8DEE558D56E15105A75
F19B8F6AC9B8097F47863AC853E1ECE7258754BE931C5E199A16DA891583A755
330A5E5AD93F564C9A163A37AABE8921D306DD688EE37286AAE2DC22B56916C1
8B99C39E1F3FAF32B3527B9A9CF7FEE23F269EF4CEA57207AAB2B3D7D624218A
2888F4D7C9DA3B7B59CB40CC950CB577B025755BA04D5D03A83FE103DE7EB45D
DACBAC1620BCE641230920C23A80134558EEDDA22949ECB484E49E3CAEBB563D
7486F097CF267B9E0069E0916E6B555B31670C7044FACECC830BF9FC5B0C478C
740515971B4CE4375A1A9F1EC3D6148A1C850ACDD1D0D9287FA97D0495E28CB8
E2FE2A4CC0B9DE515A0FCB8C2C221C3E656F55B139CDD5C4C87B5870BFAECB14
6A3D451B69246E1B04069357CC21D8439789FD52FCBBBEAC636430D496E772B1
34E967A87C75DDB0CF6D217E3A78C1F0021E46CA77856A05A144DD0BC77CBFAC
40D1AAA281E4E34420D1FDC40E678BC42FB3835475F0982248D937A6C2DD7C23
20DC37841E76F57069E9178CABF3FA0FFB2587943DFDB4C6864CF1FC7152CC20
860755DBFF548AB5AB1461702C16DB6B9FC7A6BC09A67527FF79A7F4AE5AA240
9548C3FA691051689741CF3E4A01ED227D758B40E87EFB947F6EF31DCC61CDDF
C39A277182751A431DAB4869A982293003C83BC5371513272676E588988C3497
C382B1FBBDD8DCC67CF1CABC23E8D3B4E553780C34B0DF36A8825B776FAAEF16
2FA24EB17C99F24D3C9C200E954B4A6DA6617E3A56D72EF332FB941F40E88F79
AD6DFC8C619CE8FE1EEE3B9FE2203DC6C75B21643D462098578BCD5050EB47A9
F4313EDADA4845CD6C7ED47F7E9DB8862B0D4909282D49EAFCA976E2D25DC224
4AC1A3099AF1EAB3652298E6F6E87978C4908A3723071CF996F4AAB4425E9D7C
3C8193004DF6B0E24465256E71B09E123754F7752507DE77C8B35CA1A3F7D176
DEF397B4BC957F62A653018E98A03B7268517394AEC07E44659608CCA03A3BB2
6BB18234A5285B5517039417C84E049F52D3308C57734B39E016FDEDA848A63B
7CAD78C042BD6D696AE7B5E2FF38A99470D10F396AE89524456990D93AE476AB
15324149043E713261671835DDF1623638E4FD96E4063FB23B0C1334231CACE3
B876EACEA91560CA46C1C88BF1A9550F9DA16C9668315E9262C143A87AD4F3F0
A28C8C1833DFD60525A78B2A4BD7C5BD4223A7E16C5BF382CC68A690BF42586C
7D5DF306BD03A0A0B91406F90367E180A14170F7AC637F3015F91615A85167A1
4AF1A3A745549A2C8D8F6C93CCAF12CBC1C77C8FBDC5989A39D91E2C927FC0F9
D411C4599D9D6FC11694DED91997A19D95E52890888F7002E25E625DC477211A
C77F7C18D62E44A0351C8167558745A4772B854BA5FBC5BEAE9A4370CBCC6A3B
60E897A2A10ACC9590B7D186EDD915E90CD3285632D65C2CC0097A6CB98FBE4A
9FCAEC75025EC73938A6A532A13E23EF1CE928F9FD16A198E4B71C1FE2B17F94
079262A03A56BA2870165B332274F9BE188776367C085E58BA8F0F007B64C2D3
5B5C6CBEBDBD569AA32375DE4619505809407145D7148F40B8FA1D9F0DF623B9
E4772C1D183F91D837DAC94609659451F83DAA632978D0702FB53E7B56D103AD
819382A9EB1E201AD6F5253B4D30E256A366A29BE5ABE7879DB7FFB127700DFE
76E3B5B6601794E5B4C81CF3F7384A29702F0BA28FB2F1F5F450926CBC449C78
8B427ED303F7C710D50E8F3FB08F9EB235C3F1A53833DEEA43BE551A26129AFA
9DF18A8B9B31303F61A695B20B65DB5CC404B62D98C1FA975045EF40F4BE6FB5
15312A345FF18B169B121155CC0181DEEEF3D97094ED2C21EC501C3F05532012
6651F8DFCA0DF851F791B14D83F1DF955796BD15D834C53562765F13423A1CD0
068835D69B4651E206B397E2D6F3E1134D38039EC8C6A5E352C6081C7499C62B
1B92480E5963073189E7CAE9F2844D17BBDC178AFFB0DEB4493D2BEEDFEEBECE
C598CDB1BF77AC8209A2F49320A183B1D15498DD6EE56DDA47189AB457D95689
50DC3E2369571FD937E1FCB1AE7D1F4FD7BB0D32C0CC64B7D418705295AA7291
AFBEEC84B992D45A2680BAC63497C593C90728B12A4957FBDCA1E23E47BCF2C9
6A9C58E53950DB59E4322DC2975FE68D9DEA3C0DBCF7C332C1413109E975BFFF
1058EB7E1C2D93E4E93FC183B92C92EBB1C9D571BBF3740E786A7397A871DD11
FA1D78E5F78DF4E9B0FAFA718BCE5FB4FE432EFA11B131B70FD5A3D826575225
4AA7570340949EA4FBF43CED26FB01E8DC8A99D891001DCBBF4A1A12F4110057
9EA1129B3069A90C2B4CFBB3CB0475443ACB4B4CA279CA5CCDC91EFA8A83F96A
9DC950870C1B21E2186D8C4CA15E8E1CEE5EF7BBAE9CC424E277788953475AEB
85C963B6B554263002E358C322B2896A8BB113136337F88C41B0FEEE994CFAB9
F734AC514A3B200ED1151418051744E40FB9CFC34F1C31950A393F4F1720D251
60F42D9892372CCED4FA66BC0F8284D4124E5A355BB7F9168E861CDBFEE4CA4D
20882184FAC1670551CB5E0D692B3C9BDE4F85242AC48AC6197D9DA2FDE6A9CE
BCC633F3D38DBEA5BFEDC92435FB436F629EAD2AB3BF6C3781D123D7B13FA066
25BC7508ADAA2EF193AD1E8F143823BA37E501B80227AE0930DE6E4E027CF555
018F191F3C923F544E8CA05E597D82BF7E09FD39B4341967F54537ECCBC61816
D57CA516A4681C2397F448C46BA164AC7BE0C0A73FB423A2A81FFB75D05D0E3F
9E07539C80A599C7AA78251241B46E662B62589EE9832FC6295AF61B462F8DDA
EE658222A866BF4845736F9DEE02D06634547729442ECDC50C90989896D98814
A4E62E172C82D0B5EFE58F67669D0F2F88C5CC0B17ACD50C6D8989B3E8688D2A
74E9C9F9A5A8809002F08A289F9378231D5B159C63BEDBC8B663A9376E1F27CE
4207DEC332AC167E282459BDAF6F4C56D862C5FEFFF18F6046189BD0022AD86D
661BD0C1B7AAE7BA58D30C3FC4681906BD573C7A473787910AC263CAC0EAC7E3
C638FE124966C4632B7CB94C9DF7275990EBE5D704AD02616D034B3F80AD2AD5
D4E1DAE678029CC028DB4A9B94A891BFF21A5669B73153DF85531821C23E4DE1
D1F95F3954C8CEAA65BDBE9E0FA91DF22E6A4F66A29D45509E215C2ADFAF9C4E
D4EB6497E5FFC3F42F921D984F227E010F59376FB1AEB72D08E929E1630A7750
DE134BBF26AF490A8ED6384B821717860BBB643DD10E8CEC76F3A88D24AAFA39
C60EE153A0B74660FD4FE0ADF32F585728DD7DB751EC8C146E17EAAFC942F80C
2313118CDE3A07B15EE37DC5F4533724D785C22C645809C6B3B4B9FAF43E98E6
6BA3E83FC00043F27F1E73B67016A5054D9B90A3FE2052561C22720C0C78F40D
46FFD5B2E656036D9AA4A1EDDF6A0122789BF66501B14680A3B9650D6A4A0281
8B0A158B7895BB24BFCF21A45C95F7E64231E82A94D3F931EE74FD4C57FF541D
5C0C6801DEC72AA27D3F120053B7E9268CF93B9763BA70C77A82B01C2B1741EF
6F7AC4260AD77DB005D835B04DC328500DBE2E66A07307CA8A2F7A801C7AFACD
58F93FCD83DCF3EF58FE49BAA3C28FBBBC520AACBFBDF74AED0B3575A19CFFBD
25CA7A5AE8198367C7D54AC750206BDB71AA4324F87F4C78445DD4B94E0C5EF6
6E5F4252E5511A19172AE7E16C19F7B344148D1C44B49B3E6398E1051D1F8561
8EC5EF25303E22F493A53C3C1B37341F96F2F8FB4CD2BE21F98C4593954B4833
509E1FD137D8B823953AA248937D5C18D216E97039C5B076F16A3A6411A3D4BF
6AB784505D93BCAEEAE9CF1701F6DF625DB40083C9FDB6510619870C144864AF
6B9D3EA5F9A365966424B74C146E164A7503FE4992BED1A2323DAB45601994C6
7F6A07F238E7B76BE76F95B8C6EA8C10AAD1B220F9934FBCB525354832470FA4
22868CFCC8029513235C0286B76196E35049885D0EE7EFE008301D60083FB7E8
BDA75A112D1D27E922FBF1A86C9D14A277369E5A7AF7CB389BC5900C4305DF98
D59594162682F9947E1A097E36367B9D631483124BEF89BAE5DEAE4A2FE1EFEC
2DCFA57BB0D6E3DD6C027519DE25EBE4946011655C21E22D5420119C91515AC8
E880D53062C786EB15A5F0DEC6366D20DFACC9A51E37BFD99FB7E16817CD828E
6DB40B86A47A27C033E27BAACC78183B1E07277D77FCDF7E4E239BA6F6C7272B
77E36FF4156DD123FAB23AA37B36092D3F6CE83BE0B858CEE4CC140F09B9C2B6
36562C5C7CBD2D34994227FD7BC1FEE1B83BCB319FC0FE2D9A8CF214DC85B763
C354E8017B20D6DD0FE4D543A62F8ABE3B31E04FD876777454D4209923C06F18
C3A842411785C1C2709260CB18704C1D85948897108015B8187CA6C46B291E02
081BB5652A867C6AAFCEA866503D32708C76C30BBAAE0F953D5B8A1126A03DF4
5D0AD1FDAF194F7DCD648D8F14A5264B6277B27F417F17BB5F05E7989CBBC604
FFCA18F18485B0DDB33F35AE332022B997F022EDD90CD23378F9FD3F10F718FE
409769B91477249D08F7EC9005E5F4D03ECCDA8985D0123EE5F52612CB8123A4
FF2E590AD47310066954EDF3D6CB212FF2983C3FFA0E9045AB023E047EAB4365
22099C17BEE8EE8CCB1DA1A852152D4BB72DCA67ADF52AD54E547CB0F5938634
0C9F9ACF9B1510282836EE37A948B3BEFBF1EB66E2E910614F0C02936959E2CD
FCCBAB7D7B6183B075036DF7634B34983FEBFFFFBB7464003A1ACCCA304D23A1
BDC50F2DC6C818601D05AA8B2E289F1D18568DB64A9868E32D1914694E5FE055
9BB3918BC1A78DEE38FE96A5EE6334C12E55B24E5CA3AD0E78C5B2E39022E137
F808DCFF33D406320583193B6201E1F9F7FF4227AEAB1B276B793ACF6AED80A2
B715340059B49945C6D796F99D4B3778E50274F69BB81ABA1EEC1B49E1048648
E684BDD651A058F994B3221085A2C4867AB5F1194290CB61CB54B870B7C9C070
5374E0C8E16ECDAC535403EC370588601C9DC97722C444D33D66795ACC5DCCD5
FD186AE2E7F9C81FE8C4F9F1F2AE3B9560C9DF5FE69CDE045F576D9C446DD56E
CEEA07228F0B0DD1460715659DAC3E8F977C22150E9DC4D491B11A57871330BB
F116B7DA406DA85CA0B7C26E68F9E48691ED23DB0D3ABD8D6BDC79C164824B6E
3E3C3E69366B759B352F6AF5B85B3EB5F744202CA584A293F65B0EB3258C71CB
FE3F8C63E15A55ACA65DCC2D70D6682DDC8D06595AF02DE1AE13B66672A6FECD
532ABA4DAEF7AAE796B0550FD7BCCBDB2C2BD5BD8A16E33683A8AAF33E895719
63AD2AC7E77EB1A8AB0DB6CC37838A6472C601C215037E94AC894647530BA822
773DE75726823FCE87E1943876B8DC19F588791D546F74364A8EAC427B2E82FB
786FE8709499255A26F9ACD205A00D5C6228AA1D43F1C6F0E9EA338B23EAB1CE
A62AA27DA04D2DC9F3EB1838B3E3E37097799C0895D7BE2DB024F9A283E12327
A26FFA9F875020231CD40EF33EEA48ACCD58D8B69468E67AB377C6BD16D1193A
5F2AB98C19276A104C8770D3E62C7EEA9759D337AC9D703F951A63AFB753A6A3
C4DFF9BA53B2C6F34650E1D798751A0D375757D95AE364394FC25E6E0D02C684
0312A2E9B1E80979B7487BA2CB786018E20A5E0355AA35B0559FE3110CEABF5C
E69F5813A5220097640011752D3D74A080B1C200EA362277C7562AE7CF8E481A
ED2F46A095A3FE2052561C22720C0C78F40D46FFD5B2E65602B96B1998A08ADE
B2B51FD97C947F3CAF4A17CA0F8BE63AF7E43E4E692B8EDAB13CF5AC05D11A33
F2D53EE26FB400ED2A188680E41CEE552DF55A235EA7E738E9BFC05EA20F8F92
CC6F6F0883C1386E0668FF164EFBF2FAB76B6904D04CCC4B264DD76F31F017E0
7A31B99351BAC71E40DAF81E1F113DD4256BE6504185EAF8D48F2D1C7E3DBA36
13EA73BA2AAE3FCA5D2E78ABF50BCFF513171703AEED0A5A2C1C623A6D6615F2
4FED298A68097564AE72C413725A79EF90AD4FB0073FF142CFAF4290F2BEFA65
D13A92F67E852DB3FA36EEA39B8FF07CEC6D1BB14DD55B3F675BA045A8D89AC5
8B77200A09C675E45379536014257E6989B76A91534C2564B0516C18C9EB0B1A
F91990316CB14F474E9D6CC7C8FBF86B398FECB416D63179BBC92DD260217381
05BCED3E94CECEB2E6E552D1F7E25591F3DD0B4729E5749A10ED277E3544B849
78D99D4DFA915826D135D2D8A3BCE3C8EA00C9494343F320DBF68ED46DD1CBDA
D4DB071036F3CB39292A174434E5623D3B09A0C314D0D84700A7EE0FDE16C59C
1DD2E8EFDDDBA23BBC2A519331838DD137333F556C0B64A99038D69D48D7AE40
9B547ED9F6FC39C8C2A31BCFA14D5CEAC61084FD0D683AFED2AF2CA96F46F2E7
1D2DA1D8D60C3087762D3264A399447AAF980AD5A22E4C49A366DE4C183E1AC3
D95226C13EB523AD09BF71DC2DAE65DD92C168F5AAABF3E48C1DDFD721BF63F1
6B3D13DA2E85C78B828BCD6C278CEFFA767A9D8C6D62A36674FFBDF2A9D564CC
87FC8B259D35AA0847B7E91864EA6454603B4D73C88A007D17A3DB5A24E3D26F
03EAC8703F18A32B699A2FCA90DFB3DDD4F10D75A6D799F76209242EEE860730
4CEB7A9D8594FA224C2E5D6E74E26BBB7CEE5215A715DFC25D4FDC601AD9217C
220985CEC6EF4AD74B91D1F1EA50C4ABB5780B1CA1A60D457800393A82355529
6D5D24902420BF6DA181D242229BCB7F71972C3472F6C0FE90E4A21BF4E62D07
B765
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMSans10-Bold
%!PS-AdobeFont-1.0: LMSans10-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMSans10-Bold known{/LMSans10-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMSans10-Bold)readonly def
/FamilyName(LMSans10)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 83 def
end readonly def
/FontName /LMSans10-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-460 -297 1761 1134}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFA25B3D2E21970B61BEF6BD441C0
853BA8F00600E933C80C0916170925A5E999AE3F4523441CBE8209ED95298D28
7897FD39E60633B3341F7B1EE39A74B7CFCA379A6C2390E7C26A4B9C8C556F25
96A90868B428CDFF58080D414AFBA9B90E752A5C7F4EEF6EAED9684DCA7DB0CC
268AB1DF914EEFDF740F44F538F1E841659F02898565FE3B1F13BC87C5713FE4
FB373864385E506D1C0BB65A3CB8E10A78C20E5BE320989BC3E8C8E8E399FC24
E0BD4271E70E8D7A8F7683A4756AA988C5E78DEE26995F197F2360620656FEEA
739826F54E14481B446F1D7F68111FFA8C859137AB1F8E90583B98BFAF5C6329
59CCC441D095D44570B010FEFDC0DAA465ADDF3CBAB31B8A5E7672C9EEAEA7B7
A345AFB8889D3C53E0F9619B8F0C11FCFA80839B0574D91CE6AD50613E12BAA0
115864303556F3EBF5B786035121016A72100BD90BB46818BE2E8AA15252FA00
9F20B1F01EC0EC35CBF7D6C9684AF91F00880B4F0721698DD568E1B3D09641C0
58E5856E324DB2E378120A56ED141762775C5AB88AE8BB5B6B18158A7A9202E8
651774A479D4308E7F29052733CD2724314AF8C61999D544071407B7774A5610
C7A8F6EFB5792C23498F7D5347CABBA2DA469A957BF2BF33E8E3045016270416
4B71642412D880A7601B66C002B4EEA76041F2746847EC01F5EB5744F1EA82F4
163BE681F7F568158C214BBB58CF2BED8BA9B4030D081D755D41B0F8DE4AD0E1
F33A1CE6E38EBEE8CEC6203C2474727309D75E85A83DD36CA1A05A37C9D1FAF7
E1AD48F23A222889F92F15AE9C33A8B3E343774FA496C5BFD6D9C1328E16F748
4D6390CDDA8EA19D086DC2E49DAFC1535299AF0F42A16E89B2D395B183098334
286F4678662DDD87FE71DAC85B1BEA9546CDC788FE623C0EC28B6F1208F01B4C
5956B9402DCD2BA235EA01291DE436B80388FE6B31D225383E1054FDC6AF7600
608EF8DD116B8443675F86A09522E784197B8AF0E94FB9D58D648860A2C26A05
6498B7555DABF92B298EFA1344A2C5487F80442D8E6D4A3023139FAC780E9F5B
712394804BD39D2348F61E0B528F4873256714D01012B77A5E56B1C92DC7FC0F
ADFC71C5F898C408273388E448AA4D9519F85B14ACC1D796F99D4B3778E50274
F69BB81ABA1EEC1B49E0472E92EE0653382141E523A585E7CC5B063C4643CC84
4A757BEDCD054DE680D23B992D7F754479CD369719297616419BBC9881BB6CE7
6FAFC31BD5EC1A698AFBEE2418D5B8CA978D6AC89C5D7D115D20015326BBB45A
5A1E5C98CB559929FD0D5E8A13520FA7BDB2C711E3BBAF7CB7E7ED91CB43236F
BCC50D20C11C6929C93AAA213F8B058DC741C12B1EC9BF6BFB6BC306585A1667
7E78EEDC4B8B17CEC6B82F4CB8D2D71A37921E69DE0F04859B03FCEDCC765058
76A049DA9D644D232C7B91334762A700EE46CCFF0F8222069A239E9C090F9CC7
AEF418EF47ACD1255068A21969742C55D97F1EF3AE7EEFF90937C6FB7A0C27C5
6B44B37C97E610E7DEF4545EBC55591235C56A4CA40CB555A4BA1A2E780FD5BD
796ABA334160229587F4DC11F6EC986B036C55794A4DC92BF186068C71B851A7
F85B6333C19C91E6C9EAA9292428B9368284EDCDE7B6926FA86E4866511AF195
CF03E794D87502CD2BA63EAA5B1F9282216AAD543641E0F8A3E7314914C30754
9274C1929A4B7367C259A83EA0D92DF798FE51658E2648D8CEFB68D0B28B3B0E
1CFA30BAF3D8E649F28EA66D111E69BDE1C7C95D376D2C48FFEA0D825AA3CE8F
F2CDEAA920024C50D65665E065DADBF514DA09934CD93AFE8100037709DDE2E7
2E16C80CC9C0E7940FFA97F2BAAE7A9AE52B2BC3CFD181277D371765E3F5FE73
B7D1E30EEA5D377D3EC454B9E8E4E4B7897387234F730A1D2D567540E1F13D80
1C5535585729C06A53A8E6819D45D752A50B02C5AA368E0EA45AE3A0C9A76C32
0DDC3352FE0F2EBBB1972248F0E4BB8AE3948A408FAA0CB73C6CF5E6C128A31D
BF93F0566A59DF25AD24664C9C831F84B02AEC078CCEEB604BF5F39840266A3E
CAF4B9AEB821FCF47ED1D902DF005570FA47070FC79D841478CADE0EE48913BB
0C4CB09F2124ED1AD4B59F7861A8B9F4BC91A9DFC03C3F55166FC377E829EB5F
F4891F388983E560AE31E321A14D78E952EEED8A2021B8258A37008484F27750
EAEAE17A63DC636EE6CEAE50A934221765FE0CC6A3A745FEB2C1986547967107
503C32955BC90EE29DEB37DDF577BFA71B8A651C05E1D55C8CC5658531DF6FE3
FF0E539F1DD25B1C97541EFE4F5C2067E4206F8D4F3AF4B2C7D95E63DA3C2B2F
3F09AB7709626F52CC421949017016918F0AB2DB82DAB2FCE4B01FDE418380A1
6AEF2B0C50CAB47B186DEBAF6E9A2C69F153AE233488B2D41B812A11DD57D1B0
02B45B933534C0B4C51DDC50BE37BB6E42B8FCB00F6AE8FA7C6A8DFEF294B426
8517F1857924960FCF6A048C8AEAE9C9724A170FAC6BCF6A85AA31C1BE8F832F
7BA209A0A5D865E3A32F47B1EE818B18C981A546A36DFDA767967A43B3D1F3FC
4F591BFE0EA1D77FB7872B90950DE333A444BE5476340C4F274EF8D4394BDD17
AA5505268CA9DF32C3DAB7A37106D82ACF5DD9316A8E0CE4F32521B65F83F152
87234F09C3FBD9CE265B6A223D0ED3DA70C143CA4F4B21EBDB9E1DCACC031B2C
AF4126501FB9071E10C2DA4065A3082F0725C2E0322AD914573DD12540F02C2D
847365CB105542F9B02CEB5178A3F3C2F9D266CD2DF15E9CC37C64310B4681C5
8D18345EE64DC11A1319A075FF8711FFFC1662493942C21F78C831ADAF4E4061
1505FAEE80170CEA28F54B643A9BBE064D3B9237193F2BA024F5AB99E8207FFD
ABC084BCDFC2A202F15B5E590EE4CE5A27A0AA6E874293E89DC1292F3A57FD6F
3A111ECF2D6A40C4A95AA66BE98967F52A855DB02C498F136AEEDCF7E1E1A36E
82BCB10E5E51B131A7CE8E5023FAE9BBE4AC0AD95EBAE53E28EDB2678C3E34B4
13BFC96005A1999A95B5B8A42DE5BB1384878378F1C62D1E60A63F3A1388DF56
F8DF2224597766D01BD59A88FF2ACB9624AEB7824D5B0AE928DA1E4073F2400F
AD5466C50E41E94B66B5CE1ED0AD1ED3B185D5177C13CEFCD66025CFCA26CA60
70F3F138947E9552402C310FD42E81E47337DCAA2F7C8594264A6EA23E30B3AD
C0F3919739DB56F4522D02299507F5DF31CA0AF4D5443894775B2DF1F871924C
E2C0479EA8C8C337504ABBDA175BC6EE3758754FD6C8FD4018889D8E86926DBD
586A0FFF6BD2983A840B68D656FC15842D694DFE6AE0B5F37A43352667CAD340
C0D42D850BD31A8B4C79D08FD7B68352CACCA2D75D486446E7369DE48716A15C
1DB4324935F474EDCB620ADD71ABF4845AF9933A5AF485AFF1AB405004CA0DED
FF110AD9468A0E4A0820F81AC3AEBEB0996DEEE69DC68C138FB4F7E2F3EC19E4
7AE9E2B9BCE3ABE6EC68FFE98B8597A648022ABC49F5FDFCA8BE38549AE53F72
B85A6F03B58AEAC876572FE440D7EDC6EBCD2AF0D56D5CB3D90AE897FA3095FE
A499DC328054BF07CD1CA1159872E9A32735940BD3AD8C75262EF6C5B60BD81D
2770945D3D676612C77A23C8C3364DAD8E407319772C9B201C49BE3E38E08060
DB989AF3F538CF0D5D1234E2DB9A16B6B263605242F5BCBA9C0E5A09B0AB344A
F757886F30FB3AC53A51C4843802081696785BF15D76F545786E9E8871D12531
7E14B83714D18F84E5C4E50BC74E4F1E3D24763E96F2C385B9F9C34E0382F02E
B8C8BF921CD3914D1C0CAF2F2A8C3E8248880242AE015219D75E3C858A28BF72
B6F0779DFCCA2EC7F97C2795CC16E2C18E3A112F342B108DA6FBFDB214B31347
11BCDA381676C3926651F5B3F8666E369D50682A921BA05409A9AA8B6E77856A
3C6A7B37B39E92BBA5C42182D98EA16770B47D01CEA50E0D6555854323FE0032
0EE30A24BB155265E2EA7402BF17ECD71219A16E5A1B19A5CBCC9086AB4D09E3
59B41CF74AED5B75C01085EAAD720C96BA9839BB9028425F71EF541587018C30
EDF9198F1887BB13D0DC1902B31D1DC2CF9C9DF2B07BBE67E7D564D63141B1ED
A0E6FFD1D82CE4D084352E97F09699AA642FCAEB99606BC079F3230443D11313
D6EBB931956615A4CEBCCB7E1BDCE1C7CD54907F2ED4CB1E9D602AB9746BDC1B
A4A84F7B70846E33CE5F285F32FC4E501636113B251001F008DE01DF02DAEDAE
3EE92816034793A280F073E6670E32EFDF47A249652E266DFE7348AA4396CE93
D5063F7D87E6F759A29F32ADBF5D37B697E2B01DE1E902D53E24B71DD4F1CC13
482C48FD1456BB3B63DA7E4A3C59ED5565F2096BC24D7F12FC905E2D6DC010ED
5F06D14E4FB96F0F69193E868789380DC127C1A51D2CD81565EF1E13AA97507A
9841FE083B062CCDDB60B9A1C3E0FE565DDBD45AE467A782725D8B3E30CF0797
DF9A714165D136FC4F83699DEB28DC0008736A49D1FAA25CAA28B66BCCFC7855
461372B4CF5400F4B7BCF0DDE934373E145F340A6E7770D5A0915D4862F8867C
39DF1B394D2BB66A287D2BA92A6C662858584EBFBA53E8DDEFCD80DDD97C3713
D2D2751EBCDB6B4D935084759EDBCB44ABA49269C8F547DCD6E7B147D53DB0D8
DB88F2B4490016C23FDB7EEA6972691E6770B37A0E467B8708B0056727A640F6
E8A33CC915D2F836ECCCE234C13F17FB03853F28E77309B1D0E6185370CF1261
BD2325B000A6AF469200E5F7A3C35D2DAC2AD31A4A8FE8112B67C5D286DB3EF5
94D6D04687B8DA91E8858B8E533CDCA7E454973BA1235728AF9156CBD143BA26
2279BFFF61E504C08C38F06CF72D76D460EF34B60223FC6170F5DD66C1444DA6
D26976D77A35534B6390EDC2DCCDFC038A7C57FF6B6F5C882CDB6A03A7921BB9
F85B93AC64F9C82C455E037A4DEA33C89BE01AA3AFE8B3CBAB88C535BD22357F
9B16487A929DEFCF0103834714C42B1C0B53164C8FE73C9C77520327CCB89B0E
B07AE1EC07FD93D19F9C0A6B2B12B071BB90419EFA4512B1227E6D1174CC7D3D
57B60C9DF22A1434E7D661083C7F8D02F91CCD580EA19FC753FF3B8C81C618B4
7F60FA4ABE5032B7ABE1136C4AEB513AB5F50DCAD816D501A60C51FB1F38771C
27251A57EBFCAECEE3E2A12AA6B6DC66B2B18F6D030844DFDAE96D588C704EAB
A8A055F8A2E33E28344A7A9EC8F2CD1865F8FE99AD7ADAD0922C1BEAAAD9B337
968A02FCA013241B4D42210504E4254BC7510C4BDFDF53EB3D5F54D35F685E74
E502EA63AC05DEF56481C0395E893486EEFAEB6226F2D6775F15948A9D4DC82D
6F60D7DC6F7146540053F4B84AF763EECCA28D26DCDDEBA956D677C9E906B80D
0C908B6A3308B89B8E77CAA452289A98F10329E0F6661A5D69B3A9B39695AC4C
95D2B8073B0700F3CF51B4D76FCBF266295BE92A624BCE6EE9EEF09589FEAD41
4B7358C0256872F31FF228D50C61A38FD38C134DE8C2FBD4D94ADD48BCAF6733
5C61B7F2B2B654C70F5370E255761089559C972F241B85C3465B3C551DA08889
24FE68EAA0080CF4DFCACEE5513EAF3E903BAB38790E8729785643D17BB03343
2F3E62939E834B48B4D7F9A1ECD0120BCE1EE6302C0AC1C7CA421B81B6DDFEA5
6902F01DB81F7AD4C4556A6C66B986A873AFB901376427AC06A1EF338ECB6383
C6EBBFB2B61FE04B0B13B26BFA8A80D5650D815BC8AB200BFF20B2977882BF47
9DCAE546EF6551176B9A7E900D060011EA3A3DCB102E369C03C964E135A81A4A
96CFBDEFF4DE11AB022E33B2765DF15FC2A853F595DE7334E31E8BAEF4799FF6
8EDBBA8148EA7FE288BAE5898638982FF191687F723B02A05EA5F95D79F4447D
B12628C0F838AD7ED830886303207DF666D3E2E369E4D47ECED72963406AB794
26A14A17B3118E50A9D983FC7CC1EE9EB90AA437D14EA2377CFD4893E36CE80C
B6F9DB98327322342EEFC4AB610AAC8F27F0CB185D054422107B077BAC69AA8D
C1EC35AF2C3E12674A53B3A5554EA4B18CCFDE020B76AF50EFF43A273D7BD0EC
942FDC0F4BCE2FCAD37FC498AD7D881491C1D06444915B1694367AF88E699F74
37339478BE40C39D57DD280BEF8C3DC6FA34E9CDD920B0F7E2C38F138EE0922F
BDD3D7BC6E31AACF67DDE0217905ED11DF349F54153281472BA8FC18BDA7E4AE
474B2BCDB5FC24A7087B8D7CF10A370661D3203C86D3D32879A5F548ECF75B98
07C8A60296C2418A32FEA362D83933ACA7B1AE394824C03E2B60F67B07F837CB
3303A57193A074A75CD8BB734D2D090457DD2014C50B246A7DC70C99B7DBFADA
1E01B81749EE49A70F3841D9F4437F9AFEBA80E85A7302FFC4B5D0A21DD0C5C0
5D82EBEC804D15C0FEF51E81E63603AB1E9281C6109145BDF78DA02134990233
2707106BBB5D307960EC8264AEFB56A44965744053106BD5B5E99175BBC27E42
14EEC211161F1E96FAF30510796F922E69F5EA83BF870D345327A582968548D1
C5648CBE6BA93CEA0DE409F9A545C3287761E54228CC345D7C5AD72C7EB3C42A
A354022B2595A07CBF1BD05B68870AA4FE5CEAEFF2DCF0078332084E34C49210
5344559784EDCABE56305EF1BEE14C78D1107EBD32D2B3818E7FA41C0527DE43
6726C968CB7177A203D53DC8B5A858574BFE1E1A7B100DFE9725026694310E4C
81D9D739DF88C655165C148CA55C7A1E2EB9AC33218BCA18B0B8D728F5EB7AB0
D7C7210B0254209709127509854D16573B1A35137947B8D1D0BDC602B0A16D55
0B6CE0190281BA4CEBF16ACFA4FD94730CD97B18366C6192D003985BAB6E49DA
96211DF7CA971E36C849446C77F005D897D944251600E7A6B304DD76E08DDAF5
58FABD99D3015F6D8CCCF97174ABCF4EBF0228321EAEFB90C37D73638049850A
D019D2BFC45ADBA04637EFCBAAAA8A72683C54B45F81F355D9D19496D0F80477
B51B9B9877E7AB494E1AA44C47A3C883DEFDE65E02AA6E2C1D7FA918D72051DB
6CFBA44520B5B5689C875412D210DCBF1EB1C95BBFFA540EE5710E884911F452
C33B54F20DA0A9318C09C86A3CB60F8FF548AF36F41E219BCE7F18B0337447EE
38A02F76C2350AE180C2CE885D84F4D18B976210456F13FCD152FF9102718D0F
C57EC5B1B1485DE99814AD4A0798392364FE0BEFFF89A5599AA782354983D415
861028AADD851711FBFACD0470F350D9D227A5FB5B497F4632B1E1826CFE0467
96B89912BCD080A523A7B79DE04D5E3E9E29E2C6B2A27D0F7DE207770D439E52
D42C8B3806FA06180F1EFF5CEA5ACE58B452EB3620F58FFF4C5A60CCF5DD51CC
3DCE518DD210DB1E8D7A624A37B48C6DAFB92FC1F21A4EC7894E2A0D724C3F61
5F6B7EA884C1A171A7280E8FF4AC0D4C8A2199EFA8517B8C2E43E8716526220C
E629452D507C04521B40E2F0C4CB23306030744F3CBDFCC6BC3388641BCD7334
202357494F739C8C730BD62FE336E47CC8CA845F90A7341EBF10B71D8253E6F8
FA7AC8DD1F4DA7BB92EE841F520CDA6E9E32F903296B80F87B179719D6338755
9497E6D1CE847D45300282249B72ECEB7969E7C8D0538240EE7CEE083BD1CE64
1C8300C59704605BC49BA3C89C2AA19CC20F76FD420E7D6384152DF0CDEFD087
BAFFC6C93AF8FE338E70387B4F1BA2119C97F4733659F7942BD75F3D839477B4
EFD118CAAF66882758648D18517C9EBCAF62677E87399AB9DDA66D726EB07DA7
230653A5A96AC2CF1C5C0A71AB7E9A77A1671EE7D22F08424BAD2A76790BBB18
E9A73A3AC40F568487AF4A9A9C7DF8232322B09B2380C063A52D3CECC51DE9CD
71C657B199A800BBA9D7715DFC217D2B3A1FE9844CBA467A7CA919EB41D7E8BC
0BD4D3EA61170F94D3DF372F5698F8F36DB986C6C618AA75E527C04ED4016B8B
573BCC3B2FA7E676945E56923350BBAC0CF7CE13F17B3C048B898E7B9FD865F6
ACEBEE0048A023AF77116B70EAC3684F5FAFA68FDD22AD422869E28828137C70
6B0CC3E51C002C5FF185A72F8B21D6486CD41A80EC051E875DFC7859542BA952
A714D454416CB94A007509B3DEE24F99E9B2877B4D05F3AB9FE13C64C2287FF3
E9D5D12E3A2AE94355A2170325114C5985EED0B4F03E7872206B3DC4382D8860
9728B4DAB8CAC5EBDC7F940047AD1108ACEBBA1564A034FF2F3B60508154B089
81B62A2E9974E37699E431A9B3E3471C609BFFD6A27A96351DC61E31ABD7C655
BA5E53124F7FC666801C182AF99D4A8A3DEAE18E6D6DC105623C29DD9D16904A
62D35521EC38382AE500A61FCE8D612125A9132BBE333BF49BE67A05EF66329D
204C9A33DBCA5087D9E044FAEE66BA2446568997D1B64BE9282348E3069139B4
14FB4171EA645516FDB1ED0186D0B0D95FF70261749C498DA498FCBE33353764
3482346BCD751AC2AD65E979A31E979859ACBC25317F23C7C0DA714AD9D987DE
A45368072750CAD0C9ABC3F4923723A0CCC2D98CFA8E2EA9517AC5FF1A9E33AD
5279557411E0F7E6160CC2B113F5C9F44CFB38976D7D00609C36ABD1DF64C6AE
6FBCFBD9E9879DE2E51C85B3597B7E6E0D92F2C3B62AEF7077B8FA5B0B126BB8
7FF3DF515ADF3D241CB9D6C81C4D965F85EA14F4839C4D3ADAFAD4EDED5CD771
D0452943086457A0A9E830C0658485CA60FC2621D7082423D46EB801F8502449
684418493C3E014E1F6AA466F61345D046731E6DA80678EC9916BB64EF2B241D
783908AD56EECF4C09B41756481D7AF31066A1F0C47653783A51198028FF2C46
980F42821A0BC9D23F0242AA2C6DD59F4CB5511FBAE3C48B1B02C98798499DB4
76B5B41D4821DD03215A441D04F7C6F42E0BDB28F36F00955C1F1B0F125261DA
0D2F7312CE5B3F3A1DF65DD5455F539B3EB6425D06959A7011DAAED3FA80BF13
0776D5B1969AED96B7999229531B651E4C98B0BD07C1AA836460C3DF99FD8A37
EFDA8A3CCF56AD9EE9F5DC02440C00A2A06E998BC239F96D24325048BACC9ABD
A9206E3DA37E5F142C781072CFAF2D3371632319B253DBB329415C99D1F14379
5E2A0F0A30C13DF094D14F4872A439CC85576DC46136E789DFBB551AE2C28389
82303318BA6F1A5401AB2ABD3C25D5C9A2FA8C392A82F8DC836C8AFEE9C9D6BE
A0F10C0E78AEEF5C198B41FF65262A326E23437A72FED312680E7155F6CD439A
A96488958D2808FACE11273AEB78CCE20956F1F48D71825B795DCE25480A49C7
0D16F721EE8768AF0C5A6E66411D4612096425933BB94B7B4387ABEAB4935BD5
7F48DFDF2E1D79D468A8974B43A4D5ADA81C5EC47F92F95E3333FA6D055226A9
58D75A0A63D485FCC987A796F51CCB0F6C7F85853F17DDCE552712BD7DAFDE8A
CA844DD34A2EC1F5C5C77453535F3CED5BD186A7EEDA89531BB7870689AFA703
C1420E2A18B1EF60A4D042BB742B4C08754D9F00C2C9FE5B9C43CB0B9D921B4A
6980F6B22FE3C7B7CF6357CCA868737C58E5E0A5E1340670398319FEA4E9FF01
B22C0BAD4AF95C85DAB7A4BF4D13E49C8348AA90CBDC3D262B9FA9C0EAFC795E
E82FEC8FEA7C675B171F8128ACF24D34093FC721D2AB878551E230E37FE21382
B89450EF7B02AA325DC5A5B0D8ADB5563588D38C1151A012779EA95F6F1D8C29
68A3E83FC00043F27F1E73B67016A5054B29B3A0400380EA3BA460046252E2CE
AA182531481CAA126483CD370CE208AAC25A0E32F30EADF2050B71A79E27563B
DD4FBD95600E6C1AA3D680E83A730A4642CE4F87E46CCA80C618C1814F112E44
5F32C0970817BC4051479AF259E0895B44F511485B30A84709054F39D5251737
5B943E33FD627F1A45160CD3D048416BA31CC103BC3FCC24FB8371A04B262492
5CBEE7787D68CABBE011703744D8AD0BAFCF511263B3A79824A37390769F2EDD
568BE8045467FC5DA356DFF298F0E2BF9E46CBE6493F708D6BB8FE78D5C3354C
17511541D364CA8C1F2723231562151679BF791A6809164532D7CE3126709FF0
83B86840C3A9B27F2B44615B72C93110F53373C50E14657ED32A3833C87D3DA3
F5DB311E5672052E05C3A5CCB847F0663D9582AA6642773A62555FD57DCF1448
BEC02304B79469A72A3CC8C866B77F225EB04390858BFF70300B09A590091679
3412AEDD15191DDD1B6A3FCCE3EBB841B07B83627A20855A6BEFC921B4896D04
E61B913B6C4175C1CF0C09C86486F508AE91D36AB08E7214960AC4ED7666DEE0
302A3F923AEC792F34C5A9EE4A2883849E7CCA7D5FD80F35173EB83FD223EC7B
62C2AA656388145B7FEF555BCB1430713B988916487ACE0AAF272EAB35BE27FF
B45D0CC6E61277E23AE3D35A9206DB8F5959CDBAE2D0BBDFC8720511E9754F3D
3E68B5D7652489FAE2DBDDE5A18D23AB92E8A97C2CE2BCD216B45A7F12D8A7E2
D22809FD8FBEDD5EC891750D70F99C2645865C0356D3C5E1B156EB62E04FEA0A
55503F88BFDF011436D9D508891EDAB3B22BFF3FA494F5FBFA38486197A1CED5
292DB6B8E49D4469DC7E5A9141AD2C56C395D1B1542BDDF61B5A54BB13725B28
DE3AD77F1D2FD848EE14B51B2D985FA01E005DAF108ED84B38AE432E26D07AEA
271F903D7BCEECDB602A670CA6E94C8BCCF83DB0AC7B39632F0D44030F7584C7
1AFECE41946AE57589E52A9DAB9B4C13315F71C74E886762140314F3F2106069
D58578B215A96116C1F8FFD925675379569A1DB1723E07A385333CEAE7D0E18E
DC00A8415D70BD5463DC64D0B5DA5324939592A8CF830DEC524749A6C5C0F205
71C577ED03D63028C0AE37575A71EBB8954C3A90EEC264E6115950FC91D0DE9A
5D8E2E18762F7C3094CCD0E1DD07EFAFB9C0229B52E8C4381F8AA02414C2FF62
583D166455F7821A44C27B70F2C85EA632F544082BBDC9B77C55B4D4E68066D9
BD4156E9478D3251ACCC0EA722FC9DCF37794E7186404BB358D7E5031793A4E7
0219B6569340B59671BD93C1554B4F6421A437931A2EBD816C7AC81F42E9372D
E5AF66525EBA8965CF383F4F4AE6DA98D1611D05E59ED9BE07F63A4957485E52
C2815090CA3B1221A12F749E5C419161FC98D9B711D0DBFDE94205CA706005B3
B61C2C80341A9852E7F1E520E0F0F50C287A850CB8F474F37399F5CF0FFD880E
519D305B0313F71DCAE5B69DF9551D56E6DAA3D4B800D58CFC32379D202E9FE8
70D53EC343C11E633D4D471A4D7A6449D75188F3F600D5FE70576EA4213A5455
39CB2A58832AA92DA5F34F197E3EFBF17115F9A60F56F78D26B63043DA049792
55F46F985FB09548A5AF1AFEFFD5E8FC133B2DD91215E75E596E08D144D0801B
855207E8C79FE8C1E98BACBDDB68AF7CCF8E9071B7400D28CDCB4D31C8E5E6DB
585C2DD28B5C0305C968BF0DEA21415D8D35C6D0A1B3322114B056BD56EDF5FA
00BD071446DB6AC8045322CC1A97A9B09A310929427179385ABB10BAF0E8A484
D4D688683ED2B878504A44F08E943886E184BC32D3AEC992B620A98338F962CD
1669D18AC1550B19A610AC87D4D4B0A80797BE2BC7CA32B4541A0AED2F504EA1
F92B4D96DB412E5FDDF6355DBCCFF589C204206DDBDEE99048E6D8D3238AB7B1
66C4CD509A9C5A8B4911B8C82EA079623BA19E2CD19ACC174A587AC54A1344E4
14D0D88A66D6B4F56BEB9360478E29A020E377AC092A285AF9574D6391C93B97
13965E239269385ADD16BA311C9236501F2717DDAB52753B36705655AD44733D
2E25CD1E5BB0CD6685444271EA2BF01587CE8C9EC15E2A4FE2658D8835158A2B
E0E39E2553001E8333DA228AA2169A24F246F586326169BCD4B8508F98E9A4BD
BBA40702199AAF7F906A361BDAD5F0C921B6F044348C7853FB4FBAEB6078B410
935DF7D6D5064271899314F198A26AFBBBA1E86D352FF8A9BC757F9DD3565AC9
CBA3B272499B916012CECABF4989E9508EC480AD837EEC61E1635A6261D204B3
F0A74072A491F62A09D70000B1C715C36D91336AE0304148313B27E1641665CD
C62F480030A6745372290334969E9320AF8E7330A29CFEA10FB6367627ED3AD4
456E3A67BF5BB49920F6FE6620D69F58BA165C38AA49D69F2E0D329684551C90
12158313A8230985FC5EECBE80F4F0307AC6A1696E4EF84A749920A0F64992BE
D1A2323DAB45601994C67F6A07F238E7B098D636AE141331BE35D1D5308C927B
A3940B773F20E48EB70C8A5BED21A826EC20AC4384A8CFF8CECF07A5913189E5
4F54A88EFD2D990D55E3781E25465E34B0E51938AC3ECD62EBE43B473FEC1F76
DA6C55089AF3D95E3B850DE236D848BF0FCAB713EDBFE54E4BA5BA08543D80BF
EDEEF34B2C0D9BA404F1298C27D6C69CDD6E0F3F6DBD68716A5D86A42D4AC9B5
4C9D41E0DCB52E647555DB7172CB031B993103C259CF4C774C9505F9C992FEA3
471A971C242D395273D98D7A005395D8821E2A6B0A654C878C6FDF951D8F9ECE
F97273B7554C01E052854856272A3680A51EC039AF5DA58C53421D968C241C48
6AEFA942F68F6E8615BCD0E6CFFE077688C365888921E4560AACCC98CE06A8F0
9FE0D3E9AB19869F677B7E8B05981B519B5CE4E5D6AA1C6F813D68C3D0E18DEC
5682F646080A54225C2920E3BCEE9D09CA5C60F22B07F24A26DD84B9FB085ED3
41B449BAABADC34F4B6DBCBF48F54C949EFA278B3398FBBD0D4765CAD178A6F9
3C5217BD2547756D5A915EE69CDE1336040C536CCFF439BC8E43553D813DC1A9
B63695100CBFC23DA2F68B499386161B4BD1F94F022EDC64B06481A32733AD83
4B294F36E3BE132254C3B0A8DA1B30A710FDA8E19C96C0CF4B8DD9CE727EBBB4
FD0C1D5E62A860C77CDFC3849E58F278AF879D60E59EF98DE172104A59134C57
CD5CD0305BBF875D7087C38B676764F90484747EB6E236A366D8046477D04EBE
56E5F7EB5DEADE51BF7B714B972DCBF7D9C11B71CBDF3E2B0FEF648E977D3EC9
2D101BC75248B957A4A5B851435BDD511017E77DE30E4887C0E7B8F2A0D884F8
C09A5A6A8572B933865552B6B9F998FF85298CBBAC78BBA0A3D3FA6680A7C734
917A00C16F249A333A1F83E14DFB06C6292C65BE92FC109B2B38EF8C02F86120
E587F7F3E5E0860AAC284813B298DD1D7EF648B69F693C23EA484E50B737A121
5CD4D151B6435DA8D43A7D14F9806D2710B94EF62DC6AC474AC2F11808940D6E
9AFAA51EF6C23C32E9741DC2B9D578DAF502D940AEA08876BE071C01DD020E92
4DB6ABD954BFF51D758526655FA1A05A37C9CD769CAEA7484F17687D2F3900B9
524B578BCF2CA6C2E48A488A5EEBF43CA37A12B2E1CD2F18F2D5563CFAC92826
22CD698615EF49518B3ECB53EC320AAD6CECD064FBCA7B5F67BEECF4995DC35D
4691A78401D7453549879D9B14A6C73F8BD7A245A6DD826398954FBD5E7ABCC7
7B6ACC91D84775A03BD1F7B9955547F2B0BBA26006FD4C1AF44052F09F53B087
A3E5284B1C41859808C27C7DFF5ACB2AF407F6AAD2DE8B745EA3CF0414890044
719DE582F2E79B9BD4C929C8A03801A388315DE6EEBCAC80D4830C86A6D07647
3DA09D5EB6334E81FD2B536C53C1E6FF2C97ACABC52E9DB146BAA3A8A02B7C53
0BED308AC8702F80A9DE69E7B499C26BAEF2BAA95ED2BB89444613EF37B7A971
4834A884A4957B1168D1E1F46742DC29BB4F0E6D0A81386816EAF7CBD2677FCD
108F4166A65971EF3C4EB86B99949ECB190D3C92B459F86E2DF7096A631712F5
0EFF6DEC3B15060C553536AFA1AB550740F7286EC7CF1CAE3ED55EEF399CA17B
715C8A6DA4099DE692F23664DC71629D041E4669A05B6754EE7CE90EE8C3B030
2A0A8E141775ED7DA74734480B48D114719BD5B3596576BA928FF7D401437FAA
45A7875DE9FBE63BEFFEC23FB701CDD3C429BD4CC3F96584C065FAFEA3EEC98A
13787627BFCAD617463B1D8D5CB6770DBDDFD8C0EC2F403A5ABB10BAF0E8A484
D4D688683ED2B878504A44F089AECB8E941B1E7F573D8C0964194509C21E8560
0DCB77A933C1FFD3D1EF05061D80B5E3C87AC8A76D16591A313198D01BAE3BB5
6977F0E8D21158CD18F6523CF7B633C9D7DB81CFEC33DD7CE3D15A87D1A6367C
AEA1CC29DE4D3EBF8B5872580E379881BE02909D7E57B80AD9F00C6CF69E057B
1A71343DACC41CBCDC0E30F2E76DCB7724F4917A6F436B823B1A2FD914DDADEF
B5C5CA3A43E344994199A75DB103C3AE71702350D62048D1958D36E17019B49B
4770CEFB37B0EED373279A334CF98A4F749DB6B9EF49617809FB8B2F24322AB3
10F16A60F884A5889DE0D4695F0AD014E72156DDE45CAD34F29913BBF4ECFD83
ADAE0F66B2652B9E71D3AF022B675E9A48B8C3E765FD671669E0D271F30024C0
488C71FB30791F330A89AB1CD2ED6390ABE1CBB68FA80D3BE4430E9C9FFF5747
D196541BE96D98F0401D2545E9FACD008B4ADB50EB9F0238514DD6544595D1EA
952901FDD537C1B1EF54E133B020E19F93C37C5FC2502E459B18ED19CF7AABFC
7D45935CCA74EEE28CFA47054DC41A389203BFB3D601BC9A44CD13069FC4A80C
E9AAE79F064761AEBB2558EF18E945F06E37B435FF635B80BCC4B4912AC3076B
863D865D83AAD62E2B5202ADE986B4B00DFF04207C0D5E50634A4E01A6DBAC88
BF012B53F8D3262E9BA4F370699C8678DE73D14D8911F60949C075630D5E2991
2CD7E6362E52891A80DC3A55C75248E4DB744F6E0C54E83C14066C3446C36E7B
69063847180B6DCA83EB97A55FFB23788271A49C53225C2920E3BCEE9D09CA5C
60F22B07F24A26DD83F4F260444E08EA8214CD4647D62D216E540277D26CC543
C6623C7F03BCBCD562759C12B4BFEB798B4578ED88B2E29C613EB234EA2AC527
C5E0F43C29B797B00D04AF6B534A749ACFB3F74DEAF14979CA99648AC7971810
F7EB9D2F14ED40653C899AD3D26C369A7FCF5D2513062CD4155578F86FEB25C1
ACB394183F31D783711AE45C4D16119B366A8F2005ECCE7B2ED90343D23E006E
CB2828450D1E2F1B972B143DA98F5CF93DB14805DB66731CE36CE160FAFF76ED
5DFCAD3B0F3C59A4D52A0E0346357CE6DD0453682BB3519205D57BAC8E8D1035
C703855410DD289929090294676AAE3ECABB2F4E65F5271B585DF3C4E7D83D5A
2230B4673692A3A3E95A52591D79473418C511E7FBC75362064CBC02FE63B784
0E7374C5EA086FD894AFCA2AEFD997AD21C556376D21FB706D26251A2D61A98D
51B6F3880C38FB2349BE51D981A08AA153E57F9EF1220C9C272DCD31C53CD08A
BD163F8DE60A4579474A7060A9FBF7B5252C0274C581A2005CB515170BEC29F9
980E9E3155CB94633C9CA212ADDBDCBDDDA4E87A9BBE3EDE32DC8120E6304500
2D044B71370D2195B0745A347A57BCDD94A615D500276FBB0FBBB421B64622C3
5D16A5920E0BDE7C64BBC23EA554AAC9BA95BA57603A8EBA86FE7A0CADC3AECD
739C9C425D09CB50B4B4BE281C7CF009EC096036351451AE7425A26CDC319A31
BDE48D9A9E7142687362FC574EB79B143A4BC2515A46A3FCFA46CBBC2310AF7E
66F09F04BBC8B01F009D09BAD4E0AEE22CC4FCCC7A4BAC3D34E426D7D9D90823
6037C83A7097B9D57B97F5CD56CB80CC88111C9E1CC5A95D86E66763AF781294
F18B5E7ED330B352D98EA20DAD98F7031F94793F7B3A279F3291925B9A3579ED
72125D6388D077A2037B7D29EE7053D34AC69C2DBBB9FF00AE72F942042D778A
CE5C18720E3E3C72B08FB19807710498752E1CCFBE2DA0F3D2CAE3F2C028C5EF
249DA376F0F229976064291F05A2B5F750ED1A437DF6480BC21F9903195EA84D
4365B68DE81582F0FA4728B81578FC2EB39C989C6B500BD034F31C23B04EE90F
CB4484AB2053E8DD69A2E935DAC0C86D9C66ED01B85534A1E39BD5C20DE216B3
342CC9894D177FBBF1DA7D23111F9CE050A46D17DA14A9463282FCA08C17ADA3
3296FC68701C42E853DE286F4DFA25EC7F9E54E92E75E48291ABB565C1F8644C
D5D9F7EA30EA59334CFAF4EF43F7C72C787A33E70D3F3F47A37432E69B29DFA8
44C6B2085D6A445D1F877635AD15214DE56BDDA1E3D2DE9C549844667E28F6FF
56261B6FB1D404A73E92348FE74AE5B8CED1F61DE6B4F56754BB3FE1A443CD7E
8E17FCB8B4ED57D7C61B0C70972F86F6764A7B876F5A6555C04D0A86619FA462
49868CE8429DD6D77D99B505E6559BB8E9664CFA5CB68AA71040D5DC570C993C
158C2C2C11CF6126D1716B808D97E787F5BB19D90FAEF1596A2319473A95AB28
7043C5A32B1ECC192FE012F5BFF946CE8D7834A3410F5E6EC14CC8E473378982
8933DD55B109F616080F5BF29107A418F686DD276382DC118D0DB9EEFAF6FB97
D66CE67F532CFD2FF2ECFFD0197C5374FE3D6DE742A6980C8C55A9DD737F2069
BF9A73FFABD0D0D68492768C7F55E9952987100AFC0EC6E59B0B6301B1902F23
3736792B3CCAE73DEF3F7438ECBBA29A27CDF940B9C096DBBA4915FBF8489EDF
6E2BA563FA7F0397CD075EF9CD41082CCBF63E849C48835E14A9DFBDB4CA8582
DAF2809A41072FD817E7072D80C54B43991D4A47FA52E1221C072B8C983B8A83
BF9E6D88256C4BF012FFB59340D23E1BFE1487D82689119BB85672D5E84D3B54
28A9558234C569604441691CDCAC602029A2A38F7F2648E1819966BC2476D4AC
4E4347E74591994A23E99F51EBF66192E45DF1F3899D636D518807D02B5D5690
931A7FB96C757689A5139FB1A3D7983862931AAF085D2BD19712926E230DD02A
EAE6461EDD83AC935AF04BA71C9E0244FE096571F074F07CC1AAC1DF294CF839
120053B7E9268CF93B9763BA70C77A82B01C2B17403B9007DA39BA7C96926AA7
769E7702305CEF74EC07C79EE7E2D42213218F2ACBB2F5361C86BECDAEEEC705
F7A8823AA2943C05C912B7B60343A7DC7A3F6F1AEA9D874100526E18C29421DB
4FEFD57CD2B0B7721EAF2B21AB693B970F89B6BA6E8B05DDF2B538BC24B526EC
DC0AD8A2E4EF069977E88971C070FBAE2C25A7104589EF3882C85E8CA9ED2804
4819A5F8BB070D9D04A40BCC9D3AA321C8805B2C22BEA0036BF28FA9E0AE74E2
8C8F300E6FD6F33FD53BBC4E00115880F608DD3B6988EC6038D4B9612F8BC361
C35875B7CEB0AC221CC2F141AB6BD9951ABAD6FC67FE4434D11D412FBAF34855
004E5E47A0E5D6D2A513DCCE575B832D0844553EEA4738FEA3F244DEC95C3148
293B0952B0FD400FD469408790D6EFEC98821433C4170D36B73C2426864F0381
0F9FFB98F07CA6252C381A0EBD6B1C70BBF86966F7914282CC412D0F131CCF4F
800D0C3E8BD00B108257F92AE1869430C6DE57F026F2E9C82F572AE49002D43E
0BFC4D3E0EB2729F2C58CA851EA676D738B40DBAE7620F27C3A01F2DA8A5556C
FC8F4A9F067ECB8C163606C3851355ACA79EF5C5033D499C434C165785DC7B08
5956E2B31CBF164EF31284DC4C49E1D55DC081E8B58F2F29E19F7D715AD567F5
56BF4DB8239AB8431BBBAA5E86057757808322DF216865D48D428474F0A80A2E
23211930F1C5D7F231365BE2C51E7110DA3CBC1CFE349AED0167FEB6593EECBC
997193BEC71A63F7B741344010B345394F22199DE571B5E71F57DAD370E98E31
FD3021485E3D82A817866FE481DF6360BCC2154B652F0EBFBB4BAA62641F852A
26CBFC6A61A481F1AB43739F20CA3AF2491CCFE7D42ADC53F67BB32848114C36
F9E6A25F53AB0F25FCA6BB860E709684EA67590F1A83A39CCB7E05896DE70696
93EFC870CB86162614133E0E2C08646BE73DF766E216FCC9E0D3B13991A136BF
E6D2F33F2A6FCA03FB36EF8FFBBD71CEA57FFDEECE1C6223109832853C664B53
C4ECDF81B0004DBE82B86EAEDF5FA5A9342C085C5FD2C774FDCF4DB4D4997018
28FC22F723CE25814E30876470F16C5E8F87F74CFB89CC763954190E9D909671
965AC8849B3B885B7DAA70ADD8804FC5661CCCBA123B2C56BCA4F1724FD3C64E
1B66C4C9B7BBEF8C466E8E71908038D3C02B1F5E8293BE9BBFE63C5BBF46B92C
DE3C52068336290D74705098D4582CC07991334762A700EE46CCFF0F8222069A
239E9C090B5B26813D247827B40DC36A2CBA4A701C45942DB1C91D2734D2E252
BAE9299E709FD22DA1E8E2CD3FBD3C82D6B76DFC63797A999F4405E08A4737EF
3B38F974D988A0876FF8AFD9374011AFBE3B5417B07D10B751B4D088DD921DFE
4EDBB7A447DA4C99661BC83BBC77655DC7D7D3F0167239170D82A1EC5B2469B6
6B4160DA342B14BE2D13F07D54255AC3CE51E835850E61D153F982B67F7B706D
57B398D4C89F58C85445101468001F40721E8DADDADEF4778B3132C7499FE427
8E1D36A434FAC6E77F6A0FE97FBB5B18B8A9D20D1F534C56C075C97D92490662
D7A1C0F7540FA825DE6E0B910F0CAF88E6309CB00AA35C1A0B21DCC7556834DD
3F66EFC7134F543BF9748641D4D5D80CEB089401871C26C7DDFC5D5CBEEAE249
871AC12C29BAC09A81BDB082FA5134A367B198BF1D5888DAC7AF368CF215ECA5
3E73C0C347A0C47DE886A1E1F78EE7BB132ED56EB6794BBB90FBF34BBEAF282A
69007BF678CFE03C4A91948FCAE03F3DF3E6963455CFB22972CD65D3BF92BA1A
84845B61318A6BEABA06D2F8C0210A26195471815D47CD6A5B2ED1DC997146A2
2768AC82C7B98CFFC426634F3D05C8F61EE2068824B4AAE5F3D674ADA847CC76
266C3DC920559EE4F73496FDD2B58F8B140D41A726830A38C7B58AF68CFECB09
313F5745B02B4BB60BD80D11F86B65BB10B62593DEA56DBFF08DF61B80CF18E1
540FCFF3F25B87B75D65CDB23CB54D3C2666ABBD1D7FD20200638DF7E3599F62
B0286A83FE867DE833DA3E181D456AF64058A403CC63CA5572DE3BDD86015BEC
60CEE8ADEEEE96C2499E4D5C40DEEFB9EEC8853BB3E2BD7F6D6F4E5983D415EE
EE370D240B29E25042B9F624674250A728C5C04C53726596250661D7ED3F9424
B8B7E988273E4751A88881FD5D5E7CBA740B6A4A544179C5B3641C5EEA4D59F9
8C4B03FB77685A0AD426DC914790763AC5F9D7E3FA7FCA7E8558FF8EDE9B11BE
ECA6CEAEA814DF82F5AAB27AA9B071B8493902802AF4206253C2DB076270A01E
13666A84DFEBC5A5DC04BFB1D49BF5BEB55C2EC6CB22155A37D36FDC2843EDBD
271BEC306E1817DE0DEF648E977D3EC92D101BC75248B957A4A5B851453720ED
51B9123DA0DA1143CA9AA32E28424B735BDFEF4890D3FB68C544D8790143B7C8
FFDCBC8B95F1B879C6050DEA1FC1D27CC6A4A1E67DD67ED59060159FBFF46CEC
88DE74BE36312504D8F7F6AC051CE1ED882DB34E14C9620BD6760B31870D69C4
C15EEA09E1831354F7C4A66651C65182B961927DE098C08A66D1E33FF54A29BD
64A57DE26B5C3E7CAED86C85B5E190C5C8294E49F4B99C908E7CDDFBEF799995
98E57464E82D184CF76BE6CC53B06D531DB9D7ECA48701B5D4511FF86644AE56
F463938254323C21D8208CF7F2854D681BBF176A08D3C975EEFAD3F2EECA1995
94CF093FB8D49DAB28DA0EDB9463FC653F6F87D1A473A40A3EDF8B197CD2F369
9339E66CA645DE5D3CEF127DB53383AA2FFAC31D3058E6044EAFD51F58A33BEC
1D91D932FEA8A790C218DD6FCF27146065947DA7F7282FBD398422F52DD7D4F1
99BBD874DD442E19D532EACDC90C78A145838224866EA5C1299D94203D112A7E
BBD5193878AF0D3EE755BD5958FD3632E67037C4FCD495F7B532647689F1F213
6657C025AD24664C9A2A718813DDF7E2AFA021A6B5EB84E7D0850954AAFE86CB
5B340FEE679C2524FA0A0192DBC4C4BF0DFE03973BB79FEDACB514713586695C
0797C7900E8E6AC46A6B34ACEC55E337FB59EF89B24C28163F9270AA4C95CA0F
58CF6DA72A3CC8C866B77F225EB04390858BFF70300B0DE649301C641D45DA8F
0F3F695B404F351F8ED22F8D659FF4A30682892C8314CEC9BD005A5B0610214F
0A6CBB7F133E2BED41CE8DA5C50E9EDFB70047B6D2CFA4ECE8A9B0C865179B3F
AB830E1EAAC293AE37EE0993D38EEF5A9675B16D071E432931CD32FB8C360C24
FBFD400EB65F8FA53B5D5FCE9161F188077CC0963A83396A250BA5C883FB9B33
DB98E520A332422433D2DAEBE5ADF4585469D5191951C3EE46B13C8E08646484
B644D0C2556467A4104D101A5A0C0601758F644CA8B09B5C3E973F69EF7A9EDD
4C5A69890997C8243C404AF7E10F76CCFFABDDE4F773864DF886BE2C21FF7BB3
47D45455A0628C7EEF92A86664FA20D07AEF6DC4C3D25B0E6BA61F704CAA3FD5
136F8F3B0DFB89AA1D0FA3717BF3CD52E7FC86C8FBACFDBF66F347EE1D6DB954
61595C9938581921663D3F263122C3B1AE04709B28E38E80485BAC718F97F280
5DACC303CDD10D18F3D2433B05EF6B1F64A14FAA7DFCBA562AEBE8205F2653C6
08EEC3D845B12F3975C5EAFB917D9B85730A4930EF1E3E733292C806C80C8865
645C656072930E0A221BEE8B2CD455AF9B5F2A6343E45D28AF8C7B561500E9AD
B8BE5D338698293881FF237E9135E6C47FD08FD7B68352CACCA2D75D486446E7
369DE487175AE41C4352941A09AB5A195A605234B9D3F08D50F8EAC85B60354A
739F6DDBB748D0B86F21F9497121887FC181C644B1D6E9C29C2E65C25A7376AB
0951A98F668907097E2ABD9120750E6F5E40B38FAECD02D709420B4919855B84
28BDC73E408DF460EDA11739AF3788BABB313CA9B72AA3FBFBE9BB816B42EDF4
45E9984AD71187BE7D6EEB6EB3037ECFF18C13247D13EB838401FE050B089354
0293D5FAF5B4BBEC5416501276491B79153F8DF73AE8E2B9F5FDC218C305A5CF
3A81942435388ADD4BDCA2FB8AF83FDA1E8ACC3588B776A0F38DA32B37B3D6B8
75062F5638493156301A8EB7277801B6E41841E2DE908A2E4FF1752C33E6FDC9
67E75503D554FA90FE87FF6A567AAFE49C9CA1CDAECC0FFB2C3B2EF0396CBE6E
45181D6D03988E9727FE6F8AEF5969EFF87EA400501A3B3236EA1FCF0C423A86
C57CBAE8F9F82E65EDBCCB17469C401E02ACA6C99A0C9920CE6B42AAFBC28BF1
A25BB7E76BEDEEE6A8C24AB041F3C6E2B44AA95479E4E9813350499BBC1E06A5
D7D9D85748FD8B81BE6AC0D179D8120F9A17CF653245AA60D404B3187D0FEB65
CF565A912A654AD47D419099F0279F6755E232669B65A7A46A6161F9AABF5AD2
7361E68D79B52B6C9A96C1A40596F048A31C4E0CDA2A53AD5E8DEEA70B9D144D
3E1EE72343AD613C086D475CF100156741524F3B68C24FFB3540448715CC3EDF
AEA40FB98C1F251CB49EAE29A3AE0601DB63F00AEFA040E9F80D1180B1FCA1A7
5090DCBAE8DB96C15B1849DDEA817D05A4BD642DFAD8B91BF0B9EDAC69886326
6D7A83290DCB8BC01CBF67436CEDBF502C4013C1C4FB989C5C331622A8090D0C
2F709654C55A596B7D4F164FFC3952CF9F04A95ADF3F80F3C4CE59FAF9545125
1659F162B1EAA0489C6D09EA559B9E0DFCCA1A39673371E8005C2A8E32152AC6
76F9B1F252F8D0ED029E610CFDBA894C8C0F2BFB2C8381E13CB69A288CFB8408
890ECB590BDC976A8C93E809536E9087CCA809106A42A594173590DAC64E0738
6A0104CC5ED2C68B08B6321F881E98B4C5193E771E9A7D0B357E17E473AD9FF8
4AAEF7E144982C6DEAD461FE4C204A0A6D7BA9819C8F68CACFF439CA1A153479
7CA46AC19F1F91712B30A195D15523961A2724F5C33A8738A4105E394ACA6EAD
2890CE7643A5C44777DDAEFA56B27091598B2DFB77BC1215DA752B69298B3664
5A69B98423DDA04A18DF5410EEECE6E9471EB02F38BDE00115A21706BC3AE8F2
9C792E45583B16A84E1779CADECE0C75A70B6E70154AB80C5A40BEC0CA793789
74A281B8F074456303CAE324705BE0751CCDE651FB514D0FEFBBF1F53606B848
1ECD5FA685C54DECB92073CC036BA1DC8D789B86226E38B0DB3AFD1896686F8E
478603573F9FFDD42D1DA7BA6D125B96B6B314C7875FE456A79A38623745FC7B
C778B3765D421C915AECD756654DDB145511CECAF4267E9D378CDCD13B00F96C
45B113866881201429FDA949FE1F364C2F744079F5937E2988B08711D1C26A6F
7FC2E24FD64F7B74BEE205BB7E6DD226AB585C11A08A3E33D5F5D10E8177B9BD
F9B526C14065D013427D282B07510C3A6A9597B5C69D8E48C54F7809FC501981
0C4A106297F15E7E6E7B9E42790272E28447EB420D12CDF741FC2782257F20E4
430D54B93AAC4A0FE3595C5D7E2FE528C85539D2FB653AA5B93CF70C4EE4A172
4BED4905EDAA8A46A337EA53E0871270B7FF6F19FFCAF6627099C08DDE996F9D
3B8A2E27B9D4BB11A7D7613AA7C519BCE1182B6C30F93DD0D7DEAF262C2A42C0
2E3D1C41FD46552E7CA1B36B02C66505D08E17C2ACBF106156AA2D5B790AFDEF
FD04B04AB3469F34999A3BAB4047E252ADB05C6BB87648C7A4EE7A3FD4FAA95E
98C99D2E5C078B5199A8AA5AC678091C4C8B2CA6692F3F28B7794A9FE5A62A82
32106093EA39091D5B4204AD9BDD2B9ACFC3FF359CC8667D7887C9BDB503D1ED
64E643D728556B4481C7F77B18BBC1EEB43200DB0C6379BF1F5FAF474A0F2127
19A259549EF7BD5AEFFA0DF810DF1E0034DCFE58B45A71D4E9FDDFCB897B46D6
C40A3B4BAF0C4AFBAE8CFD73A596F7C7AF437B8AD4F2F652EDDFF165186D73C5
275BC9638D8A733D3E5905EB64725D9D9140ADD2348CA838B3A1CA68A22C5A51
34CB01D450721319B911DB91692758F1907EC08F5E8ADB0E9F7DAE0D0486B75F
E82E88EAA03F65077776C747047E336DD497E22194A490DCFBAF39159FB3A63B
24AA15B2D36ED7F45623D0AF7E21A589ECF73E8ABEC3C69594738E8945AAF2ED
1D90FDF92AC9F25075CE7D76366B5B28AD82661F75AC6C8238797C13451EF9C9
E21B9C60F64B2455C109DEEFDA4C340958D49A0C8B4E4459B7C691BF6A674655
823DB7D1D12E2435634CF69890D14A1FF76CDC75ADF83339A0A4E5F1AA194B2F
C8593DE970B2C883FA21B46E2BFF68C724446933E8927F3AACE64BE6623CC6A3
6CB5E9E1260F6699D945A611A7EA348DB3C86BE4B588DBB9FD75BB548E4988A5
80586486CB75E1C4E4C7A7C603456F2EBF2705ECCE7B2ED90343D23E006ECB28
2BEBD7D7CDFD1D6BEFB5B196144E026FD76EF7A00B67824026CD9C4CB0C0C97C
BCBFCC599720FC9CA0A2B44361747D6E81960CC0321BF3AC8193758B4610EF33
F894F278E517DA54270BFCBA2FF5C2064628045617B0D434CE813F69456FD365
BAE24F737E9FA5DBC1CBFBCFBB273936721273DC120969CAAF54CD5F89FD89D1
53C58F0D648A28014FC7DA1A9AB3C09DD30928904494416E3DF1D6CA3B527FB8
826F7F17E5F5D5C98C960B3F7873A164EEFCF23B39579CC1D94AD59B64A54DA9
FE4C01E4EBADFA3C5757BA5C9BA0897E711DFFF1EE6ABE33479FC9E093CAA18D
20F308C43A95299545F27EA902F484D7EF76D8BF50E4A992CBCA5E1285AA1067
D470813C4EE0034375EBCAA822840BC8FA3E02D9B520F7E8785DFEF225DBB69D
606219F17E801AF5F30613E7A2C3D32301ADBCFAACE88F804DAA2B51B443839D
49DE5CE537DF8352F46115C8B3E4679B46C25E44BE0A77A52F49B360BDC5FD87
44E86E19C9B1F9D62740A6C1E4ACA130DD76A67920DBB347FCCB3A3B7622E5A7
04402F59B2EFB224107BCE6BECF4A6FBC27D932CBB65408DEEBB298E1EA6E3E3
EEAF3528EB6CCBF43EE9C02CB6F255587300FD433C3B4D9FF294537074922108
1D1C75F39C3FDED02C7B5394E5358E70A516237FFD7A58EA0C7A39DEAAFF74F3
865CBD9DF5199EE51515D2BA0D44855014654D1A999CAD1A5E9DD35EE33E8DF3
662840E32409951CADA934F8896AA60376DD0865F7BC578D010289CAB665AEA6
C2A88BFA33BE22261AFA8B150CEF52C48C478EADF2E58D3CB1CA23A332D92C80
D89FAF2BD300218B879BE060706CA4081CEDEAAE4CA9986794B83227FD4117B2
7984A141A4B19E695FBC8D4D3C542F83821C56B4F44B70462F9975A6E314A365
BFA26DAFB54B00702F9DC177B9EA20E7A398A633DA1587E3728E345F81A68635
81C22A349B8AB7B3BDBC53EA79B2E8AF3DB3E40BE9E22D7346A518C7B6B74768
50EE3055DC42F2E66AAA8E40FB4F9A575B9C83CF9529AD5E622C5ECD72D3C635
376F88F28238E2BC34D15E5DF40E5B5AA30AF7284A186924F1D3A07710FB1D1A
1DAE107AFFB1C6759C04C3E507FCB495AAE4A10B6CA01ADAFDE9A3FB2169A90B
01F68B87DB15669D9DB11CC7D2A9C358C6CD7BE10F253C9FD64B2C102911B1A7
ECED04F404A73C533DE7E6939262620A5A94328781509A5C4F82A23E3FC8CEAE
6032E8B5A9B42CEFCC75626861C86A5F677E76C5FEDCC0700A44FB1C89313483
A9358BBE32587E7EC04F8876134E5B5D81C916E7AEAED0A847331E84A61E6731
69378F50886160BA2544847411195FD1A4B269D118F9CDA8DD4CE67BEA9D73F4
94DB70D53E7EA2561BAAA0451FEF267A774678018637FC87BFAA82B8D905D4CE
8F21DE9FA6E2578F9A146E90569E6551E81C3FFD0B1858C54E41C055
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 23867906 17900936 1000 600 600
(/home/fenarius/Travail/Cours/NSITerminale/docs/images/C15/xor.dvi)
@start /Fa 137[25 1[25 7[21 2[13 3[23 3[25 18[34 78[{
 enclmec ReEncodeFont }7 41.511 /LMRomanCaps10-Regular
rf /Fb 22[20 111[20 5[17 15 2[22 23 1[11 2[11 3[20 23
20 1[21 18[31 1[24 5[25 4[29 7[22 22 5[22 22 22 22 12
15 3[17 17 40[{ enclmec ReEncodeFont }26 41.511 /LMSans8-Regular
rf /Fc 179[92 76[{ enclmmathex ReEncodeFont }1 83.022
/LMMathExtension10-Regular rf /Fd 194[65 11[42 42 48[{
 enclmec ReEncodeFont }3 83.022 /LMSans10-Regular rf
/Fe 22[52 123[93 4[60 4[52 1[56 13[65 83[{ enclmec ReEncodeFont }6
119.552 /LMSans12-Regular rf /Ff 188[84 17[66 49[{
 enclmec ReEncodeFont }2 119.552 /LMSans10-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
% dvips-unknown
statusdict /setpageparams known { hsize vsize 0 1 statusdict begin {
setpageparams } stopped end } { true } ifelse { statusdict /setpage known
{ hsize vsize 1 statusdict begin { setpage } stopped pop end } if } if
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -525 -608 a
SDict begin H.S end
 -525 -608
a -525 -608 a
SDict begin H.R end
 -525 -608 a -525 -608 a
SDict begin [/View [/XYZ H.V]/Dest (Navigation1) cvn /DEST pdfmark
end
 -525 -608 a -525
-608 a
SDict begin H.S end
 -525 -608 a -525 -608 a
SDict begin H.R end
 -525 -608 a -525 -608
a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -525 -608 a 0 0 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 0 0 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 1 TeXcolorgray -600 1668 3024 2268 v 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 2424 1668
a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 2424 1668 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0.2 0.2 0.7
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 1 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0.68 0.68 0.88 TeXcolorrgb 1345 1579 a

 1345 1579 a 1345
1579 a


 pgfo

 save

 0.68 0.68 0.88 setrgbcolor

 0.3985 pgfw

 save

 pgf2

 restore
 0.84 0.84 0.94 TeXcolorrgb
 save

 pgf1

 restore
 0.68 0.68 0.88 TeXcolorrgb
 newpath

 restore

 pgfc



1345 1591 a
SDict begin H.S end
 1345 1591 a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88
TeXcolorrgb 1395 1529 a
SDict begin H.R end
 1395 1529 a 1395 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1395
1591 a 1395 1591 a
SDict begin H.S end
 1395 1591 a 0.68 0.68 0.88 TeXcolorrgb
0.68 0.68 0.88 TeXcolorrgb 1461 1529 a
SDict begin H.R end
 1461 1529 a 1461
1591 a
SDict begin [/H /N/Border [0 0 0]BorderArrayPatch/Color [1 0 0]/Action
<</Subtype/Named/N/GoToPage>>/Subtype /Link H.B /ANN pdfmark end
 1461 1591 a 1461 1591 a
SDict begin H.S end
 1461 1591 a 0.68 0.68 0.88
TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb 1511 1529 a
SDict begin H.R end
 1511
1529 a 1511 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1511 1591 a 1523 1579 a

 1523 1579
a 1523 1579 a


 pgfo

 save

 0.68 0.68 0.88 setrgbcolor

 0.3985 pgfw

 save

 pgf4

 restore
 0.84 0.84 0.94 TeXcolorrgb
 save

 pgf3

 restore
 0.68 0.68 0.88
TeXcolorrgb
 newpath

 restore

 pgfc


 1523 1591 a
SDict begin H.S end
 1523 1591 a 0.68 0.68 0.88 TeXcolorrgb
0.68 0.68 0.88 TeXcolorrgb 1564 1529 a
SDict begin H.R end
 1564 1529 a 1564
1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1564 1591 a 1564 1591 a
SDict begin H.S end
 1564 1591 a 0.68 0.68 0.88
TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb 1606 1529 a
SDict begin H.R end
 1606
1529 a 1606 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1606 1591 a 1606 1591 a
SDict begin H.S end
 1606 1591
a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb
1647 1529 a
SDict begin H.R end
 1647 1529 a 1647 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1647 1591 a 1647
1591 a
SDict begin H.S end
 1647 1591 a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88
TeXcolorrgb 1689 1529 a
SDict begin H.R end
 1689 1529 a 1689 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1689
1591 a 1701 1579 a

 1701 1579 a 1701 1579 a


 pgfo

 save

 0.68 0.68 0.88 setrgbcolor

 0.3985 pgfw

 save

 pgf6

 restore
 0.84 0.84 0.94
TeXcolorrgb
 save

 pgf5

 restore
 0.68 0.68 0.88 TeXcolorrgb
 newpath

 restore

 pgfc


 1701 1591 a
SDict begin H.S end
 1701
1591 a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb
1742 1529 a
SDict begin H.R end
 1742 1529 a 1742 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1742 1591 a 1742
1591 a
SDict begin H.S end
 1742 1591 a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88
TeXcolorrgb 1784 1529 a
SDict begin H.R end
 1784 1529 a 1784 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1784
1591 a 1784 1591 a
SDict begin H.S end
 1784 1591 a 0.68 0.68 0.88 TeXcolorrgb
0.68 0.68 0.88 TeXcolorrgb 1825 1529 a
SDict begin H.R end
 1825 1529 a 1825
1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1825 1591 a 1825 1591 a
SDict begin H.S end
 1825 1591 a 0.68 0.68 0.88
TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb 1867 1529 a
SDict begin H.R end
 1867
1529 a 1867 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1867 1591 a 1878 1579 a

 1878 1579
a 1878 1579 a


 pgfo

 save

 0.68 0.68 0.88 setrgbcolor

 0.3985 pgfw

 save

 pgf8

 restore
 0.84 0.84 0.94 TeXcolorrgb
 save

 pgf7

 restore
 0.68 0.68 0.88
TeXcolorrgb
 newpath

 restore

 pgfc


 1878 1591 a
SDict begin H.S end
 1878 1591 a 0.68 0.68 0.88 TeXcolorrgb
0.68 0.68 0.88 TeXcolorrgb 1920 1529 a
SDict begin H.R end
 1920 1529 a 1920
1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1920 1591 a 1920 1591 a
SDict begin H.S end
 1920 1591 a 0.68 0.68 0.88
TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb 1961 1529 a
SDict begin H.R end
 1961
1529 a 1961 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 1961 1591 a 1961 1591 a
SDict begin H.S end
 1961 1591
a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb
2003 1529 a
SDict begin H.R end
 2003 1529 a 2003 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 2003 1591 a 2003
1591 a
SDict begin H.S end
 2003 1591 a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88
TeXcolorrgb 2044 1529 a
SDict begin H.R end
 2044 1529 a 2044 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 2044
1591 a 2056 1579 a

 2056 1579 a 2056 1579 a


 pgfo

 save

 0.68 0.68 0.88 setrgbcolor

 0.3985 pgfw

 save

 pgf11

 restore

 newpath

 restore

 pgfc


 2056 1591
a
SDict begin H.S end
 2056 1591 a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88
TeXcolorrgb 2131 1529 a
SDict begin H.R end
 2131 1529 a 2131 1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 2131
1591 a 2131 1591 a
SDict begin H.S end
 2131 1591 a 0.68 0.68 0.88 TeXcolorrgb
0.68 0.68 0.88 TeXcolorrgb 2222 1529 a
SDict begin H.R end
 2222 1529 a 2222
1591 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 2222 1591 a 2234 1579 a

 2234 1579 a 2234 1579
a


 pgfo

 save

 0.68 0.68 0.88 setrgbcolor

 0.3985 pgfw

 save

 pgf12

 restore

 newpath

 restore

 pgfc


 2234 1591 a
SDict begin H.S end
 2234 1591 a 0.68 0.68 0.88 TeXcolorrgb
0.68 0.68 0.88 TeXcolorrgb 2292 1529 a
SDict begin H.R end
 2292 1529 a 2292
1591 a
SDict begin [/H /N/Border [0 0 0]BorderArrayPatch/Color [1 0 0]/Action
<</Subtype/Named/N/GoBack>>/Subtype /Link H.B /ANN pdfmark end
 2292 1591 a 2292 1591 a
SDict begin H.S end
 2292 1591 a 0.68 0.68 0.88
TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb 2342 1529 a
SDict begin H.R end
 2342
1529 a 2342 1591 a
SDict begin [/H /N/Border [0 0 0]BorderArrayPatch/Color [1 0 0]/Action
<</Subtype/Named/N/Find>>/Subtype /Link H.B /ANN pdfmark end
 2342 1591 a 2342 1591 a
SDict begin H.S end
 2342 1591
a 0.68 0.68 0.88 TeXcolorrgb 0.68 0.68 0.88 TeXcolorrgb
2400 1529 a
SDict begin H.R end
 2400 1529 a 2400 1591 a
SDict begin [/H /N/Border [0 0 0]BorderArrayPatch/Color [1 0 0]/Action
<</Subtype/Named/N/GoForward>>/Subtype /Link H.B /ANN pdfmark end
 2400 1591 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray Black 0
TeXcolorgray -517 -517 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -517 -517 a -517 -517 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -517
-517 a -517 -517 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -517 -517 a -517 -517 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -517 -517
a -517 -517 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -517 -517 a -517 -517 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -517 -517 a -517
-517 a
SDict begin H.S end
 -517 -517 a -517 -517 a
SDict begin 12 H.A end
 -517 -517 a -517 -517
a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -517 -517 a -517 -517 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with Beamer class)/Author (F. Nativel)/Keywords () /DOCINFO
pdfmark end
 -517 -517 a -517 -517 a
SDict begin [ {Catalog} <</PageLabels<</Nums[0<</P(1)>>]>>>> /PUT pdfmark
end
 -517
-517 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray 0.2 0.2 0.7
TeXcolorrgb 0.2 0.2 0.7 TeXcolorrgb -600 -287 3024 230
v 0.2 0.2 0.7 TeXcolorrgb 1 TeXcolorgray 1 TeXcolorgray
0 0 1 0 TeXcolorcmyk -500 -350 a Ff(C1)p 1 TeXcolorgray
-529 -458 208 5 v -529 -323 5 137 v -325 -323 V -529
-321 208 5 v 68 w Fe(Sch\351ma)p 1 TeXcolorgray 0.2 0.2 0.7
TeXcolorrgb 1 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-275 434 a Fd(0)99 b(1)g(1)g(1)g(0)g(0)-467 471 y Fc(L)-275
534 y Fd(1)g(0)g(1)g(0)g(1)g(0)p -517 596 1039 4 v -453
694 a(=)113 b(1)99 b(1)g(0)g(1)g(1)g(0)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0.09999 0.09999 0.34999
TeXcolorrgb 0.09999 0.09999 0.34999 TeXcolorrgb -600
1751 1008 60 v 0.09999 0.09999 0.34999 TeXcolorrgb 0
TeXcolorgray 1 TeXcolorgray -340 1732 a Fb(F.)16 b Fa(Na)m(tivel)29
b Fb(\(Lyc\351e)14 b(No)o(rd\))p 0 TeXcolorgray 0.09999 0.09999 0.34999
TeXcolorrgb 0 TeXcolorgray 0.15 0.15 0.525 TeXcolorrgb
0.15 0.15 0.525 TeXcolorrgb 408 1751 V 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 1 TeXcolorgray 912 1732 a
SDict begin H.S end

912 1732 a 1 TeXcolorgray 1 TeXcolorgray 912 1732 a
SDict begin H.R end
 912
1732 a 912 1732 a
SDict begin [/Color [.5 .5 .5]/H /N/Border [0 0 0]BorderArrayPatch/Subtype
/Link/Dest (Navigation1) cvn H.B /ANN pdfmark end
 912 1732 a 0 TeXcolorgray 0.15 0.15 0.525
TeXcolorrgb 0 TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb 0.2 0.2 0.7
TeXcolorrgb 1416 1751 1008 60 v 0.2 0.2 0.7 TeXcolorrgb
0 TeXcolorgray 1 TeXcolorgray 821 w Fb(Ann\351e)g(scolaire)f(2018-2019)
p 1 TeXcolorgray 103 w(1)7 b(/)h(1)p 1 TeXcolorgray 0
TeXcolorgray 0.2 0.2 0.7 TeXcolorrgb 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
