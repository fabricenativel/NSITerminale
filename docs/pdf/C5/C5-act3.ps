%!PS-Adobe-2.0
%%Creator: dvips(k) 5.999 Copyright 2019 Radical Eye Software
%%Title: /home/fenarius/Travail/Cours/NSITerminale/docs/pdf/C5/C5-act3.dvi
%%CreationDate: Mon Aug 30 09:48:15 2021
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: FontAwesome5Brands-Regular Dingbats CMR10 CMMI10 CMSY10
%%+ FontAwesome5Free-Solid CMEX10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o
%+ /home/fenarius/Travail/Cours/NSITerminale/docs/pdf/C5/C5-act3.ps
%+ /home/fenarius/Travail/Cours/NSITerminale/docs/pdf/C5/C5-act3.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2021.08.30:1348
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 872 2018-12-21 20:39:31Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup xGridOffset add y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% $Id: pst-text.pro 891 2018-12-29 19:42:20Z herbert $
%
% PostScript header file pst-text.pro
% Version 1.02, 2018-12-28 (hv)
% For distribution, see pstricks.tex.
%
/tx@TextPathDict 45 dict def
tx@TextPathDict begin
%
% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def
%
/movetoproc { continue { @movetoproc } { pop pop } ifelse } def
%
/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def
%
/linetoproc { continue { @linetoproc } { pop pop } ifelse } def
%
/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def
%
/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def
%
% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def
%
/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def
%
/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def
%
%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint
    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
/warp {
    1 index
    1.4 mul
    cos 2 add
    mul
} def
/warpmove{
    2 index {
        newpath
    } if
    warp moveto
    pop false
} def
/warpline { warp lineto } def
/warpcurve {
    6 2 roll warp
    6 2 roll warp
    6 2 roll warp
    curveto
} def
/warpit {
    true
    { warpmove } { warpline } { warpcurve } { closepath } pathforall
    pop
} def
%
/circle {
    exch neg
    % .5 mul
    90 add
    dup cos 2 index mul
    3 1 roll
    sin mul
} bind def

/circmove{
    2 index { newpath } if
    circle moveto
    pop false
} bind def

/circline { circle lineto } bind def

/circcurve {
    6 2 roll circle
    6 2 roll circle
    6 2 roll circle
    curveto
} bind def

/circit { true { circmove } { circline } { circcurve } { closepath } pathforall pop } bind def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.03 2020/01/09
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 }
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% calculate the line coefficents Ax+By+C=0
%% x1 y1 x2 y2 -> A B C
/LineCoefABC {
  0 index 3 index sub % A=y2-y1
  4 index 3 index sub % B=x1-x2
  3 index 5 index mul 6 index 4 index mul sub % C=x2y1-x1y2
  7 3 roll pop pop pop pop
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% calculate the 2-order determinant
%% |a11 a12|
%% |a21 a22|
%% a11 a12, a21 a22 -> X
/DeterminantTwo {
  4 1 roll mul 3 1 roll mul exch sub
} def
%% calculate the 3-order determinant
%% |a11 a12 a13|
%% |a21 a22 a23|
%% |a31 a32 a33|
%%   8   7   6    5   4   3    2   1   0
%% a11 a12 a13, a21 a22 a23, a31 a32 a33 -> X
/DeterminantThree {
  % |a22 a23, a32 a33| * (-1)^(1+1)a11
  8 index abs 1E-5 lt { %a11=0
    0
  } {
    4 index 4 index 3 index 3 index DeterminantTwo
    9 index mul
  } ifelse
  % |a12 a13, a32 a33| * (-1)^(1+2)a21
  6 index abs 1E-5 lt { %a12=0
    0 sub
  } {
    8 index 8 index 4 index 4 index DeterminantTwo
    7 index mul sub
  } ifelse
  % |a12 a13, a22 a23| * (-1)^(1+3)a31
  3 index abs 1E-5 lt { %a13=0
    0 add
  } {
    8 index 8 index 7 index 7 index DeterminantTwo
    4 index mul add
  } ifelse
  10 1 roll pop pop pop pop pop pop pop pop pop
} def
%% calculate the 4-order determinant
%% |a11 a12 a13 a14|
%% |a21 a22 a23 a24|
%% |a31 a32 a33 a34|
%% |a41 a42 a43 a44|
%%  15  14  13  12   11  10   9   8    7   6   5   4    3   2   1   0
%% a11 a12 a13 a14, a21 a22 a23 a24, a31 a32 a33 a34, a41 a42 a43 a44 -> X
/DeterminantFour {
  % |a22 a23 a24, a32 a33 a34, a42 a43 a44| * (-1)^(1+1)a11
  15 index abs 1E-5 lt { %a11=0
    0
  } {
    10 index 10 index 10 index 9 index 9 index 9 index 8 index 8 index 8 index DeterminantThree
    16 index mul
  } ifelse
  % |a12 a13 a14, a32 a33 a34, a42 a43 a44| * (-1)^(1+2)a21
  12 index abs 1E-5 lt { %a21=0
    0 sub
  } {
    15 index 15 index 15 index 10 index 10 index 10 index 9 index 9 index 9 index DeterminantThree
    13 index mul sub
  } ifelse
  % |a12 a13 a14, a22 a23 a24, a42 a43 a44| * (-1)^(1+3)a31
  8 index abs 1E-5 lt { %a31=0
    0 add
  } {
    15 index 15 index 15 index 14 index 14 index 14 index 9 index 9 index 9 index DeterminantThree
    9 index mul add
  } ifelse
  % |a12 a13 a14, a22 a23 a24, a32 a33 a34| * (-1)^(1+4)a41
  4 index abs 1E-5 lt { %a41=0
    0 sub
  } {
    15 index 15 index 15 index 14 index 14 index 14 index 13 index 13 index 13 index DeterminantThree
    5 index mul sub
  } ifelse
  17 1 roll pop pop pop pop pop pop pop pop
  pop pop pop pop pop pop pop pop
} def
%% calculate the 5-order determinant
%% |a11 a12 a13 a14 a15|
%% |a21 a22 a23 a24 a25|
%% |a31 a32 a33 a34 a35|
%% |a41 a42 a43 a44 a45|
%% |a51 a52 a53 a54 a55|
%%  24  23  22  21  20   19  18  17  16  15   14  13  12  11  10    9   8   7   6   5    4   3   2   1   0
%% a11 a12 a13 a14 a15, a21 a22 a23 a24 a25, a31 a32 a33 a34 a35, a41 a42 a43 a44 a45, a51 a52 a53 a54 a55-> X
/DeterminantFive {
  % |a22 a23 a24 a25, a32 a33 a34 a35, a42 a43 a44 a45, a52 a53 a54 a55| * (-1)^(1+1)a11
  24 index abs 1E-5 lt { %a11=0
    0
  } {
    18 index 18 index 18 index 18 index 17 index 17 index 17 index 17 index 16 index 16 index 16 index 16 index 15 index 15 index 15 index 15 index DeterminantFour
    25 index mul
  } ifelse
  % |a12 a13 a14 a15, a32 a33 a34 a35, a42 a43 a44 a45, a52 a53 a54 a55| * (-1)^(1+2)a21
  20 index abs 1E-5 lt { %a21=0
    0 sub
  } {
    24 index 24 index 24 index 24 index 18 index 18 index 18 index 18 index 17 index 17 index 17 index 17 index 16 index 16 index 16 index 16 index DeterminantFour
    21 index mul sub
  } ifelse
  % |a12 a13 a14 a15, a22 a23 a24 a25, a42 a43 a44 a45, a52 a53 a54 a55| * (-1)^(1+3)a31
  15 index abs 1E-5 lt { %a31=0
    0 add
  } {
    24 index 24 index 24 index 24 index 23 index 23 index 23 index 23 index 17 index 17 index 17 index 17 index 16 index 16 index 16 index 16 index DeterminantFour
    16 index mul add
  } ifelse
  % |a12 a13 a14 a15, a22 a23 a24 a25, a32 a33 a34 a35, a52 a53 a54 a55| * (-1)^(1+4)a41
  10 index abs 1E-5 lt { %a41=0
    0 sub
  } {
    24 index 24 index 24 index 24 index 23 index 23 index 23 index 23 index 22 index 22 index 22 index 22 index 16 index 16 index 16 index 16 index DeterminantFour
    11 index mul sub
  } ifelse
  % |a12 a13 a14 a15, a22 a23 a24 a25, a32 a33 a34 a35, a42 a43 a44 a45| * (-1)^(1+5)a51
  5 index abs 1E-5 lt { %a51=0
    0 add
  } {
    24 index 24 index 24 index 24 index 23 index 23 index 23 index 23 index 22 index 22 index 22 index 22 index 21 index 21 index 21 index 21 index DeterminantFour
    6 index mul add
  } ifelse
  26 1 roll pop pop pop pop pop pop pop pop pop pop
  pop pop pop pop pop pop pop pop pop pop
  pop pop pop pop pop
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: fa5brands1.enc 0 0
/fa5brands1 [
/napster
/neos
/nimblr
/node
/node-js
/npm
/ns8
/nutritionix
/odnoklassniki
/odnoklassniki-square
/old-republic
/opencart
/openid
/opera
/optin-monster
/orcid
/osi
/page4
/pagelines
/palfed
/patreon
/paypal
/penny-arcade
/periscope
/phabricator
/phoenix-framework
/phoenix-squadron
/php
/pied-piper
/pied-piper-alt
/pied-piper-hat
/pied-piper-pp
/pied-piper-square
/pinterest
/pinterest-p
/pinterest-square
/playstation
/product-hunt
/pushed
/python
/qq
/quinscape
/quora
/raspberry-pi
/ravelry
/react
/reacteurope
/readme
/rebel
/reddit
/reddit-alien
/reddit-square
/redhat
/red-river
/renren
/replyd
/researchgate
/resolving
/rev
/rocketchat
/rockrms
/r-project
/safari
/salesforce
/sass
/schlix
/scribd
/searchengin
/sellcast
/sellsy
/servicestack
/shirtsinbulk
/shopware
/simplybuilt
/sistrix
/sith
/sketch
/skyatlas
/skype
/slack
/slack-hash
/slideshare
/snapchat
/snapchat-ghost
/snapchat-square
/soundcloud
/sourcetree
/speakap
/speaker-deck
/spotify
/squarespace
/stack-exchange
/stack-overflow
/stackpath
/staylinked
/steam
/steam-square
/steam-symbol
/sticker-mule
/strava
/stripe
/stripe-s
/studiovinari
/stumbleupon
/stumbleupon-circle
/superpowers
/supple
/suse
/swift
/symfony
/teamspeak
/telegram
/telegram-plane
/tencent-weibo
/themeco
/themeisle
/the-red-yeti
/think-peaks
/trade-federation
/trello
/tripadvisor
/tumblr
/tumblr-square
/twitch
/twitter
/twitter-square
/typo3
/uber
/ubuntu
/uikit
/umbraco
/uniregistry
/unity
/untappd
/ups
/usb
/usps
/ussunnah
/vaadin
/viacoin
/viadeo
/viadeo-square
/viber
/vimeo
/vimeo-square
/vimeo-v
/vine
/vk
/vnv
/vuejs
/waze
/weebly
/weibo
/weixin
/whatsapp
/whatsapp-square
/whmcs
/wikipedia-w
/windows
/wix
/wizards-of-the-coast
/wolf-pack-battalion
/wordpress
/wordpress-simple
/wpbeginner
/wpexplorer
/wpforms
/wpressr
/xbox
/xing
/xing-square
/yahoo
/yammer
/yandex
/yandex-international
/yarn
/y-combinator
/yelp
/yoast
/youtube
/youtube-square
/zhihu
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 1990-2020 The LaTeX3 Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
true setglobal
/pdf.globaldict 4 dict def
false setglobal

/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict~
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: fa5free1.enc 0 0
/fa5free1 [
/dice-two
/digital-tachograph
/directions
/divide
/dizzy
/dna
/dog
/dollar-sign
/dolly
/dolly-flatbed
/donate
/door-closed
/door-open
/dot-circle
/dove
/download
/drafting-compass
/dragon
/draw-polygon
/drum
/drum-steelpan
/drumstick-bite
/dumbbell
/dumpster
/dumpster-fire
/dungeon
/edit
/egg
/eject
/ellipsis-h
/ellipsis-v
/envelope
/envelope-open
/envelope-open-text
/envelope-square
/equals
/eraser
/ethernet
/euro-sign
/exchange-alt
/exclamation
/exclamation-circle
/exclamation-triangle
/expand
/expand-alt
/expand-arrows-alt
/external-link-alt
/external-link-square-alt
/eye
/eye-dropper
/eye-slash
/fan
/fast-backward
/fast-forward
/fax
/feather
/feather-alt
/female
/fighter-jet
/file
/file-alt
/file-archive
/file-audio
/file-code
/file-contract
/file-csv
/file-download
/file-excel
/file-export
/file-image
/file-import
/file-invoice
/file-invoice-dollar
/file-medical
/file-medical-alt
/file-pdf
/file-powerpoint
/file-prescription
/file-signature
/file-upload
/file-video
/file-word
/fill
/fill-drip
/film
/filter
/fingerprint
/fire
/fire-alt
/fire-extinguisher
/first-aid
/fish
/fist-raised
/flag
/flag-checkered
/flag-usa
/flask
/flushed
/folder
/folder-minus
/folder-open
/folder-plus
/font
/football-ball
/forward
/frog
/frown
/frown-open
/funnel-dollar
/futbol
/gamepad
/gas-pump
/gavel
/gem
/genderless
/ghost
/gift
/gifts
/glass-cheers
/glasses
/glass-martini
/glass-martini-alt
/glass-whiskey
/globe
/globe-africa
/globe-americas
/globe-asia
/globe-europe
/golf-ball
/gopuram
/graduation-cap
/greater-than
/greater-than-equal
/grimace
/grin
/grin-alt
/grin-beam
/grin-beam-sweat
/grin-hearts
/grin-squint
/grin-squint-tears
/grin-stars
/grin-tears
/grin-tongue
/grin-tongue-squint
/grin-tongue-wink
/grin-wink
/grip-horizontal
/grip-lines
/grip-lines-vertical
/grip-vertical
/guitar
/hamburger
/hammer
/hamsa
/hand-holding
/hand-holding-heart
/hand-holding-usd
/hand-lizard
/hand-middle-finger
/hand-paper
/hand-peace
/hand-point-down
/hand-pointer
/hand-point-left
/hand-point-right
/hand-point-up
/hand-rock
/hands
/hand-scissors
/handshake
/hands-helping
/hand-spock
/hanukiah
/hard-hat
/hashtag
/hat-cowboy
/hat-cowboy-side
/hat-wizard
/hdd
/heading
/headphones
/headphones-alt
/headset
/heart
/heartbeat
/heart-broken
/helicopter
/highlighter
/hiking
/hippo
/history
/hockey-puck
/holly-berry
/home
/horse
/horse-head
/hospital
/hospital-alt
/hospital-symbol
/hotdog
/hotel
/hot-tub
/hourglass
/hourglass-end
/hourglass-half
/hourglass-start
/house-damage
/hryvnia
/h-square
/ice-cream
/icicles
/icons
/i-cursor
/id-badge
/id-card
/id-card-alt
/igloo
/image
/images
/inbox
/indent
/industry
/infinity
/info
/info-circle
/italic
/jedi
/joint
/journal-whills
/kaaba
/key
/keyboard
/khanda
/kiss
/kiss-beam
/kiss-wink-heart
/kiwi-bird
/landmark
/language
/laptop
/laptop-code
/laptop-medical
/laugh
/laugh-beam
/laugh-squint
/laugh-wink
/layer-group
/leaf
/lemon
/less-than
/less-than-equal
/level-down-alt
/level-up-alt
/life-ring
/lightbulb
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def product (Ghostscript)
search {pop pop pop revision 927 gt}{pop false} ifelse{/BorderArrayPatch{}
def}{/BorderArrayPatch{[exch{dup dup type/integertype eq exch type/realtype
eq or{BPToDvips}if}forall]}def} ifelse /HyperBorder {1 PDFToDvips}
def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx pdf@lly pdf@urx
pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly exch def dup
DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx exch
def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: CMEX10
%!PS-AdobeFont-1.0: CMEX10 003.002
%%Title: CMEX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMEX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMEX10 known{/CMEX10 findfont dup/UniqueID known{dup
/UniqueID get 5092766 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMEX10 def
/FontBBox {-24 -2960 1454 772 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMEX10.) readonly def
/FullName (CMEX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 18 /parenleftbigg put
dup 19 /parenrightbigg put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23E7BC2A6E71BCF95FF3DA948
1A27320759222BD7BC7C1A533E90058824F06942F0234C68671083E0E4708398
D246C94F9C16DAB6563651BA33D86273FD2DB3C50C106F3CA95B1C79778D0BEB
B99D9CFB38E41BDCB4261A86A23E2CDEE4837D9B6F0E85ACEAA984C344A63709
EA35B61F08821338D363D172BD185A3658F43052AE1E61D879C99DED7F6D726E
FAFEBD881BDDEA91FB09DB75675FC74AA2BEA8771027C7A51BF849F8E765B870
8F7CC0871F301ADEF9B71EC3C607B2F51325AA5B3DD74A2C5426E7B329FAE84E
94A159C8C9C35E27A0FC93FB98A4D616750DAD50068A5F0EB96B8228946E5CC6
B69E93D262C92E3BC7161313156E380A2ABE27BE400A23DF95E65A4F76B3FFE4
CF3CD141B006C487EBC73A5A101466D4388FB2CF1D9439D0714720BB58537B7D
B3EE1F04AE117222CA5F0E5942F7A875D55D91D63958B1A02405D9DE08109B8C
7104F2D109EF7074852DFD74CBE02E0F3704F2BACA14E05EB1D0D9021EFAC23F
76C2389F8EA237D2E2AB6AFA83A725E16AECCAF025E05F1B1B5699D761F62A46
EC6F31B0FE4769BD0D66821592ADBAEFA9EB454CF1402FE870F5F96D09980C1B
8B6D2FE88BE56032C1959E6C3DC319B6A7353F3AC629CE5BCB947B4B235426E9
4769302817AEC1ADF50E50265AB488017634AF824D44D3C8423FC7CAD97F6D6E
6B34313637687FBDE3BDF6FC951CB41277D8EF49D14767B59656D214C9724DC4
0523EF896F4E48434FCC5D8423F07194C54D48C62AC29001B10C9C8B514B24C5
CEB60FF68D36749711E108DBB52738760FCF6571D5B04E58F24CC0247834B412
D0F6F8D7F1573F23E3E399D5A3A3A37FCFFEAFA044A5694D2458EFF2BC1F7650
8FB0A27C505A20C16776EDF94BEF9DF702F3C64DBC1939BEC0399B6AB283F832
DD8FB358F701CC075C596FA7B0ED7A9304DC73274C8169337D55124CB748CE26
A635B2704D8F65E23CC0FDA3C57ED451F8FDE7B6FBFCE2746F5AEA11B065A6DC
C3D200D962A034DD6757991BA62D8DC0408F49083D48799B6097B61343365A5B
30FB02E9CDFB5104FB751BE8A268EE55C1208DD8B29D5635014EDE9D0D94BB64
ED5643B3049027925BF2FD7EFCB631E01269B731AE12AA6226B2656F035C7E92
959C4A21BE40D7C138C8FF28C9FD4B768CF25F08859AE84FEE6EA18C033B3659
D9EE250BA5FF2568E8BF7684A93BED7852251D1ADE5DB815AF3AAC36D1A500C9
41D1BF3A1926828CD1F9E501ABE441A07B1B96612CF0728AD5FECF7480421F46
0B18E06D2FF1A5B1183459C59517976474698BCE18A728515CD489A83C001AFA
47BDA929F60D0FABCD8786AE16EE18615C37D18703571936A365D334BACA9BA3
08E2523132887B5EE95ABCE8581C78C3E858DBF35ADD56A1F6C2489AFA73D1B2
379C5064DAFD30FDA84581FDE268B470636EE35F21648955513714F6EAA08AF0
249C937721DB0E93D95C4DDDFB0948051953F39C6D2D811D3FFDC25F786E072B
2A8A1F4830F9CFC34666A1D3F13268980E9A26682CAB64817318A1E266F3D2D2
DE4EBB3EDAF0E7B526C838CBD7F37E74A35B1C3EB96DA4099DE689A53970D4CB
9AB355E93EB294B07DD09356C338BB4A61C147BEDC152E58DC92FA69846E4829
551A5330006793CD88523F7B3AF7B4475C531C67A4B66A603597EE72C4ADA491
BF13706F341125CABF37FADA554FDA0BA5534C7AC35F1829E250C885D9A9983C
5D1FE8CE24458A8B13E5C7EA22BF1608AFA96B83C700889A2A6C9C4052DCB892
6CAEEAA9E7D7F3E215019719B36A5DAFCCF2396FA0C04AD99A7C23772A7BAA64
D1FABE8E476EAE9FC1A3E08CD6D1DDC6E087934E676BDFD1528652B6B9A50A35
2029466364300AF4CA3C5883F6293A7104617D0858B3E43D43752F814654A938
A44C33410BA0E5EA7BF55D4F1D57E27921DB05C059DE29BAC1BFC9B607D2C5CB
1DDC47793984FBB18BD99E1DF7776B563A55E15DF024D6D8E6ADF62F16F602A6
7DDE1C68637672AA9C7A1250161502ADDDC1B4F6011A9BD5605B73AEDC37CE4E
4467C838B7692C4D541EF87DB41123F9DCCFFA971553A5D9B0E7EC539A28750C
8554383585CD8B93DF731A301D85BA9ADC95B4A3A237794C30230A82300B6756
AE5A46A090958109C5565EF60B0B16D6C0A16A56644B05D3371DABBB67ED9BB8
9BD3983575D371419C7568B2556649402AFB9843106729E4EA87B3F9038218A1
F820B098A1271E330708432567297CCDA332B555A40C62BAEB16330175D28AA6
13AE6939CEFA2334E3E890B66A73277F0B63B1FA59F856ABECC5FC0A50571F5B
0747FA554F5FC72A51E215304B2E44701A13E41D91397B204C66AAB3D101004C
7FEF2D87DA558EA057BD492CD6EF93601CB63F78426B502CDC5C8E9EF4FF3692
376601B1FAADD801602668370B5ACEFFDBACA8F8B3F4E850D07A20F6F47440FC
FD39504F0FDFCA35AF2ED0DA8BAB63AD42EA8CDA912CE17F5E62192DDD912333
3E9FA0884117F07221642490044A72E359D5F25D9591A8FAD568A3DEE435C354
11995C0EFCFEA21735DF44A30F79F747510E28767A4266461D1394F81344F6DB
1FA8D0B0D9E5F52FBB663C8F1E91192E5608FFEAA178B93F8298F70510A65BEE
12ECB5D675311B5B3B19205476512D92B1D16262720484049370A76F78D9BDC3
02EB96AC1E5B3CB078D2F219988FD0F36B043ABBF347B22D36CF541A8F80F791
8E4F92D900B7E7B64DFD500882EFBBF23565FA470103B2E0D2D14E3E4D7827D1
BAA0F84713A8CDE5904FFF2794850871DEADDDC53B77A502F5CA98B0744BB656
2FC40ED2AEBCC5CACE2301E983E6C18CF16AFB9FD8CA49DE51B22F4259D43076
DDC1BD4974CDF2E733EAB6334B1D5614288CC81FDCC722CEE193635D1088FB29
F80AD5CB96394AE89D920DF8E1F271585AF019190F17DB51FEC9064B54C3A53E
3FD33C3B553FC79F743BEC9674743BF0A821051261DE4527A2BEF4A04E293E97
02B181EC5F5EED3E26060F2C9EF6852B7433CA1BC1690C30424B03C522A087EE
92016EBDAC4B787133B4A22BFEF0B6CA564C6EB910E1DBF983CB4CFC3A1F8A26
45329CED7F5A8704ACE9D4233583365A5A97342A053EF403F0567E9D0A62EBCD
84B5D7145BBB11D31046BC2CF5B450CC68B85DA0E78EF8902F8D37DAAA9D4242
455288C0D73748F9BFEB1B1769D6FB84B94993D5F7C2B9CBDF75AEF2C930F277
210B3CCB8A0299F50AFE2548A4B8DF5ABB52F098ECDD56FCB8D3A406EFD95088
92D7EC39FDC7EB1824ECA24D0CBC6EC6F4C6A7F9590D593B269D2CC0BFBD961C
AA8BB4296B4E4411B54367A341A5EDA97288DAC370A015FDE6D7FB0A4CECEFBD
1A67DF3A3703E922BEF2C414FDDA42482EB35D5DBB206B44C76C412A435A0842
6845EAD204BDF87065CE2C99B05D2D4080D5D11CFC3316967472C7DA44CC1F9D
51B83B4BE9B882D6E9ECB482F9855D024ABFBA502CCD624E0F88164A6F13CED4
85F20DC01BB15C7D78B1C79FD9FF71F4B043F59DB5C297768115542BC7C8A99E
ACE39A268D32122541FB441FF1364FCBA2B7627F12C49ED038BC044B6D9D533B
A72D35317A5AB8D91A9AC56CA90D1DAE9F967605C63BC9F406FB3D5BAEB4B38F
4934EE3D2F5FE434B45CF5C2D0E5E417EC279DCEC4F16504EE40E837B11620B7
7526AFF23381ED3E9A92DA4DBF4EA2BE4FE444B9A74AB60EFC818E20DD8B852B
DF8CB659C0A3956D0DA61F49A9DD467726E57E9B32EFF540D551A67213D40273
AEAA6E319D92B4B406377D36DAB85662C755D76ADF5795C52D54ECCF0DE81E30
B84F951233A0A400CB063911837F0AACF44AD2441A7CE08818D64705E1ACF7E0
F59AEFC5DD812981C5508385274817056B2CDCCA4C9F3103C92838917EBFEC94
21D5737AC634B23B6F7F63B166D60C6BAA8F33AF44379C5A7337E737190EB3EE
14272B905D08C01EA118964D3444A03676FF3B62E7626168FA1DC6220699780A
0BD5776DDFA26BF0BB335B3C978CDD5CF1A419D4B5C562B3974FECFCF0118199
E547EB287CD92E32E881F344420FA3CD97333BFEF5D7E1BA31FD20622E5B4F95
692DD0ACAF01D413B21C8608FA87B470191C3CC5AD333263C955B4ADF4370FCE
D6667FC93495003F4B6AEE4F83603D55F19EFBF56F955FC9CC01E494804952CD
D426FE706C13D41F87C5C668D8B6BE50AE0370E07F52AC0534ECAB1C19851099
FC0BB1EC2A649795A62299F73CA606EDFB1D28183DC63ADF67294553115E8C57
7CB603CC491A6065802B925E6DFBF42917EE6E44C714228AE452851D61BF70AC
844B5D800EF029357FD659B8A648445CED0ECAE1474E443124F4B3644F54C556
A330D92EABEC7F607C6B13FACF69CA928F835056BD1A8ADA20EFE6BD5CF4A1A0
8B9E415E4A5FC6F209EF05ABF2E0C55F6E3060D1C72967E1E68791499F303C8B
3960C5A1F2DF6306710DFA98C8D0815A06B5590374554DCCDBDC4C295B3BA6B8
8BE3200CD4421A521C06BE39D4CA495BC63F3F982CAE3C82AD38DCB537E617D3
34BD96EFDA7C6A0F6D97A6BC9F084645390E194E7A11399FCE4EEB9A965909BA
6EC69D34DBA081BB3F18BD1ADB1AE1B7FBF96E4C546498667690857EB6931841
46C427A5B7C7D99FF889582C4AD11A7D267B301C5A5AAD9DA99D5BFD438238DA
62DEB899FF0F7B7997F781315B2CC328BE3572A3903A33EC901AC6BCC7F152A9
8A6865C6CB17189A4EEB699006A5F9D4482D53A76E88438E444F9302C79F0DC4
B3033D29D303B38F5959F020337EE6619DC8A8C3912101B02CF8AD113BF4BC29
8C6B9D25AF6B6A787F222C05964475B49B6751E3A3A6EBBEA03677D5B136B9DC
6D9AC20193BFB0759E89831C9E2AF68BD45ECC81175DFE80DC0879069ADFA8E5
24CF3C84121CD9739A28BACB9891945FA4E72EC07136682E18FCA81938FA6A3B
8CEFBAED60121530E33C1C0E698B5923D6AFC4E907A99B1367C3D435CAEDEF5F
878237453B8DB2FE53073CF3319FD096343F42D68F097759D051AEE17E4FCFC9
86E17099799DE82A38F22D870BF7AB90890E3B5264976700BAE594C8563A218C
C985D9A5A7D7BD959F7E4E66286833C86E89203ECECD6FC4C6FE1F04010218FA
A5714881C4C846E85F13BD68AC250CD0E488DBF60BB10B2CD7AE2E30F9C21DFA
0E84F76B4E996AA1C5C056E64BAC85622C160B56DEFD4DEF86887C1201F7C20C
076D4A27BA69572BE9C89FF3A9D3BAA5CAE0A6F2187AD01ED497798A305E3BD8
422DBFBF45E3F4AD35240B07285128B59FA9E83D9F6A2E620CAF6DB05129D930
44CB241CFF84E776315114C3AB61FBC0A8368D9154CC5066E2B162E89DA51165
F9CC075F2524F9A8624D2B56ABE64AF93B9F0407CC770C1F2C76CCDC06345D03
7B173C2FAA201D8E1F6C0315987A7A13902F4AA5ADF081C2B0A01C77E4F7A3E7
6A4AAEDDC577E855D69D38AF6A1D271B02AB496D94D81996FB078FBED17F833D
C6C0BCE141BCDE277D530951DD6574B9CB3CF0370D74211E9AC00C7CD3A67842
0B4B72ED517E4906409DEA7993D0B8E92D418139960EBC86BE63A1B1D417C451
8BA13C230DAE1EC4E466F23351D410D9FC4A7BBD477D5FA07659B71CE9921B1B
6755C67AB3D4988064004CF75948879D16174E8097C91F7544352474C2D9A1F8
A1813BC6F4BA13E952678F5707F19B4799ADB3BD186DF650821DF58CF3C78D67
84E4E1DF8DACEC50D15647C3DBBC3C4355E602D3A03171FE1CB36FEB940211EE
0A5300841DD7B7CF91C02B3FC5D89C691156BFF8A38C6C72789DF260B868AAA1
895046E405661D97FA9A0048AF114A89E3ADAEBCE541753E4FFCD902391B5372
6A97E32F0257FA9FA1DC15BD3140EC7F0CA5A68AABCEDBE73C38B35FDF195F96
0F9DB0F592C188D72D73512F4DD92D2371D1A59254BC477CA084E68184AEAB6C
266BB21DC3AAF874DE999AD2A17C79621AE322612EE4B6D5BDAC511418EDE90A
AE75066AF19662C4AD855E4200A5D67BEE4ADA9A399192C74D35E59B15FB61E7
BB167282D32D538029ED22CC5C9860C1F6B7BA7F33D5CF108D4BEEFAE7B37E67
39391F9934DE17956303532ABB011540645DB8420749C9B9A019C3CE86ACD566
1EE8D8D5E0D8D0DEAB33B5413EF10D4EE650F82417002E436E0B3B628A657F84
074098C2E9F897D9AB692E0FB9F268E6728F94A79CF4D6B0A07C8DFDC1D67FD5
EDD5863EA8949D180B1596D0009D662FC429449D76BF13D83F0D0CF165982443
E9CC288CF7C5F2E17EB7F3736D1FB814196CCEAB8C833720E3733BF594E1B536
BC0063080BC751F9DA1741522B2967D07DDDA169E7D3417B4A39EFAC15EA5E8E
DE3473CC9DF991FAD2A971F44B09635085DB02D692F149F144F3DCDB69B72C53
A2AF34C65DF0D5F35E82102E67B733750646EC03A4FF47138F7998607BD93AB2
B63A0B82E8E225FFAD5DC468077FBE8C8C8E5B4BB10A8FE836B07367D742BD6B
D36DF5304B9DF363120504C279453452EB177FBCDAA6F6FB78A24848F4A1D94D
1E49F6C46CB36796F3F4C9739346381F28AF085C5EBDB2A02DC0570C7A21E097
77522D4947B51182431BCBF3E55CCDDE93A916AA40CEB577277FA512380816DF
9111C56F36341381D62368E70462577D0C135BB3CB4462B269AA8E0F03245BFA
D01DB8E23F2DFD5DAA88FCAFDD51D48E562EC649DB1FFDA0FD8CC8C48E6A9207
260ABE35733D75630053CC74A07E5AF6FE87BD5FEA69CB6AA20122276AD92853
6B225BC9E3350D1B1362E04C7795D473F1266852B02C83D02D938C55D8F0C671
7A9205F8CD058304DFA034D99A6BC16C582F02484A089602D42DF30D7A5716C1
D42A4CE56C19E40C01DC7DED931FA13679CFD2700B3826A1E6539AAC12293DA8
664DE251C5D1761BB45FE364CE3F7F7E9B67F86EB31D9626CCACE4DCE03EF3C1
0D2FD1B12B5774510D46C5C5CBF0A34847418B9A1DF0C67789422D0EC2D49576
9DDE72D63A4A98613461A6F730A05336C691583F96C3CAD2AF7C4BFD3AEB3814
D909858B6598FE19397006C8C4D549AA1635968F47144E7861A2BCE8AB4CA7F0
4D253949AA0127559FAE3161C810A8CE22A3079602E747C9398F9C8B2A868F23
D77D7AD6B980FEB038E0557E58E1D7AE471036CBB96B83595D9C96A4895971CD
C2A810651A045F876A1F5AE470BEF39F856808B1F8D736030A722E1576BDB3B4
4DF06F73D38D313C8A0D3504EFBC774750C9F6E687ABCB1927FA1BB3882AABC1
2306A030CEBB259AECAA646C6497712F6C1E9DB7E1365A60EEC5AEDD5147A77B
1E3A10D73C477876D54FEE853D953EE75F7EDFB287550B93CFA8250D1FE2FE7D
D34441F1224F3DB1D355188819EBB98A94DB193B9CA23803869DD10776647BF5
5BB42031AC44A7339DC036AD0292AB9B732E6FB79BEE852A103C3788BB0F4B72
EF37BB62356F9B2DF7F5899A26F1FE0A3D6469C1034B8AB14F52555EBF6DC592
3F24D6DB395A3A182ED4B8ECEE8254661C19CC942F236CA40BAABE818EC312D8
7F5762C210FCE8A3CB9A23A24D0A751A09F4FCFB72DD0FB3AAE0575CF97D126E
1669203BE1C8F8FF626F49E8AFA7B29EF26618C6D8336D4471314D5D009BEC8C
D914E74D0BE7D7C3A2511C0DDEB6FE04360D54FB3283AD67D9DCDE211FAFD19C
449E201F2913232DDAFB2043F674EA73C9F043EB73CC9A96289B3CF819DB3E56
5FE403D8C387C99979ED9F8EB2F4EA9934F170D87D1F0D90CE8F3EAE863FB027
FB5969E37145C8D881AAA4E0464F52F3EDDF47DE80E64E5F88C9498795601ED3
A72231E130CB6E12E656AC7FD7AF2F2D88EDF9FAD3416464A96E39E0D658E84A
26768B0CE92C228D6C8C79C397C45A6E02F119170A60567D8A2B4A194BB16F26
6C4D2DC0D7892B367F6DAD1FDCD7A34B8F96DE8B73C08E980617608A10CFA526
2826A1CCFC62F730F5EF457571EA48803236DC578D68C9FC2148A78033C8606D
8DFCA32A17AFDA0E7929CD6FD50EF80D543F9F2CFE69BFDB07E08B235297B32C
6FEBE64AAE1C9C19F4076A91CA0D9CEF9C03F89E0269632619318DE67D028E64
5ED99CA2F4A2713C7E5B688DEDD6E8C2BD26AAD1550EE45D1E9869E8CA43A9BD
CA70496A23142B1844B03548847FDC62E016F957BDC370618058D93C34443DA3
81CBB487687CA5D735A2B584616E18A87712118E1307CDEBD393B6ED860BA1FB
FBDB0CC9690390A9BB97ED6FB106E53E5753DE0B7A0C7FC2B9EAEF95A3B1733B
C96615E978BC04BBED07922D6BB9D038F1F40945D3DF42921EC328513B8076DB
A0D8E8424A5D126BA38B2D37952BDC2630D81FE195F5D2AE2449BD18E304A0C0
C8B33A98C8F31C01C93CD1D47DCCA831AC8AAAB199CD41AB8E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: FontAwesome5Free-Solid
%!PS-AdobeFont-1.0: FontAwesome5Free-Solid 330.752 (Font Awesome version: 5.12.0)
9 dict begin
/FontName /FontAwesome5Free-Solid def
/FontInfo 9 dict dup begin
/version (330.752 \(Font Awesome version: 5.12.0\)) readonly def
/Notice (Copyright \(c\) Font Awesome) readonly def
/FullName (Font Awesome 5 Free Solid) readonly def
/FamilyName (Font Awesome 5 Free Solid) readonly def
/Weight (Solid) readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -97.6562 def
/UnderlineThickness 48.8281 def
end readonly def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/StrokeWidth 0 def
/FontBBox {-55 -127 7797 876} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC4458BABD05D76517D9C24FED216BE906
1643B22AABEA637BFFCB75FF65A91279495B00B8B92CFB39C8899C3818357033
2BBD344CBB263D4250A46E5B09E712D88275731E98C996C69406E43E9DBEFDD7
161A841EE17304D49501F13D3AD3CFB00DA1700EAD2364C31908F18B9F3643EA
E9514021B52FFC8EEA03D195015D30E3BB12C272A254955F88A4DCD045432CDB
693596BAF5E1BEFA2D9AC1CD0CCBC3EB42825F1EE6A16966D49AEE9CA4A40B7A
AF5854776BA4F7EEE4EF09BE48B41B049B631B57F9DEB79BA1DE47B7C025B39F
3CC77C4FBB15C9BF3A39C8D400BD7D15BB1412AE1918DD7B05716B41DA299FCF
AD90249E2810CCCF2846402BA975F3C22EB71AAFC24EA5C6A66D5FB86DEA0D82
A1117C000C5353B2F32B7DF144A69030C8EE0F6971BA336C4C33911E390912FE
FBA5EB88AA67FBD2C8AF8DA2B0A0CCA150F57B850632A58E909DF61D04D76B71
0786C246898D6969AF821D21463B5D770D11D97904922845C026679D889AF774
20B847060B20FA78E265C44C994B20AA9A4749F76E07EFD1CF7C2AB3A433EE2D
A07495342763E2716751093DDA622377EB0C70DF28FCF95DABFAB8884E12E40C
1235BEB723F81A20EAE69E8CE0BE778A97C9D5C1AF3170E6855510853C8C4FCF
CF0D2CE4C6C0710B9584B928C9AC5C465C74B9178A153A434B3F87F01214A69D
4429BFFD0A8DA733179F25B6C15391579ECF0E8725DCF53BCAB814DD38EC0F29
8C225618FA305C623812A1D694E883AF184A0ECF699C9308B3F28A3723530EBB
FAA9CD28A1829FEA371AEA5F8B54D11BF76E15C00CA32DF229892701A4475A6A
734F01EA4438C7E68F17ED1D48D80DA35279189F2FB603FE8F79BC05000007A7
084F12572B7EA09BEBF580B44E76F45650E9E93430AB22AD4292B47B5FB861B8
C20EA254C175EFF7C7CE33228E608FEEE1D9CF299CBA5F727FB11FCD01180520
E9C7510457A9256815BE73930FA7186312B1F1ACF157C44C9BEAE51EBB523877
0086CECA8C6FCFEAE9C0F8156A3FE9B991EDC0CB72C5852F7169A8B98FB8F29B
5A58DBBC136A1E8D1B1A79929E88BCD3886D355A191967C791EADB7A9700D0EF
F276C337E561338D7D02F664A69A127D56BDD67D63C1DF32A80D732FE753B297
08EDF2A1CC7E4617933B49C02A92BD986BB13E68435FB97E81DB37BF578B3AF8
2417947930EEB8A75189696D79615D68BC4BA9238AB9428860AD23E7D8219844
0C741FB72F30CF733FA111B43F33E1D26F464F5999FEBC0888B5E4D8B0E07567
9D90551CDBEB05F9A30F43F45B5210A3007E4D03DD5E05805D3AE898FD752841
54198CDB67A5AABDF7C9F2BE384A98DD9AFFF4E8CCC98FCF480830FA681BF215
3CB11265AB89ADCF53BE360B58DC3621D580F2C7227882B61D155B79B2B43266
4329231C7269A3F30930859BF0A4D5D2CEBA01BB4059A587C6C785E009F19C15
CA40C512E9F5030743BEDD5606CB1C540D829DAF394E13CD4A008EE7F9F1CFFA
95B5C8109B0A8685FDF03A978954D1325F66AF1265829E29C353B84A33388574
B4F73E25F490B88AC3AB2F544988D5CD8459AF56C77885DB50B673602CA70AED
778E4E15F24CEE13A730F1E29D1ED0B74B2F8486AF729E2F0490DD6E2F55F3A7
B4ED7133B02DE4581066B984FE6EDF491454E6CCE895A8A75E0F8E0AF33A7359
E5EB03B1EC74E1885C81F49D2E77939ABD2C66725FA5415CD9265AACA265041C
E228BAB08EDACF4E0AB86D340F5C6FADC65653CBBB25190AB307D29C6FD44AD7
341A399CEBC01967EA5C42552AD19A3DD1DD1BAFCFCA4777528AF5E958E68450
4F95880E2E5594A3FB0D0624D7AFF119981EECFEECA15866AF76B47D283F238B
9D4E9AE5F8549417968001184CE886C1D6AA8396C25E0840EA447F0C2586B021
81A4ED566DE0666A9AB45924378D008A62C2E63BF5394EC9B051E293C9224645
DE121EBBF97E9E1BD85868308FC8186F9BEDDC40357AE239B4F02F00158B87DB
8F9947BDF037FE0532D15D61B38C2EA75CBE50D3330B105E913A071443887BCD
CD7448FB9E03CBA4D711EC4C4CEA1E80D648BA01D3BB41BE8BC9482B0C2A4653
748459A474EE5871E4182A2C14E0D2049F6BCA02129D8B1EA98379E7E8BAF0DB
C2115FC8DE189423A6CF96F3B624FD11C23CA4DAF3293F3FC3B9419FDD02BFE2
01E26AD64F64C6845E0CE09E122DF40D6908B9B6F873A6B8359FD44A37AD1EAC
E2F4E3DC35B12328553CD5FDB59309C317BF49D9A819AD1ACA97D248D8E02DBE
D74AF4F10C41DFE0D90932FADC7ED477550A79F5303533BAC12475EF8D0D1AC2
13E5D5A8A57901118F637BCCBD9AF21516578DCFBF8165AC8C9AA3A601A52A91
EA1B72EF8D4858694D1A5C7C04D68947034889EBB9BC0F6F720F1EAE6D8A8ABE
296B0861C666C1369BDC7BBA46457D3A99A66D975E7F5D1C6DD77CF0A057BF12
7F001A096FC339820E946F636CA2F5D39E4EAC88B2148C5219B1616C53425AF1
1E4A708EC4C3A7928EAB51AF51978FAFFFB2FCCBB6ECBFF8252554B3FDEE05DF
74CA5CFD7B1FB53CFE9E0DCDDCEB8C07F41D8185B10E4287CDBEC9521030B0A7
E706F1865B67C03D749F36AE2F831F159E38017AE2A5D914C676AD9942323C37
95B25E6B0144E78BA5B588222CFF13A2EA3BED7266F79A1074E5DCDBD3BD0AF0
9E1C44241438B8F9FEF51A803D8B74307A3ABC05066687C6800FA1DF62767E92
83811DD10C7A8F6ABFEA1995C317DE4196273C3392DBD9D660030FEECBA7702C
F79AE7F1045B750E199689646466844787CE5559A86835FA39CAD7468662E6FC
B83F6AF669B77400B0511D4510ECD44638EF26170432230E05C2C3DBA6F004F5
F628A1EB008CCAAF16C1B7B759F2A1D0269E4365D98318B0590C62BC52EF9840
999A057D495B8E319EE95C7BD3610F8627E11056A3771AA7458DFDC0443B9054
FE4029D89CE1B04B586869A9C6122D3921EF880C85269AB7635AEC1B6ED1AB71
EC2D8EEFE718975C8F5AD9D1310F764975FD37AB2C30068F8A47BF90C52CB9E3
5496507D403C747874F039959F2B78994EE9090692D1A94BEF2699D17D1F332F
3E93B264B70F73A7340CA8D266EE7799C16443AC8BD2A467493362041E0E3533
26D45985A13FF7B254242BC110A7BC98A9C4645A1BC4EDD802F0639789249100
CE1C557C43EDE5F78AD7D2E36F1107FD8520E12376757500671332190D93976C
C114BCBB0F6B6CD17EC199F588E24327FAF21F0DB8BF26E6808F50DEE9104E34
5D0489346C5A8665A33DCD4401036768758EB25A6609D0088FE1BB01599D8E7B
2FC035268BBA5D1A29EC35C44B1677FECA73E372EF928ED8B67077EC4C55274C
CA4118EFFBE7DD150F7F44E95AD1409C79838CD93764A09AF78BCB2EB79D6AA8
64B7CD3321789D289486659947AB54B4B63DAE783754FCC5FBA74AFA3B0FD4BF
8EBD939A31AC63434F225EF6C99022E39B85A30905EE0EF94F3AFD23DE7299E6
F276EDC265AD00768F3D384F17C236D4555C8D4AB34CC356D96CC4C3ADC1DDE1
7CFC0D7F17C55984B8FCFC72FD93755E84060C2D0E434BF17BCEB50A19790442
09EDC8A058CD39B5CA2E94FB163B4D769E88853C0500373E41EED4EF76557E4E
37BFB3F46B102B250350DBC55F85C82DBF62927C152BE84C76DEBFDA3D795F4F
790A61617F84CA29117B37470E41712F26DEF812CEF41D9D8691532EB72D0E1D
9EF04F8DBF54CA6D66609A0C7B2FCD14BE8F36414462D75F21B572C52EC09EC6
3E7DDCEC847CC6D3EFA2D7E270D930B74376BB0BA82AF94210D51D8204B74FB7
EE69654ACE4577EA85945CFA37EFF0DC5E7BCDAC54CB217B4836CB34BD71DC33
DFD45D383D10779643FF5D0F34B27AF365FC93D94196498468DF8F322E83462B
651C3EDB9C6EED0DFDEBF1BC061ABC48ACA527396B848EA31010DD1995CC4D17
9B4280FBF081B3B3ECECFF24FBA611612ABA11799B791BE95C8905F1CD1B36DE
4FA2573A8587834B9E7004B5F9D768E0AEB93EBE828619524A495E471F42AF6F
82571AE77D7817392A34217C36626D61F75CEE8A5D7C283DFC0BDEACC56560D2
FBBDF51BE7935248B80D4C72A7D75B511E0073A6BF271D440B7F0C63983E4228
92727C7ADA9E27436AA13D9D59E6CB9826C28125E4F9767C3BCC9830F846A2A7
435D5EBE8C5328444CD5B411CBAE3F63171DE32E73D8406A0FEBA498C4E7CBE9
C60B9180545CD51AA4366A849927DE7B83C38F9742E2395538EE29F0A18888C8
FCF0821DE468042FA2FE0C58AD907E93996D94F11F35CDCB7CD14973B7C807BB
1A6CA60883A1D74C3D5F8B26698ECEF7F9B307A9B85FFC3544A0A4093DA00841
0B68FC6B485775BFEC07AA0088CB2D95B1DC37E2437B7A0B13F8BE2FC74B7A24
071B1DB55D67609244BFB5E1887A10C711F0E3D981D7B9024509DA0C14700B6B
3B945FED849189EAD0BB511D7462BE2346D3BA172008B648F1E75DE5B7EA9818
DC9BAA070E04E84DFBEEB8B24D7391FF2FA09F28479007D6FCB926C75C5744E6
1BFFE5904C904C845ADC1DBEDD8DC9CA3A8707D86580C01618776D11D2E86B00
51EBC700B8EDDBD37F78B4B616EE8F3AF2A642B42A13FE5DF058495D1BBB8F01
D7B201219F99DF9ECAB7137F91911E33BEE00B5569886D97F3213D239DD049ED
6A815EF2B9C9C7F76283C21D44BB92897A206BA348EDE2FEDA5621B98650389E
9815E33A17D7DB25EAE6B73230607EF4320A5F03B65BA29AFEB1E609D9090D2B
C12E2ACE102818CEB577840F6A5D09A026F49CC9C67C271BAD106CEA4393C4F6
8F4D7DF0745B3BCBB34E27F41AD6DE6188FF19570280EA1E4950A0E57D0B80CA
4DC1EF8DA79E34D72DDECE2F2D5668B7C5D8B045753B93F43138DC03291DA92D
80EBC10BCFC2E4A4F1D6298650A753B7752DCBE3871343C697C30727022D3347
9434F81CA244113293094802F0B1D3937A7262039981801E3EB72660231A374A
85994B597B17D7D1EA184F04E2973E9674CE5A5B59E5D7C601D8A8A75C2884DD
77917F8FD492E9AB9328EF8E0901DCAB65112CC98E753385111906ECE632B09F
C6E4286156CFCF39F47BF88EF729EE261B767023B0433B9467DCE6B319E84225
E8E9E069D5E80CAC68864456745F608AD7F1DB2A7057A4B60C01E3B48B4F0FC0
A57E6F7D70F0B3099D68828CEF3EB08DD085A46F6AEB847A082D5EE078CA7B10
CCC4335309E6FE477EB7936ADD7770BA3562A4CFAB546D823B7A7685B098DCB5
465959409262902DFF5443B6961E262DB52A34A69D9DBC915D1D979F2D09E8CC
67956FAFE2735096C69A00AA6C9C1421BAF69E1B8F89CF67E5250C659A7D4A19
AE45B58749B3073662F947E7F5BF97A4823DA48BEFE6A643A56D558A474C4055
E9834136244EA39AFDDB3B9BA2B301853A589B355A9B86904D328BF2A61BE758
B1842235C4A4EEE260976EF1644167C2F4070EBDD0B73478C1BF2719880425CC
E4CBFA670CC1E1C6A8BDB75E7B524F977A90FB269661AE8B7C7A351AC33164DF
69839EF4CCC948B1971BDECC3EE24CA73AFC338206AEA78EA76288728ED74CA4
08020B80A53BF23DB3B68F3D0F58E2C7BE658851767A4CAC46F14215BD461B56
DA6E3BBF5DED4486FB1D6C2F60660F14709295FD7B6B4402FAF6EE84EC0E5FCA
8D53CE5CE1FADECA9A7E610105FA17C45AEA5831EC20510FF2330B331C40914C
36F29FEC53C83BCDDE52A40C1DC2C833298BA9C66845C68C0B47D6DEBFFE3F95
A90BA074E34D5AB46ADD2ED15125C4382A1C95B5F9412BCE7B2DEA273664C0F8
4C7788C6F3ACD041B16C9A99A6254FB9B899782664A7ACE087EBA0D48EA7C7F5
D84E04C04694D7ED240C57F885F794BFBD31E89BA753ECF83F6AE705F410368C
0B5213BD561B753676339F0B9FE90C60F82E180F7AA4A9EC783AB037D2F6F2ED
337D854B81D02F2E65C6A913100B8839695517D60FA5B6A125B952B64A1142C6
F39428D8D2B8FF4F1CA15C3E282A1EA0FDDEFCF0434C4123173E38AF82040A4C
F077A335C829D8626D775E72B5502F3769AE6FE8FAA616B8441E702567E898A2
DA6AAC3A314D5DCC26C3721108036A248AF16FD36E00AFC5AC22773740AAD22C
44F44CE2A9EC5A1378354D0EF515DBC0B835738955AD76891B054759FBEAE7F4
717A6118DF303BB77FB7C261E2C91715BBE32E595BFEF8219927C96E0EA2990E
8D729C3D9DABDD29ABD05C1FB213FA9C410C78ADAAC2F16EA19B997E5CF8EEEC
CB2C21340919244745429ADF41BCD1506CB773E28FADF673D70A791711AFFCB0
7D8DB4849837336C3D6DCE6264555AFDCA900E3DF683E54048E01613116C2784
94E20DD2EB17AA2B5CC304906188199CF23D9D54D3DFDF55EDE035DD3563EFB2
74CC50F61FD3428C83F24809D0AD1646380585D0E5D5F28A9353F6784D3CC671
B0FA6F59F3A0347D547C728623FD39A54642E669657AE1E0362D4838EF8177AC
838E414CBAAB3D568D946FE8CA8C25DA2D751FF514A92199AC13F78FEAC5D4FD
0CA34ECE58A8FA8E722FF4625129815E150EC18AAD461DC2DA8C1E6C552D5002
8AE2476F9084AC04C97D6FD5D963A652ED4EF778D021ECAA36830D54A5F9858E
0733034D1F5BFDC20AB2E4902FC4D523AFB607A1A4217F2378650ADC04162F20
8865D6456CD006527E6EF77735F91EA6049E418B901F10FC0A3EF112641C95B8
56F0D87D1389546906D15D9BB1C1A9A946E7EEF8D198562366FC4A89D1C27D33
6133D5488E21C16CB8B66D003CDC73EAE1E5D9EE754660EDF4F9491192A438DB
FD51CA5C5169A2D621134EAD387D472B72A00E3FCDAA121A5A6B5F8D8D6564F9
2339FF8F8305D0970C33AED35D2365BBD9AD50C43666B33ECCCF9754363F3D5E
83EDC43FD61B93DBB81A89763FD4520AF4792C4DCEBB76AA9AC44DFDC4FBB142
0298A665045BCDA5C148E123AFFF96CFD61EEB9C900A19314829CFFC11DB597F
7C55A8A7CC1D8C1245CFD89E7D66E63D1FC972D86D80FA11FA9DAB4BC9968770
BC41B17717A55E5D8A8F06F8378F03A9D9D83E683BBED9AB71BE8C8E5C24E53A
5AFC5DF3401222F292CD0FBAB7F36A7A2E4C582CD4B7ADC254E87493576F75AA
AB9DA284490B1A014F5A9DA7B45CA4D070D83F5BA00415F599E0D7FA55CAD906
0919527012138A4EB36CC9176966B8D949F5A945E578C8DD29FF20796AC3D0E2
9B043E8D6A88357867F8BC52A5786A474539D5B40C1FD85C8B2BEE6A4AB398F3
5D2E5457EEAC9330C8D80DB42EB766C43EA8EFE81CCD0BD4C498F6F335E234DB
1B602BB51593039FC9C7CBC249D24FFBE824F874DD9A9DA5141D56AF49EDE3FE
8AF0EA8374D52E32FB981A846E5CDD5A826B3A045427E0BA44142C86AA0CA4FF
8EB79622F7434C700922343340368914BF3C97314045FAB692C18BE004A54A0D
C17540E09C4D4F7048EBFB72CFF1B8A6BE5957291D85E8E79BEACD319A591395
C24E1ED0DD0FE26C7B1912CAB589A8864099A5F94B50CAAC26255E0389121137
98EA84C519C2D79EC99FDCDDD3E095A903D94881F14A331EA44FA926093F6551
E60DBDF706C21990A5898038B50C0E55205931CFA52CF0DF41AD6FAC800F9909
99B406E03AB83AD8AD9F239D989C9877567D125E058B3DFDABD7F3AE4C95A62E
763B13816795FF5F6BCEB84691A4D7A19F27444F05DC7CEC6D1BB14045472FEF
600F8BEA8C04245E590EEB81AD17CCC0268CBE545EE521B5D53A75BA697F3719
A949EC7BC3CE225C0FDA75B6AC2AB13D030BAFFC09271852AB2FB5DC9D5E2B4D
3F5C4435FFA48AF001C9354C362406B84312CA225AE2CE32B6DDFAECD30D6018
5D9F0D56049A962AB365C0729B2C1DB0D0F91735E8930680CCBC9B908C279F4D
79D8D6541D1D3A02FFCE3B2D8A626621778463D1287DB8D742D6A1507246FD35
E3625A47686FBAF26679413AE9350EF157BD7A256037583594697ED5A3206F9E
CB0FABBDACD9CA3A9E34D1469E715E26AE66082B43864A50D37AB21CCE5EE140
F19C9C41D5762189E8BAE95CA57AD20C60B50B7B314C784BEE07164AE786097A
51304E43F58B741F6458E093F18BDC5B52E6DF05E63CA91A99D774111DDE5DED
A97EE65C2DDECD3D907E28E2CAB82ACB5BDFCA3D338D87D5B02B43ACCD63FF65
8A8C58C74B40F86B92F3AF00056C5FA29492AEF376A4A160238E5ABD9A827E50
A4A73ECDB2BF3FBC77584A6500556792047D05869D915695F9BB87C494EA6552
7E8708279B3B2437BF1D57B331D6C96525BB043302CE675DC14CA5F6122C84B6
2AB4C9B2B5D21EAAD7A9ECD4CA7B148DD6935AEBBE2803411D616AB5BB14CAF0
71A4F8C642FE5E99634ACD70132644D1A72FDBB617FEBC47D697CDC2EA2C6CA9
D786F6FC61B7C9EE627611F9C20A254C224CA0688B6C93A1602A5700E4F50E5C
C70FAD3A21917D15D5DD3B3C72821B00063BDCA7068E8F6CBB6A7ABCEB51E7B2
2833F54B876DD8797D2E17EC96D9EF6D9F7836B85251D4DB9CC5C16C86D46BB1
3688AB941A8EDE313FDB0C8F140CB009A24A80270037C9B5E513340E5CCC2E9B
B45AF8EEC8E4CDE0FAEB9886F1215DF3E5020C43EBD25557B85D305CC41C5768
A59ACB8E42C225939689A1E13A16BF7C51340B9C57773FFB718AD1B92D8CE067
C5FA2D25595969EB32214277C7AF5A22A618783B8C6685588249B192A0FD5344
9F0E881F42404EE1EDA56284274579C92E08214ADE09FE538B27A57674C4F745
6E4202CC902D375208054D9E578F1415F6A48EEE5523AF3CDCDA8159BFC935CE
517D1C8416F6272CB6C6CEDB3C581B65ECE095212C6951438E3BD9F5FE699F33
AB65D58C7AF3094DF38B038A7C00E0EB5AE87EA37D3A5BD929E839A60E6CFCBD
E1A0C7885666F8153871954D30E372C63D8D09B4A69BA804B9AA2C563D04304B
D5935BCE99B671F1CC3803F44DEDA8ADEBDE1049C0FB12D24CD1DB5BB2A1BC1C
BF2D6FBF64BA6446D5BF768847590F9EC86E2B28FAF168AC45A337EBE667F6A5
0049DD7BD01F6292FCEBF10AC5D78C52F25DEEEF3B7BDCBB8DE21938EF29C178
C0A82E1EF5332C616238CD44B20AA739324A027E200A1F3193B87F3F7DEF8639
E8BAC6AD317F78E19A851307F6C61B9AA815F71BA9CDA2CC27850827EA9F8F5B
89C3D39C5ACF3D46952D2B931A3C680419A924C8D725F63A6FF8A98B0D6952F9
79219B247AD14CFD0DE1265294214481C13BB3EBB7CF6357CCAD5E1BBF5B83EA
873BF54190A91D904C95DC7E005EBD98589E6AC84C709CD5C318FE4D870B9854
7EF6F2A579C2C77291AA4D2ADD6AFE3AB47FD31803B563AA12FC0382EABF8038
8BD3F177CB73C7BDB045BB0B65F7FDBA53EDCCF52BE7BC5EC38D1CBF42FC738A
2DAA04D63516D012A2CF81775579FF5F530091D95453A1FA4D7F520E7165EC5F
38C70EC606501B0FC5394853ECE439CBF8178126E4FA8ABB03AD90E8F29974F3
4E0985B9FCAFBC381358B8F70E40CDDD0811D99FE7268CA9315F0E649DC650A3
5B6D9C4CE0E469761CEDF6F6A1324476F6552F22BCE8B8A67D32928B082C9E23
8CF18C13D8DF7AD56976F3E2B8AEF1FAB9B3C603BAECA0A0EA93F113B87A7E6E
2FBA6FEEE4CE7FF33F6244B2C0AB206549DBF565560DBF9060400CC8085AE23E
6F3A0CE3767FB3E937D435771FBA6214E4822AE2A122A36D71CAFCB56689C7B3
071ACACCD0D3F83D6DAF9237A9D6EB203764D922A68615B1B717D84F73C8C840
F9E5BC086DC5D6C0E5F64285A41C27BDEEA7A48CACB4AC69B3D9515C416D7C5A
3292CB2FFEA4F79A8E5FD8B897300D3C7E2B8B39F0185E5A426C787EA1B8389C
249A86EA1764EAD2D65F03B4F41EA48A439C1EC69C56A987D9CC0AEA3839C7F3
3B38534C95E98D90CF65FB8120D2C09EBC9D667ABD0148DDAF1A67EE9AEE7129
E62778C0ED9F0FE81A58F720904E41A09E69816998863DCB080FDA85C6C4D289
60B3C70675808D37510FF1A39A9549E7E411C2902493EADAC1D4DA3156166A44
89D046C4D4A42DBEC7BECAC3928066BD5949AE733BDAA3743F861C50F00BE89C
E410D469A7844BA04CBD289078EE33EA5C2F0BA28FB2F401E365C45D9A595D0D
9CBC916924BEAA0DA2D31E36D196951E1C8DED4F198DBA7A8E2453CC39B53E6F
9E5DE2D1F66C28E1A266614B8729BA682F26DC1906CC5070524D184C2636CF6E
B61AEAC0055420B08DFDE19DF04412623A09B3C5D3AE355DF9C651AA32CEF916
1AD5F05F3ED4A51952A1F042947FB7F2215FB2695B18D4ACBC83442AA199326C
32CBFAB7F6DC7DE6878DC968928FCD63D63A233E7EC8CA8A32C29601C7C0E4B8
D8EF9A5468582DCA44D3498593E505B0F7619171AFBCA8617719FF30D6EC4751
4E5876FD70F4E5D0BD1C80AC7D28BD9F35A475A415B85E33F68C57D3BDA30101
40F5FFEDA157354A11A8E1945C250BF5D6A7E2A9CF1253FE5CB85317CFD5AA48
A8F8DD351882D80EBC9EF22CA8F00F15435E86F13E92BEC25EFC87D163E10389
55DBAE6B680DCD927E3652FAFAAA1378D4464957ED7310E6743A5A288B82893D
147750D848A81AF067B6B849D2DE66E7BCB5C50141EA9BAB87EE221515F713B8
7A7E6E2FBA6FEEE4CE7FF33F6AD8892CBB8D988310BD1F78F981D212A0F1A8AE
F4A829AE012B1942D59B4CF1A5FA79C4FF36D55D8783F1032B9ED4E72B03779B
88BC6BE00E225048E5F1649AEFCAF7E228E1BF874666B181D0E8F7D15965B0A9
705D17758361B43CA02DB2C0F0A8250D0E561E29C030653DE9F59D4C43F4754F
BF01CDFE66AA14A095F6D9E0822C5F3B371BF3603696D448A52171592A38E008
117C71EC058BF8B0D8C342605941EFB5C5C8813CB052EFFF77B485774E66DBD8
F1271174F933BF4F772EA2EF066CA11AF63E720FE1F28D656756B929E622CFC8
07533D65CEA21B8FE27506DF5B12C687B39B276E2BF158FFE415CDF9324E0AF5
6E304C6B88F50EF6E20BACCD7614314EADEA7667F1AC068167CE1B3F34805919
6617559C5402452EAB30E0F9C56E03853C4D15DE4DE5EE14C952E8DCE8D6F73C
DB59AF2AB680A8025144694C04BAA5591D0F54BCA110E3A914752E4C96457559
950561BA30037BB388E1EF9F800D5F7DD517355569D5ADCA7CC8617FB3A8CF7B
BB5FE8810D2E0688353ADE6C40E334CF9BA5D7AC4FFBC52FDBEC766BBD66D236
6D93F2BD8279FE9F7B086A27B5C3BAA441DC9D15ADF1CF8ABC66843F4175A92A
DB000E1978A9EE6543D933DF5B214BB42B6DD39C20CE46CB6FC115115AEACD61
985EDF817CF7182D1FB7B9AB0AACA2517D9AA7AF0B6820671816DCD3932B5C62
1FF490AFD5F86DB88FC6C7F25304A0881247865F4F1E64D8E2AEE7576A96E469
E1B32218943EE1913C60D921572C0394318CEABD4227F982C2F0EB03E3ECBA5F
7FF2C9F44C823193FA3C76BF1963918273761B0C619AB2A66679B71CCA5EA45C
54788FB02B9C55E918E23EFB32956A7D1961B6A9371CF8D25172B3CC1D64D56E
8C4FD941F65AD2DA72802633C3604179CE6CC6557D0104EAE73EBF64A004FC65
27AB2B14A80F8060425C4CF25FF0649ABC33EFC47FA192DED7D84C0DEB4E55CC
559BB3918BC5F8417436DB47C540119825D6D65D9F18F20F2897A4B5B87D1DEF
C1BC0BD7DF733F057A31FE22C51E6136B260C6135225157DBC405EA681D24CBF
5B6B2351D287FA96E369FA24EAF653D8CC184E633B763D0C226C18FFE8EEF4CC
55BB3ABB0E37660C7C103D418C7831D46D5A8EEDA916B33541DFF07C1A6189D1
958999FF76F23CF17109BCA7E9DED929072954F4C9C3913E92C96B4FCA84D7BD
FDDC2932DDBB65530229694A84795BBAC0A5C89D53C2F53F12EDC70FDA3EE2B1
EDC50590A243D5ADB51E05F76EF52427E0B2A53467D836B45EB9932871981C28
7FA9BCB442A715DCA6CC49EBA72D304263EFF2F25C295C7E65E2FDF8E5BCBD0A
F297CDEE3DA067FB0CF9D3B7CAEB7F354C21EE91693DFAA57C041B52A0FAED2A
6CB461A9D43E9941B9FEDA5D2707EFA622A7B69EA1BE414FB1B4651F606E678D
F2FF576BE5C494D3BA1A8181A6E3A24671E32EB74FED57E91C36CB0416C7F9CF
2C65D4178CD686041177ACA47242F7F7615C6AF98CBE72A3B524CC9CC901A3CC
4286B985B5DD0530EE95ABAE64FD514FF8176C4B7BEDC38A9CB92C96236B56F1
C1819320B766793F249827D7B0C796FB7A7162A328A79AD0D6A9D442D6F6CE73
F2A57D615942D4005A7DA61E982E521144D2A9EF42CEC44FBEA1958D2A5C83C6
5E54BA67B7536196CDB6A39C32166C61126E8E054C1AFCC5E735349E09117C1D
B5FCB99631A8CC25DAD4032A8CBCDF482F71DC6698C529A06700572785C5DC13
939FFC5263B754A582C6F9B862736D867D927772803D96BB13593BBE7A0BBE3F
1109BEFC01623754880208BA1282D3087C829589941219026A3089B4D301378B
9F47FC29F3246AEC0CFB09776A79557EB78F42641DAE343F37D03E2C9B361F0E
AC85811A3417AD06A62ACA41E83D306C33EF6522555056CC0F680A66A9DEFBB8
96CA118CAC320B4DD8293CE15791C61358C31C5159E068C96E35F4BA28952FAD
57FD5C0576E959C3C2A98C5CB21BE95D04ACB7FF2FA9C2EB77D6CEB6F20266F1
13A113565B2461FE3CA07BB12AB6FD30228163E94FA2D71F849D38D50182290B
D895D61B2597DB6C7408DCBB56987A5DAC995C0C87FE7E4B3C232F662DADD25D
145C73670EC50A53425B85B62BD09EA2C6FD9374D7CF7B7CC1B4F6E91182FE8B
D84C620BFDB72DD0BDDF7A40109543A0E33F06DFB8454F8BAA641BB55F93496D
24B80EAF77C4678AAB20A58356071C2EB29003554CB8008AB91617FEE07E417B
F51DDCD9042B1240D3E464E37D22537E86BB09C3EDD6C2784D902D6894EF0671
B809D61FAED0A5206F65681738F472093086AB594C10C1B6C38AAD2250E9F218
AFB6680255D29719C192CC65DA007259959CC50B0EE4C75B3F8CD9989BEDC946
4F7342F580FA791E17E1FAEA0CF0B00E33F36BEAD18AA153C3AE5D373F1714B1
B6219C0AAD9B5B45276BA04D2450D625FE73C61A9622E4F0610F89EA5293FBF4
CC1A24A85B2555C0F2FA693224FB4F4BF9DFDB4973AC14F5D7B571D85E101B15
8DB7B747DB4E3517D9D8DF403A554FA06AB29F4A0504DFBDC9F6702057D971DC
24C2F805F7A02459B0E4D47B15CE3E8740C1ED599F55E134ADDC4434D46A099C
8F789B1218D9F88CF8442BA4B72C5980EE40BEF1DF5A8AD87222C54FE4E691AB
6BCC20E2E62DAD3F671582D9C646875FF0566E52E890A4A83CB6FCB8095DA141
8E56B6B68D39EE50F1BE39E1089D21A73198BA54FCD94646F6BFD96E5F335079
741BB6A3EBA3B57A96E413AADF797F635497D9F36BA1C25927C36E9B9C4E5FE9
8043DD38FE9400C351D86CDB7C52B72879152B486427D5FEFDF5B03EDF103842
514176A4A4EADA044ADCC1E1AD42918C8C67320CD318FC7214E15FE42B8E217D
E2197E5C96C96A2538499F2E97BE6764B7B53EEEE547D183F0A7766FDADB5C90
E2E028F14B6856F9B87781C0170356357B3542790EBDF135610E173E4C2CAA86
3FB1217806B03A4DBF0BB72606DBE4E6D7FBC8BF450D19267E3281E44A8E5085
628D81A0039B772CD7C7AE178D7365A8A3CDA333DFA7012316E75249137D93DA
3B42F8B404028E03377F7D1E885F69C8DF39C4E969E8BAEDE16F206873FAB6A8
59B79FF3B2407906652934045E4EC211F28C3908048FF3BFEF5CDF1BC516C8AB
B60BB76940C54D4789A66E14F3C046A1F5BD1A73E3C0C22A4F74BBAA8D379093
C76A72931C253024DB79F400D52CBC5FA902E416679452E60C3CFEC8CD8CC969
76DCDAE971ABF95E7E78AFD1B7373AF534CB8E4EEC5577679603CF160E25353F
D9A6BA6B3E100A6A9B210EE71FDD7AA6C8BF44B5672639E525FBE110BE627489
5A3FF937C6CB18816836AA7DBEEFE263B5FB83E8BAF9435EBC4C7C1FA2B81AE0
1A9AF35BB0C43821F044457C0C613A59A3EEDA53854FFFE3D9F9F98BC5631737
5C196C980AF6F28122ECCBCBD5E5CB542ABD1410D8C03AFB3029ADCFE6F1445C
410574219353816B83F3F123332441679FFD1CE4298042C8931486A8CBBAE0A8
88C22F6ACEE69164FAF9754ADF5D3023E5CC039418845780ED20697C67C54DC0
8C8BC4B7DEF14217ED30B42286360C270404F1E0AADA988F50BA8643D826DFF6
B247F423857D978EA767E825D62E28C2E864DE86CD0B3292864C84EFFE9F7DE7
23288E6C56443913C1BBD15A95A466CAC735BC6E2F7E7BCC84C0C44F637FB287
5040061417CF95E75C00E7ADA71974E12ABCB895E018395323C5CA3487B25F43
61A920A3F5CF1FFB771CB29D98F4D92F1E38EE50A479EFC1134F11D4831D5A09
8E27DB9314EFEC915577D321AB65064887899C110A23D2970B441E2D57E26E06
43A87E6BE3400B41F28F26C0F4AAD5048D244DE20202BF6071C66236E532BEB0
56ED641AABA269DCDD24DE122BA637CB04F1EB12E99D79E01811154265A22CD3
75D5FCB937BEB4E988547EFBF80C009DAF1E44BF0DBE4AB6CC3CE36DB461FB6C
3A56897FA1E14EE6E04C23EA07681C391F7CE2155332677318872E67A366F444
AC5EABFB6B70528708382B1DA3670DC982C71F0EDE573D431332B0111FE214CF
4C0611932FBCCC47292F8F328F543E6D4E5F2D535767C3A07EED458746BCA75B
DCED06B56125EDE0DDE1D4CD41BD57B80239376BE0AB7233315A300E2C7D0B0D
2DC0B0A629F10E88312DF09392C4DDB92FEE258477A403904CA67DB8FF8F9858
E539ED637A3A637CB9592936CA86FF583A510C4873472D8E00965DEFC7E2DF2E
2F8C5354BE4706169254DC034E6A57BDAD5EB4E582001ED7811C9FC47EC5051B
1B1066A9D8C620BDC0F22D5DCAB19AF783D1506BA03FF5F4EB75E671AD1D4058
AEC15F9518B7D2509F710753C9AC13F612CC0423320E3EA51E566D2DF64A9390
00AB078994EF1188ECEE4B6B88ABF5B5C3DC10D3575C7ADFB60B533130DEC2FF
5F93E3AD13BD0728C56224CB5AB241B70626C45A3FAA8D83F0A6F59B670986C6
A81009D3C81A0A1E1D210F648A0B9354067076F88B3EC71B4A946A5BCF8807DC
55E18DC0E5BB406AC3BD2013AE4E40B9175F83E287BEF5068B1578EF12476CF0
E5C63879653996A2A6290D672F653EE9D144C706BDE9EEA9F569F1E0AF07FD3F
597C38189CFB31BD28018ABA73514B937D21D9C9BD6D9FFFBE976D4963BDBEB3
40C69B8DDA0059097ED2E47A9725EED0F72128ADD8CB00F1FA2F3D083625FFCA
8522C789F90A650344E60D96FE85284B33D163A669265AF62F01E4AC601B97C4
1B96EDC2D2FCEA81A60A1B3C98F6714D41A2D500DF6AE2928BB9D5104751F3EB
A27244EC63D9E697EB4EE9541A935EAA4240AC015F52F147F56F6B3CB10EB6F7
E806E51B294376BECF6DFF8AD9925D383FD83D481291F37A3C87AA0D1F7AED11
A47A998142D7125BCC7B0A2C8CE1E04B07D5B38FC3526705D7F01B87942E28D1
946372B3F2652453807BE2D8DD066DA1C061356DED2876CA7F7DF9CDF82A9E0C
0F647798F5D67F361A73429B4B36081AB834161B97806438B333EF11AD60781B
E76620814EC44E5B91BA04C1F0D5C89B37C681626A87E271F7CFCFB62238DC39
56553C848088BF730669D197098DBA0DBDF6708349C25680ED6DAE22761BB999
3B4422947B5C4D6B3D136FCDC2AEEE1911EDF6973F5EE82EFCEBE653CAEAA3E5
4E66EDF93F3A6A1B1C21705F8B6AC6C253E91AB01EC8B7DF72D1C340A25BB821
AB550DB7F649090E1F1738CFAF41795A2D0D7D90DB36AB67AA20C9DD6A16EB57
68D9D4835F7F3775FC5B2ACFBD1D9BA68AA4AC702CD6EB50075911EDFADBFB9C
2639835A0665FF2248BE07F08E62D663AEDB1A49232BE739AF0DE8FCAABD2C55
B74280C65F7495F33CA417DD2B05A5B7E3074054412A33979B9FE7F3952DD126
DBE82FFF53221C171ADA792E155E7B7EC4185C67E0DD7100D5A9A4D384EE44AA
F225D3B0CA628010FA55F83392CE86D167D1B54611655BFDE684AB4936EA7B24
D6FB4D8586911F73FB7B4EF52147208D99D475A36BAC6BD3789AF882C28588C1
8231DA4A724F0D03DFE321AA77AD96270F0C22236BAFA7BDED664D6021284E90
80E3162B5BF1D9F46EF16605F8E5A270AFD52D5B627A4312976CC258019D26F6
4FAB5DD7F61F1050E253837BDB4F98FE4268D84C4B105065700EB9FEC05CF95E
DD202E744CC3B65AA9E919E531476DDD566202B157C4BE8DE18F693657058067
0F8A698BDBC94418D96618A27549CA07417E5EF3C41E23B770F5B57090EA783A
E82B07CD64F4C202A4A34D52F4B1460A07FDF3C8B4C736E2EE6C98ED6038A9EA
AAB404BC495072124859B4EBBEE4A11BED5E2184628C658BAFBFB368388BF564
DFEBFF3E277645B276E79C0DF2342B709DC786E5FDC4A441C6E71B42B088247A
A035F3DC27FA986E5EC3B139CA0862496499FD4A4CB2F8D01C4CD2B524B40A3A
B641E36D401FC7A72D6E69069F73BAD96B899AB069AC1BAA7FFFAEDEE7979DF7
57694CB3AF4FEFB31D3FB57FE0A686155C8F5A89348E2A3DEF71F4FA68D626A9
929BF6B8A281AFECE31B6B52206DF89B127FABEF6FD03DEF266C1B00362C6F44
2147435B5CCC85FE887D72CC63C58D29AA0A0C38D8C2A0F73A00C3492C8EDEC2
27F2BC6CDDFC00D98E345EBAC4CFE6DA1137E970733CE480FB161356F8E43670
9B2BDC523385B3B4FDFFC81474F0513AFE93E9C6CF76096B54D067FC40C4E8E9
100EF56CB495808CDBEC406C675B06E524263A8012A67C84D35DFBC47998037D
5E17B5289F3C429FDF271C136B8BBA284B87B841F581DFFC5021E4FBA621CF27
AFDB3856C29B60419B443D50BB15FEBDC8CF5E25E0A52385E8A0D50E496DF7F6
EEDAD257EF5211EF321F7C21C684E755908E37FAF55C214ED75745D7E41F98D7
860DAEF04DAE6C7B81F630DC3B47F2E32A07545017127DC3F5F3A36B569371FB
7D1652A62D116F125CC0533BCF18F1F156C0650D4A0B81934D0004E1D8D31676
E31769129F43D0E7FC258766AFDA475B518230A0CF54F0BA788AC4B01F5A4209
3EEE5F01B034E421AD66D3AF7D734837A7848FD9C1991FA99DC5E168EF03CE48
DF60F8D7B1FFA5136753451F75F619FA22BB21829737AF2D393DA6D6161F7FE6
EA8A1EFE5496CE7808330CB7E9D9A8664C443252181342F3A692E0BB3FCA5940
BD443B8071E29CBE07BFB4AA814CA0DD22B4411070E53AD0B0C0E85C96E6B1D0
A098DCB1CE211DBE74FB0A9C11EA8AA0B892E2B8F2C868988701EAF0C4B0F61D
FE6F3936898A4FE850C7AD6D74FCC0851826159569889E231C00E8BB0781C2E5
4EC4CE72A35BFF13D561A56F1882CE75D5E9ACCDF2C02B249F64C32439B62B32
B0AE38FECC40C49413991CD2BF413CB128327442D69D1B7FB6E8C0C15CDA7BF3
D23E4F9C070F3684CC2E3AB0F8B0B1A8C29D9CA9FCB788794DAF9F676A200660
CAEBCC0634E58BF0D4DDBDC49AC0ED275920F27A27D792849CBFE02D3C61E933
36AE4857093BEED8C005289F6CAEF5FE3CB7782BDF2C80470532E692C31077AA
7FD6F60981911AA0A54BAD1B982896932F31851C3E494C40709588F26272576C
6C5DC24F81181EEC09160F77FA1AAC4452EE18E115380DE970989674955A90A7
59E2AD149B24E2AC4B36F2C45A807CC7D3453824D10499EE8536A6C4DA236D42
2483E9C4F22F89B13F6ACB6DDC5C3F0E5EC0F6AC2DA72BD9FD183CC8FA118FF3
32A36A296F42C631B8D5E398A356870AAD459FB136FE6D181705D0E6C9B23B57
4EEA2295AC45F5AE9D286BE27CC16BC15E3286B063B5AE98A4AFF730169F3D1D
B228021ACD2D067C2EAB9873E222D201102998D39066D46524EF155613096896
BBC93615F1F3E68BF3AA81126A7A546CAE4AD9830DB4DC4E62E44BE4AB58ECC6
268DDD05AF787E22CC8806C10DEEF830F26F46BB02ED428AE51D893615FFD23F
2517E1C5F60D6A771C9F2E33F486AC03EDEC5D41BBE259BE4B02E0598B3AB259
EEE0DFB4521966A4FD7DDA84F1DB93DD6C37FFA98C1A3994AC3C539A5F5B35F5
2B949B4102DC6CE89A9737A689D91FC2688632BA024FD222DDCA28A4AB685FDD
D6D3428690834AD88729D87BF206717E2741A0D8264EAA3DCF5FC3105FB046DB
6219CDB48619F12AA1C572AC0D6485766334EB95ECF4787CF3CEA44C5C133A39
0003D59619BC5E655B8B3970A30E927FAD4102EC84DEDEECFCD5E0AD8C489F03
86BAEF51B49A16C0C9F6154C4C998E7979F11F3A99296ED7B76001E331CAA319
EBD8CDD7A77B98A615AA26973696EA19CA22768363EAA491DB3D9E9C9E53EEEA
001D6460CFB0C47469CA52E624006CE68D9EAC7E8BAA1C0EF51801ADA133E6B4
D9FC9F15DE3E8E77E0CF73CEF75DDF931CBD691A97BD5910EEE107EABA9CD156
3E7E3398FBD25661A1ACC3C815DA811FA80328613AA4E4CB877210431C88D058
D8945AD99BE3B6CCB5586FFE8A1B0A3766E92A79516C2CA4B6E463EE135D9D9C
902B17B51AAC0CB7457447DC1B49DA90151B669DC82D26722E4EB43F6ACB6DDC
5C3F0E5EC0F6AC2DA72BDC01F4186ED33AD656664632B6E41849E2A8EE8641A7
55898C004F831ECBA1C6E90ED06EBA512884B03BA3C0E60A55961A476568D109
A2AF7A67981A3D830A3681F6951B29B99752E4B15956A171AD001BCAACD3E948
9465A33525A438DF5CF7D0350614D631AEC67DF5835A1564A7922C399BC707F7
B0948AD53E21ABE5039EA537253B5A055B93F15F24ABF466A2228AC8D2C0732A
013ED1BC535EAEA643AF6614CA260DFECA93149D6194DEA749C42115F44D6586
8CE8429DD6D82B15E63776442B8387AE96D8827B8E9EA492FEC5FFFB3DC1914D
3B9B63C702200A0564DD860B99D577AC63CAC4E41625B6CCA739205CACB2605B
FEDAE595738B082B31CA5675276F20D6151DA115FAFB6C30A39F9BFD6EEB7BAE
ECE62F49BBB48F381A17E51226176BE295AF7F8A7A7DC7D39682CE2491C04404
C8A5DD928D7A82AAA44F81687FBA7F2BC21B3F12A88DD8305E833A8174051F45
9B443AF7861235D247D1C113A2A3EA25D613DAD55D4DCE65E9B482D616159785
EE3064DD28CD502881D30E137838B8BA1B5CD92110179A76BEBFE0E6F6982403
D935766840A8AE1A93141DEF3E4520AA121FAF214FF59E3D1A0EA3A059F6075A
69EAD7D44F9F669AFF90DC783DE6191B4A5FED8651BAA8577E685DD676801BE1
AB0FC229362CBC3C375A7F598004D9967BB5A52F96956795F82FB292F30D852D
DE60E6818C162251915552282BCCD4BCE641F36355C6230595BA6040D6B935E1
CC0F1D31D3D04EB580E29B1F8CE8342AEF1D687F5D78972ACEE54C5EDE4D57C8
664ACCED3723C6DBDD597640F05DA8A4163A4481A7034689616B1055691D9F5A
CC965ABE961C05F527AB6AA16C65676FDFDAC5E26C2123DBB49314E1619220B2
20505DF922C8A8E5A787DE997CE19D306AA01703F105CC68C429E2A6F87A9E34
2751F8D7DED428DA1F1F0FFBC2039816785D7EA7A28265109ECEAE081F286512
B4C60C8677E347A0E68AAD5A0A63AA127A4CC9675C906806476C35617E8C9A08
231D2920B6A17D6C4A61586CAC37479E5B1C87ABBB901BC6E665246F9C46B42F
FC202DB1B3CECB9EB309417F5D7C9C730C7B30695ADEFF8E2A9D6E151EE943E3
01D9F0A0B584944059755BE22109DF7B5CEE3A7CF276290101A8921DFFD59DE6
18859702BC64841BC9B7B58CC22C79287E82D35E257E2F0F346F762324E4C07F
B9C4C046E0C3D9644250CAB982E0C2A18CD57382BEE27703243705101C7CE3D7
C5E07BFB16F0653273C97544F888EAE29E000CD5A84961416338D136FB96E441
F31A64610341523137D15DF9FADA0222F683AB54833D1BDA70B1EA8BFD930B94
1211CCB85F5A5C3BA859887FA484A3BCE88C9C86045B0C49585B696E0DB2231A
78C23919891DC8EDE07493C9211DCED20F02C44D69B2A2CB7A27189824DF510F
5722B50C788AEE13FBEA7EFB67FF93509400EDC6B8980EE8AED59A384ED1F967
54854EE4E5537AB70BF7E15B3BBA7210546FB7F5422C7025D0860B51DF8017BA
63096272B30D4982435C18550D15A9B55C35252DB7994386AF7575D0B98D59AC
8F6410E7E7179A352EE96991D6289C5E8743F566EDAB756423433A18036018D7
515A1E3344EC2F9B354A48713B4FD8F652EFEB0FD429C53D35D082CE150C3FF3
3C014F3C26AB00BA7C9D83B2D5CBFEC92ED1E12E332A9EC0505EEBB8EA2153BE
9913A9BF76A2DD39113095C0AFBA6BDEA59AFA6D56484CFC0BE8AA27284A5C2A
AA6CCBE07ADE45985B898D9FAC27B8B6CE2AC29BF6AC98E9D3CDAFE35798B908
F5087CBF8B4C40AEB4318FDD9A16483BEB00217E5324F922E026BCE753BE1105
F4CEF6A8D68263AF5B18DB05FC20E3C8C69E20DC470F094451424CE5008F36EC
17D6ECFFBFCCF21DF91FE878D10D62E7C8426F0492E94414ABBC3C14789B9A97
D64F2FD32F3598C8F095B540EF5818FB07E86DAB7FA029F067A65A55B940915B
E0F1EA9A79BA2231FB47B4F77B87C3D919143E8D648BF4907880134F6DD94E65
01A445568AE64874DC8265F3D767FC381C43E90F0B6DC046305FEBD4D52570D6
896ADEFC55F6456D266D470B4EF2F9A8AE85B1E0D5993DBF217522B96396E29C
438F4123A098468F1A59DC48A202BB2E6C2BEAC4EC7293B4FADB68FECA8BA748
A63C6E87C70B5626A449BCF9CE8E95EAB21669397E97EB3DAE37B1972B9B62F1
27A9EF99E12AEF066D0EFB1EC2240A77F4DEE558D56E13BF65685D5594F53184
FB2A6949A02C4E3734497AC957EF4565DDFA9136A016CF0C48E03E4312B13DD1
3275898FF3B5CFACD779049EE15508B184AC3FA99938A32295BC58049BAAB739
35B8776BBD26FA2766FDE9E3A6FBFAAACF9B5F4D32070A7BEC1DB4C5283F200D
6D6DDC7E383D796B65DB43B2BD15E78544F2B86517499CCCC18A122CB8657D84
E1A49836009D57A2A48E2077FDDCF0DCE1998BD94A35F727BA81F787A97F4742
5C4ED44A2B3686D16072A2D9462FC528DFD8076528CD4C851298DC0200C785D9
57EFCD1B67E191FC5CD4F14E044BAE897C450BE9C5CD0D9545FA3476377A53D9
0E2A9A4EB016D1CFFE7020D539D6AB25713AABEDFB9153E5054B7E991717CBC6
9F99548F4727E88AFC021D82019BD808D64196EF68407F3613B12C4AF59DE093
AE4C3CFD7581BDDC20AC736E8217C72FB291858CA3A619BAF5F0583FBE65731A
4F478A2811CA7986436F26A5BFBD238E751808873AF06AB0708EA9066889FECD
764C9F9EFC8F22985B783590AA659002F8013F1A6410102E99D4FF7FBCFA6982
3CFB574F2E83E071F772638D3F81F06A10A111B2562B2F104FD8DDC4709FF15A
FD8BB013522D7BF9EB2541F38ED4E2751C5807F44DEDA8ADEBDE1049C0FB12D2
4CD286B3518403134F42A259F0DBBA4409162466B0681CA5FBB16AD4C77CE215
B0D55DDAA970B84089DF9CBE5AA4BA56C615245BC482F9F0DEAFE7F9511E9E96
5D487A53150734F487036F394019EE90ABA712CCC0EE9A0C40519DDAF6BEA9D8
7462EDDE8B7549800248C4D65021E8B58D8287D6241D2D9C1D397B368B031616
831F236E4D8A7581AB384DBE6FBBEB709848FF02492BDB5552535CEDA291FEC3
699255C43C52F64B9B2F36211DCC80077D037EA8DC31714AB4CFAC640244C31D
74FB02D446B8E39245AFFEE4A231354BD4E68AF23ED7704564C832F41C5C203F
B782DF9004064B733884BC081F33CB01096DC017D667BB9A681A62EAFCA393AB
86C7625582BC712F2F4092522739D920F7E4B57D991EA721964E9EBEFCA6F34D
79C334F45403F7496ABB9CB1B83C5D94730061218A9771F8A0BC1D9ABAAAA032
CA6A6C6F8ACB5CD5A9D35951838F2172447C660843C72EE0A49836009D57A2A4
8E2077FDDCF0DF711109CA4A09EB1E5BB6912AECD4004E6D5DB14FE0C1266549
168126AB66DFBB8C8E14BDCDE4E44BCC2382581186CA91A8BE711CB41C9F5060
B20C3D912D45893081D5292B785D4ABF102AA521EF2D5E80DB2C9CEAC5D5B318
C2B02094A90E24E4C47AEE2820D0754838AB3B4C7FAD52033FE6CC7D57FBE33D
DCB279A4E2A54FADCFB041A69B2444CE08CEEB189A75A385F95C8BD7A51A7B8E
6CA6E213A2A6444AFB453AC29836F93ED805057CF094AE79594D5BDE7B8DC4C5
D866528E091D228A25A1341801F9753691F48545E46AF8F1278E207ED31803B5
63AA12F211D181C7887349FCEB2296CB0504F911A2E4AE331EDB36BE642BF599
F6719EAC28B35C84751FC8A196672FAF4F23F9D40B19553AEB550769AE4BE7C0
541599DD68E0DAE20A470C85A7CFF5E2D1F86434479279EE12CB96D0B1D86F49
F7D780AEE751A70A0EAF11F79B0D77C775B26AF9C3A198FF5739C37F6FA4E0CC
FBE2BC4A87CB00A1CE8C185A9C53C5CADFE5B0F23FD2A05C02204EA9DB124A0C
509A8C0E723B7D58AA416C667FCAF72FD810AA2EB948C4E076417268C53465B3
85C7C9DB23E160159D52D28606969DFCE71A9947F3E44BC25C885A37FABD1965
E184EE116A65563C720B8177BA68FB0D443C27AB44F1B6EB45D59C4FB173EA96
FEF283F0F479C761B27836BB5E275FC898BFA5532FB0620A535CA4C7E11C5596
56ABF9DED48DB97B3E004D2B7693BE034322C05285167ACE1E6F0C763E0074A5
8831AB0E740971CB8E7410DDDB927F5086E3AD402ABF2203CC4F4B5411CC7269
76BD2008108FD2BEB0B474C108ECD290F44490DB9C708B0954CDD97A1BB7247F
B3D811C7C1DBC6FBDE23ACC411C0583A510C4873472D8E00965DEFC2FF7B9A78
529F835ED70B702152DC52D90C6895FDE8F78B5782616386454D40FD1173560C
2F9540D210D7D581906975B78218F6BDDCCB2263F112E7F34704AB6378F650DF
2B8E2B5C18C72E560041E97F9ECCF6D8C6065F82A6E25960467011A1D594F9FD
D3F1FB062620E5123CB6F6B133DFBA5A3E652BD043FF31E0205B591711112E7A
4517FE0E627FFE00844D07B311E7B480D4A8DB59D403BBB276F7089F213F7275
BA69DCCE0B54A5B5D7E6888A99CAB18B9B15340059B49A77E9B59E909601EAFE
E241876108A668735EC0FD7E4764A5CD84078C8BC5DFD9C47E6B684AD9DE7E2D
0BF854B6433ABB0C95B59CAD11DC5A9B8947CE12B4532AF24D5D29974076EDAD
14C8CB198BD619F1A79AC9BDD4BD96C9CA2E4AA52D6814C3A90F49453E20A0C6
1651B9B343AF05BF06F07C03FFC8DE0C477124C4F7876F000365F49426F8DCE6
A1B8D8FDDEC74AACBD09883E3130C654101F9AA4675DD752CF31CB2DF8F2762B
BE0450F35C5874A9204432243E66A9837BBA7457F7E75218CE0A873A42666E15
55A116AC908C609F306B920A6273DF40CA19B78F023FAA98E50C3DDA1776C145
DE69B39119E67A20EB658FCC5384DDAC234B3A29D8E8991ACB4F7B3C625D0030
CB226F6720890AE85669D375138A2A0A253C2F42CB9955D40F17A4F038407D07
0A2B4F59EE9D23C7E1722A9164587DBA6DDA6D6D4EEC20824BD6B9071442E188
15763403CA120EBDD792725BEDDDBC278C409D5A1C3943EC7117EABB1E315809
5E13259234695F958E5805EA01018E7D65C7FB93E43A7914297DB82A1C7BBDD7
ED62D967B847DFB274BEAE378AA9B414B3CC3C3D7150122533C24435D71ADBBD
052D4F81C9E33E6F74B63038FDCC677896FE04D1FCEBEAB98AC97FEE43FBFB8D
D3A50125FE4522EC7A22EE83F4E6D7EAD84B4C70706DD9D9039D5770ACDC4D40
49A6FC494E8D5D765F2F94AA5F495E82BDC153E1A6FA17F410F6880F4CCEC2AB
001F03E1AAF8354BBE45B5CDD3184DE1913E575CE433B48A55A33CDF0FCB1578
B0D25E327737A97B76425ABC1004DD62587DF729A99B4DBC1940EF59C31B4CA1
D1428FA0E147553296D7FB8781D522128043D34A694FC67C6D401D4C3FE29332
EEE4E3948315AF02693C47AFD8ECE1F5E38E2A84081166327F296E625A3709C3
6E17087B1F3CAACDD925A31D8A26E5870778AD2BF151A8AF269ED67B09A105ED
E23F10CF1358C9520D105217BD25477068598FB8A2848A065149AD199D09DB77
5E2766A11A9F46B4452676B2867990A56AFE98D40FE1D59B63046CE650447902
EEF917ED2BFF0D2A577843D88220BB8B9E59E1BB1FC7B1CC9E11F2BAA4D1DD88
DE5EEF09434E2006614C0D32CF8405C5FC094A8241D3C9A3ED0F1515BCE53148
836C6E111EDC9387B19C0E7A1655BDE9B3FFAA2C575D1C0DA50AA67F0589778E
B1CE8A4B4B22737987859C68D37677A5DA20361C7F5ED154EE1C422C55753C2D
3FE9A6732800C10C6DFF0D40D21DD84AE75C05893B870D4D6E8DE5D127E03F15
0CB351260EE4A86FA23E83FB2B4A0197C19F80871ABE3F6CC25FA70652F16D1C
0B1FA5FB0375064AA5A94293F8B023DA0D70BCEDF28AC65210C3652D589681C2
3466867C03431A4A5A55D9AB034EDF79DDF490AC6FD5C0568235505B90A7AA4C
F7F0C826D159D698658694CB3343505CE3D7489FED48063D92EFF51EFE6AD62C
E7EC7BFFB53A5710925D0597110D83A37A73A0FB826593697D12D9BAFA843B24
9E6544907FD98E21E8A014CFB8691DF942B87D3A7155DCCFAFC1CD28161F5B56
3C86E0DB157CC78C4B73DA3DDA663EE554A01BEAD6AD931C177EAEAED945D9F4
93B24C9E0A28FB47181DF6562D4EAF61C588EBD478D1FC534C1F02D759EDEC18
9B41C30A81769F62E131E8C613717240613B189DE9691A0EBB285D67A8907769
4CE76949F58F31816635D2412028C5B86B11F1E34583E8E102E8622B3B97C068
A4FABB6FA48EFA1AF24F4D33B42527A371CEC032E373925D12D1C65A9CBA58CC
AEDA1DB6A4B33C567542F05816979CD2644D811D2BDAB17C31C4CE7A17C95C43
9EE69194C419BAAD5F369B7D7569300D17BDE9A70DE85D9E7B0F5690FE284D14
29DADB394824A1213F0EE69E5163C8DA30F989B8F24389CED0C751AEE7894F61
6D93B36278E4419BE029C1A61B0AED92B67AE4BDF333D06BC76F7CF97FC8CA7C
22CD6CB22806C5AB6751B391157F74B14FF20415743D0DF6AD42296ABFB97B90
B56765ACD02A788EDB10196AF8FC131CA39B3920ED65A4A095E93E7E5D72A39A
BBBEE36D477F64CC768BB8F13C1AF4D770960289B32F87CD81A612268EF5FBE6
0731FBEAAF9B227E34D7A56746D45AA5FC052A58BFC5E35E868CA2C3FBDB4336
D9C865397705FA916F5F1FEFBDACB6C76465644E642EDDB5764AAB01B27E6C1A
558C8454247A30E508E8A825B3EB8FC14062F17E78D06C7DBFCEBC475522DF5E
61031D898FD7FCE8055BBE9738D9450FFEB4B0BE09CA7581284A04229D58A680
77CE35CF5734A56D83667318D2C268BE086FC75DE3D8ACA43E66FCB01DDF5562
44251C0A6701288086BABE4A276AD9AFABEA8FA43A98760A56D5263E454F59D8
A721EE49A2A7FC13B78A9AED472AC4556673628FEE559E173E758877DD4F90B4
F59050A001CA100C36281297059C9B162EF0502AC9A3A20481DB2B8030090CD8
1B9AB9949DD30A8FD8F64CA95E2D3D5453E46D31608321F45468D6C4D857CDA8
0FF66C75458A4CE2B431458BBC8CB550C2C9ADC17DE809C66A71C436D10D890E
F79DF1B71F2638DE722ADD2D6D893B519887EF5EAF70C64C19D13699569928B4
DA77817C7C0EB9FEC05CF95EDD202E744CC3B65EEED081C48241295CA41A497C
DD10544227A6EF4685D87C1736690F7BE1E1B9D9BA4E9F657075490FA8F7B2F3
F797D883FC874411A6709E67E9974FBBD35DAE87BB22E4757DAC85A90BD05BF0
08B2625F9556985A8DD742DB097598F65DF36FD0B8FCB635C4ED1EE10F18E285
98EE6A6859BB4B5754D6AFFE4277C9E67F6F58FEDB7E7D77240D880301324F99
1F298E71C69839783DB864303EA983212036D3FB977E066A4E5C295447027EF6
C432E1F4B00C331C41B3187F017A7C465E52593C997CF959E00469F192A288CF
5373FBEFBAABBB5653131C242B346868876C304D1025B630C12D4DFED8701860
12B2396AC65836EDEE9953BD8A70456AE850743B178AC46F7AD2B6A2A8D1867E
CDCEA7763746C284CD15D913C9C69E721972CF98BA76A27A3097BC5DA3BCA4E4
03BB2FED2540AC36B887AC956F6A23353B163E07E3317C6FE7EA99DF2C75BC3B
5677440C24318B20837F44CB8871CC777E96E930266427264FC16154A57FFAE5
18E5E07299F792A4C096D044C4D65021E8B58D8287D6241D2D9C1FA4F3FC10A3
D9F0DB24F1F9D8A1DA540D8EA120D8F5A24B398CF8BA4ABF9C9A6E54E2969B10
1E947C7D0018194BA4AD5F0D63CEFA0F1B488FBF053E88191707EC3DF25246F7
04BFE25722391619E5EABBC815C3DB9381CFD4819F6CC2401C41405AB4179BA7
95CB278C105263F9677ABF4A6EA92F348B21D6B345E31B714DB56DE48AD59C71
961E6266770C928EA1A3F74F81086E5EE2764623EF6D004A0D51B5FBA2844823
F926F7D56708AD95BA96D760CE68694390AFD127A5018426D2039547E193AFCD
45AD360A543C7268F98F6BCECCDF7F2878DA0F0329462D257F900B6DBCCBA1E7
7C5FC561F61D0090395FEC8F55EF9E8C2526137E3DC0CBB3604CF93754FF88D7
C341CF2414A6EBB4649316FBE4ADEA67F55F01CF6AB6ECBDAD3753F7B3F12392
DDE3E686AFAF257293D1C9772A07430898D16423AF8D86CB53C2DEA7E42021D6
1B52BB5403C48362EAD0D4D06D60D06AE72144163949E491485E824259C3CB3B
52EC3C1E8914C7A66EC96C028BDB77F8ECA2F8CB3DBF5C9072E669B862B373C5
9D81602F5C7CE0FAC02DBDAB88E34AB38324183FD6CB2263F112E7F34704AB63
78F650D1E57C46B106FDA19C1A3B0604A2F2C6DE7A3E2D8545644A2AC8EB8EDE
8BEE3DF01BAEFB978C67140829411E43BE5494C15C812828DEADA7CC349EA80B
8EDAC35E1C0A7E8CDEEE00905E767530464F17C7E38B333C76252590B814188B
E648279F4302DF9C9D41D0CC185D3A00EE1ACEF1C93FEBE1B7B92C158429B8D7
AB908900514B671C829F078037301F49C056111CBC3C5D5F8A297A925E9BF930
DE6945370AD05472C33C523F93D3444C79EC2A2506959E98ACB5D041E2A870DD
D976370D2FA91D8951CC685C147401256879A7F3EE96FEBB2B6B25047497982E
1A0D9D6F0EAC12FD843C89A4FEBDF78B3124D6C37B0864873DEDD318221375DC
1FA053BBBD291AB473A00410E7BBE87B957DFC0758168C4BC529B7C62F3F399B
6C371950DD817A69EA0A619B8EED89BB20D5A39B2331F5F78AB4EABF4E9F025E
FB9B17F2D3ABCEC5B1AFCD61B6C7D54446F593668999C3A1F374C33E8761BE75
212BEA10D50E8F3FBC58BAF2591F64092AF06FD7B68CDB7C90D8A67EB6AB7496
76BC04F01A86646EEAD7152B3AB4979BF5E2BA0169B709385B88D9EFA89A7200
3FB974939869E6DA7BF32FD8B4A4F7BC529DDEC4EABAC514FF139A3634B0A1FB
CFF6F9AE1706DD04C8EB8090679A03CE819BB404BB93773B2DBA3AA1543F24AA
7AF55B5C966EE99D19B9AE4A760282014E7E49070CD1E4926BF659319C3734B8
1C21920864990A10A7E773AA17DE186465B79F190B3FC3E792B28A29D2455D91
1FB99BB5C355BCA530CF6C7A33BCABA86891397537F87E820380894809BD6320
4A82F810D4E8E9F3B6434473B77A17592EF326227FAD718EA7230EE29C737300
8D96F784D79C2F04EE8AC541621F6D1E70A1F55856B0483413AF8EA17C9DB699
1F69B23DCE13ABD5A5396FDC0B453AF73B7EBF741BC17C9B261665E1B8A299B8
6F6E948310A945A761892E4586B60C3EE1A85AA98C564B60FA5C65BF53B8AFC1
CFACFF4F6755FA08DF21A5EEBA22D0F6E3C3817FD2B94198132570951103FE3B
01734ED86FFE50F7406524570EA7934A3B4946D2ADCA3134984B6823FD2C0C1A
F33D5F1BEDA607606D9EBA6E7D4554B341EAD49A5188FED3B46A0429248D1C8A
69D8493836B242128B907F82CA9CA946E84E839A36686A62F5B4C956201F4A4B
F83492D16D10F825E62518994DA1849A5F552E93429CFAFEED7F1FA21F604A14
0AC4A34300BFE7815E558BB4CDD3A5B56704E1675EC90CF67AAA27CD9AAC53A5
939076FA1F1B9709B7CDC3DB21C8F8940995632F0D887AC6A64031612647CB6A
E3166D815680B622E09816F1B52790E31142F43DCE633AE318FCF4D6FB818872
056BA273A77B03D51B7A46D69D2EC040F8FCF970473794DCA19C372A973EC214
B5FB82279C872225D80245D72882B63DA19BFC2A806FCC5ABBBF8CBA6F1699D0
B2DC503A4F895F40C2797C6F4C56D862C9328DEB8C2DDF32FCB0EDEB70D4F7E8
64F63F8248E3CB947F083768C7254FC019CBD22E6D7A70056A21793FE7B37848
BD9CE2D3E56717436080A87CEB094791533637D5DC5B81CF5F17E324EA2A09D4
BDA4312FAD29E4D2996F2887AEBAC72632E25E1B5D82132536CE2A982CDDFEEE
1C519D623037D394E5EF6C9FEB3CE0F5A910A0CE339CB2A61BBE939B1BDE92F2
52D5EC9E7A5E810DA322E4BB4B40B7341777E7598BE81A846E535470DC22DE80
1471D171CAB2B4FED06363114DEDD7A89EE3513704DA2B3C64D1161E1781F9CE
6DFFD983BCDA424008DA3B7FC066409B9A8E189C40388CD91B52A7B4534BC950
8D4A38A9F3726BBFDB3403736F02F04102F04445F88F9E2E6FD2D8A4F18A6EEF
A075B6FDE346285FA3BEA661D6922E03850DAFAF56D705FE9D95B8F8C871B595
868C22B5288CFF475DD2BE2AE834F013993287632373D39D3F5DE89590F8D748
9C07010A46BE54488E52F2FF97AE49DC99A22855EF7E527D6C4AAE1F54F4D5CD
3DE04C8D2362150BAE25F6112FAE7D16D6F3462574F4AEE792750E0945241084
0591D8FF50620AB8DAFA0D20E03558D34A16744457EC281AB2ADE7658B4117AD
A6E8C937D0AFB580AF741D9D4CC7B69D7443D52DE6BC422D090457D594EFAE65
D8CC33BDBE60C02061DFB9076B5341247674D8853C2E8CF493676DE502557F8C
355CC4A6DB102BEAB1E67972EDD1D5FE3094DF2A4E2C4B1EE23DDFE63DA3C7C4
3F4B1BD748B8DD3024FCE0195C3ECDBEB413F6ECB45F5DCB6BFB8E3B400D051B
27D516BD15917727B4D51249CE322EFC487703BC10E041AEF9893EA76C85995F
B0E88F7090D1C15743C99BFDEE1C06C98575E4DD480DBA1DF7515CA570A1BEF3
DDF1175E327E40D06ED325CCD0C50FAF01BC264C611E81ED9C0E963B2BBF7521
9ED782C88901DD8752462DBC4364A0EC97F3AF135AB26A74DB1646BD697CEA85
2ADA1044A34E643E607F342F109C7A2A808449F44D04C8F05A2A19BAB256ECE3
869B3F35B8648EC2CA310B034909E71C7F2B51F705E19C87F668AEBDE3813C7C
33002E8ABA94AD5EE4BB26D59396C75A7C108A688749134752680446F888A8C0
E9910B535FEC4BA5407BF619E50346DBB3B494F63C0883DCC34C88395ABA3406
584DB5F1AE6CDE47ADB09766CA6EAD2890C1FA39DE88426CE527E58F14EDB790
CC444FE2EA149AF3A7FD4FCA041CD83BC8D134C35F7E127591257922EED0393B
6D4F7B38EA271D2FC6D49FA474324CC034D5947C9F8A47B21C6F0EBFDC63445C
C494D6189EA60EA7E3705DF65D5186FC86B77E88A9EB85A18B512DB19155776D
311C47FF72D385A5F3E7D0F5FE699F33AB65D58C7AF3094DF38732157C866FB1
D697016FC2B739584F60D39F3DEC7E2C27D3C8A91C732C92B79B8A01FEE52DCF
80CFEE01485B8E7799E63F1365BBEEF155A3727C419522B569CE4D13F0E9CBB8
4BF1634E724F4E2277D88CC2F21D20E575764C52592909478B62A06012B241EA
1CCAE78EB586A88A353D6E4556BDEB6D67275BFD5CF7F52BA12BB1C6278477BC
1D0B754CED09D5A583EF8F35C5E340BFB3CA7BB1BFB44FC52C7D788E47CE302C
71DE5E817DFB1D0525852CA7D9F733FBD0822E7A06F0D041B9CD089176A2EE20
1807CB287B954855F879D8AE5E6207B2B71655E83CAD3C9CEEF52E4C229B1F6B
B4BBD8190E80B9FC65E64637F6B081CFCC2382D7CC5E36F02109EA48D92095F3
FFACEADE336F1994F8194F0DA09CF4893F757ADB576C0F8F856AB9D4C5B556EA
F74D9DF9554F288B1C652C74B413434BEC3351C00DFD29F397413DF960E2A131
7CD10962F6BDEA3B09E1A3FA4C12743291AE68A887F6E971A1E8120FB303D116
93BA284EC86D5315ECE0B2B447A534333F6D43B613377FB8AE92DD1FC2357FA3
A3B28C4FA1D4CCE3369A3F20D09617237F5230A5B3236F3D88E079699973F303
39A97247E5147F7EB2755A6B2434BCE500F78A2E33BEC8301A7E20BBD0D26677
0520FE706DC82F6DB834DF814798119A81B598F26B26108E999BFC46FCBC8286
C9DEF03CDB67FEF438DE384D43B7967C05D0453B90FEA4A944B1258CECA5E786
A8BDB826155ABFD0D9F9DF56CAA19053D4A493150A4581052B6DA209731C110F
B4DE8725048A69ED6EDE2A39CB457A126F3CB38158107AA45C6703940AB9D1BE
C0A9D7EAED8FC6EF2A79A4B3F551B56679588B742DA5CF16D235005859329FA8
76A2CF96968783A6BDA3D5C55971A44D4ABD3AF0772C9EAE378FCC3A8318A93B
C21896163153862C5E2D059CD0A4EBDAB9FC572C2591DADEBAD154BEB335CB8D
729C8A3E2D8A626621778463D1287DB8D742DE3B375AF1CDBAD2238164B0F1D3
366F83D3F9CA0BFE2E37E299EF2A6EFF6442DD52BC48D141B6157C5BC2F0CADA
32C45DE55DAD48BB7E3D3B0831F0DE0DE96C5F110F19596D422E9645A501287A
1230186C1DEE5D7837819C7FC5DD1953CF3116849EB440CC7E895F026B4AB8E3
6CE86BE1A5D26523B8445240DD8F042BC283D303EB357DF3C02C15EF9A409C4B
5B57B1A5E6E94DA233359CEB1C8BA007879DF5916AAF93A3A7FD94B0BE829F90
8C74423E0C4EC5E2F2949742FA5754ADD4BF4085BFC3FDB6040A19FB38556A92
FC0E509A7906EC70234C0F5E53BBF5FDB7ED91091CB575ECBB38CBDCF48A1E09
2F97D32FBF3ACFC1F41B7707ECA0EA73E1E094B0E47E7F401693E83C45B0C95D
4FB12F47AEA1DB1F0F58116E052A766636F54246D96298F0F9F971F042D98510
B6AC680A8579DFFCB67E73B2A8A340774EBE13E39448EFFA78BB583C58A983EF
09982DE1DC5A73A1774DEFEEEFD3A0CC17E2B5C030A7D2FCFF5FBFD3EC16DA20
56D327DA01637CEEEC0D6FDEE1B7A76D200015F8DD8E99CEB62DCE20A6AA5846
D2821F7196DD6DB0A56637EF91706CA03D2EFCB2A22391F96B3297733F7BF99D
376BFD72358862A7F5CD9AC2164E79F2AE6BFAF25A5EFABA2AB2A420AA53D4F7
CC121DDD79982864BDCA48C069C9F0A229BF25A90C33929B0AB145F95B37A237
066E9212CF8B9C160D3CFFF488CC65C440766587F7D98E8FCDD762A697375CD5
92F9556FCF0E596A83C5F19BCD68839750E4F49F2E536C29E981678E2328BE11
65CE5D7D3F3E0F7A4AB113544AC4D65021E8B58D8287D6241D2D9C19F67B1404
454B952104FF25A308FDD23BF1D26B7A01D73DDCAFDD96490D651504BD8B5A22
F514D14FDE4D34758503D858C464F3D842055A2616C7F508928DEC8CC04EDFBD
0B5D90A7909A6265FCB05015D25DA40A9F4634C7DF6C88B441264C8A460D0A2A
6DECB325BA32CFC5DDBC9FBCCAC5073CAB38B8102C0D7C2FEF351186A6DEBE1E
BF80FBD241FD064DBF03040D4497825B23D9BCA52770E18B4037035D2268CC54
5346B48D95B56A049C11FF103A055F53B6AB9BE079821ECF676FDDC71CEBA885
B228F1296C50E878C940FA012315C2D4EDDC0B38FF1620ED27E8A316965E6950
2F7E922C5B63587876501E4EC2A667C270C67E21DB0F715316CD97A98C82803E
C7673E3823CF91A9275A340096C31ECAEE48C00A820F6751D9EF22125E19D6D1
372D21BC4343DB4D790D552E9D724DD5B77735D6B9D97839779EFCE712EB0B9F
26C45EC264A9850F49994397F54EFDC5C30D38EE73CA2B1CCD46451C7E4B6B4F
66F415916711538E2E9A1BF9D2E5842CDDBF74140C3A3675BDCB92D4167656AF
118BC2572E92D94EB429F75395A16AB3B91490A3347C1E8C514E8045BA8EE06E
A5082EEE6E9228E1F9CE055EF41DFBA47DCF8DC829927255ACEA830AB445D9CB
A46FD7E028EB1A9F30FBCEF78D51D42444724F1877C5D8515C405F275EF5835B
84831F694C72FE5217CF628681F2B015C731EDF9EC0F9C1613DE3CD76E398B6F
E7C50DD0AF3047BA25ADC873EE78EA707258484791223B705BA3A46A20102DE0
5AF4F63A98520F27F654CF833F8F242BC959B11423C1DDCC0994130EE4C2AA62
D6B46C27C79F6AC96B370A532047DFDE471266A9855A1DBC3B7A7DA70D25CD27
0106BFEECB575E7141F032A0068DAAD15CE73071867E40CC9ED578C838BBA025
06798071F2A33ED5172059A4C68A0FC20DDFA568EAF540440737FE9564DE4107
69B5C15D3972B2F2C8F1D617CA3442F5D911C6DD2E488A3F223E6F2E15C2DF4A
EA2A2B4B88AF0EC8AC16DFA6D71C71930F0EF11892C03D30B06363EB36E1DD12
722580C6012C8B68FE9EC0BC715F29822A9A8AED742FD3A5A753AD7B5638D765
3727D169CB689B7F03CFB7C926DDD1139D8A35E956AF4CAE0367B180F4A154C8
A28EAFA97A58758B37917FA7EE6FD539C8535C495E6CDA68305F2324E92B59FF
C977DBF5C007D632AD6931B33857FF798C2CF820418245421B52AA33B0B19BBE
D2B9375E521BA342365A5B30FB02ED120A27E8A84E04D1223F89320C3DBBAABA
6369F2F24403FF6A5ECD9AB3C3FA395199FAE4F7E9C856B07350101C70B1C859
9D4CA426D0C62BC505625BB4E3BB98F555FE41A89340810301C99691074DF344
DE03B350D208B44458C9BAA26A2C45A0F05379B059DCE0D9FAD6F46CF5FAAE8B
A4181A6EF2D2CA5F50626F215083CA74EE657CFE3900D0D792FF2E8F49880189
9ED65C0DFE3D104403B4F469068B96F7ACF8526FE54816FA2B7AC3B96E655530
12A6C77FE53E36CD2D9FBB84407FBEA91A5C184F439E722D48BCC68DFF3DBADD
06488328477542F9186D04FF6E85C65C85AF0CCD8D5B824BB69448E92CAA28AB
52F38357AEF4D7A7376ABBF4AAB930045F07CD60FAA8B62F0E5DDFBAB2765166
A2B403BE7078B7C1B18967E8E6D301142F4AE889EF801ABF8140B75CF243EEB6
841B0431BDB4E06E1988D30B77B0CBA5B8921ED45F7778BE3CF49987BC2F7661
56316B82B65630C73FF8FDB977A6A9BB2D9C19FB99AA0AACCBBCF3F895A19491
2DEAC61B7606A35DD5B868BBF939AE594E5851E75A258A29105953FD17CFD9F4
4C776360BE5D268088C01940092A52C71C35C4E409626DD6A89CE01362B90799
279479650C1444E480E8CD320B25BC09D45CB38BB2B2B1B4099027DEFC72D04C
39314EDD698B2FAA7F2B8C269ED50990FC04F4D7A6A955918C737927D3A30E28
AF6A1251535B63620D6D0C76E373791666B11CF8595DC99806034451CAA470B5
F7E63E15C5E1B3C64C0EA273D8B53B83CD774B80B3716E0D02C684076ACC9A20
CA270D52DAA835C2F5AD4A686AD6A069C35666D2C1D17FC43203CF6537CA712E
787DF041B0D58C531BD4AB2BBD9DC974B52433998A07C68F9783FF987C5558A6
DCD6B261095EFA2E5B13387FBB4DC2822D61D9FD8AF7C151B01D286ACAE96B30
9C64327955365285933A48ABA2909881D871C6B84CD8468B6922848870F029DD
64C0F7BBE3407BAEADEE68B498F136D46FE609764C1EE288A3A49D63DC01ED11
3F568581BA9806EABB808210BA22E3170DF993DB798DD1FCEFA2667B487A9DF5
CF6F26178217D4DF5DEC4DEE9F20BDCCB31A8E2ACE45857365A8A3CDA333DFA7
012316E7524AC2360D2A1D6C5A8FC9F0B9B47D3138F766C682F0ED7CAF255AF7
0B480888C335B9EBDD118A7E57B69159A9F1B94D11F94905EDE644200697A576
73C0438691F4B576E35D7122F1EFDF5D35EBE667F6A50049DD7BD01F6292FCEC
A54CA72FF968C5549BAA7E0F5B9D9F26A50B23BD1822695DF59F17E0F166CD48
F80B0D4DA161BF49BD779C3C7F4523AF2038AA1A96A3A26EEDA4C9FA9D30CC55
384267425303B80549B20C400221C12A9D8EA7A2B57540F4BD82CE9AF4CA7079
33CD98FF1787CA37D69717C8BEBF714838AB3B4C7FAD52033FE6CC7D57FC9089
43EB939EE4A36676CC7F3DC004D6F4C75B1B0432C400759DF9919FA794021A7E
5A5DB46DF6F85B5245D2D15DA5EDEB4B417A21B8789F2F992C0F6F3E38881D5B
80450F8F003456A68EEDC5A5E75AD296256090004F41A1FAF91A109619EA0D0D
7F392615CD906C7502098BE9CA71A11C776391B8FA4438E92AEEF0BC973C8DD7
D9A2E145D1D0961BE703278B2023FE34DDC73488252BC063941611DD87363261
51DD732ED5F085F24804E19C4AD8F1767A4D92474E5884F19F5F9D223013F8FD
3EAF3840E15381543712F436ABD472395980DAAB0F15B64B06882D2812D741D2
17882F6A342FAFA7AC38D33DC6705C5F70C84ABCDF3F07E2D6269B7C5BF40983
DE82A2CC16FE187136E1E889E484EAB221EB1E6A811CED76FF36E0A79983B74F
D629CB15E326218521C7CD6C3AD71A1D9B6B9DCDEFD4DA7117B713FCD71B2B06
D74B7B385D26FE7A9137CFBA6BAAB5078DB3DE917B42017899160E3F5DD6D824
26C71F72B7AB62D9BD4452DE5094942EFBFB0995DF003B77EEDB25C5D54CB21A
5BE50BB39E499346B2E37CB7429D7D8DD713BA1357618AFDBAC7A28A8C81D206
DFF506CD428F68A5E78792EC3F52A561E49013081DAE4FFEBC10DCA2BDBDBB79
0D1B0A268FA3FE78059077CED5E9EC06945DC7A9E2116AB215993E7A1C87B7A8
C644DE5A67FB7444C904E8CBE2319788F40A7C7E88561572B47C18F5C798CC34
749093472F780F092622E8C43D83F2E81488637ED5C6424C6D0A2E0AC6F15DDB
A4059E7EF4F63EA1A434F744E3A2CC7623B31715A8FD033303A2AD9E74B12853
0392F64A4F88A6282A036F6698E3A879D2E1987FEED01625938C05778D06A527
BA83FED67E8DCD665F4CA477FBE8891D68A761D9AAAD64A8BFB26A56361DEA17
4B3970F587F4B66165ABEAB6E0BFB6DF84EFC5830D796F81037E3672CEA83B03
E27769ED2EB5696A397A2AEBFE892735BF37ACF18799E003D704FC6F8C7402DD
325CD55B00736D3361742673891401749D3D06723B0EEEEF4282446F02349139
149486F183AF761F112B5C25157E4D9109A2BE5A6EBFB97B90B56765ACD02A78
8EDB101F041D1EF279DC12832379941C598F44A65E2D97771925C9203E539817
CB0472CB805AA9A5863BB9645FDC8926BF939719BF3CBA3CBEF3E9672B83BCB3
496743D705B04F5FDA21D1E5C75F5DF953DAEC243FE25DC85F44E84ED06EA562
B8E2FA148D62DF3440F95E97DD9B83ED66274E1F912313533AA5B9C92312E0FC
17B737BAF8AA0E6953C599B6F73807B202F3CD19E68F91E822AE4FD4556D2EDA
E6DC038F502460A6703AF8538AAB6D00DE1FB58368D34E5B922D3E12B9FC45B7
9A38D8AC26AB554031EF6D0181C1355BF15154F8FBBC5896F87AE2C12CD8B46C
0B8140A92B6C9D37E4268D2ABD61D48CD861A5BDED1BB9E9B6AADDD481DA478C
DF81FEAD1F872F3020C2C86966C36A1DE4782F5E9C5E88A9E462427A868A2D33
7FCD128E551D1476F453DA9B16C6927981E3955A5ED06F8E9A530FE1BB6705F9
661760CA5A4D28C573895A6FE24264A1C8DE16548E65FDD0BC61D74522DFFE8B
B7708AF53B123F4C64EDBD8A47E507CBEC1DA09C5FFF0B69D2E8BA2A1A2778D1
D855EEDAC7EA440A5A6247F6C48155A192B6006E99A99121F4C6627C5605273C
5532C4F30DBACC4C774CE88D446E608FFD38593EE95DFB1C5BB382627AC9B7F5
565043816BDD84A19DD864B38875095F67D4B68E9063DE5962E22705D4859C75
F40CDE19DA75FA891762F84656ACC3B4B2B67E676A29CCA9BDB8E391EB192786
EE78CD8F9970D8961FA4C3229B25DB8790B02BE8128D8630107499F345E2AAFC
C8873564DD28CD502881D30E137838B8BA1EE1CD75876B6089B8FB12422B0DF8
A4E24785C6B87CF68B96773569C69E4542A6888B1B3FAF0465A3554E9DB7010A
2F93DAF2A51516374652F8A4AE15770DEF0A687E8521C181533A5FC87BA5BFB4
5363451A7835400C21CE4724C05B477DD974A9546DF809ED64AA57C5E4521060
0D4ABE2C5A450D0A9AF03435E1294132AD605B915EDBA5D1ACA5372FFE67ADDA
409F1558B5DD28B065C22E160EB74339C799EA83D0191D01B22DCA5BE67E15E1
AF4CFA20F1D16943CCA0DEE7EDB63358DDD7FF85285CFE4B73ADF5E8F88C977D
D0EB7BF13CA419BC2D309171FE54236B7987E5FC7D19FE3A7CC3A4737169DF13
0F27F494FA4EF1F3ED532F10127C9560F32E8C59110F6E7FAA11EFE1A57A0DCE
E7BAE0C82B1E3557000281C40EC1BFEB6B16714F2C9EC384DECC1A97814F8E3B
D2FDDA12F2C8FBFB36A2A946D31979CD7E81F552B607827769483E5EF6E5C840
6D8E60E60CC675EC3FEFCDF48D1C43C7B4C40032E5385748A6AF55991A9D0205
C60458A32502468326D0FC4026AFB2EE7CA685090DD542E5B7CED8E8D342663D
84999D348A1A563DEB401571D5064138BD2C0B1E5F20A3565EFA1C5D01D476F6
319010506B528EF173E483782FCACA8DB225952E5A14F5C4301CF50BE3C2593E
D2896DFBD3271FD12A072A575A7B73049606E431B254167C6A277EAB4E979509
A88A9D793D3194EACC274D5F58F230C214058AA0FE804A11F6D768031E4FFD6E
EAFADA79D447CA582E60E70E5C5E08ACAEA6F0E9C8F90A93AAA8A2C57AEDCC25
C844B04A982FFC2E4EB89D23017B31F3FEC116ABE08C523864BF9F81ACCFB125
F5E5D26892BD2FF089F0B98EA502E0B4D61A361165182B6E201C0526EE475BF2
EE12174C7CD696301B280F6DDD22C12A50C31564BBE1B4C581A776ADC88C296A
CA9F65547AEAE94EF7B3A3B2D34B9537A988168E3174096AFFD5B2E65606F517
94476F62F4D9E2CB4A7333EF3FC77FBAC01B8BDEC1FA2F733B3F2CD4F4C77C6C
64C0F3622F689EBA0AD020521767083155753E263CFE17A0643A09FE99F66586
474FCF20136A71BFE3CF13B53758A3BE19B922D16A6757485E350C17F3274C67
45188399E725ABE897F0E85F759CE3911315A67A7A93E2728E8C858A16E96DA7
11612F51064C1375A60F63CB7979E3DB5EF32CC963CE120894E410D42A2265FF
7B05792580C6012C8B68FE9EC0BC715F298228228FDB63AEE2E68582269F402C
2A4583C493E7FEE76BD675023214098FD9C9446A52633AB02C1A6D8A2E00E9D1
A5C91440ACAF6ED5B8A3A0B2961B6585C3BC8751B9BE474406372E7B3815FB5F
F41DF4C1728CE9FA210EE25DAD6E0BD721CB05C4F93C4AFA1670A6E0C0B539CE
618503BE25D7812CEC7CEB983E71575EB8575A5612C9671510D8B358A40B2812
488FC16119FD510637DAB73CDFA0B9777BECA40895CCCA9E0FF9D06EB80AA80C
19B3FA4B86A04DA39717BE6A4D7BDC9E00A5834CA315127B96D845FC9CB4181B
34915D94BE7778936B7307AAD0C3AABC8C11CF4D87C860A3635EDBFF4F3CB5F5
9A41E4C6CCD7D825421C31359DDF8535DBDC2F7220D4DE83698E676B03B3060A
5CA371396CE160EA185511A471E174D03555DCE2F18C3DC4448BA756E74EC71E
EA9AFA6265459DDBC73C1A5A5301C59D57A1414B1332BB861F9F5B3DE2ACE95A
C6D212D85553FCA786ED03E623310B2657FFEBAC121551249FFFF2B5E75BFA39
AF25EEF7F1C2E81647141D24BC9E0626F50DBBE08B90FE977CC49699FB8C5A36
B275FCCB27855526912643F7BA79E5A004A3D8DB5089BA3FD9B9569FC2BF2D19
E7DDED937442F04211607ACF2858239049077DD9660FB1356AACD5499DFB0A80
019A93A7A1672D407EDBE33DC17331331552581597282F3BFC58BE2AC39D0A1C
EF185152CB1A493AC71B523A5072491AE0E2CF7D447C1B6A40A3AE99769A4834
A753C8BD3AEA1DE4E43D831CD8DB8B4205FD3F597C38189CFB31BD28018ABA71
F48123181618AF6D255B045079096EC5355E2E2E28462C4993A2EC2654F0DF29
3296892E39EC883791721E97CE798934499738157FF412FCCE43288F42C93448
3E9DC48796247306204740690A01F044C379DD1EAE2BCEF21BA42D06D61AA809
55F86226CF381C72291EBB1567249EF94B6552F418EAD563D53FA4041B0873B9
66E6F41EB22F5A92F0FEF9A4742DCB0E5975B4C1C379253E7B4F582D9BD75E81
CCE8B28A6C5E70AB0F47CD15D7207C7A825D08BE9382D1012864D9AE93D84A19
945E722502311E59E64B1A9591C3860053C79BE565358E59B9E647E0BA34DC8B
7C43DF46169951A878D45A2EBB73A70DAE4C0CE00686403678EE29038DA29F0D
EF41F42051B84E160AB79B9C0736A85F8C80466A7538C67B91BE2D2DB38A4047
6DA35F5229ACF7BFD2A2DAF93F55D086CFED5DB67A8D7BED583B1F8FC12C4F3B
4CB98AB326C262534AD3432832B66CE1A4FE3F10AA41FD634AF23FEEF91E6176
1DBDD78F7634C7F8500C3AA24FABBDF23271CE408C335B8BBA0E96B63FB5F58F
876C6EED19A5987FA54B40D36D51ABFB943DA61A4F03CAC6A8379EE7D87A8076
7C7C5F25481982F05E0F0DC6E93A7777A90543D38DD3F7E980DEEFAA42C4A561
4E062B80C6B58933C514859212CCFFF5A79D1CFCD1E5AC524617569FE5C5935C
16918F0AB2DE1371AD8A11D552BCFF0E7E9D8209061B2556A5D0591044680F62
F7D9BF246114F4032A0BDA85E0C0903185864FE7A2596578B11218BD74C8D2B4
C22EE38950733524EF1ED2E41BDE6C9243839E2D64649CA4861430544D48FD38
37F0C2496BA5C760B3FDEE138C0213688E65C9C42274A40872A70EA09670BA6F
90B8E9A2598085E2EBF77506EAFDAE7D8522A5EE6D6CB150016A0C7828BB707B
ED0287402DF3168CEE4A44418DE08E2448440F87182531481CA96F88B4E181DD
06B48BF73DDA42EBD5D0D234673FC0BBCB47FFFC4D81334D762B22C960240C02
852201ACCE79BB4FC4FF6D98547FECAD7892228B84C0C7F3CF111A7DC0B91D4B
B0CC8C36196912A8E62A9B0A1D331A6DF16E8541BBD68719401929380191FA4C
AB889AB0DE9025FA945ACC965ABE961C05F527AB6AA16C612D1DC80CBC4729DF
40E4CFAAF4D2504B044DD0CBB22D045277A3E77EA1A5A668E456DA34313FD134
84DD0AB063DB4FF777BBFD9AF095C04EBA5466D40EAB56EA42325062A25F8908
3EE08C84D2688C8A0B39D7C9910578DCD4AB4A4113AB2B38026B2D02B42D9D08
C66149225823A8675BD1F1DBD790D61561AE5C0616226FD2D62757E95F7B76DB
5CF1E6077E98045B0EC8095312CCB07440C8E6E3573DB6FB5CFDE2C141D26538
C0A2FE7F9F5579DF9E1754DE2F3C16ACD5D76BB724A765E10A8650EDD6F2F8D6
037897DECAB6E5CD02A42A540B806AB243427908A433AC8E0C96E39FD5FAD68F
A212A70757AF7503EC13FCB52AD51618595AB6D2AD0FBA76A943D9AADB427BD7
6D04978EF488CDB935A2E4D6AFD9DF1F559528B2F78DB6B388122B5FAEA57E5A
59175E550DEDC0FC1B701273B30CF1F77D4B9785C876F7F296FAE91400941A7A
D08B8AEAD9AF75A2A43084CCE18F54A30893072BD087B5CD7A00D155BD771CC3
D1A22F2C82AE6D730260A7B721590477FD3BB36FB1F018E9F257EEA1D59C46B8
60F9730E27B00E0B221F8805A4E0546F0D044F78A63E2C592BF777A8E85F2FCD
D01E9469DA20B6AEB2AA38785C593AAD708905AB97421FAAF52763E3DE8D7E66
97C2556051459CC4C5D437C9E38507CC02E7FF6CDF0D9DB6F93CA7176F11C666
5C8BED3212343FF9D76A3FDCDA60A6302A775F1BF450BC976AFBCAC641AA703C
0F648F013F0A8611038AB6F489B95305E51B3ED4E0D8090E6910734398B0F19E
64AB197B4A20A0AC7FD93AD6ADBE27575A6FDE1ADF09C3D2C5F275D4C48A6732
47CB07EE954E8AA5BEB970306F7327695736B0F2FE4E300E7C7F5BD79BB0F21A
450B0B0CBD22ADBE0DBE4CFFB9911695469628423C2D169A9C112D2C50173F24
60B65CD53064BA310D858C5870E3585AE4857A592D58DB82256F3DD94B59B28F
3EA2E76C838CDDC9C732C0E1DCC33AE7F72B3014DA99F2D3994788C0A7E6849C
64808699F7BF798A9ECEE78A45F6455A057D0C59C33D262AC2E23AD392C1EA73
86D4E92D0CBD689D8EA27711E96ABFD0F3ECEA8CC6EB6A3FDC29513E8A8EC413
84C0F19A2F3F491F9BEF8BF00B278D3F732FF8330727E9D763EF3220D9908975
3FEF61077A251B5C8B894FB4F06564EA7BC75BB0C4DDDFD86E202F5B9A759372
8C9A600E890527661F7AF708C1C809D90F1510015A46ADD287452E2D6EF15137
0559288516CCA7E1BE3F2AF8823EBD2BB2058BF6196F888373C1D4E0CD40CA2B
01F59E5644007CD654224393581A7D03E04AF3FBC00FA82ACF1F6549A3D0FBD8
F8D5B6E140D2ED153AFDE425C3C80566
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 2 /multiply put
dup 4 /divide put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F702C301
D2A4018FCDA12597527314FD82C0BA3D2AF8649CE52FDD2FDD0F823C2127BF9D
C6AAEFD8E6ED3CB145CBAFA37081D7529F9449BE76828FE8BD41A7AD83B227CD
F579CA57944A22B273DEAFDC61B6199F4036C2DD237344E5950F20D821F125DD
9B4396F2684BF4963FC18B01443D485AB9858152E3FA121F9BDD04B7EA8A00B2
A5C1AA4D03113B2FD8EB1352F664B2BFE42F0A95B387F06E8E01DE68CBC12404
9EA103CD8FD9A3278B8FCFD70AA9899CB6A14BDF4A069FC0253459B7591C567F
0A2DDC994F07AE3253823883BB29BE918222CDC48C52279A44060FA13D0A4A06
7952AC1186AFF2C218046DB24E7B11B57003329D8F8394EF2D6A82F38D6DB4C2
1F47610D835EFECA02632457B41DE1495E1E995702704EE6784EEF7CF2B7AD52
EE40314E23BDC59668C11D84C2EC004C20B21BA12C41D3DF2061E8CA925389E2
79BCA30EA295B871E6EC1166BD1B44366E13D5EFFDA6778EFD8B496A6539DE09
0F1E6616D7452C5E9D96BACE0F88A85EE07E02C3EFC2987E2F066436CC9FCE43
CFC448DA5737E1E3809E7103FDAAA8DCE7062ECD0AE409B8D18CC82FEDD8D31E
977E08E34B9D4653AC2EC589681CFA69D2F94A1A37F8476F52E53B2D7BFF621A
2D033591E49BC843E950FAC9D6CBA206633C192E29648CF88B0E6125E0738B76
FE210941238662E93AE2B59F4C300A0DC7502178E8D6DF3B7D815B9061E7D921
C4E6F56BBFE686BDAF66CFC6B813D4AAFECF21CC80E728D99F3227FDC1E0D22B
50682C2F910B6D5656C91E91B6276DD89063DA7A69EA1C8390073FA7738CE4A9
35A1317DCE109FB9B906EEC8E9BD820A2373C2CE9D15688A4D0F9DBE23BDB041
E6CF8AF57CA1B7F15A8E6DFD5706790DE5F69B068E4B559A90F0906BAF74DCB9
1D22B66155C3141609005C00D6DF3984477FD4DB2023685B26A9CF58E7BE3B77
15448395D0B6E0D960
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 59 /comma put
dup 60 /less put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 114 /r put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A90B8A9EE5C613CDB822F07B
115D4C174FB7945535F2F9C2875C9675143B8D98DEFD3898170FBCB19B4C29CE
1E6883E0F68B5D42751BD7AD09E3EB745F0A6338BA2148B769B5E1EB21109414
C1615EC1A1FEAD5831938F74E26E1F6BF51136E5C76F823D29D35078412923DB
B3A32176ED7935058ED16528D28E50E37BBEB1D1554503645DD6809FA22A0DC3
112E7888A499450162B7373CC8855953B351E8873A4D7DCC40EEEE5A8A2D00E0
EDD8CFE7153824BF94833ABE10FA64768E457D5395519937705DAD2FFC5E71D4
521F01213B7DF82426867DE914CC9866E428F614F18078B4367187426E2260AA
AD0175A79825B0FD43E9090C0450089D9FB20EABD5AEEC5214A78C7045D4D6F4
749826284B5DB8E2862E9DD82BAD668F066D92C428329627487CDD5A9DE04B77
BC89952B43DE9DE2DAD7DF5EEE3C9D0A2F89B8A28338B910233E27AAC98D39F6
1EABC39EDDC4C0D195233C644CA0D6B11D6EC1AF684AD32786D9B86AA9133A06
DD622F661C77D7E02D6043D27F9F0410692A13E5CEB51B8A2C2EFEB296D2E644
DD50F59FBC54A39A7126177BFBAB7B3B724C22DF9BBF4F606782C05B86682918
F4437F9F11FAD71ECFB80FE5092AFD767A5B63F1991FAD2DC082337A9F51410E
CC322F1EEF2AED95F374A5C932DFAB3A3FF63E05C90C1FC9848A686DA56F2FBC
8316AFFC65AEA05B1E8F42C1DDCEDAC08347A2304EC390DA9C6A8874BA1F2755
05A449D84A21B82FD641D6313702B8F996545062834880DF576FDE0A7E9C48FB
225BCD4C37432AACF7CDA6315D4D7DEF3B88A64BBD9EF15D8E39B86E90018FA7
BC1F89383D667244B9B97642102E4E6A6359FF04A5BB5F8CFF0328FD7FF61CA7
B63639965701C6E383A81E008A40ECFF0CFBB883BB9FE9A92A8E8418B677EB53
E1A9EC48F82CED0897B3639CAADE0B5AE58C6B8A56BC5FCC758990A098A061AA
9080A7F3C234F467DDD79D15559DA2DBD75B455AA003E126AD6C2D08BA82D745
3F0767673A65A2BF7822A8D2A34F5D8C841FE7898E126103CC461A9E9F8F5A31
D6D645C10EC243BAE0612932C83BD8B09D50B23CA81DCC77BF45F7DCF5E1E889
82205CF7D2F3F1F4B7F5EC10339832E7105621385994DBEC70C3BC3E1F53D26E
D48D63F082329C5AE21A41273252281AF2016D1B0FF350D64738BC606A4787BD
8595706B87877D416F0279F86F504545197D47CE87FAE4F950EBF38745B5A620
865BCD1F1EA5979EEE53EE32C461817518FF8B6C2C5B7AD777C81B4CF09AAFE2
EC922B9A521963425E875BF388179CD43130C1A7D31919C877F57695C13704DB
40A1A525BFFB221AD029D0F9478322215E9FEF1127AF6D6AF4D0F284C8032D37
B15A125DF2254DF7849E85671C2A71A840B9BA87D96C0615024181E44FDE5A53
4160322051CD98AC4672B9975BE11DAFAD04E427495CE2FD7DF6ECF4BEB7489C
8F2A38A7983671EBED52E1C0A0F4DB87EC7E89D752184039B728A0E8522F5CD7
E8144FC92E1D8917F5F80E8EB451FCE63B7711BCF0E8E6BE99EB01491D499708
E970A812C9474291BE1CB441C962C0F715992E516453EC5F7B9A1D8516A10A45
6334D1EE969234BAA8F9E2CD5FB3AC83313F83AD8D64232A9C327B710315C867
3A9E209E3C1AAE04E0DD19410B0B6982122041568D101B3010E60FC761E9F6ED
4341ED2EAEF0DFBC1EF1D262C61E008695FA11D043A815B83955125EE88F9E32
D024AF713A597373BD0EEFC85A5021ABA8BEB12B1EDC123769AA08B4CB6CFB92
047FF5301645B0A67B1D5543F8F3732DDFE80B8FFB5579A15A9B880F1D66804D
5767E368E726BA70CF82B448F36A3CBCCDD838B3F56730A7BD35154DD348EFAF
A44DEE807539B1D1A32B77E71EF638BC37B8C0EB964FDD2E5593818832F7125E
58DB7F4E8B1AEB3931C7018EAE6ADA5D95097BED277F7395F8964E42BB4588FE
651F8D73F8945C98D176986725A255B84D9E46CE1AB1DD38FAD5D3B022DEA594
B5684B2139D0AF1C69E2AD639C7F1391122018B9B85315CB2104827B60B8D13B
D68887C43DC4153716E5BD2EA00BA3D6E04C6DEF52555E2BD1BFA3AC9185D554
FA8E804CFE4BE9EC048FCE88E655DA8B164FF2DC93BEC809C7F756EBA75BF5A4
BF3822DFE58CA54D02894EF69A5CB08764CDDD3741DC68EAE64D1ACBEAD8D2D5
FED9021DF36AAB9FD22F96BD8938A521BD348784734A88287BA3246AF48637BA
6DFB0E04187EA7029300C9E7E24117D7D13B08EE64C866DE8BC7EEF101F03946
3B2D505DE2838C90D3AADBD890727EA968160072D5A8BA18AC9448F602E71AA8
EF68F15DCD59C9F434C8C0246B3093BF89FC33151C7C8BCEC85646A75663121D
1B5119AEC20D911A1C5F2B650E08707AA94C29D9638ABBD4602644A154CB44A5
A75E58FC6C55D65536D4E75CFD703DD49A0F7F9B152019570F229F24B12B5DC3
97A958BE75D6D84151F9985A4C77BD0A48D508E4E205D2533810DA2196768859
FDAED1C91E0CA36763A3DF69551E9EA01FB50521B6F66BCEB279FC2561EEA3D9
8805E430984C466590DF07F5C364325C512C41E913FDC513DE7B37E60A0AD795
C06EEA404A59E0960619788613454D030E6FA58818C10C535C364547EBCF6CDD
8709F8656882E8F3A6D1F95C89CB3650A24A94EB62065068125A53EC8E56D057
BDAC2DE24BF8BDBAAB85ECA9A225A474E8216584859C83FF1F1783BE66C03634
5C564796D422039408E81EA1ECE0C669CF65C92C1CC03CEA40635200139391F7
B653A3CAE1A5513959198A008564E031844517B3E3F1E9E39084CD11334A9B1F
914050A48C3ADF1CD7E0182745
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 43 /plus put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 61 /equal put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E702C6D29A39C16F7C66E0B2E15DCD2FC36A606C0EC22D1790CFDE6DA7CD418D
D85039E733793041E83EF250DD499477E7AB494E1AA44CC705A5FD535F05B261
2654089FB093C25C18720E3E3C72B00FE7E88EB45B3939415E3709B1E7508787
8B5E21214B74B124B5FE36BC5D810EBE149520CC13156B025DF2E518AA39C1C7
EE84AB0158FB4208CCAA455C3CF06981708E619B5116A10310B9B180DC2074E4
4FFAE3CA1C359295C7D2967195AFD2D94BADCE1E930304DAE34AD74C4F6EE4D8
8F814913C32C56CEEA4630B71E25E517C60BC448891030BAE0D3B1DF3067DEA7
F016221CB34AA4EB20552294F3AEAF6C9C22A817DE43146AE4E04FA79AA91C81
4B18ABD2C5597A11EC057BAEA084D203E197CD50146460DE396AC95850D198A6
6AD2991F011A878BC86753A989AA0B5800E4BE6B9E623761D24C0B7CB02DD90D
C8A2CBBEBFA8F587E6BBC957E31B764127ECC5CD4D1718F1294B62960C845C5A
2B81ECB5A523CB2915A925B1655FC301C72BE097018749375D92AA335837AE28
6EC255135C878B06D9774D944B8F077BFD9BDC2EB03C158F0B4D165480511171
EF9A30D87414ABA2676B03B3060A57AFC433A6E5D42CAB2CD2AB08BA4AE24FEF
2B67CD6C3EBB1C0E4AA0EA12349BEC2C0217289E81B36EEC9DE76321F3DF1B8D
279AD66877E0B05E0220FB8FDE96E8F11832AC295BB1D4ECD9FE817B07AA754B
523AB4F643BFDF588DF93B6925100D074E11C6D288042023656B73B1A1EC29E2
AC3B8B7A0430AEF9BF9DFCBAD0ACFF0F2E068EA70ED2D5CCB9AF9913BBC020A4
106A166B1B624A52ADE7D5B869078828BDF7EF38AF941D66D70C0675919F26D6
96F2A5A3DB8176F9C326B13607C4D2AD083467DFCE3EF958899D7EF260262689
66CD70F84D4CBC3149C444D2BFC6FFFC568810EE75CC001A8D44DF11AC914012
F66C731225B9420BF545DCF033EADDB8887D3DB2F8F5FC91792B97B32ADF930A
9FF05FE9FD570C5289218D585E471C9C3EC14CC670EE8D563CC659E4FEEDA0BD
B6997BCC7ADB0EBA902B2DE3CC959848E590C2EF04663CF953FBDFF9AB4F899A
017252FF9FCD56D1D594EB3808A7B14898276C07D73A209D539A899B48A1D1CB
242260694BC641C156B1C24A28E6C7C8AF7CF499E0121C9A7BA34B7277EE5FA0
09A0EE3D603BEA4173B001B905D58856A99BEAE260A8CF01A6F2D73F6A5AF9CC
3738D894770AD27F2BAA1A8AC49D55D311D7B27C85273525BC99D34FCB2E6586
A0CF3BD5238E30F890FCD69D0A9620C2B1520D7CD80D444A93455702169AD410
38DD01C76A507BF7CFE1133B6A72FAF3D19B7B18680FEB898FB2013891882A1A
15D18294CFDFFA3E16C17CD2F83B97107BCD90CF931577FEB6C24BF4BDCDCFA6
04839EDB1FB147C84A11C0CD3321743059919F5287D92E1A8CB5A1EBA67A81F6
FDA458D9A2B334C5A38AF1EF1D0FF443CAF0B353127AB30D4B2C4951E5998E05
01E5E935943A92A58D6F6E849F98E128BC1BB848CD69109A3CBB2C49725AD0A1
067A2D77EDD29E1D7EA6AB06A98D11237948001A1242B92B70BA406837686CA5
14B19561573AA857702BE2D5C99644EB5BCC2336741F61EA37AB0E352F53858B
62034EC65AC6E717DB875259E9864EC56EC24FD7C699A53E8CA376F676979905
FF204C5230FC5D1F82E20536389F1295F9D877FEDEEE4CE0EA189AA7706E0175
DC9B4D92F7FB24F06E09CEBD1850511CBD9A9350C9D9BBBA734115AEC6F50706
27D81F91E9D4B95AF2275B63E73343609AB93DCCD8EA76DEFC740F031C4CF570
1FAE97D8A4FED4CD43D4667B11925165EC3A12D833A3BB772A33A7D589B25062
34793574607AA400E47CCC80F556D7CF3451AD57ED2A9D8A6915583C086E06A9
2D4FBE6EF2440D9AAE1A3C5FD94F8CFA16EF55E2DB5AEB5F3673D55880C17F89
5CC64D0D8B6032DF89E7172DD950D6C2D3A5644DAE010536B0D6387C5DFE67FB
F763AE645A00C4558EE5E38502C4FD64E6D93929503AEF867DD3C002D2FBFA98
F4F24A5BEB3C4013E941B01A5ED6AB490961F872CD6123A503A747B446383B32
DB49D8D05B90959FD87BD7FBF1A82549CAA9A7334FCE1759A0CCFA4F9753FD69
C009075F9CB9EEAB2CCB1F28945D9233F02BE4F289B3134328D7327730EA3647
0B9E3C00E05F03DF6602BC50A07F35F4667F3C15B0BE37677158E1269162FCD2
4344F115157653C3CED6BFD5AE79D3BC0A847B8C3095D405110718B69BC73C0E
A029E4BCA3149A969AD105E9B15619677BF9FFA0762A2B44477F3F35597DC82D
62E6BD872BD870EABF4056C2495CCFF022A877E05AE7EBF8A023A5612CB09609
250887C0AC4B0630AA6FF16FE9F64D973D08685AA895AEA053378714D1B9C026
15667E50BB14100F5F106F904CB02C8CE8618F5BBC69ABE74ED1FAE6C6A7A861
2CAD9C73DD836FE7B851F29A08CB9A385BDB7395B6D0BAF2FFADBE665AC8A2E2
83362D6476E9C693016BD6D61E3BCB974D0E810190C2C875F3CCCB7E60C1A26E
AA684F7812DEC9A58EB8740D07E821832E84651323F434627B570A2229FF77AC
222D11181345B4AEF0A262BE62A97AFBC21A3BFC4E2303D946B8146C422F2E40
7FB90A80E6BDC2B55829FA1FF1BD26FCE894427E8F45D9526CF8FA3B5466C338
D29BEF9C0FFE2323D011E7B4CC61060736C59FD47A413CD87CB07DA0D283E017
ABCF3AB7456C815FE080D4485E8CFF703473B2C57DC60B12C24C9E7CCB0E8FAC
D65823538D2B3BD0EF0DCA28FFFDBBB313A4351C14D041F097479816D78177DD
0C5359E720C416495A27B89FAD2A00A0F8843769A7AD129420306E991583C6FF
0F244D1DD52B7D2AD3029F263F2141B214B431237EA2CB75E6A0E8D70A8BE333
6CA9566B558F29B39F6FF9C58A90CDC4125935A452EE98E6984B4FDE2D3FFB2F
8A44AD9D6E69E4D52E50211C3343CECEE2878B6A17B85468728A1B17A128E323
B37CD7DF498F98C77632583218EDA3AB3556353E1234ED4ECB5455F00C683449
22B2DADFEB6A0D41CABB685E73DA50BC1E016CFFBC81BF37ABD007C851C07086
38C7BD52ED1625E2D855DB469E66319E209A2B71A0DA0F78DC73FA0BD71AD410
30CDBCE5D2D15DC8DF2765C8FA70844D90CE8C45BC31F2B0F3EE7A90FD3A301B
71C669ED2CB7E2B8AF35EC01EF599824435FDFB989EABB039C6F51DB58DD9940
8CAADB9BAF789DA89D478160075A82300A51831989FF19B837D782868C550BA0
B05C70E5B534F78B45600765576686ECAB17D87B35D2F293FF926171B0E25FC7
54A24045BA8045387EB33CEC0550AF8863C63999A9378FD77258D9C191961933
67E078E4F4EE055B95156147316043E3555D07D8D8B150E94868D0D2DA253435
8235402858ED1E942353AB6A10BF2577CB144D1745107B6274D453F05B59BCF1
71CE0FDF110650744810F91ADEBCE01A8377FBE82062B73F966AC4CC504ED6F8
09E2D7A7DE2A5278E327F0248EF20C07FB02F0954E050CC733F3ACED3874214E
60CBF9C633D63A6885F3798820273BB8036B7A0D50E4ECA465BCD6433B200F0C
7F82B622F2D47A81F1457B78C664B39022603A180C76FD088A322E0B0520CFB7
2B00E897619B4D54730E48A3F025844CC4073C5C4E350B446F457C889D86F09D
44338BB8338B193EF39368303050DB84BA3D0560D49ABEE613C04B3F875534A4
D16B6451E6E1E96463B1182EEB9077EC326413AC3DA3F69B4804F91039735AF9
9C373620B237C3726993CE2E3B7B743B96E11D54309B1E46A8E16E00A07AA128
3B7566A8FEA7AC5794E65DB52E908B140E90215B7F99A3C45BAAE4CD686DD802
EFFE3E989398D877AB9D74CE85CD83D67FEC025BB3BD6E519E4000ACF0EACBBF
2982C69E68CDD70DE4410CEE382774F93FAED00939779DAAFC98A975F5333C40
F2B0085FB06BEEFF171C048A2964FF61ACAA94028972D5DCFC3639D6561CB1B6
4F8EC2B23C1C8FCBF3F5E13E8A6973CF55D0135337
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: Dingbats
%!PS-AdobeFont-1.0: Dingbats 001.005
%%CreationDate: Tue Oct 19 1999
% Copyright URW Software, Copyright 1997 by URW
% URW Software, Copyright 1997 by URW
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (001.005) readonly def
/Notice (URW Software, Copyright 1997 by URW. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright URW Software, Copyright 1997 by URW) readonly def
/FullName (Dingbats ) readonly def
/FamilyName (Dingbats) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -72 def
/UnderlineThickness 36 def
end readonly def
/FontName /Dingbats def
/PaintType 0 def
/WMode 0 def
/FontBBox {-1 -143 981 819} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 113 /a75 put
readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB737CF9024F3D038DF9A0002D
8FB689C5F5000C3ADDAFE55EDCBC4E54B36A58190743E32FDCA7A24B64F5E7F9
DC901DE44A25E99E322B3D3CBC10C0412B0531B14E81134FD1DEC47BCB7514E4
64E7550B900404A017C92336BC792744F6F38904282AFE8C998D4B9DB7893830
A6A01872E9D6AABF66C4B08716A39BD9E5ACC0641E506B70430524E780517E59
81EAECFCF9798A634318B8D160438435B65CC6910E609F13A4963AEF2B2540DA
DDD64E0E1D15EFDD5D36D4FCD9E4D81E21D52784DD3DBB741AB5FC052F481B1A
A701AB81CF4EB85075726F3FEC0872C02EBF4D62F5DFB8990C1A0CC8161F83A2
D01108B6C4AEC3845BB4F61288F733429B7B558A225D582AC04BEBF127E8DB14
B59F027502AF59E46E0063B792D35B2DA4EE7DC3F2A64DB325318C1CB1A57504
3527B10BDC733305E18032A64A1002439BE13D163AEE778CAAF5A7A8D00CCCCA
673B8FA9A99551594E85F21580733527E4E19743F4C932D443625DB353CA959B
FBB3BC7996F1F3559E8738D7B3FF1FC8AAFD28CE8C9CDF3CC10A8E7DCE003893
8BB497D690310A0380F290601BE482029578B45097DBD56F52352D7F931A1A1C
735A74CA33FC62A04E1D1E1B023877B96EA2AE6E5E42682E9F4BABD109F039E3
CDCC6B0F9404DA157F91B61905B34C39BD0543872FEBA04FADF1DD613E1E9822
560851385E512B3754A099D21B332D2C9547EEE2B94EBC03B2D954DE0D64D28B
5C0305C968BF1EA14529BE16F9E7F147B08D71B9332ABB7B5EF1B8B60A8D19F5
22B497164EA1A20E17E9B45FE94A09D54FA74709C83B0824F96BC972F4FD728A
BEBD57EFF668607F499E1C51E9FB45286F4C13BD0AFA0A508F56824CF0EAA82F
4FE235BBA8D245C937FACAF4DFF3681FBA6D35EEBA001B55704878F22E7A2C86
476C1CCF1FDAD0E29EE5CB818640B6853A362F764E9A5DBE640CA905A9146590
3F8F2CE8881EADDBC6FA9C1505D0EACDA995DA8D00B9EB755B79D90D68B335F9
49FBCE867D0F7DE2076A879038601083B20389216CB01A808CF4069034CD1152
FF9BEFCB0DB36F87FBFFD269DDA23439D738D84DA9C96CC7435484DA8BF6FB1A
34BC1DA8F3FE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: FontAwesome5Brands-Regular
%!PS-AdobeFont-1.0: FontAwesome5Brands-Regular 330.752 (Font Awesome version: 5.12.0)
9 dict begin
/FontName /FontAwesome5Brands-Regular def
/FontInfo 9 dict dup begin
/version (330.752 \(Font Awesome version: 5.12.0\)) readonly def
/Notice (Copyright \(c\) Font Awesome) readonly def
/FullName (Font Awesome 5 Brands Regular) readonly def
/FamilyName (Font Awesome 5 Brands Regular) readonly def
/Weight (Regular) readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -97.6562 def
/UnderlineThickness 48.8281 def
end readonly def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/StrokeWidth 0 def
/FontBBox {-55 -131 7797 876} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC4458BABD05D76517D9C24FED216BE906
1643B22AABEA637BFFCB75FF65A91279495B00B8B92CFB39C8899C3818357033
2BBD344CBB263D4250A46E5B09E712D88275731E98C996C69406E43E9DBEFDD7
161A841EE17304D49501F13D3AD3CFB00DA1700EAD2364C31908F18B9F3643EA
E9514021B52FFC8EEA03D195015D30E3BB12C272A254955F88A4DCD045432CDB
693596BAF5E1BEFA2D9AC1CD0CCBC3EB42825F1EE6A16966D49AEE9CA4A40B7A
AF5854776BA4F7EEE4EF09BE48B41B049B631B57F9DEB79BA1DE47B7C025B39F
3CC77C4FBB15C9BF3A39C8D400BD7D15BB1412AE1918DD7B05716B41DA299FCF
AD90249E2810CCCF2846402BA975F3C22EB71AAFC24EA5C6A66D5FB86DEA0D82
A1117C000C5353B2F32B7DF144A69030C8EE0F6F2AB0D7DACEB521174503EBDF
240AE5598F0E724CC3318C0B4C15BAC77DF9F28CF066856FDEB74C0243418EC5
0B44F1B28210989AE94326F32798675F66311A3847730B7D8AC86B04C5307968
3F58CD34D03CE88802DD91281A6B1701B6D3578DADA956AEC58ED1A5479EB4BE
2FAA6A82EE665301DFEAB7407B3CC4A985715CB3A56C51E0FB94FD1658CBAAE0
BA5ECC078AD5996EA7A84F02341AA4BD64721716B0D444D12C731C95EC20DA71
CB7D1A718C2839203FA6BE06F3384DBD8C6F7BCC2935C53EE2723F1DE6357A29
1E148664485D2B69F9651563DD649D91D280E3DB0D596580D25A420764749B0D
6CCC9AC869DF66CDCE7D2B948B6DBDC44F021225E4B4E4EFB17393E072B46AB2
3B3B22601F0134456CE8FDD2F1B8FF0677C38A33B7E2D0162D63B232EF6960A4
07D96AD42B039EE02C3F9967467EE302606837ACB2AE22F1F13A6106C83A4479
50424A6890A9ECEE5AFFA875F8B1EC693462A6C691514745A394B05A027EC284
60B73647C82B724A7653F00D6568BE9F215E28709940EED79DD726B174F3685A
524EAB2C6F58FFF382BEF97918AD271224315476B9DA3FF3B801EF6AF3DCD279
8932B7C69DAFB2493C2CD4D3D791FC598260544604F7907FF1D6D1C75E565C93
33BB4CD14404F9A233860439C671B5132444D726E6CB2DDBB21E972C8283EF89
7D4F0137E046D964F8B533677925DBE038AD8B561C8127F6CEF803FA9E7EBE78
E05DF0A1137AE91D1A8A31208F9931321C8510C39DE3C3AEA64BBD2C59BF2E87
FF83CEDBAB2D6434721414C31474DC89256BAC402C853C064E89BDEDADB39480
21B326931F46C63211739647AC330638AEA49EFE3F8477F7A016CF9F7C3138C9
B5D75852CAB8E747D683CA9EA6C2A030C01DFA67D5E35E88E89A6CC6038E9E41
AE66988F52C12F4E3CE67730245B8E8E8903B9225098079C5711F6F5D7D3A5FB
88654F837DFF61B59B8E7C3AF96B5412E84E23F3770F0B60232C65FB5DF3B2B6
19456099191E55E12CA5318C0135ABD4BF6BEF7BC2D91BAFC663DBD069890B10
D38D418AD6B150F4020CFB31456FBAB0C0C7ACE079A0CCB8780952B0D7F388C6
F9BF803196D97D48489134760D59C448BFC9D947DCB0B28FCC1E045333F58D1E
7054FC4099A1AD7B877101C5E6175DC3165BAD6ABE4820A0B744F241B7F3CB33
E5EF5C6CBA3CA2D749AF9836C6D18D1F1446CCDD110900E05E944D5AECA5659B
ADC55C5A7B652C8C02EDF01918D67A3A9C06B4EC99B83CE5D40C52A4AADCD901
ECE0E4C6B82FCDBFB5EA17AB18C9273520054CA3EAE2BBF925EE8BF9210D9215
602E166BAD69B98C3C579DDFD432CE8AFA3A15EE8C8E790A9F506415E58DB119
328D7AE75B0CD33EA37CC76ADB51C875D8BE794589515A8E0C9E9C03301E0B98
4B7814BBC235D61FC2238E196477BA07E95725596C89BE25857BF11F4AE90296
492F067299FCF1968729F6E784501A8BE5F51625C860084750FCC196A7215F3A
51ACB0A8D13780A297A698309046ACEA6B214D061117AEEF4DF990D9AE34F150
C53E3D79074F40CA723BE7F80834323740188B7A60E6CE90D13AD4EB2FCB71CB
6C2B5FC9469DD86BB464BDFB03096878D9B9AE17953F144B48587773A98C49BD
8A82F4A84114BC38B9C16C16866EC895D88CC3C1D94AF77D38D871AE4403E75F
A685CAA7377C0EE5A5EC31BBA24E1D16F076231E4C2518F36D2796A5DB9D2931
8E54278BF3AE65CD72C26C74D3FC21A494C906DA8F212DE8BB12607713EC6B83
FE012BE3AF1F2CC25509A4855C2464D71794B4C2AB299170923CF06630D6D01A
875327C9831BD270695F8A07EC35D0BE506ED0B115932252C54694A6B720BAC2
44265E5E763F4BC5230222480EA6247CD125C96320B8D19F9B3EAE45F18442BA
7F202ED8B395A4D4F2A8B4D9B3586038C768243A0905F535DB7D6F19D39BD2C4
C13A89D7999381AFD555B54BDD0B24ADB45AFDAB46CAD6F0C1D562DA25EACDD3
BF9818B23FE39B0656CA96D5AC874C71BE195299E3FF68E5FB8543314A647345
E9D88E65AE9C64526A65B3CBDF6BDDD29868525BC586270AA6E81EE4994B869A
18814D7ED2098AB4CC5B48688F71229038456B94FDEF44FB573B696302D0480F
D0355AECC030CAA6F066910736F0119D167D9738FA07368C73A65F1336D717FB
A9AE4D80CF4BA241BEC5A58D710F125B79E67A89E240452DF50B6C1362ADB639
ACF379D7F97D909AFD2F4F07B2DD7ACF1A37AA39948C5E45339C5D6B59879238
D42B3DFD675ECBF50EFF16DCD9DA71C901DDDB9AA75ABAEF2CF969991CA174A3
9BB61DA0594A1D7B5B0269C3C559141C925EF6C6559AFCB9A9D527089877D534
9D78A777759819E71CE71C0F388096624B9286C50E792C6F9402C14AB8CAF090
99882F4E2B74690893164D691F8D8DA7B630E609BAF3D131A3A1B29EA51F497B
1FF2B48B3FF110AF5FD9B4905B312B412A2DC881AA550C07251E2F514AB1B4F0
C4DF0A352754000BCC676DFFBF12CCF7F8C4CE0C63A8E9F0CCD1CDE394CBDE39
34CA1260DC4C4ABD62F7855A6E377F28041C5331E6DAA4DF2E05F1A7DAFC0863
966E8E144121949F4BAE7FCC9A0353E826C1D36E58CA5E41C7440B0D605B0CDD
8703C9708D799EC492DB1865E8B37E41CC0FAB0B16AF92B74E1C2D8F9301B784
341F6F41E8E12869EB3AF9E6E8A131222B71CA5DC17A35C399E201DC8A970093
EC8CA0C039FF287E495990C3D95E07CF1494955AD6B4B81D3FBAECDA744FBD78
2DEB54840BD5941FBCFC100BE64D513EF9111AA01EA822A3CEC8B04B73F53C2D
15964086A1C8CBEEDD95F7B0AD96F1CCEDF524B35725A58336001A9AC1496A4F
79BFFB2178218D4520BAF5265598DAAD32B9527A2347D0F6C1211CE34E2B93B1
F8D3A580FB6DBAA2A679444EDE233D3D6DF84AC109CE5431E726B1327D2E65E3
3258C012F44566E1EDA3122BC0A93719F843CB7690A9F2C22AD2ED4B60DED9E1
4EA6835360D85E2A6AF161850880D37BAE0A6D13CFC0EE8EFC56E06D689645AE
15CD5D7B5D22FECC2F8D043DDC0E782F6EE91CAD26EEDD664D0962446DC01B15
4ECB0BA802180D6594E582D5786A988F52C172EC749013801B66268626326627
1383AAB79F2D974CE44A867E158360B08698C489A4AA61274CE1D78EE5688733
A05A3EC3EDB70EE1AAE45D406F063D448723C6E057E80E91C625CC380F37181B
18A3A15EEDC88F7713EF98BAE84BE9DD4214DEB231734E54CD1FC6157C41FB27
3593B1C73EAFECD151DB04B72FFA817AAD8289A50EF0A1F59DEB760326CAE14F
195C4CC6046735EDB0B12B9EE05C3752D2D35DC2F42057652A52DB1E88B9186D
159B9B333E596039FF329444EF27F4E4A07DD90682BB925D8E762A4E873E754D
AC820F5CE87C989BA8DEBFC872AB4BE702015356A5ED43683520C6C3005896E1
DB95F59BB4545992BBEB84F797AA2B7677D53531443127FECD24B1179AFCA7DF
B3664AFC394BEBE2560A6ADEACBEE965D5EADBC6B5A0B5F09C148AE3986DF044
A2485BB6067A7BB2BE85446061044AE8F088F3C197F21263583C59603B5A1891
72105DB7244D0C2BDF810AF9C74E50B2D6E83C7015E470C0F6C58E1ECBD57F27
1DA8F30B9AAFEA79F29A86F4F2686CA45A3B2D5E8957FDD01A23211093272F99
D9A2E3FC5BFF264FC8978F1858AEBB48F7232580212048BAAAA1036DA5AB938D
D9CECF0B93E6F5637291DA0A4046498443A457BF4F59E18C29F26A1871B375F3
DCCA630FEFF0284731A10F729448F4F8A45306D06007563CB3A6B417DDEE1452
337E72F336F531E402993FDCC166A9AB3A17750C32162E936C7C9B617130A106
413D39D1AB9803D8DB4FF8DB7BC4B210211FDC1319A9075DE2719F1EA07AC694
9834FAD00D4FE7562AF2989A6B0116B3FDDB340EFAEF718A96E5167336193179
9FBE48E85DD7CD8CA49E0CB3A2747A7F32F5193041CAC9F3BECC1E24AF0CBD02
38B6A7CBAC2BA098C7D0E45E9E694331C2A2A403EB0E1949D39F3F188DBA1431
E1A68610B046B40AEC50C229BB4D2961C254CD0476639A8043EC027C0FE5C439
F6A4E9A0D4EBD88B6078A151CB8F83B5B2D50F8E1D263C6A3A041589EE70C218
1F3CD08D0D18B1E7F27504D1F868466943593DEEFE37018FEB17995FE599F5B4
EE7C895E16C07EF025A29F05C19B819240DE34E3848D92D258160674F36F7239
F9D2EB718BAFA140708EBA9EA7DFD7C0EF7D0CDCB3F7292825FCACDB6FED534A
861A0B66B3D803C9862C9C507404742FA4E178F76980C8FD6E20F215654C7F16
7221558762ECE6FB2165C3362327CACA647FB3EAD1249687BEF748A9BF321293
08BB41232F84D0C0EE5FA324DA29966B4C73B0839EC9AAB547C3FEC6F7954BEA
5CAEE651E0BC0874F23892A2F11C3284B97D37D37FE98BA6F5D3E008CCC8DA23
3068504284900F08061F84EAF82B882FF88E01454DC4B805B8C905EB734C2F67
ED9099A7B1E78FFD839DE28B2F5ADABFDF9EFD5E138DE4EE05B4E838161CB2CA
316D2EB566DC910FC2F46C573A7561C0ADF7CB2FE429EF65B7F61900692D9985
63A374786F7F4E6910688341A6DB46589D7CCEAAEF100E5AE23E190B719C039A
F1A8D056BFE04F68B19895D322E2CF427C0578F6C730507F040921530E86F3E9
785B5C79B526B5D4F7487EBAC23BD736E383D28CBD7C145A8EA2087039B5C1EE
373404C439F10F3C78F552F34F38EA166171DFD34F4360CE8DDBF0EFA05328CC
D6981119D557D19B1F31D9681F8D8DA7B7FF6EEA02218384A3DD7792410D2426
E9CD5923A3CF607427A24F21B106D253DCBAA03BA9EEE420CFF93A81F5DA89A5
79A56691397D5F2C6919F1955DC911A535C44695CBE63F7C483837124F042182
447859D1DF38D9C8A74F5AE4541E3ADB55DF011F02FB6CB6D41C7FBC2177233F
A8DECD98BFECEA0389FF042B45DED2A89A9B858494B6A503C957C21180B6101F
18A182A796BDB32C837A282522D180A63F010D74CF9AAEC809041E7BC5EC58A2
2D42FB4D41FC503E4A81D79A4140F55A67DADE61DF37BA8E7C6F9F95B93D3E83
CB78FFCBF1A5C0E2AB84944C09C3624F904E4BDDD6A29DFF976439FB114A8B9E
E7F108D2C4DA1EEF1852E234D6F08AA3526EC53ADC0113A1840DF2A49074813D
8AD34D05FB1EADC26C1A5CBA4BF9ED539053FE789F6A791F5DB2E37B4EB24381
54B6048B0334A34CC77216C70CF909577CE76FA5BF3E6D76D7507E969B900131
A542D54F3ABF2682FC4B0F4BFACE9E4A315723A28710EC091D1FD36880DBB1FC
E595C41332A5A102CCF12E98164F77AD226CF4767F129DE8AFCA41E8582A4D6E
6C2EBDEFED535CC91EC2D6CE16D6FBEE2CE73DF2E2476ED54112F5EA8D2C56FC
CEA2B82DC0B9551A7C8B70452BB6F277DDF065D67A63DD7CBD4740CAD6807CF7
74162F1271D478B31D86C0484F7183FF47CEAEB6160DE054C0085FB5A21E371C
F89F4AC9F873CC0DC57EA4930C14782041F1E5A2C3F02650D39389733EB55456
9CC6A24D86680593768E58A8FEB6E6606E2107493E2D1F787B3165CC36FEA3C7
E1D7B74CC04CE3FDCC8D57A7A5F93CB3C1298EE25FC995D48C77A72770A265FF
03BA755EF1ECEE257990FBEE12DBC8152BA94497DDA67A78284D3B5D571009EF
C472F66600917CD6DD6DE85EE2C93919F3BFD0ED173C28A7B5C2A9F6FC241CB9
6A518E7148A6318590B93A41B94B339E95450A545AB32D587836456C98139B93
7B7C89FDFB72B7D5EDB969EFA0A9CBE1EC98CE2BA1CA4DBF6987003F21CF0201
205D01E90114079478D8C257721076AC21722DD4D5E25DE9663178EF972812FA
F1DF8CCE9CE51A5222B90CA6E49FBF66CAC3E66A346894A99C4C19C3BC4750F4
84E3C92A6415101D3C95D88D8BC27A2CEC2ECEA3FA0D726F382F690593BFE12F
43723F0B2297D4303DD4DDA1FC6AF323137ADD2B007DCB4842643BB11A3A55AB
AFD5520C1D4EBAA77DF3D8DC1E49169FB630C0D9B307DAED249A1ED8ABE4AAD2
98B3FD9065EEC01297E55B329B2F91FC1E8B3B15A93FCAE8D43727FC71CE5F86
A13612078502C317148D36B34B43162187DC04F7DDD98AE3B0A6F005004072ED
3CA2F20613A63856DAAF6CA5D6678B1675C22A813F91A734EAD7104506D01417
519679371023BDCDA82FAAC79E6934A83904F25086F0233586A34181B6531759
A3289E751622AFA1699E946EF61DA9D143D24DCF3BC505AE6C8250EB2649AAB8
0DD12B1DC1B16B5715ADC17C42D07E4BF23815E7F120D955436BFAF84BD25FE5
EFE35AA726F99FFDCC7DB0D4149C2C0A4BB5B3F22A97251B0060CB659867561F
353E494EDDA08D6C4CFEC1D9B9635C7422D53A7624F14C0AA196969BF1ACCF37
6494359783F78991201C9421421F7365D0D7B756BCAD6A11721FE61CAEC912C2
1A329B03225776AAC34BCAECECE041670753BEE451FD52B0F533F82040A92E39
5C2FD773691F3BE7BE3F578F57A39B93DC454580C44B12D6D1963E9E42885723
6722D315683B359A2012B47E78D807EEE99010AE1CC3F19B4080D1C79F746C5B
14115B92FAF9387878420EBF7D8D1807B6A594E98E27BE8C6314BACEB963B4CF
05FFECFC3A5BC846580A64C6227179DBF25495B2220EECE0AEB5037025221CB4
B7C7031EED34A6F97A6DA7394CBE9598FAC812E4E811AF788DE80CDE99F3FDDA
BC3116DC4BB70AC285EDD824CE823DFF39B1D98A0CBE289FC807734542B9D8E8
F5029343031694EF5486822CD1287ED328E3906AA46F206EFB28E925E78D6968
81234A2C11147A2074E23AEE5D8B90180F07F2C4BF6D6A27A7BED9F19C47504C
49467183C695F6870CC653BD88272D3347F74B4381D592F33F0EF44FC027C407
506080C1FB6CA0054C03B8EFEDD8CB4B074E3C8401C506A0E0631A29AE7B2499
B487796B98D642A986459E0E663E73502EB04F5166EAFDA836FDD16C89496BD0
FFBE4A8AA284288C231F524DC1DC071B9C076C75AE31A06F2EA012BC37A146EA
5877EACFC593EEA41AD1632EF067DBD6A8DE08043919D960050FD522F51D2C87
E3EC5BA2391745057F0004A6ACDAF803998D39486641D98B65C05ECA38385BCA
A798479FC8083E9584C426E95F85D434A35FEC0F3D18AEF9BF9DFCB8684AA1BF
6AA8AA75F3E29C8989C5375EC0936EAE2DC063095DBFC7A18102E1D658C65812
5CD7CF803CCFC1C9FFA833240175DE9259A07A01FF960706D024C4B093CB5048
4FE730C540D32680D1103F829AF4D2DE421AB7641003467C8D6FB12CB6E9D1FF
18D5B6E8ABF13E92BE918FA657F7870500E92A3CF29967BEC38815724B40A923
FF4BCDE2ADCDA900FC3AAA5C4AC0D453641D2B4448E7701A44308BB1C6C90C6B
AD5DF91145F1673C3A8F9B9AA0645E19661C3075FE16A7142615B8405464CBB1
1B2038E9446A931FEFA2673B67573BC772AC3C71BED6050A95F20969537F86AE
505B013994FF2BDC7701AE5931253B1C95C5FA69F71BF99DB169F3678D063F66
BD7A184BA7E5222DE380294A0615C33CA24C12BE04594BF6657743E4CDB964F7
07D305DCFAD05CC8C7D78D26E8A98297288F8320068C3FA38511BB85B5F4805D
2DF656153FBFBBABB13DC377BB531D095E975FC84967621E790D53736A166D41
BF24B2D43C9CEFFDE26800A9F7DB077E0B84F54AA278374B61852773ACE9A173
FF9217CBA65E6CD8327FC6B9650ED1A7D2AC8C6BF7761B53D65015D078D23BB3
114619F717520A0CB494BBA9CA1A59ED5C3887D97260EF1A1BF77683DC369B1B
76865ECE4F279221C363B282CCFC8E5D5C1A1BE81947CB803670756185165BCF
10A6466033ACCD492167351BD613809153BAD87BC23B75D079548EC68C0F4E26
D74C69496E1CB10F1612DEAEE46AA2C91A89
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600
(/home/fenarius/Travail/Cours/NSITerminale/docs/pdf/C5/C5-act3.dvi)
@start /Fa 236[67 67 18[{}2 90.9091 /CMEX10 rf /Fb 1[91
211[102 42[{ fa5free1 ReEncodeFont }2 90.9091 /FontAwesome5Free-Solid
rf /Fc 251[71 1[71 1[71{}3 90.9091 /CMSY10 rf /Fd 141[41
13[47 39 39 48 29[65 69 68 4[71 25 59[{}10 90.9091 /CMMI10
rf /Fe 194[71 3[45 45 45 1[45 45 45 45 45 45 4[71 43[{}11
90.9091 /CMR10 rf
%DVIPSBitmapFont: Ff ectt1095 10.95 30
/Ff 30 119 df<07C00FF01FF83FFC3FFC3FFE3FFE3FFF1FFF0FFF07FF003F003F003F00
3F007F007E007E00FE00FC01FC03F803F80FF01FF03FE0FFC0FF80FF007C003800101F70
B72F>39 D<00003C00007E0001FE0003FE0007FC000FF8001FE0003FC0007F8000FF0000
FE0001FC0003F80003F80007F00007E0000FE0000FC0001FC0001F80001F80003F80003F
00003F00007F00007E00007E00007E0000FE0000FC0000FC0000FC0000FC0000FC0000FC
0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FE00007E00007E00007E00007F
00003F00003F00003F80001F80001F80001FC0000FC0000FE00007E00007F00003F80003
F80001FC0000FE0000FF00007F80003FC0001FE0000FF80007FC0003FE0001FE00007E00
003C174771BE2F>I<780000FC0000FF0000FF80007FC0003FE0000FF00007F80003FC00
01FE0000FE00007F00003F80003F80001FC0000FC0000FE00007E00007F00003F00003F0
0003F80001F80001F80001FC0000FC0000FC0000FC0000FE00007E00007E00007E00007E
00007E00007E00007E00007E00007E00007E00007E00007E00007E0000FE0000FC0000FC
0000FC0001FC0001F80001F80003F80003F00003F00007F00007E0000FE0000FC0001FC0
003F80003F80007F0000FE0001FE0003FC0007F8000FF0003FE0007FC000FF8000FF0000
FC0000780000174778BE2F>I<00003C000000007E000000007E000000007E000000007E
000000007E000000007E000000007E000000007E000000007E000000007E000000007E00
0000007E000000007E000000007E000000007E000000007E00003FFFFFFFFC7FFFFFFFFE
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFE00007E000000007E000000007E000000
007E000000007E000000007E000000007E000000007E000000007E000000007E00000000
7E000000007E000000007E000000007E000000007E000000007E000000007E000000003C
000028297DAF2F>43 D<1F003F807FC0FFE0FFE0FFE0FFE0FFE07FC03F801F000B0B6E8A
2F>46 D<00000000E000000001F000000003F000000003F000000007F000000007E00000
000FE00000000FC00000001FC00000001F800000003F800000003F000000007F00000000
7E00000000FE00000000FC00000000FC00000001FC00000001F800000003F800000003F0
00000007F000000007E00000000FE00000000FC00000001FC00000001F800000003F8000
00003F000000003F000000007F000000007E00000000FE00000000FC00000001FC000000
01F800000003F800000003F000000007F000000007E00000000FE00000000FC00000000F
C00000001FC00000001F800000003F800000003F000000007F000000007E00000000FE00
000000FC00000001FC00000001F800000003F800000003F000000003F000000007F00000
0007E00000000FE00000000FC00000001FC00000001F800000003F800000003F00000000
7F000000007E00000000FE00000000FC00000000FC00000000F800000000780000000024
477BBE2F>I<0001FE00000007FF8000001FFFE000003FFFF000007FFFF80000FFFFFC00
01FF03FE0003FC00FF0003F8007F0007F0003F800FE0001FC00FC0000FC01FC0000FE01F
800007E01F800007E03F000003F03F000003F03F000003F07E000001F87E000001F87E00
0001F87E000001F8FC000000FCFC000000FCFC000000FCFC000000FCFC000000FCFC0000
00FCFC000000FCFC000000FCFC000000FCFC000000FCFC000000FCFC000000FCFC000000
FCFE000001FC7E000001F87E000001F87E000001F87F000003F83F000003F03F000003F0
3F800007F01F800007E01FC0000FE01FC0000FE00FE0001FC00FE0001FC007F0003F8003
F8007F0003FC00FF0001FF03FE0000FFFFFC00007FFFF800003FFFF000001FFFE0000007
FF80000001FE0000263A7CB82F>I<000FFC0000003FFF800000FFFFE00003FFFFF80007
FFFFFC000FFFFFFE001FF80FFF003FE001FF803F80007F807F00003FC07E00001FC07E00
000FE0FE000007E0FE000007F0FF000007F0FF000003F0FF000003F0FF000003F07E0000
03F018000003F000000003F000000003F000000007F000000007E00000000FE00000000F
C00000001FC00000001FC00000003F800000007F00000000FF00000001FE00000003FC00
000007F80000000FF00000001FE00000003FC00000007F80000000FF00000001FE000000
07FC0000000FF80000001FF00000003FE00000007F80000000FF00000001FE00000003FC
0001E00FF80003F01FF00003F03FE00003F07FFFFFFFF0FFFFFFFFF0FFFFFFFFF0FFFFFF
FFF0FFFFFFFFF07FFFFFFFE024397BB82F>50 D<0007FF0000003FFFE00001FFFFF80003
FFFFFE0007FFFFFF000FFFFFFF801FFC01FFC01FE0003FC03F80001FE03FC00007E03FC0
0007F03FC00003F03FC00003F01F800003F00F000003F000000003F000000007F0000000
07E00000000FE00000000FE00000001FC00000007FC0000000FF8000000FFF00000FFFFE
00001FFFFC00001FFFF800001FFFF800001FFFFE00000FFFFF00000001FF800000003FC0
0000001FE000000007F000000003F000000003F800000001F800000001FC00000000FC00
000000FC18000000FC7E000000FCFF000000FCFF000000FCFF000001FCFF000001F8FE00
0003F8FE000003F87F000007F07F80001FE03FE0003FE01FFE01FFC00FFFFFFF8007FFFF
FF0003FFFFFE0000FFFFF800003FFFE0000003FF0000263A7CB82F>I<7FFFFFFFFEFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFF03F000003F03F000003F03F000
003F03F000003F03F000003F03F000003F03F000003F03F000001E03F000000003F00000
0003F000000003F000000003F000000003F000000003F000780003F000FC0003F000FC00
03F000FC0003F000FC0003FFFFFC0003FFFFFC0003FFFFFC0003FFFFFC0003FFFFFC0003
FFFFFC0003F000FC0003F000FC0003F000FC0003F000FC0003F000780003F000000003F0
00000003F000000003F000000003F000000003F000000003F000000003F000000003F000
000003F000000003F000000003F000000003F000000003F00000007FFFE00000FFFFF000
00FFFFF00000FFFFF00000FFFFF000007FFFE0000028387DB72F>70
D<7FFFFFFFE07FFFFFFFE0FFFFFFFFF0FFFFFFFFF0FFFFFFFFF07FFFFFFFE07FFFFFFFE0
24077B7D2F>95 D<007FF000000003FFFE00000007FFFF8000000FFFFFC000001FFFFFE0
00003FFFFFF000003FC01FF800003FC003FC00003FC001FC00003FC000FE00001F80007E
00000F00007F00000000003F00000000003F00000000003F00000000003F000000007FFF
00000007FFFF0000003FFFFF000001FFFFFF000007FFFFFF00000FFFF83F00001FFE003F
00003FF0003F00007FC0003F00007F00003F0000FE00003F0000FC00003F0000FC00003F
0000FC00003F0000FC00003F0000FC00007F0000FE00007F00007F0000FF00007F8003FF
80003FE01FFFFF003FFFFFFFFF801FFFFFFFFF800FFFFFDFFF8007FFFF0FFF8001FFFC01
FF00007FE0000000292A7BA82F>97 D<7FF000000000FFF800000000FFF800000000FFF8
00000000FFF8000000007FF80000000001F80000000001F80000000001F80000000001F8
0000000001F80000000001F80000000001F80000000001F80000000001F80000000001F8
0000000001F80FF0000001F83FFC000001F8FFFF000001FBFFFFC00001FFFFFFE00001FF
FFFFF00001FFF03FF00001FFC00FF80001FF8003FC0001FF0001FC0001FE0000FE0001FC
0000FE0001FC00007F0001F800003F0001F800003F0001F800003F8001F800001F8001F8
00001F8001F800001F8001F800001F8001F800001F8001F800001F8001F800001F8001F8
00001F8001F800003F8001F800003F8001FC00003F0001FC00007F0001FC00007F0001FE
0000FE0001FE0000FE0001FF0001FC0001FF8007FC0001FFC00FF80001FFF03FF00001FF
FFFFE00001FFFFFFC00001FBFFFF800001F9FFFF000000F07FFC000000001FE000002939
7EB72F>I<0003FFC000000FFFF800003FFFFC0000FFFFFE0001FFFFFF0003FFFFFF8007
FF007F800FF8007F800FF0007F801FE0007F801FC0003F003F80001E003F000000007F00
0000007E000000007E00000000FE00000000FC00000000FC00000000FC00000000FC0000
0000FC00000000FC00000000FC00000000FC00000000FE000000007E000000007E000000
007F000000007F000007803F80000FC03FC0000FC01FE0001FC01FF0001F800FFC007F80
07FF81FF0003FFFFFF0001FFFFFE0000FFFFFC00003FFFF000000FFFC0000003FE000022
2A79A82F>I<000003FF8000000007FFC000000007FFC000000007FFC000000007FFC000
000003FFC0000000000FC0000000000FC0000000000FC0000000000FC0000000000FC000
0000000FC0000000000FC0000000000FC0000000000FC0000000000FC0000003FC0FC000
001FFF0FC000007FFFCFC00000FFFFEFC00001FFFFFFC00003FFFFFFC00007FE07FFC000
0FF801FFC0001FF0007FC0001FC0003FC0003F80003FC0003F80001FC0007F00001FC000
7F00000FC0007E00000FC000FE00000FC000FE00000FC000FC00000FC000FC00000FC000
FC00000FC000FC00000FC000FC00000FC000FC00000FC000FC00000FC000FC00000FC000
FE00000FC0007E00001FC0007E00001FC0007F00001FC0003F80003FC0003F80007FC000
1FC0007FC0001FE000FFC0000FF801FFC00007FE07FFFF0007FFFFFFFF8003FFFFEFFF80
01FFFFCFFF80007FFF8FFF80001FFE07FF000007F800000029397DB72F>I<0003FE0000
000FFF8000003FFFE00000FFFFF00001FFFFF80003FFFFFC0007FE07FE000FF800FF000F
F0007F001FC0003F803FC0001F803F80001FC03F00000FC07F00000FC07E00000FC07E00
000FE0FE000007E0FC000007E0FFFFFFFFE0FFFFFFFFE0FFFFFFFFE0FFFFFFFFE0FFFFFF
FFE0FFFFFFFFC0FC00000000FE000000007E000000007E000000007F000000003F800003
C03F800007E01FC00007E01FE0000FE00FF8001FC007FE003FC007FF80FF8003FFFFFF80
01FFFFFF00007FFFFC00003FFFF800000FFFE0000001FF0000232A7BA82F>I<000001FF
00000007FFC000001FFFE000007FFFE00000FFFFF00000FFFFF00001FF0FF00003FC0FF0
0003F807E00007F001800007E000000007E000000007E000000007E000000007E0000000
07E000000007E000000007E000007FFFFFFF80FFFFFFFFC0FFFFFFFFC0FFFFFFFFC0FFFF
FFFFC07FFFFFFF800007E000000007E000000007E000000007E000000007E000000007E0
00000007E000000007E000000007E000000007E000000007E000000007E000000007E000
000007E000000007E000000007E000000007E000000007E000000007E000000007E00000
0007E000000007E000000007E000000007E000000007E000000007E000000007E000003F
FFFFFC007FFFFFFE007FFFFFFE007FFFFFFE007FFFFFFE003FFFFFFC0024397DB82F>I<
0003F801FE00001FFF07FF80007FFFDFFF8000FFFFFFFFC001FFFFFFFFC003FFFFFFFFC0
03FE0FFF0F8007F803FC07000FF001FE00000FE000FE00000FC0007E00001FC0007F0000
1F80003F00001F80003F00001F80003F00001F80003F00001F80003F00001F80003F0000
1FC0007F00000FC0007E00000FE000FE00000FF001FE000007F803FC000003FE0FF80000
03FFFFF8000007FFFFF0000007FFFFE000000FFFFFC000000F9FFF0000000F83F8000000
0F80000000000F80000000000F80000000000FC00000000007E40000000007FFFFF00000
03FFFFFF000007FFFFFFC0000FFFFFFFE0001FFFFFFFF0003FC0001FF8003F000001FC00
7E000000FE007C0000007E00FC0000003E00F80000003F00F80000001F00F80000001F00
F80000001F00F80000001F00FC0000003F007C0000003E007F000000FE003F800001FC00
3FE00007FC001FFE007FF8000FFFFFFFF00007FFFFFFE00001FFFFFF800000FFFFFF0000
001FFFF800000003FFC000002A3E7DA72F>I<7FF000000000FFF800000000FFF8000000
00FFF800000000FFF8000000007FF80000000001F80000000001F80000000001F8000000
0001F80000000001F80000000001F80000000001F80000000001F80000000001F8000000
0001F80000000001F80FF0000001F83FFC000001F8FFFE000001FBFFFF000001FFFFFF80
0001FFFFFF800001FFF03FC00001FFC01FC00001FF800FE00001FF000FE00001FE0007E0
0001FC0007E00001FC0007E00001FC0007E00001F80007E00001F80007E00001F80007E0
0001F80007E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007E0
0001F80007E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007E0
0001F80007E00001F80007E00001F80007E00001F80007E00001F80007E0007FFFE07FFF
80FFFFF0FFFFC0FFFFF0FFFFC0FFFFF0FFFFC0FFFFF0FFFFC07FFFE07FFF802A387EB72F
>I<0003800000000FE00000000FE00000001FF00000001FF00000001FF00000000FE000
00000FE00000000380000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000003FFFE000007FFFF000007FFFF000007F
FFF000007FFFF000003FFFF000000003F000000003F000000003F000000003F000000003
F000000003F000000003F000000003F000000003F000000003F000000003F000000003F0
00000003F000000003F000000003F000000003F000000003F000000003F000000003F000
000003F000000003F000000003F000000003F000000003F000000003F000000003F00000
0003F000007FFFFFFF00FFFFFFFF00FFFFFFFF80FFFFFFFF80FFFFFFFF007FFFFFFF0021
3979B82F>I<7FFFF000007FFFF80000FFFFF80000FFFFF800007FFFF800007FFFF80000
0001F800000001F800000001F800000001F800000001F800000001F800000001F8000000
01F800000001F800000001F800000001F800000001F800000001F800000001F800000001
F800000001F800000001F800000001F800000001F800000001F800000001F800000001F8
00000001F800000001F800000001F800000001F800000001F800000001F800000001F800
000001F800000001F800000001F800000001F800000001F800000001F800000001F80000
0001F800000001F800000001F800000001F800000001F800000001F800000001F8000000
01F800007FFFFFFFE07FFFFFFFE0FFFFFFFFF0FFFFFFFFF07FFFFFFFE07FFFFFFFE02438
7BB72F>108 D<0001F801F8007F8FFC0FFC00FFDFFE1FFE00FFFFFF3FFF00FFFFFFFFFF
80FFFFFFFFFF807FFE1FFE1F8007FC0FFC0FC007F80FF80FC007F007F007C007E007E007
C007E007E007C007E007E007C007C007C007C007C007C007C007C007C007C007C007C007
C007C007C007C007C007C007C007C007C007C007C007C007C007C007C007C007C007C007
C007C007C007C007C007C007C007C007C007C007C007C007C007C007C007C007C007C007
C007C007C007C007C007C007C007C007C007C007C007C007C007C007C007C07FFC3FFC3F
FCFFFE3FFE3FFEFFFE7FFE7FFEFFFE7FFE7FFEFFFE3FFE3FFE7FFC3FFC3FFC2F2880A72F
>I<00000FF000007FF03FFC0000FFF8FFFE0000FFFBFFFF0000FFFFFFFF8000FFFFFFFF
80007FFFF03FC00001FFC01FC00001FF800FE00001FF000FE00001FE0007E00001FC0007
E00001FC0007E00001FC0007E00001F80007E00001F80007E00001F80007E00001F80007
E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007
E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007
E00001F80007E00001F80007E00001F80007E00001F80007E0007FFFE07FFF80FFFFF0FF
FFC0FFFFF0FFFFC0FFFFF0FFFFC0FFFFF0FFFFC07FFFE07FFF802A287EA72F>I<0003FC
0000001FFF8000003FFFC00000FFFFF00001FFFFF80003FFFFFC0007FE07FE000FF801FF
000FE0007F001FC0003F801F80001F803F80001FC03F00000FC07F00000FE07E000007E0
7E000007E0FC000003F0FC000003F0FC000003F0FC000003F0FC000003F0FC000003F0FC
000003F0FC000003F0FC000003F0FE000007F07E000007E07E000007E07F00000FE07F00
000FE03F80001FC03F80001FC01FC0003F801FE0007F800FF801FF0007FE07FE0003FFFF
FC0001FFFFF80000FFFFF000007FFFE000001FFF80000003FC0000242A7BA82F>I<0000
0FF000007FF03FFC0000FFF8FFFF0000FFFBFFFFC000FFFFFFFFE000FFFFFFFFF0007FFF
F03FF00001FFC00FF80001FF8003FC0001FF0001FC0001FE0000FE0001FC0000FE0001FC
00007F0001F800003F0001F800003F0001F800003F8001F800001F8001F800001F8001F8
00001F8001F800001F8001F800001F8001F800001F8001F800001F8001F800001F8001F8
00003F8001F800003F8001FC00003F0001FC00007F0001FC00007F0001FE0000FE0001FE
0000FE0001FF0001FC0001FF8007FC0001FFC00FF80001FFF03FF00001FFFFFFE00001FF
FFFFC00001FBFFFF800001F9FFFF000001F87FFC000001F81FE0000001F80000000001F8
0000000001F80000000001F80000000001F80000000001F80000000001F80000000001F8
0000000001F80000000001F80000000001F80000000001F80000000001F8000000007FFF
E0000000FFFFF0000000FFFFF0000000FFFFF0000000FFFFF00000007FFFE0000000293C
7EA72F>I<0000000FF0007FFF007FFE007FFF81FFFF00FFFF87FFFF00FFFF8FFFFF807F
FF9FFFFF807FFFBFF87F80001FFFC07F80001FFF003F00001FFE001E00001FFC00000000
1FF8000000001FF0000000001FF0000000001FE0000000001FC0000000001FC000000000
1FC0000000001FC0000000001F80000000001F80000000001F80000000001F8000000000
1F80000000001F80000000001F80000000001F80000000001F80000000001F8000000000
1F80000000001F80000000001F80000000001F80000000001F800000007FFFFFF800007F
FFFFFC0000FFFFFFFC0000FFFFFFFC00007FFFFFFC00007FFFFFF8000029287EA72F>
114 D<001FFC0E0001FFFF9F0007FFFFFF000FFFFFFF001FFFFFFF003FFFFFFF007FF007
FF007F8000FF00FE00007F00FE00007F00FC00003F00FC00003F00FC00003F00FE00003F
007F00001E007FC00000003FFC0000001FFFF000000FFFFF800003FFFFE00000FFFFF800
001FFFFE0000007FFF00000001FF800000007F807800001FC0FC00000FC0FC000007E0FC
000007E0FE000007E0FE000007E0FF000007E0FF80000FE0FFC0001FC0FFE0003FC0FFFC
01FF80FFFFFFFF80FFFFFFFF00FFFFFFFE00F8FFFFF800F83FFFE0007007FF0000232A7A
A82F>I<000F000000001F800000001F800000001F800000001F800000001F800000001F
800000001F800000001F800000001F800000001F8000007FFFFFFFC0FFFFFFFFE0FFFFFF
FFE0FFFFFFFFE0FFFFFFFFE07FFFFFFFC0001F800000001F800000001F800000001F8000
00001F800000001F800000001F800000001F800000001F800000001F800000001F800000
001F800000001F800000001F800000001F800000001F800000001F800000001F80000000
1F8000F0001F8001F8001F8001F8001F8001F8001F8001F8001F8001F8001FC003F8001F
C007F0000FE00FF0000FF81FE00007FFFFC00007FFFFC00003FFFF800001FFFE0000007F
F80000001FE00025337EB12F>I<7FF001FFC000FFF803FFE000FFF803FFE000FFF803FF
E000FFF803FFE0007FF801FFE00001F80007E00001F80007E00001F80007E00001F80007
E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007
E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007
E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007
E00001F8000FE00001F8000FE00001F8001FE00001F8003FE00001FC007FE00000FF01FF
FF8000FFFFFFFFC0007FFFFFFFC0007FFFFFFFC0003FFFE7FFC0000FFF83FF800003FE00
00002A287EA62F>I<7FFF003FFF80FFFF807FFFC0FFFF807FFFC0FFFF807FFFC0FFFF80
7FFFC07FFF003FFF8001F00003E00001F00003E00001F80007E00000F80007C00000F800
07C00000FC000FC000007C000F8000007C000F8000007C000F8000003E001F0000003E00
1F0000003E001F0000001F003E0000001F003E0000001F003E0000000F807C0000000F80
7C0000000F807C00000007C0F800000007C0F800000007C0F800000003E1F000000003E1
F000000003E1F000000001F3E000000001F3E000000001F3E000000000FFC000000000FF
C000000000FFC0000000007F80000000007F80000000003F0000002A277EA62F>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fg ecti1095 10.95 14
/Fg 14 118 df<000000007FC0000000000007FFF800000000003F807E0000000000FC00
1F8000000001F00007C000000007E00003E00000000F800001F00000003F000001F80000
007E000000FC000000FC0000007C000001F80000007E000003F00000007E000007E00000
003F00000FC00000003F00001FC00000003F80003F800000003F80003F000000001F8000
7F000000001F8000FE000000001FC000FE000000001FC001FC000000001FC003FC000000
001FC003F8000000001FC007F8000000001FC007F0000000003FC00FF0000000003FC00F
F0000000003FC00FE0000000003FC01FE0000000003FC01FE0000000003F803FC0000000
007F803FC0000000007F803FC0000000007F803FC0000000007F807F8000000000FF007F
8000000000FF007F8000000000FF007F8000000001FE007F8000000001FE007F80000000
01FE007F0000000003FC00FF0000000003FC00FF0000000003F800FF0000000007F8007F
0000000007F0007F000000000FF0007F000000000FE0007F000000001FC0007F00000000
1FC0007F000000003F80007F000000007F00003F800000007E00003F80000000FE00001F
80000001FC00001F80000003F800001FC0000007F000000FC000000FE0000007E000001F
C0000007E000003F00000003F000007E00000001F80000FC00000000FC0003F000000000
3F000FC0000000001FC07F000000000007FFFC000000000000FFC0000000003A4274BF45
>79 D<0001FFFFFFFF80000001FFFFFFFFF0000001FFFFFFFFFC00000003FC0003FE0000
0003FC0000FF00000003F800003F80000003F800001FC0000007F800001FC0000007F800
000FE0000007F000000FE0000007F000000FE000000FF000000FF000000FF000000FF000
000FE000000FF000000FE000000FF000001FE000000FF000001FE000001FE000001FC000
001FE000001FC000001FE000003FC000001FC000003FC000003FC000003F8000003F8000
003F8000007F8000007F8000007F0000007F800000FE0000007F000001FC0000007F0000
01F8000000FF000007F0000000FF00000FE0000000FE00003F80000000FE0001FF000000
01FFFFFFF800000001FFFFFFE000000001FC00000000000001FC00000000000003FC0000
0000000003FC00000000000003F800000000000003F800000000000007F8000000000000
07F800000000000007F000000000000007F00000000000000FF00000000000000FF00000
000000000FE00000000000000FE00000000000001FE00000000000001FE0000000000000
1FC00000000000001FC00000000000003FC00000000000003FC00000000000003F800000
000000003F800000000000007F800000000000007F800000000000007F00000000000000
FF8000000000007FFFFE0000000000FFFFFE0000000000FFFFFE00000000003C3E7BBD3D
>I<00007E00000001FF80000007C1C380001F80EFC0003F00FFC0007E007FC000FC007F
8001F8003F8003F0003F8003F0003F8007E0003F000FE0003F000FC0003F001FC0007F00
1FC0007E003F80007E003F80007E003F8000FE007F8000FC007F0000FC007F0000FC007F
0001FC00FF0001F800FE0001F800FE0001F800FE0003F800FE0003F038FC0003F038FC00
03F038FC0007F038FC0007E078FC000FE0707C000FE0707C001FE0F07E003FE0E03E007F
E0E03E00F3E1E01F01E3E1C00F8781E38003FF00FF0000FC003E00252977A72E>97
D<00001FC00000FFF00003F07C000FC01E001F000E003E000F007C001F00FC007F01F800
7F03F0007F07F0007E07E0007E0FE000381FC000001FC000003F8000003F8000003F8000
007F8000007F0000007F0000007F000000FF000000FE000000FE000000FE000000FE0000
00FE000000FC000000FC000006FC00000E7E00001E7E00003C7E0000783E0000F03F0001
E01F0007C00F800F0007C07E0001FFF000007F8000202977A729>99
D<00003F000001FFE00007C0F0001F0078007E007800FC003C01F8003C03F0003C07F000
3C0FE0007C0FC000781FC000783F8000F83F8001F07F8007E07F001FC07F01FF007FFFF8
00FFFF8000FE000000FE000000FE000000FE000000FC000000FC000000FC000000FC0000
00FC000000FC000000FC00000CFC00001CFC00003C7C0000787C0000F07E0001E03E0003
C01F000F800F001E000780FC0003FFE00000FF00001E2976A729>101
D<000000007C0000000001FF0000000007C7800000000F83C00000001F83C00000001F0F
C00000003F1FC00000003F1FC00000007E1FC00000007E1F800000007E0F000000007E00
00000000FC0000000000FC0000000000FC0000000000FC0000000001FC0000000001F800
00000001F80000000001F80000000001F80000000003F80000000003F00000000003F000
00000003F000000003FFFFF8000003FFFFF8000003FFFFF800000007E00000000007E000
00000007E0000000000FE0000000000FC0000000000FC0000000000FC0000000000FC000
0000000FC0000000001FC0000000001F80000000001F80000000001F80000000001F8000
0000003F80000000003F00000000003F00000000003F00000000003F00000000007F0000
0000007E00000000007E00000000007E00000000007E0000000000FE0000000000FC0000
000000FC0000000000FC0000000000FC0000000001FC0000000001F80000000001F80000
000001F80000000001F80000000003F00000000003F00000000003F00000000003F00000
000007E00000000007E00000000007E00000000007E0000000000FC0000000000FC00000
001C0FC00000007E0F80000000FE0F80000000FE1F00000000FE1F00000000FC1E000000
00F83C00000000F03C000000007878000000003FE0000000000F80000000002A5383BF1C
>I<0000700001FC0001FC0001FC0001F80001F80000E000000000000000000000000000
0000000000000000000000000000000000000000000000000000007C0001FF00038F8007
07800E07C01E07C01C07C03C0FC0380FC0380FC0781FC0701F80701F80F03F80F03F0000
3F00007F00007E0000FE0000FC0000FC0001FC0001F80001F80003F80003F00003F03807
F03807E0380FE0780FC0700FC0700FC0F00F80E00F80E00F81C00F83C00F838007870003
FE0000F800163D79BB1C>105 D<0007F003FFF003FFE003FFE0000FE0000FE0000FC000
0FC0001FC0001FC0001F80001F80003F80003F80003F00003F00007F00007F00007E0000
7E0000FE0000FE0000FC0000FC0001FC0001FC0001F80001F80003F80003F80003F00003
F00007F00007F00007E00007E0000FE0000FE0000FC0000FC0001FC0001FC0001F80001F
80003F80003F80003F00003F00007F00007F07007E07007E0700FE0F00FE0E00FC0E00FC
0E00FC1E00FC1C00FC1C007C38007C78003C70001FE000078000144079BE17>108
D<01F0003F800007FC01FFE0000F3E07C1F8000E1F0F00FC001E1F1C007C001C1F38007E
003C1FF0007E00381FF0007E00381FE0007E00783FC0007E00703FC0007E00703F80007E
00703F00007E00F03F0000FE00F07F0000FC00007E0000FC00007E0000FC00007E0001FC
0000FE0001F80000FC0001F80000FC0001F80000FC0003F80001FC0003F00001F80003F0
0001F80007F00001F80007E00003F8000FE07003F0000FC07003F0000FC07003F0001FC0
F007F0001F80E007E0001F80E007E0001F81E007E0001F01C00FE0001F01C00FC0001F03
800FC0001F03800FC0001F07001FC0000F0E001F800007FC0007000001F0002C2979A733
>110 D<00001FC0000000FFF8000003F07C00000FC01F00001F801F00003F000F80007E
000FC000FC0007C001F80007E003F00007E007F00007E007E00007E00FE00007F01FC000
07F01FC00007F03F800007F03F800007F03F80000FE07F80000FE07F00000FE07F00000F
E07F00001FE0FF00001FC0FE00001FC0FE00001FC0FE00003F80FE00003F80FE00007F00
FE00007F00FC00007E007C0000FC007E0001FC007E0001F8007E0003F0003E0007E0001F
000FC0001F001F80000F803E000007C0FC000001FFF00000003F800000242977A72E>I<
01F000FE0007FC03FF800F3E0F03E00E1F1C01E01E1F3807E01C1F7007F03C1FF00FE038
1FE00FE0381FC00FE0783FC00380703F800000703F800000703F000000F03F000000F07F
000000007E000000007E000000007E00000000FE00000000FC00000000FC00000000FC00
000001FC00000001F800000001F800000001F800000003F800000003F000000003F00000
0003F000000007F000000007E000000007E000000007E00000000FE00000000FC0000000
0FC00000000FC00000001FC00000001F800000000700000000242979A726>114
D<00007F800001FFE00007C0F8001E003C003C001C003C001E0078000E00F0003E00F000
7E00F0007E01F0007C01F0007C01F0001001F8000001FC000001FF800001FFF80000FFFF
0000FFFF80007FFFC0001FFFE00007FFE000007FF000000FF0000003F0000003F0000001
F03E0001F07E0000F07F0001F0FE0001E0FE0001E0FC0001E0F80003C0F0000780700007
8078000F003C003C001F00F80007FFE00000FF00001F297AA725>I<0001C0000003F000
0007F0000007F0000007E0000007E000000FE000000FE000000FC000000FC000001FC000
001FC000001F8000001F8000003F8000003F8000003F0000003F00007FFFFF80FFFFFF80
FFFFFF00007E000000FE000000FE000000FC000000FC000001FC000001FC000001F80000
01F8000003F8000003F8000003F0000003F0000007F0000007F0000007E0000007E00000
0FE000000FE000000FC000000FC000001FC000001FC01C001F801C001F801C003F803C00
3F8038003F0078003F0070003F00F0003F00E0003F01C0001F03C0001F0780000F0F0000
07FC000001F00000193A78B81E>I<007C0000000001FF00003800038F8000FC00070780
00FC000E07C000FC001E07C001FC001C07C001FC003C0FC001F800380FC001F800380FC0
03F800781FC003F800701F8003F000701F8003F000F03F8007F000F03F0007F000003F00
07E000007F0007E000007E000FE000007E000FE00000FE000FC00000FC000FC00000FC00
1FC00001FC001FC00001F8001F800001F8001F800001F8003F800003F8003F838003F000
3F038003F0003F038003F0007F038003F0007F078003F0007E070003F0007E070003F000
FE0F0003F000FE0E0001F001FE0E0001F803BE1C0000F8073E1C00007C1E1E3800003FF8
0FF0000007E003E000292979A730>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fh ecsx1095 10.95 7
/Fh 7 234 df<0001FFC00000001FFFF80000007FFFFE000001FFFFFF800003FFFFFFC0
000FFFFFFFE0001FFFFFFFF0003FFFFFFFF0007FFF01FFF8007FF8007FF8003FE0003FFC
001FC0003FFC001F80003FFC000F00001FFC000600001FFC000000001FFC000000003FFC
000000003FFC000000003FFC000000003FF8000000007FF8000000007FF800000000FFF0
00000001FFE000000003FFC00000001FFF8000000FFFFF0000000FFFFE0000000FFFF800
00000FFFFE0000000FFFFF8000000FFFFFE000000000FFF8000000003FFC000000001FFC
000000001FFE000000000FFF000000000FFF0000000007FF0000000007FF8000000007FF
8000000007FF8000000007FF8000000007FF8000000007FF8000000007FF8000000007FF
8000000007FF806000000FFF807000000FFF007C00001FFF007F00001FFF00FFC0003FFE
00FFFC00FFFE00FFFFFFFFFC00FFFFFFFFFC00FFFFFFFFF8007FFFFFFFF0001FFFFFFFE0
0007FFFFFFC00001FFFFFF0000003FFFF800000003FFC00000293F7CBC32>51
D<000003FFE0000000000007FFF000000000000FFFF800000000000FFFF800000000001F
FFFC00000000001FFFFC00000000001FFFFC00000000003FFFFE00000000003FFFFE0000
0000003FFFFE00000000007FFFFF00000000007FEFFF00000000007FE7FF0000000000FF
E7FF8000000000FFC7FF8000000001FFC7FFC000000001FFC3FFC000000001FF83FFC000
000003FF83FFE000000003FF81FFE000000003FF01FFE000000007FF01FFF000000007FF
00FFF000000007FE00FFF00000000FFE00FFF80000000FFE007FF80000000FFC007FF800
00001FFC007FFC0000001FFC003FFC0000001FF8003FFC0000003FF8003FFE0000003FF8
001FFE0000007FF0001FFF0000007FF0001FFF0000007FF0000FFF000000FFE0000FFF80
0000FFE0000FFF800000FFE00007FF800001FFC00007FFC00001FFC00003FFC00001FFC0
0003FFC00003FFFFFFFFFFE00003FFFFFFFFFFE00003FFFFFFFFFFE00007FFFFFFFFFFF0
0007FFFFFFFFFFF00007FFFFFFFFFFF0000FFFFFFFFFFFF8000FFE0000007FF8001FFC00
00007FFC001FFC0000007FFC001FFC0000003FFC003FF80000003FFE003FF80000003FFE
003FF80000001FFE007FF00000001FFF007FF00000001FFF007FF00000000FFF00FFE000
00000FFF80FFE000000007FF80FFE000000007FF80FFC000000003FF80FF8000000001FF
80393F7CBE42>65 D<0000FFF800000FFFFF00003FFFFFC000FFFFFFF001FFFFFFFC03FF
FFFFFC07FFC01FFC0FFF0003FC1FFE0000F81FFC0000783FF80000383FF80000187FF000
00007FF00000007FF00000007FF0000000FFE0000000FFE0000000FFE0000000FFE00000
00FFE0000000FFE0000000FFE0000000FFE0000000FFE0000000FFE0000000FFE0000000
FFE0000000FFE0000000FFE00000007FF00000007FF00000007FF00000003FF80000183F
F80000383FFC0000781FFE0001F80FFF0003FC0FFFC03FFC07FFFFFFFC01FFFFFFFC00FF
FFFFF0003FFFFFC0000FFFFE000000FFF000262D7DAB2D>99 D<3FE07FF0FFF0FFF0FFF0
FFF0FFF0FFF0FFF0FFF0FFF07FE000000000000000000000000000000000000000000000
00001FE03FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF0
7FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF07FF0
7FF07FF07FF07FF07FF03FF01FE00C427BC118>105 D<00FF000001FF800003FF800003
FF800003FF800003FF800003FF800003FF800003FF800003FF800003FF800003FF80003F
FFFFF07FFFFFF8FFFFFFF8FFFFFFF8FFFFFFF87FFFFFF003FF800003FF800003FF800003
FF800003FF800003FF800003FF800003FF800003FF800003FF800003FF800003FF800003
FF800003FF800003FF800003FF800003FF800003FF800003FF800003FF800003FF800003
FF800003FF800003FF800003FF800003FF800003FF800003FF800003FFC00C03FFC01C01
FFE0FE01FFFFFE01FFFFFE00FFFFFE007FFFF0003FFFC0000FF8001F377EB524>116
D<7F8000007F00FFC00001FF80FFC00001FF807FE00003FF007FE00003FF007FF00003FF
003FF00007FE003FF00007FE003FF80007FE001FF8000FFC001FF8000FFC001FFC000FFC
000FFC001FF8000FFC001FF8000FFE001FF80007FE003FF00007FE003FF00007FF003FF0
0003FF007FE00003FF007FE00003FF807FE00001FF80FFC00001FF80FFC00001FFC0FFC0
0000FFC1FF800000FFC1FF800000FFE1FF8000007FE3FF0000007FE3FF0000007FF3FF00
00003FF7FE0000003FF7FE0000003FFFFE0000001FFFFC0000001FFFFC0000001FFFFC00
00000FFFF80000000FFFF80000000FFFF800000007FFF000000007FFF000000001FFC000
00292A7EA92E>118 D<00003FF80000007FF8000000FFF0000001FFE0000001FF800000
03FF00000007FE0000000FFC0000001FF00000003FE00000003FC00000007F80000000FE
00000000FC00000000000000000000000000000000000000000000000001FFC000000FFF
F800003FFFFE0000FFFFFF0001FFFFFF8003FFFFFFC007FFC0FFE00FFE003FF01FFC001F
F01FF8000FF83FF0000FF83FF00007FC7FF00007FC7FE00007FC7FE00007FC7FE00003FE
FFE00003FEFFE00003FEFFC00003FEFFC00003FEFFFFFFFFFEFFFFFFFFFEFFFFFFFFFEFF
FFFFFFFEFFFFFFFFFEFFFFFFFFFCFFE0000000FFE0000000FFE00000007FE00000007FE0
0000007FE00000003FF00000003FF000000C3FF800001C1FF800003C0FFC0000FC0FFF00
03FE07FFE01FFE03FFFFFFFE01FFFFFFFE007FFFFFF8003FFFFFE00007FFFF000000FFF0
00273F7DBD2E>233 D E
%EndDVIPSBitmapFont
/Fi 142[69 113[{}1 90.9091 /Dingbats rf
%DVIPSBitmapFont: Fj ecbx1095 10.95 8
/Fj 8 115 df<3FFFFFFFFFFFFFF83FFFFFFFFFFFFFF83FFFFFFFFFFFFFF83FFFFFFFFF
FFFFF83FFC007FFC007FF83FE0007FFC000FF87F80007FFC0003FC7F00007FFC0001FC7E
00007FFC0000FC7E00007FFC0000FC7C00007FFC00007C7C00007FFC00007C7800007FFC
00003C7800007FFC00003C7800007FFC00003C7800007FFC00003C7800007FFC00003CF0
00007FFC00001EF000007FFC00001EF000007FFC00001EF000007FFC00001EF000007FFC
00001E0000007FFC0000000000007FFC0000000000007FFC0000000000007FFC00000000
00007FFC0000000000007FFC0000000000007FFC0000000000007FFC0000000000007FFC
0000000000007FFC0000000000007FFC0000000000007FFC0000000000007FFC00000000
00007FFC0000000000007FFC0000000000007FFC0000000000007FFC0000000000007FFC
0000000000007FFC0000000000007FFC0000000000007FFC0000000000007FFC00000000
00007FFC0000000000007FFC0000000000007FFC0000000000007FFC0000000000007FFC
0000000000007FFC0000000000007FFC0000000000007FFC0000000000007FFC00000000
00007FFC0000000000007FFC0000000000007FFC0000000000007FFC000000001FFFFFFF
FFF000001FFFFFFFFFF000001FFFFFFFFFF000001FFFFFFFFFF0003F3D7CBC48>84
D<0007FF800000003FFFF0000001FFFFFC000003FC03FF000007E000FFC0000FF8007FE0
001FF8003FF0001FFC003FF0001FFC001FF8001FFC001FF8001FFC000FFC001FFC000FFC
000FF8000FFC0007F0000FFC0001C0000FFC000000000FFC000000000FFC000000000FFC
00000003FFFC000001FFFFFC00000FFFFFFC00007FFF8FFC0001FFF00FFC0007FF800FFC
000FFF000FFC001FFC000FFC003FF8000FFC007FF8000FFC007FF0000FFC00FFF0000FFC
00FFE0000FFC00FFE0000FFC00FFE0000FFC00FFE0001FFC00FFE0001FFC00FFF0003FFC
007FF0003FFC007FF8007FFF003FFC01F7FFFC1FFE07E3FFFC07FFFF81FFFC01FFFE007F
FC001FF80000002E2B7DA932>97 D<0000FFE0000007FFFC00003FFFFF00007FE0FF8001
FF803FC003FF001FE007FE000FF00FFC000FF80FFC0007FC1FF80007FC3FF80003FE3FF8
0003FE3FF80003FE7FF00003FE7FF00003FF7FF00003FFFFF00001FFFFF00001FFFFF000
01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000FFF0000000FFF0000000FFF00000
00FFF00000007FF00000007FF00000007FF00000003FF80000003FF800000F1FF800000F
1FFC00001F0FFC00001E07FE00003E03FE00007C01FF0000F800FFC003F0007FF01FE000
1FFFFFC00007FFFE0000007FF000282B7DA92F>101 D<01F80003FC0007FE000FFF001F
FF801FFF801FFF801FFF801FFF801FFF800FFF0007FE0003FC0001F80000000000000000
000000000000000000000000000000000000000000FF00FFFF00FFFF00FFFF00FFFF0007
FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003
FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003
FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF00FFFFF8FFFFF8FFFFF8FFFFF815
407CBF1D>105 D<00FF00FFFF00FFFF00FFFF00FFFF0007FF0003FF0003FF0003FF0003
FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003
FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003
FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003
FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003
FF0003FF00FFFFFCFFFFFCFFFFFCFFFFFC163F7CBE1D>108 D<01FE003FF00001FF8000
FFFE00FFFE0007FFF000FFFE03FFFF801FFFFC00FFFE0FC0FFC07E07FE00FFFE1E007FE0
F003FF0007FE3C003FF1E001FF8003FE78003FF3C001FF8003FEF0003FF78001FF8003FF
E0001FFF0000FFC003FFC0001FFE0000FFC003FFC0001FFE0000FFC003FF80001FFC0000
FFC003FF80001FFC0000FFC003FF80001FFC0000FFC003FF00001FF80000FFC003FF0000
1FF80000FFC003FF00001FF80000FFC003FF00001FF80000FFC003FF00001FF80000FFC0
03FF00001FF80000FFC003FF00001FF80000FFC003FF00001FF80000FFC003FF00001FF8
0000FFC003FF00001FF80000FFC003FF00001FF80000FFC003FF00001FF80000FFC003FF
00001FF80000FFC003FF00001FF80000FFC003FF00001FF80000FFC003FF00001FF80000
FFC003FF00001FF80000FFC003FF00001FF80000FFC003FF00001FF80000FFC003FF0000
1FF80000FFC003FF00001FF80000FFC003FF00001FF80000FFC003FF00001FF80000FFC0
FFFFFC07FFFFE03FFFFFFFFFFC07FFFFE03FFFFFFFFFFC07FFFFE03FFFFFFFFFFC07FFFF
E03FFFFF50297CA857>I<01FE003FF00000FFFE00FFFE0000FFFE03FFFF8000FFFE0FC0
FFC000FFFE1E007FE00007FE3C003FF00003FE78003FF00003FEF0003FF00003FFE0001F
F80003FFC0001FF80003FFC0001FF80003FF80001FF80003FF80001FF80003FF80001FF8
0003FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF800
03FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003
FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF
00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF00
001FF80003FF00001FF80003FF00001FF800FFFFFC07FFFFE0FFFFFC07FFFFE0FFFFFC07
FFFFE0FFFFFC07FFFFE033297CA83A>I<01FE01FC00FFFE07FF80FFFE0FFFE0FFFE3F1F
F0FFFE3C1FF007FE783FF803FEF03FF803FEE03FF803FFE03FF803FFC03FF803FFC01FF0
03FF800FE003FF80038003FF80000003FF80000003FF00000003FF00000003FF00000003
FF00000003FF00000003FF00000003FF00000003FF00000003FF00000003FF00000003FF
00000003FF00000003FF00000003FF00000003FF00000003FF00000003FF00000003FF00
000003FF00000003FF00000003FF00000003FF000000FFFFFF0000FFFFFF0000FFFFFF00
00FFFFFF000025297DA82B>114 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fk ecrm1095 10.95 59
/Fk 59 235 df<00006000C000006000C00000E001C00000C001800001C0038000038007
0000038007000007800F000007000E00000F001E00001E003C00003C007800003C007800
007800F00000F801F00001F003E00003E007C00007C00F80000FC01F80001F803F00007F
00FE0000FE01FC0000FE01FC00007F00FE00001F803F00000FC01F800007C00F800003E0
07C00001F003E00000F801F000007800F000003C007800003C007800001E003C00000F00
1E000007000E000007800F00000380070000038007000001C003800000C001800000E001
C000006000C000006000C0222C76AB32>19 D<C001800000C001800000E001C000006000
C000007000E00000380070000038007000003C007800001C003800001E003C00000F001E
000007800F000007800F000003C007800003E007C00001F003E00000F801F000007C00F8
00007E00FC00003F007E00001FC03F80000FE01FC0000FE01FC0001FC03F80003F007E00
007E00FC00007C00F80000F801F00001F003E00003E007C00003C007800007800F000007
800F00000F001E00001E003C00001C003800003C00780000380070000038007000007000
E000006000C00000E001C00000C001800000C001800000222C7BAB32>I<FFFFFFFFFFF0
FFFFFFFFFFF02C0280982D>I<000003FF000FE000001FFFC07FF80000FE00F1F81C0001
F8003BE07E0007E0007FC0FF000FC001FFC0FF001F8001FF80FF003F0001FF00FF007F00
01FF00FF007E0001FF007E00FE0000FE000000FC00007E000000FC00007E000000FC0000
7E000000FC00007E000000FC00007E000000FC00007E000000FC00007E000000FC00007E
000000FC00007E000000FC00007E000000FC00007E000000FC00007E000000FC00007E00
0000FC00007E0000FFFFFFFFFFFF80FFFFFFFFFFFF80FFFFFFFFFFFF8000FC00007E0000
00FC00007E000000FC00007E000000FC00007E000000FC00007E000000FC00007E000000
FC00007E000000FC00007E000000FC00007E000000FC00007E000000FC00007E000000FC
00007E000000FC00007E000000FC00007E000000FC00007E000000FC00007E000000FC00
007E000000FC00007E000000FC00007E000000FC00007E000000FC00007E000000FC0000
7E000000FC00007E000000FC00007E000000FC00007E000000FC00007E000000FC00007E
000000FC00007E000000FC00007E000000FC00007E000000FC00007E000000FC00007E00
0001FE0000FF00007FFFF83FFFFF007FFFF83FFFFF007FFFF83FFFFF0038407FBF35>27
D<000003FE000000001FFFC0000000FE01E0000001F80078000007E0001C00000FC0007C
00001F8000FE00003F0001FE00007F0001FE00007E0001FE0000FE0001FE0000FC0000FC
0000FC0000780000FC0000000000FC0000000000FC0000000000FC0000000000FC000000
0000FC0000000000FC0000000000FC0000000000FC0000000000FC0000000000FC000000
0000FC00007E00FFFFFFFFFE00FFFFFFFFFE00FFFFFFFFFE0000FC0001FE0000FC0000FE
0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E
0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E
0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E
0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E
0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E
0001FE0000FF007FFFF83FFFFC7FFFF83FFFFC7FFFF83FFFFC2E407FBF32>I<000003FE
0001FF000000001FFF800FFFE0000000FE01E07F00F0000001F80078FC003C000007E000
1BF0000E00000FC0007FE0003E00001F8001FFC0007F00003F0001FF8000FF00007F0001
FF8000FF00007E0001FF0000FF0000FE0001FF0000FF0000FC0001FE00007E0000FC0000
7E00003C0000FC00007E0000000000FC00007E0000000000FC00007E0000000000FC0000
7E0000000000FC00007E0000000000FC00007E0000000000FC00007E0000000000FC0000
7E0000000000FC00007E0000000000FC00007E0000000000FC00007E0000000000FC0000
7E00003F00FFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFF0000FC0000
7E0000FF0000FC00007E00007F0000FC00007E00003F0000FC00007E00003F0000FC0000
7E00003F0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F0000FC0000
7E00003F0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F0000FC0000
7E00003F0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F0000FC0000
7E00003F0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F0000FC0000
7E00003F0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F0000FC0000
7E00003F0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F0000FC0000
7E00003F0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F0001FE0000
FF00007F807FFFF83FFFFC1FFFFE7FFFF83FFFFC1FFFFE7FFFF83FFFFC1FFFFE47407FBF
4B>30 D<1C007F00FF80FF80FFC0FFC0FFC07FC01CC000C000C000C000C000C001C00180
018003800300070006000E000C001C003800700060000A1B78BE19>39
D<0000300000700000E00001C0000380000700000F00001E00003C00003C0000780000F0
0000F00001E00001E00003C00003C00007C0000780000F80000F80000F00001F00001F00
001E00003E00003E00003E00003C00007C00007C00007C00007C00007C00007C00007800
00F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80000F800007800007C00007C00007C00007C00007C00
007C00003C00003E00003E00003E00001E00001F00001F00000F00000F80000F80000780
0007C00003C00003C00001E00001E00000F00000F000007800003C00003C00001E00000F
000007000003800001C00000E0000070000030145A77C323>I<C00000E0000070000038
00001C00000E00000F000007800003C00003C00001E00000F00000F00000780000780000
3C00003C00003E00001E00001F00001F00000F00000F80000F800007800007C00007C000
07C00003C00003E00003E00003E00003E00003E00003E00001E00001F00001F00001F000
01F00001F00001F00001F00001F00001F00001F00001F00001F00001F00001F00001F000
01F00001F00001F00001E00003E00003E00003E00003E00003E00003E00003C00007C000
07C00007C0000780000F80000F80000F00001F00001F00001E00003E00003C00003C0000
780000780000F00000F00001E00003C00003C0000780000F00000E00001C000038000070
0000E00000C00000145A7BC323>I<1C007F00FF80FF80FFC0FFC0FFC07FC01CC000C000
C000C000C000C001C00180018003800300070006000E000C001C003800700060000A1B78
8819>44 D<FFFFFEFFFFFEFFFFFEFFFFFEFFFFFE17057F951E>I<1C007F00FF80FF80FF
80FF80FF807F001C000909788819>I<0000C0000003C0000007C000001FC000007FC000
07FFC000FFFFC000FF9FC000F81FC000001FC000001FC000001FC000001FC000001FC000
001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000
001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000
001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000
001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000
001FC000001FC000001FC000001FC000001FC000001FC000001FC000007FF000FFFFFFF8
FFFFFFF8FFFFFFF81D3D78BC2D>49 D<0007FC0000003FFF800000FFFFE00001F00FF800
078003FC000F0001FE000E0000FF001C00007F803800003FC03000003FC07000001FE060
00001FE06000001FE0FE00000FF0FF00000FF0FF80000FF0FF80000FF0FF80000FF0FF80
000FF0FF80000FF07F00000FF01C00000FF00000000FE00000001FE00000001FE0000000
1FC00000003FC00000003F800000007F800000007F00000000FE00000001FC00000001FC
00000003F800000007F00000000FE00000000FC00000001F800000003E000000007C0000
0000F800000001F000000003E000000003C000000007800000000F000030001E00003000
3C000030007800003000F000006001E000006003C0000060078000006007000000E00FFF
FFFFE01FFFFFFFE03FFFFFFFE07FFFFFFFC0FFFFFFFFC0FFFFFFFFC0FFFFFFFFC0243D7C
BC2D>I<0007FC0000003FFF800000FFFFE00001F807F80007C003FC000F0001FE000E00
00FF001C00007F801F80007F803FC0003FC03FE0003FC03FE0003FC03FE0003FC03FE000
3FC03FE0003FC01FC0003FC00700003FC00000003F800000007F800000007F800000007F
00000000FF00000000FE00000001FC00000003F800000003F00000000FC00000003F0000
001FFC0000001FFF800000000FE000000003F800000001FC00000000FE000000007F0000
00007F800000003FC00000003FC00000003FE00000003FE00000001FE00000001FF00000
001FF00C00001FF03F00001FF07F80001FF0FFC0001FF0FFC0001FF0FFC0001FF0FFC000
1FF0FFC0003FE0FF80003FE07F00003FC07000003FC07000007F803800007F801C0000FF
000F0001FE0007C003FC0003F80FF00000FFFFE000003FFF80000007FC0000243F7CBC2D
>I<0000000E000000000E000000001E000000003E000000003E000000007E00000000FE
00000000FE00000001FE00000003FE00000003FE00000006FE0000000EFE0000000CFE00
000018FE00000038FE00000030FE00000060FE000000E0FE000000C0FE00000180FE0000
0380FE00000300FE00000600FE00000E00FE00000C00FE00001800FE00003800FE000030
00FE00006000FE0000E000FE0000C000FE00018000FE00038000FE00030000FE00060000
FE000E0000FE000C0000FE00180000FE00380000FE00300000FE00600000FE00E00000FE
00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000FE00000000FE00000000FE00000000FE00
000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE0000
0000FE00000001FF000001FFFFFF0001FFFFFF0001FFFFFF283E7EBD2D>I<0600000300
07C0000F0007F800FE0007FFFFFC0007FFFFFC0007FFFFF00007FFFFE00007FFFFC00007
FFFF0000063FF80000060000000006000000000600000000060000000006000000000600
000000060000000006000000000600000000060000000006000000000600000000060000
00000601FE0000060FFF8000063E03E000067001F80006E000FC0007C0007E000780003F
000700003F800600001F800000001FC00000001FC00000001FE00000000FE00000000FE0
0000000FE00000000FF00000000FF00000000FF00000000FF03E00000FF07F00000FF0FF
80000FF0FF80000FF0FF80000FF0FF80000FF0FF00000FE0FE00001FE0E000001FE06000
001FC07000001FC03000003F803800003F801C00007F001E0000FE000F0001FC0007C003
F80003F00FE00000FFFFC000003FFF00000007F80000243F7CBC2D>I<1C007F00FF80FF
80FF80FF80FF807F001C0000000000000000000000000000000000000000000000000000
00000000000000000000000000000000001C007F00FF80FF80FF80FF80FF807F001C0009
2778A619>58 D<0000000700000000000000070000000000000007000000000000000F80
0000000000000F800000000000001FC00000000000001FC00000000000001FC000000000
00003FE00000000000003FE00000000000003FE00000000000007FF00000000000006FF0
0000000000006FF0000000000000CFF8000000000000C7F8000000000000C7F800000000
000187FC00000000000183FC00000000000183FC00000000000301FE00000000000301FE
00000000000301FE00000000000600FF00000000000600FF00000000000E00FF80000000
000C007F80000000000C007F80000000001C007FC00000000018003FC00000000018003F
C00000000030003FE00000000030001FE00000000030001FE00000000060001FF0000000
0060000FF00000000060000FF000000000C00007F800000000C00007F800000000C00007
F800000001800003FC00000001FFFFFFFC00000003FFFFFFFE00000003FFFFFFFE000000
03000001FE00000007000001FF00000006000000FF00000006000000FF0000000C000000
FF8000000C0000007F8000000C0000007F800000180000007FC00000180000003FC00000
180000003FC00000300000001FE00000300000001FE00000700000001FE0000070000000
0FF00000F00000000FF00001F00000000FF80003F80000000FF8000FFE0000003FFE00FF
FFC00007FFFFF8FFFFC00007FFFFF8FFFFC00007FFFFF83D417DC044>65
D<0000003FF0000C000003FFFE001C00001FFFFF801C00007FE00FC03C0000FF0001F07C
0003FC0000787C0007F000003CFC001FE000000FFC003FC0000007FC007F80000003FC00
FF00000003FC01FE00000001FC01FC00000000FC03FC00000000FC07F8000000007C07F8
000000007C0FF0000000003C0FF0000000003C1FE0000000001C1FE0000000001C3FE000
0000001C3FC0000000001C3FC0000000000C7FC0000000000C7FC0000000000C7FC00000
00000C7F800000000000FF800000000000FF800000000000FF800000000000FF80000000
0000FF800000000000FF800000000000FF800000000000FF800000000000FF8000000000
00FF800000000000FF800000000000FF8000000000007F8000000000007FC00000000000
7FC0000000000C7FC0000000000C3FC0000000000C3FC0000000000C3FE0000000000C1F
E0000000001C1FE000000000180FF000000000180FF0000000001807F8000000003807F8
000000003003FC000000007001FC000000006001FE00000000E000FF00000001C0007F80
00000380003FC000000780001FE000000F000007F000001E000003FC00003C000000FF00
00F00000007FE007E00000001FFFFF8000000003FFFE00000000003FF0000036427BBF41
>67 D<FFFFFFFFFC000000FFFFFFFFFF800000FFFFFFFFFFE0000000FFC0001FF8000000
7F800003FE0000007F800000FF0000007F8000003F8000007F8000001FC000007F800000
0FE000007F80000007F000007F80000003F800007F80000001FC00007F80000001FC0000
7F80000000FE00007F80000000FF00007F800000007F00007F800000007F80007F800000
003F80007F800000003FC0007F800000003FC0007F800000003FC0007F800000003FE000
7F800000001FE0007F800000001FE0007F800000001FE0007F800000001FE0007F800000
001FF0007F800000001FF0007F800000001FF0007F800000001FF0007F800000001FF000
7F800000001FF0007F800000001FF0007F800000001FF0007F800000001FF0007F800000
001FF0007F800000001FF0007F800000001FE0007F800000001FE0007F800000001FE000
7F800000001FE0007F800000003FE0007F800000003FC0007F800000003FC0007F800000
003F80007F800000007F80007F800000007F80007F800000007F00007F80000000FE0000
7F80000000FE00007F80000001FC00007F80000003F800007F80000007F800007F800000
0FF000007F8000001FE000007F8000003FC000007F800000FF0000007F800003FE000000
FFC0001FF80000FFFFFFFFFFF00000FFFFFFFFFF800000FFFFFFFFFC0000003C3E7DBD45
>I<FFFFFFFFFFFFC0FFFFFFFFFFFFC0FFFFFFFFFFFFC000FFC00001FFC0007F8000001F
C0007F8000000FE0007F80000003E0007F80000003E0007F80000001E0007F80000000E0
007F80000000E0007F80000000E0007F8000000060007F8000000060007F800000006000
7F8000000060007F8000000030007F8000300030007F8000300030007F8000300030007F
8000300030007F8000300000007F8000300000007F8000700000007F8000700000007F80
00F00000007F8001F00000007F8007F00000007FFFFFF00000007FFFFFF00000007FFFFF
F00000007F8007F00000007F8001F00000007F8000F00000007F8000700000007F800070
0000007F8000300000007F8000300000007F8000300006007F8000300006007F80003000
06007F800030000C007F800000000C007F800000000C007F800000000C007F800000000C
007F800000001C007F8000000018007F8000000018007F8000000038007F800000003800
7F8000000078007F8000000078007F80000000F0007F80000001F0007F80000003F0007F
80000007F0007F8000001FF000FFC00001FFF0FFFFFFFFFFFFE0FFFFFFFFFFFFE0FFFFFF
FFFFFFE0373E7DBD3D>I<FFFFFFC0FFFFFFC0FFFFFFC001FFE000007F8000007F800000
7F8000007F8000007F8000007F8000007F8000007F8000007F8000007F8000007F800000
7F8000007F8000007F8000007F8000007F8000007F8000007F8000007F8000007F800000
7F8000007F8000007F8000007F8000007F8000007F8000007F8000007F8000007F800000
7F8000007F8000007F8000007F8000007F8000007F8000007F8000007F8000007F800000
7F8000007F8000007F8000007F8000007F8000007F8000007F8000007F8000007F800000
7F8000007F8000007F8000007F8000007F8000007F8000007F800001FFE000FFFFFFC0FF
FFFFC0FFFFFFC01A3E7DBD21>73 D<FFFFFFF00000FFFFFFF00000FFFFFFF0000000FFE0
000000007F80000000007F80000000007F80000000007F80000000007F80000000007F80
000000007F80000000007F80000000007F80000000007F80000000007F80000000007F80
000000007F80000000007F80000000007F80000000007F80000000007F80000000007F80
000000007F80000000007F80000000007F80000000007F80000000007F80000000007F80
000000007F80000000007F80000000007F80000000007F80000000007F80000000007F80
000000007F80000000007F80000000007F80000000007F80000000007F80000003007F80
000003007F80000003007F80000003007F80000003007F80000007007F80000006007F80
000006007F80000006007F80000006007F8000000E007F8000000E007F8000000E007F80
00001E007F8000001E007F8000003E007F8000007E007F800000FE007F800001FC007F80
0007FC00FFC0003FFCFFFFFFFFFFFCFFFFFFFFFFFCFFFFFFFFFFFC303E7DBD38>76
D<FFFF80000000001FFFF0FFFFC0000000003FFFF0FFFFC0000000003FFFF000FFC00000
00003FF000006FE0000000006FE000006FE0000000006FE0000067F000000000CFE00000
67F000000000CFE0000067F000000000CFE0000063F8000000018FE0000063F800000001
8FE0000061FC000000030FE0000061FC000000030FE0000061FC000000030FE0000060FE
000000060FE0000060FE000000060FE00000607F0000000C0FE00000607F0000000C0FE0
0000607F0000000C0FE00000603F800000180FE00000603F800000180FE00000603F8000
00180FE00000601FC00000300FE00000601FC00000300FE00000600FE00000600FE00000
600FE00000600FE00000600FE00000600FE000006007F00000C00FE000006007F00000C0
0FE000006003F80001800FE000006003F80001800FE000006003F80001800FE000006001
FC0003000FE000006001FC0003000FE000006000FE0006000FE000006000FE0006000FE0
00006000FE0006000FE0000060007F000C000FE0000060007F000C000FE0000060003F80
18000FE0000060003F8018000FE0000060003F8018000FE0000060001FC030000FE00000
60001FC030000FE0000060000FE060000FE0000060000FE060000FE0000060000FE06000
0FE00000600007F0C0000FE00000600007F0C0000FE00000600003F980000FE000006000
03F980000FE00000600003F980000FE00000600001FF00000FE00000600001FF00000FE0
0000600000FE00000FE00000600000FE00000FE00000F00000FE00000FE00001F800007C
00000FE00007FE00007C00001FF000FFFFF00038001FFFFFF0FFFFF00038001FFFFFF0FF
FFF00038001FFFFFF04C3E7DBD53>I<000000FFE0000000000007FFFC00000000003FC0
7F8000000000FE000FE000000001F80003F000000007E00000FC0000000FC000007E0000
001F8000003F0000003F0000001F8000007E0000000FC00000FE0000000FE00001FC0000
0007F00003F800000003F80003F800000003F80007F000000001FC0007F000000001FC00
0FE000000000FE001FE000000000FF001FE000000000FF001FC0000000007F003FC00000
00007F803FC0000000007F803FC0000000007F807FC0000000007FC07F80000000003FC0
7F80000000003FC07F80000000003FC0FF80000000003FE0FF80000000003FE0FF800000
00003FE0FF80000000003FE0FF80000000003FE0FF80000000003FE0FF80000000003FE0
FF80000000003FE0FF80000000003FE0FF80000000003FE0FF80000000003FE0FF800000
00003FE07F80000000003FC07FC0000000007FC07FC0000000007FC07FC0000000007FC0
7FC0000000007FC03FC0000000007F803FE000000000FF801FE000000000FF001FE00000
0000FF001FE000000000FF000FF000000001FE000FF000000001FE0007F800000003FC00
03F800000003F80003FC00000007F80001FC00000007F00000FE0000000FE000007F0000
001FC000003F8000003F8000001F8000003F0000000FE00000FE00000007F00001FC0000
0001F80003F000000000FE000FE0000000003FC07F800000000007FFFC000000000000FF
E00000003B427BBF46>79 D<FFFFFFFFF00000FFFFFFFFFF0000FFFFFFFFFFC00000FFC0
003FF000007F800007F800007F800001FE00007F800000FF00007F8000007F00007F8000
007F80007F8000003FC0007F8000003FC0007F8000001FE0007F8000001FE0007F800000
1FF0007F8000001FF0007F8000001FF0007F8000001FF0007F8000001FF0007F8000001F
F0007F8000001FF0007F8000001FF0007F8000001FE0007F8000001FE0007F8000003FC0
007F8000003FC0007F8000007F80007F8000007F00007F800000FE00007F800003FC0000
7F800007F800007F80003FE000007FFFFFFF8000007FFFFFFC0000007F8000000000007F
8000000000007F8000000000007F8000000000007F8000000000007F8000000000007F80
00000000007F8000000000007F8000000000007F8000000000007F8000000000007F8000
000000007F8000000000007F8000000000007F8000000000007F8000000000007F800000
0000007F8000000000007F8000000000007F8000000000007F8000000000007F80000000
00007F8000000000007F8000000000007F800000000000FFC000000000FFFFFFC0000000
FFFFFFC0000000FFFFFFC0000000343E7DBD3D>I<FFFFFFFFC0000000FFFFFFFFFC0000
00FFFFFFFFFF80000000FFC0007FE00000007F80000FF00000007F800003FC0000007F80
0001FE0000007F800000FF0000007F8000007F8000007F8000003FC000007F8000003FC0
00007F8000003FE000007F8000001FE000007F8000001FF000007F8000001FF000007F80
00001FF000007F8000001FF000007F8000001FF000007F8000001FF000007F8000001FF0
00007F8000001FE000007F8000003FE000007F8000003FC000007F8000003F8000007F80
00007F8000007F800000FF0000007F800001FC0000007F800003F80000007F80000FE000
00007F8000FF800000007FFFFFFC000000007FFFFFF8000000007F8000FF000000007F80
003FC00000007F80000FE00000007F800007F00000007F800003F80000007F800003FC00
00007F800001FE0000007F800001FE0000007F800000FF0000007F800000FF0000007F80
0000FF0000007F800000FF0000007F800000FF0000007F800000FF0000007F800000FF80
00007F800000FF8000007F800000FF8000007F800000FF8000007F800000FF8000007F80
0000FF8000007F800000FF8000007F800000FF8006007F800000FFC006007F8000007FC0
06007F8000007FC006007F8000007FC00E00FFC000003FE00CFFFFFFC0001FE01CFFFFFF
C0000FF038FFFFFFC00007F870000000000001FFE00000000000003F803F407DBD43>82
D<0007FC0018003FFF803800FFFFE03801FC03F87803F0007C7807C0001EF80F80000FF8
1F000007F83F000003F83E000001F87E000000F87E000000F87C00000078FC00000078FC
00000078FC00000038FC00000038FC00000038FE00000018FE00000018FF00000018FF00
0000187F800000007FC00000007FE00000003FF80000003FFF0000001FFFF000000FFFFF
00000FFFFFF00007FFFFFC0001FFFFFE0000FFFFFF80003FFFFFC00007FFFFE000007FFF
E0000007FFF00000007FF80000001FF80000000FFC00000007FC00000003FC00000001FE
00000001FEC0000000FEC0000000FEC0000000FEC00000007EC00000007EE00000007EE0
0000007EE00000007EE00000007CF00000007CF0000000FCF8000000F8FC000001F8FE00
0001F0FF000003F0FF800007E0FBE0000FC0F1F8001F80F07F007F00E01FFFFC00E007FF
F000C0007FC00027427BBF32>I<3FFFFFFFFFFFFF003FFFFFFFFFFFFF003FFFFFFFFFFF
FF003FE000FFC001FF003F00007F80003F007E00007F80001F807C00007F80000F807800
007F800007807000007F800003807000007F800003807000007F800003806000007F8000
01806000007F800001806000007F800001806000007F800001806000007F80000180C000
007F800000C0C000007F800000C0C000007F800000C0C000007F800000C0C000007F8000
00C00000007F800000000000007F800000000000007F800000000000007F800000000000
007F800000000000007F800000000000007F800000000000007F800000000000007F8000
00000000007F800000000000007F800000000000007F800000000000007F800000000000
007F800000000000007F800000000000007F800000000000007F800000000000007F8000
00000000007F800000000000007F800000000000007F800000000000007F800000000000
007F800000000000007F800000000000007F800000000000007F800000000000007F8000
00000000007F800000000000007F800000000000007F800000000000007F800000000000
007F800000000000007F800000000000007F800000000000007F800000000000007F8000
0000000000FFC0000000000001FFE00000000007FFFFFFF800000007FFFFFFF800000007
FFFFFFF800003A3E7DBD41>I<001FF0000000FFFC000003E03F00000F000FC0001C0007
E0001F0003F0003F8001F8003FC000FC003FC000FC003FC000FC003FC0007E001F80007E
000F00007E000000007E000000007E000000007E000000007E0000001FFE000003FFFE00
001FF87E00007F807E0001FC007E0007F0007E000FE0007E001FC0007E003F80007E007F
80007E007F00007E007F00007E03FE00007E03FE00007E03FE00007E03FE0000FE03FE00
00FE03FE0001FE037F0001BE037F0003BE033F80071F061FC00E1F8E0FF03C0FFC03FFF0
07F8003FC003E0282A7CA82D>97 D<01F800000000FFF800000000FFF800000000FFF800
00000007F80000000003F80000000001F80000000001F80000000001F80000000001F800
00000001F80000000001F80000000001F80000000001F80000000001F80000000001F800
00000001F80000000001F80000000001F80000000001F80000000001F80000000001F800
00000001F80000000001F807F8000001F81FFF000001F8780FC00001F9E003F00001FB80
01F80001FF0000FC0001FE00007E0001FC00003F0001FC00001F8001F800001F8001F800
001FC001F800000FC001F800000FE001F800000FE001F8000007E001F8000007F001F800
0007F001F8000007F001F8000007F001F8000007F001F8000007F001F8000007F001F800
0007F001F8000007F001F8000007F001F8000007E001F800000FE001F800000FE001F800
000FE001F800000FC001F800001FC001F800001F8001FC00003F0001FE00003F0001F600
007E0001F70000FC0001E38001F80001C1C003E00001C0F81F800001803FFE0000000007
F000002C407EBE32>I<0001FF0000000FFFE000003F00F800007C001E0001F800070003
F0001F0007E0003F800FC0007F800FC0007F801F80007F801F80007F803F00003F003F00
001E007F000000007F000000007E00000000FE00000000FE00000000FE00000000FE0000
0000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE000000
007F000000007F000000007F000000003F000000C03F800000C01F800001C01FC0000180
0FC000038007E000070003F000060001F8001E0000FC003800003F01F000000FFFC00000
01FE0000222A7DA828>I<00000001F800000000FFF800000000FFF800000000FFF80000
000007F80000000003F80000000001F80000000001F80000000001F80000000001F80000
000001F80000000001F80000000001F80000000001F80000000001F80000000001F80000
000001F80000000001F80000000001F80000000001F80000000001F80000000001F80000
000001F8000000FF01F8000007FFC1F800001F80F1F800007C0039F80001F8001DF80003
F0000FF80007E00007F8000FC00003F8000FC00003F8001F800001F8003F800001F8003F
000001F8007F000001F8007F000001F8007F000001F8007E000001F800FE000001F800FE
000001F800FE000001F800FE000001F800FE000001F800FE000001F800FE000001F800FE
000001F800FE000001F800FE000001F8007E000001F8007F000001F8007F000001F8003F
000001F8003F800001F8001F800003F8001F800003F8000FC00007F80007E0000FF80003
F0000DFC0001F8003DFE0000FC0071FFF0003F01E1FFF0000FFF81FFF00001FE01F8002C
407DBE32>I<0003FC0000001FFF8000007E07E00000F801F00001F000F80003E0007C00
07C0003E000FC0003F001F80001F001F80001F803F00001F803F00000F807F00000F807F
00000FC07E00000FC07E00000FC0FE00000FC0FE00000FC0FFFFFFFFC0FFFFFFFFC0FE00
000000FE00000000FE00000000FE00000000FE00000000FE000000007E000000007F0000
00007F000000007F000000003F000000C03F800000C01F800001C00FC00001800FC00003
8007E000070003F0000E0001F8001C0000FC003800003F01F000000FFFC0000001FE0000
222A7DA828>I<00001FC00000FFF00003F0380007C0FC000F81FE001F81FE003F01FE00
3E01FE007E01FE007E00FC00FC000000FC000000FC000000FC000000FC000000FC000000
FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC0000FF
FFFF00FFFFFF00FFFFFF0000FC000000FC000000FC000000FC000000FC000000FC000000
FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000
FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000
FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000001FE00007F
FFFE007FFFFE007FFFFE001F407FBF1C>I<000000007E000003FC01FF00000FFF078780
003E07CE0F8000FC03FC0F8001F801F80F8003F000FC070003E0007C000007E0007E0000
07E0007E00000FC0003F00000FC0003F00000FC0003F00000FC0003F00000FC0003F0000
0FC0003F00000FC0003F00000FC0003F000007E0007E000007E0007E000003E0007C0000
03F000FC000001F801F8000001FC03F0000001BE07C00000038FFF0000000303FC000000
070000000000070000000000070000000000070000000000078000000000078000000000
07C00000000003E00000000003FFFFF0000001FFFFFE000001FFFFFF8000007FFFFFE000
01FFFFFFF80007C0001FF8001F800003FC003F000000FE003E0000007E007C0000003E00
7C0000003F00F80000001F00F80000001F00F80000001F00F80000001F00F80000001F00
FC0000003F007C0000003E007E0000007E003F000000FC001F800001F8000FC00003F000
03F0000FC00000FE007F0000003FFFFC00000003FFC00000293D7EA82D>I<01F8000000
00FFF800000000FFF800000000FFF80000000007F80000000003F80000000001F8000000
0001F80000000001F80000000001F80000000001F80000000001F80000000001F8000000
0001F80000000001F80000000001F80000000001F80000000001F80000000001F8000000
0001F80000000001F80000000001F80000000001F80000000001F803FC000001F80FFF80
0001F83C0FC00001F8F003E00001F9C003F00001FB8001F80001FB0001F80001FF0000FC
0001FE0000FC0001FE0000FC0001FC0000FC0001FC0000FC0001F80000FC0001F80000FC
0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC
0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC
0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC
0001F80000FC0001F80000FC0001F80000FC0001F80000FC0003FC0001FE00FFFFF07FFF
F8FFFFF07FFFF8FFFFF07FFFF82D3F7EBE32>I<01C00007F0000FF8000FF8000FF8000F
F8000FF80007F00001C00000000000000000000000000000000000000000000000000000
000000000000000000000001F8007FF8007FF8007FF80007F80003F80001F80001F80001
F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001
F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001
F80001F80001F80001F80003FC00FFFFE0FFFFE0FFFFE0133D7EBC19>I<0000700001FC
0003FE0003FE0003FE0003FE0003FE0001FC000070000000000000000000000000000000
0000000000000000000000000000000000000000000000FE003FFE003FFE003FFE0001FE
0000FE00007E00007E00007E00007E00007E00007E00007E00007E00007E00007E00007E
00007E00007E00007E00007E00007E00007E00007E00007E00007E00007E00007E00007E
00007E00007E00007E00007E00007E00007E00007E00007E00007E00007E00007E00007E
00007E00007E00007E00007E00007E00007E00007E3C007E7E007CFF00FCFF00FCFF00F8
FF01F8FE01F07803E03E07C00FFF0001FC00175084BC1C>I<01F800FFF800FFF800FFF8
0007F80003F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F8
0001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F8
0001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F8
0001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F8
0001F80001F80001F80001F80001F80001F80001F80003FC00FFFFF0FFFFF0FFFFF0143F
7EBE19>108 D<01F803FC0001FE0000FFF80FFF8007FFC000FFF83C0FC01E07E000FFF8
F003E07801F00007F9C003F0E001F80003FB8001F9C000FC0001FB0001F98000FC0001FF
0000FF80007E0001FE0000FF00007E0001FE0000FF00007E0001FC0000FE00007E0001FC
0000FE00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F8
0000FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F8
0000FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F8
0000FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F8
0000FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F8
0000FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F8
0000FC00007E0003FC0001FE0000FF00FFFFF07FFFF83FFFFCFFFFF07FFFF83FFFFCFFFF
F07FFFF83FFFFC46287EA74B>I<01F803FC0000FFF80FFF8000FFF83C0FC000FFF8F003
E00007F9C003F00003FB8001F80001FB0001F80001FF0000FC0001FE0000FC0001FE0000
FC0001FC0000FC0001FC0000FC0001F80000FC0001F80000FC0001F80000FC0001F80000
FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000
FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000
FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000
FC0001F80000FC0001F80000FC0003FC0001FE00FFFFF07FFFF8FFFFF07FFFF8FFFFF07F
FFF82D287EA732>I<0001FE0000000FFFC000003F03F000007C00F80001F0003E0003E0
001F0007C0000F8007C0000F800F800007C01F800007E01F000003E03F000003F03F0000
03F07E000001F87E000001F87E000001F87E000001F8FE000001FCFE000001FCFE000001
FCFE000001FCFE000001FCFE000001FCFE000001FCFE000001FCFE000001FC7E000001F8
7E000001F87E000001F87F000003F83F000003F03F000003F01F800007E00F800007C00F
C0000FC007C0000F8003E0001F0001F0003E0000FC00FC00003F03F000000FFFC0000001
FE0000262A7DA82D>I<01F807F80000FFF81FFF0000FFF8780FC000FFF9E003F00003FB
8001F80001FF0000FC0001FE00007E0001FC00007F0001FC00003F8001F800001F8001F8
00001FC001F800001FC001F800000FE001F800000FE001F800000FE001F800000FF001F8
000007F001F8000007F001F8000007F001F8000007F001F8000007F001F8000007F001F8
000007F001F8000007F001F8000007F001F800000FE001F800000FE001F800000FE001F8
00000FE001F800001FC001F800001FC001F800003F8001FC00003F0001FE00007F0001FE
0000FE0001FF0001FC0001FB8003F80001F9C007E00001F8F81F800001F83FFE000001F8
07F0000001F80000000001F80000000001F80000000001F80000000001F80000000001F8
0000000001F80000000001F80000000001F80000000001F80000000001F80000000001F8
0000000001F80000000003FC00000000FFFFF0000000FFFFF0000000FFFFF00000002C3A
7EA732>I<0000FF000C000007FFC01C00001F80F01C00007E00381C0000FC001C3C0003
F8000E3C0007F000077C0007E000037C000FC00003FC001FC00001FC003F800001FC003F
800000FC007F000000FC007F000000FC007F000000FC007F000000FC00FE000000FC00FE
000000FC00FE000000FC00FE000000FC00FE000000FC00FE000000FC00FE000000FC00FE
000000FC00FE000000FC00FF000000FC007F000000FC007F000000FC007F000000FC003F
800000FC003F800001FC001FC00001FC000FC00003FC000FE00003FC0007E00007FC0003
F0000EFC0001F8001CFC00007E0078FC00003F01E0FC00000FFFC0FC000001FE00FC0000
000000FC0000000000FC0000000000FC0000000000FC0000000000FC0000000000FC0000
000000FC0000000000FC0000000000FC0000000000FC0000000000FC0000000000FC0000
000000FC0000000001FE000000007FFFF80000007FFFF80000007FFFF82D3A7DA730>I<
03F00FC0FFF03FF0FFF0F0F8FFF1C3FC07F183FC03F383FC01F703FC01F603FC01F601F8
01FE006001FC000001FC000001FC000001FC000001F8000001F8000001F8000001F80000
01F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F80000
01F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F80000
03FC0000FFFFF800FFFFF800FFFFF8001E287EA723>I<007FC06003FFF8E007C03DE01E
000FE03C0003E0780001E0780001E0700000E0F00000E0F0000060F0000060F8000060F8
000060FC000060FF0000007FC000007FFE00003FFFE0001FFFFC0007FFFE0003FFFF8000
7FFFC00007FFE000003FE000000FF0C00003F0C00001F8C00000F8E00000F8E0000078E0
000078F0000078F0000078F8000078F80000F0FC0000F0FC0001E0FE0001C0F7800780F1
E01F00E0FFFC00C01FE0001D2A7DA824>I<001800000018000000180000001800000018
00000018000000380000003800000038000000380000007800000078000000F8000000F8
000001F8000003F8000007F800001FFFFFC0FFFFFFC0FFFFFFC001F8000001F8000001F8
000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8
000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8
006001F8006001F8006001F8006001F8006001F8006001F8006001F8006001F8006000FC
00E000FC00C000FC00C0007E01C0003F0380001F87000007FE000001F8001B397EB723>
I<01F80000FC00FFF8007FFC00FFF8007FFC00FFF8007FFC0007F80003FC0003F80001FC
0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC
0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC
0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC
0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80001FC
0001F80001FC0001F80001FC0001F80003FC0000F80003FC0000FC0007FC0000FC000EFE
00007C001CFF00003E0038FFF8001F80F0FFF80007FFE0FFF80000FF00FC002D297EA732
>I<FFFFC007FFE0FFFFC007FFE0FFFFC007FFE007FC0001FF0003F800007C0003F80000
780001F80000700001FC0000700000FC0000600000FC00006000007E0000C000007E0000
C000007F0001C000003F00018000003F00018000001F80030000001F80030000001FC007
0000000FC0060000000FC00600000007E00C00000007E00C00000007F01C00000003F018
00000003F01800000001F83000000001F83000000001FC7000000000FC6000000000FC60
000000007EC0000000007EC0000000007FC0000000003F80000000003F80000000001F00
000000001F00000000001F00000000000E00000000000E0000002B287EA630>I<7FFFC0
0FFFE07FFFC00FFFE07FFFC00FFFE003FF0007FE0000FF0003F800007F0003E000003F00
03C000003F80038000001FC0070000000FC00E00000007E00C00000007F01800000003F8
3800000001F87000000000FCE000000000FEC0000000007F80000000003F80000000001F
80000000000FC0000000000FE0000000001FE0000000003BF00000000071F800000000E1
FC00000000C0FE00000001807E00000003803F00000007003F8000000E001FC000000C00
0FC000001C0007E00000380007F00000F80003F80001F80003FC000FFC0007FE00FFFF00
1FFFF8FFFF001FFFF8FFFF001FFFF82D277FA630>120 D<FFFFC007FFE0FFFFC007FFE0
FFFFC007FFE007FC0001FF0003F800007C0001F80000780001F80000700001FC00007000
00FC0000600000FE00006000007E0000C000007E0000C000003F00018000003F00018000
003F80038000001F80030000001F80030000000FC0060000000FC0060000000FE00E0000
0007E00C00000007E00C00000003F01800000003F01800000003F83800000001F8300000
0001FC3000000000FC6000000000FC60000000007EC0000000007EC0000000007FC00000
00003F80000000003F80000000001F00000000001F00000000001F00000000000E000000
00000E00000000000C00000000000C00000000001C000000000018000000000018000000
0000300000000000300000000000600000003800600000007C00E0000000FE00C0000000
FE01C0000000FE0180000000FE03000000007C0700000000700E00000000383C00000000
1FF80000000007E0000000002B3A7EA630>I<1FFFFFFF801FFFFFFF801FE0007F801F00
007F001E0000FE001C0001FC001C0003FC00180003F800380007F00038000FE00030001F
E00030001FC00030003F800030007F000030007F00000000FE00000001FC00000003FC00
000003F800000007F00000000FE00000001FE00000001FC00180003F800180007F000180
007F00018000FE00018001FC00018003FC00038003F800038007F00003000FE00003001F
E00007001FC0000F003F80000F007F00003F00FF0001FF00FFFFFFFF00FFFFFFFF002127
7EA628>I<001C000000003E000000003F000000003F800000003FC00000001FE0000000
0FF000000003F800000000FC000000007E000000001F0000000007800000000380000000
008000000000000000000000000000000000001FF0000000FFFC000003E03F00000F000F
C0001C0007E0001F0003F0003F8001F8003FC000FC003FC000FC003FC000FC003FC0007E
001F80007E000F00007E000000007E000000007E000000007E000000007E0000001FFE00
0003FFFE00001FF87E00007F807E0001FC007E0007F0007E000FE0007E001FC0007E003F
80007E007F80007E007F00007E007F00007E03FE00007E03FE00007E03FE00007E03FE00
00FE03FE0000FE03FE0001FE037F0001BE037F0003BE033F80071F061FC00E1F8E0FF03C
0FFC03FFF007F8003FC003E0283B7CB92D>224 D<0001FF0000000FFFE000003F00F800
007C001E0001F800070003F0001F0007E0003F800FC0007F800FC0007F801F80007F801F
80007F803F00003F003F00001E007F000000007F000000007E00000000FE00000000FE00
000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE0000
0000FE00000000FE000000007F000000007F000000007F000000003F000000C03F800000
C01F800001C01FC00001800FC000038007E000070003F000060001F8001E0000FC003800
003F01F000000FFFC0000001FE00000000FC00000000FC00000000FC00000000FC000000
00FF800000001FE000000007F000000003F800000001F800000001F800000001F8000000
01F800000003F800000007F00000003FE000007FFF8000007FF00000223B7DA828>231
D<000E000000001F000000001F800000001FC00000001FE00000000FF000000007F80000
0001FC000000007E000000003F000000000F8000000003C000000001C000000000400000
00000000000000000000000000000003FC0000001FFF8000007E07E00000F801F00001F0
00F80003E0007C0007C0003E000FC0003F001F80001F001F80001F803F00001F803F0000
0F807F00000F807F00000FC07E00000FC07E00000FC0FE00000FC0FE00000FC0FFFFFFFF
C0FFFFFFFFC0FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000
7E000000007F000000007F000000007F000000003F000000C03F800000C01F800001C00F
C00001800FC000038007E000070003F0000E0001F8001C0000FC003800003F01F000000F
FFC0000001FE0000223B7DB928>I<00000E000000001F000000003F000000007F000000
00FF00000001FE00000003FC00000007F00000000FC00000001F800000003E0000000078
000000007000000000400000000000000000000000000000000000000003FC0000001FFF
8000007E07E00000F801F00001F000F80003E0007C0007C0003E000FC0003F001F80001F
001F80001F803F00001F803F00000F807F00000F807F00000FC07E00000FC07E00000FC0
FE00000FC0FE00000FC0FFFFFFFFC0FFFFFFFFC0FE00000000FE00000000FE00000000FE
00000000FE00000000FE000000007E000000007F000000007F000000007F000000003F00
0000C03F800000C01F800001C00FC00001800FC000038007E000070003F0000E0001F800
1C0000FC003800003F01F000000FFFC0000001FE0000223B7DB928>I<0000C000000001
E000000003F000000007F80000000F3C0000001E1E0000001C0E00000038070000007003
800000E001C00001C000E000038000700007000038000200001000000000000000000000
0000000000000003FC0000001FFF8000007E07E00000F801F00001F000F80003E0007C00
07C0003E000FC0003F001F80001F001F80001F803F00001F803F00000F807F00000F807F
00000FC07E00000FC07E00000FC0FE00000FC0FE00000FC0FFFFFFFFC0FFFFFFFFC0FE00
000000FE00000000FE00000000FE00000000FE00000000FE000000007E000000007F0000
00007F000000007F000000003F000000C03F800000C01F800001C00FC00001800FC00003
8007E000070003F0000E0001F8001C0000FC003800003F01F000000FFFC0000001FE0000
223B7DB928>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fl eccc1095 10.95 21
/Fl 21 234 df<FFFFFFFFFFFEFFFFFFFFFFFE2F027F9832>21 D<06000000C007C00007
C007FC007F8007FFFFFF0007FFFFFE0007FFFFFC0007FFFFF80007FFFFE00007FFFF8000
063FFC000006000000000600000000060000000006000000000600000000060000000006
000000000600000000060000000006000000000600000000060000000006000000000601
FE0000060FFFC000063E03F000067000F80007E0007E000780003F000700003F80070000
1F800600001FC00000000FE00000000FE00000000FF000000007F000000007F000000007
F000000007F800000007F800000007F800000007F83E000007F87F000007F8FF800007F8
FF800007F8FF800007F8FF800007F8FF000007F0FE00000FF0E000000FF06000000FE070
00001FE03000001FC03800003F801C00003F801E00007F000F0000FE0007C003F80001F8
0FF00000FFFFC000003FFF00000007F80000253F7ABC32>53 D<1C007F00FF80FF80FF80
FF80FF807F001C0000000000000000000000000000000000000000000000000000000000
00000000000000000000000000001C007F00FF80FF80FF80FF80FF807F001C00092776A6
1D>58 D<0000000FFC0000C0000000FFFF8001C0000007FFFFE001C000001FF801F803C0
00007FC0003E07C00001FE00000F07C00007FC0000038FC0000FF0000001DFC0001FE000
0000FFC0003FC00000007FC0007F800000003FC000FF000000001FC001FE000000001FC0
03FC000000000FC003FC0000000007C007F80000000007C00FF80000000003C00FF00000
000003C01FF00000000003C01FE00000000001C03FE00000000001C03FE00000000001C0
3FC00000000000C07FC00000000000C07FC00000000000C07FC00000000000C07F800000
00000000FF80000000000000FF80000000000000FF80000000000000FF80000000000000
FF80000000000000FF80000000000000FF80000000000000FF80000000000000FF800000
00000000FF80000000000000FF80000000000000FF800000000000007F80000000000000
7FC00000000000007FC00000000000C07FC00000000000C03FC00000000000C03FE00000
000000C03FE00000000000C01FE00000000001C01FF00000000001800FF0000000000180
0FF800000000038007F800000000038003FC00000000030003FC00000000070001FE0000
00000E0000FF000000000E00007F800000001C00003FC00000003800001FE00000007000
000FF0000000E0000007FC000003C0000001FE000007800000007FC0001F000000001FF8
01FC0000000007FFFFF00000000000FFFFC000000000000FFC0000003A427ABF47>67
D<FFFFFFFFFC0000FFFFFFFFFFC000FFFFFFFFFFF00000FFC0000FFC00007F800001FF00
007F8000007F80007F8000003FC0007F8000001FE0007F8000000FF0007F80000007F800
7F80000007F8007F80000007FC007F80000003FC007F80000003FE007F80000003FE007F
80000003FE007F80000003FE007F80000003FE007F80000003FE007F80000003FE007F80
000003FC007F80000003FC007F80000007FC007F80000007F8007F80000007F8007F8000
000FF0007F8000001FE0007F8000003FC0007F8000007F80007F800001FE00007F80000F
F800007FFFFFFFE000007FFFFFFF0000007F8000000000007F8000000000007F80000000
00007F8000000000007F8000000000007F8000000000007F8000000000007F8000000000
007F8000000000007F8000000000007F8000000000007F8000000000007F800000000000
7F8000000000007F8000000000007F8000000000007F8000000000007F8000000000007F
8000000000007F8000000000007F8000000000007F8000000000007F8000000000007F80
00000000007F800000000000FFC000000000FFFFFFC0000000FFFFFFC0000000FFFFFFC0
000000373E7BBD43>80 D<000000C0000000000001E0000000000001E0000000000001E0
000000000003F0000000000003F0000000000007F8000000000007F8000000000007F800
000000000CFC00000000000CFC00000000001CFE0000000000187E0000000000187E0000
000000303F0000000000303F0000000000703F8000000000601F8000000000601F800000
0000C00FC000000000C00FC000000001C00FE0000000018007E0000000018007E0000000
030003F0000000030003F0000000070003F8000000060001F8000000060001F80000000C
0000FC0000000FFFFFFC0000001FFFFFFE0000001800007E0000001800007E0000003000
003F0000003000003F0000007000003F8000006000001F8000006000001F800000E00000
0FC00000C000000FC00001C000000FE00001C0000007E00003C0000007F00007E0000007
F0001FF000000FF800FFF80000FFFFC0FFF80000FFFFC032307DAF38>97
D<FFFFFFFC0000FFFFFFFF800007F8000FE00003F00003F00003F00001FC0003F00000FE
0003F000007E0003F000003F0003F000003F0003F000003F8003F000003F8003F000003F
8003F000003F8003F000003F8003F000003F8003F000003F0003F000007F0003F00000FE
0003F00001FC0003F00003F80003F0000FE00003F000FFC00003FFFFFF000003FFFFFFE0
0003F00003F80003F00000FC0003F000007E0003F000003F0003F000001F8003F000001F
C003F000000FC003F000000FE003F000000FE003F000000FE003F000000FE003F000000F
E003F000000FE003F000000FC003F000001FC003F000001FC003F000003F8003F000007F
0003F00000FE0003F00001FC0007F8000FF800FFFFFFFFE000FFFFFFFF00002B2F7BAE35
>I<00000FF8003000007FFF00700003F807C070000FC000F0F0001F000039F0007E0000
1FF000FC00000FF001F8000007F003F0000003F007E0000001F00FE0000001F00FC00000
00F01F80000000F01F80000000703F80000000703F00000000707F00000000307F000000
00307F0000000030FE0000000000FE0000000000FE0000000000FE0000000000FE000000
0000FE0000000000FE0000000000FE0000000000FE0000000000FE0000000000FE000000
00007F00000000007F00000000307F00000000303F00000000303F80000000301F800000
00701F80000000600FC0000000600FE0000000E007E0000000C003F0000001C001F80000
038000FC00000700007E00000E00001F00001C00000FC00078000003F803E00000007FFF
800000000FFC00002C317BAF36>I<FFFFFFF80000FFFFFFFF800007F8001FE00003F000
03F00003F00000FC0003F000007E0003F000001F0003F000000F8003F000000FC003F000
0007E003F0000003E003F0000003F003F0000001F003F0000001F803F0000001F803F000
0001FC03F0000000FC03F0000000FC03F0000000FC03F0000000FE03F0000000FE03F000
0000FE03F0000000FE03F0000000FE03F0000000FE03F0000000FE03F0000000FE03F000
0000FE03F0000000FE03F0000000FC03F0000000FC03F0000000FC03F0000001F803F000
0001F803F0000001F803F0000003F003F0000003E003F0000007E003F0000007C003F000
000F8003F000001F0003F000003E0003F00000FC0003F00003F80007F8001FE000FFFFFF
FF8000FFFFFFFC00002F2F7BAE39>I<FFFFFFFFFE00FFFFFFFFFE0007F80001FE0003F0
00007E0003F000001F0003F000000F0003F00000070003F00000070003F00000030003F0
0000030003F00000030003F00000030003F00000018003F00000018003F00030018003F0
0030018003F00030000003F00030000003F00030000003F00070000003F000F0000003F0
01F0000003FFFFF0000003FFFFF0000003F001F0000003F000F0000003F00070000003F0
0030000003F00030000003F00030006003F00030006003F00030006003F0000000C003F0
000000C003F0000000C003F0000000C003F0000001C003F0000001C003F00000018003F0
0000038003F00000038003F00000078003F000000F8003F000003F8007F80001FF00FFFF
FFFFFF00FFFFFFFFFF002B2F7BAE33>I<00000FF800300000007FFF0070000003F807C0
7000000FC000F0F000001F000039F000007E00001FF00000FC00000FF00001F8000007F0
0003F0000003F00007E0000001F0000FE0000001F0000FC0000000F0001F80000000F000
1F8000000070003F8000000070003F0000000070007F0000000030007F0000000030007F
000000003000FE000000000000FE000000000000FE000000000000FE000000000000FE00
0000000000FE000000000000FE000000000000FE000000000000FE000000000000FE0000
07FFFF80FE000007FFFF807F0000000FF8007F00000007F0007F00000003F0003F000000
03F0003F80000003F0001F80000003F0001F80000003F0000FC0000003F0000FE0000003
F00007E0000003F00003F0000003F00001F8000003F00000FC000007F000007E00000FF0
00001F00001DF000000FC00038F0000003F803F0700000007FFFC0300000000FFC000000
31317BAF3B>103 D<FFFFC0FFFFC007F80003F00003F00003F00003F00003F00003F000
03F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003F000
03F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003F000
03F00003F00003F00003F00003F00003F00003F00003F00003F00003F00003F00007F800
FFFFC0FFFFC0122F7BAE1C>105 D<003FFFF8003FFFF80000FF8000003F0000003F0000
003F0000003F0000003F0000003F0000003F0000003F0000003F0000003F0000003F0000
003F0000003F0000003F0000003F0000003F0000003F0000003F0000003F0000003F0000
003F0000003F0000003F0000003F0000003F0000003F0000003F0000003F0000003F0000
003F0000003F0000003F0000003F007C003F00FE003F00FE003F00FE003F00FE007E00FC
007E007000FC007000FC003801F8001E07E00007FF800001FE00001D307BAE27>I<FFF0
00000007FF80FFF80000000FFF8007F80000000FF00003F80000000FE000037C0000001B
E000037C0000001BE000033E00000033E000033E00000033E000033E00000033E000031F
00000063E000031F00000063E000030F800000C3E000030F800000C3E000030F800000C3
E0000307C0000183E0000307C0000183E0000303E0000303E0000303E0000303E0000303
E0000303E0000301F0000603E0000301F0000603E0000300F8000C03E0000300F8000C03
E00003007C001803E00003007C001803E00003007C001803E00003003E003003E0000300
3E003003E00003001F006003E00003001F006003E00003001F006003E00003000F80C003
E00003000F80C003E000030007C18003E000030007C18003E000030007C18003E0000300
03E30003E000030003E30003E000030001F60003E000030001F60003E000030001F60003
E000030000FC0003E000078000FC0003E0000FC000780003E0001FE000780007F000FFFC
007800FFFF80FFFC003000FFFF80392F7AAE45>109 D<FFF00000FFFCFFF80000FFFC07
F800001FE003FC00000FC003FE00000780037F00000300033F00000300033F8000030003
1FC0000300030FC0000300030FE00003000307F00003000303F80003000301F800030003
01FC0003000300FE00030003007E00030003007F00030003003F80030003001FC0030003
000FC0030003000FE00300030007F00300030003F00300030003F80300030001FC030003
0000FE0300030000FE03000300007F03000300003F83000300001F83000300001FC30003
00000FE30003000007F30003000007F30003000003FB0003000001FF0003000000FF0003
000000FF00030000007F00030000003F00030000003F00078000001F000FC000000F001F
E000000700FFFC00000700FFFC000003002E2F7BAE38>I<00001FF800000000FFFF0000
0007F00FE000000F8001F000003F0000FC00007C00003E0000F800001F0001F000000F80
03E0000007C007E0000007E00FC0000003F00FC0000003F01F80000001F81F80000001F8
3F00000000FC3F00000000FC7F00000000FE7F00000000FE7E000000007E7E000000007E
FE000000007FFE000000007FFE000000007FFE000000007FFE000000007FFE000000007F
FE000000007FFE000000007FFE000000007FFE000000007F7F00000000FE7F00000000FE
7F00000000FE3F00000000FC3F80000001FC3F80000001FC1F80000001F80FC0000003F0
0FC0000003F007E0000007E003F000000FC001F800001F8000F800001F00007E00007E00
003F0000FC00000FC003F0000007F00FE0000000FFFF000000001FF8000030317BAF3A>
I<FFFFFFF80000FFFFFFFF000007F8001FC00003F00003F00003F00001F80003F00000FC
0003F000007E0003F000007F0003F000003F0003F000003F0003F000003F8003F000003F
8003F000003F8003F000003F8003F000003F8003F000003F0003F000003F0003F000007F
0003F000007E0003F00000FC0003F00001F80003F00003F00003F0001FC00003FFFFFF00
0003FFFFF8000003F00000000003F00000000003F00000000003F00000000003F0000000
0003F00000000003F00000000003F00000000003F00000000003F00000000003F0000000
0003F00000000003F00000000003F00000000003F00000000003F00000000003F0000000
0003F00000000003F00000000007F800000000FFFFC0000000FFFFC0000000292F7BAE33
>I<FFFFFFE0000000FFFFFFFC00000007F8007F80000003F0000FC0000003F00003F000
0003F00001F8000003F00000FC000003F00000FE000003F000007E000003F000007F0000
03F000007F000003F000007F000003F000007F000003F000007F000003F000007F000003
F000007E000003F00000FE000003F00000FC000003F00001F8000003F00003F0000003F0
000FC0000003F0007F80000003FFFFFC00000003FFFFF800000003F000FE00000003F000
3F00000003F0001F80000003F0000FC0000003F00007E0000003F00007E0000003F00003
F0000003F00003F0000003F00003F0000003F00003F0000003F00003F0000003F00003F8
000003F00003F8000003F00003F8000003F00003F8000003F00003F8018003F00003FC01
8003F00003FC018003F00001FC038003F00001FC030007F80000FE0700FFFFC0007F0E00
FFFFC0001FFC000000000003F00031307BAE37>114 D<003FC00C00FFF81C03E03E1C0F
0007BC1E0001FC3C0000FC3800007C7800007C7000003CF000003CF000001CF000001CF0
00001CF800000CF800000CFC00000CFE0000007F0000007F8000003FF800003FFF80001F
FFF8000FFFFF0003FFFFC000FFFFE0003FFFF00001FFF800001FFC000003FC000000FE00
00007E0000003F0000001FC000001FC000001FC000000FC000000FE000000FE000000FE0
00000EF000001EF000001EF800003CFC000038FF000070F38001E0E1F807C0E07FFF00C0
07FC0020317BAF2A>I<7FFFFFFFFFF87FFFFFFFFFF87F001FE003F87C000FC000F87800
0FC0007870000FC0003860000FC0001860000FC00018E0000FC0001CE0000FC0001CC000
0FC0000CC0000FC0000CC0000FC0000CC0000FC0000CC0000FC0000CC0000FC0000C0000
0FC0000000000FC0000000000FC0000000000FC0000000000FC0000000000FC000000000
0FC0000000000FC0000000000FC0000000000FC0000000000FC0000000000FC000000000
0FC0000000000FC0000000000FC0000000000FC0000000000FC0000000000FC000000000
0FC0000000000FC0000000000FC0000000000FC0000000000FC0000000000FC000000000
0FC0000000000FC0000000000FC0000000001FE0000000003FF00000001FFFFFE000001F
FFFFE0002E2F7CAE36>I<00000000700000000001F80000000007F8000000000FF80000
00003FF800000000FFF000000003FF800000000FFC000000001FC0000000003E00000000
0030000000000000000000000000000000000000000000000000000000000000000000FF
FFFFFFFE00FFFFFFFFFE0007F80001FE0003F000007E0003F000001F0003F000000F0003
F00000070003F00000070003F00000030003F00000030003F00000030003F00000030003
F00000018003F00000018003F00030018003F00030018003F00030000003F00030000003
F00030000003F00070000003F000F0000003F001F0000003FFFFF0000003FFFFF0000003
F001F0000003F000F0000003F00070000003F00030000003F00030000003F00030006003
F00030006003F00030006003F0000000C003F0000000C003F0000000C003F0000000C003
F0000001C003F0000001C003F00000018003F00000038003F00000038003F00000078003
F000000F8003F000003F8007F80001FF00FFFFFFFFFF00FFFFFFFFFF002B3F7BBE33>
233 D E
%EndDVIPSBitmapFont
/Fm 216[80 39[{ fa5brands1 ReEncodeFont }1 90.9091
/FontAwesome5Brands-Regular rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref)/Author ()/Keywords () /DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -136 -396
a
SDict begin H.S end
 -136 -396 a -136 -396 a
SDict begin H.R end
 -136 -396 a -136 -396 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -136
-396 a 0 TeXcolorgray -128 -297 a Fm(')61 b Fl(\025)34
b(C5)f(:)43 b(Pr)m(ogramma)-8 b(tion)36 b(orient\351)g(objet)1323
b Fk(A)m(ctivit\351s)31 b(\025)f Fl(nsi)35 b Fj(T)-9
b(erminale)p -128 -260 4252 4 v Black 0 TeXcolorgray
-128 -180 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -128 -180 a -128 -180 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -128 -180 a -128
-180 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -128 -180 a -128 -180 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -128 -180 a -128 -180
a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -128 -180 a -128 -180 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -128 -180 a -128 -180 a
SDict begin H.S end
 -128
-180 a -128 -180 a
SDict begin 13.6 H.A end
 -128 -180 a -128 -180 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -128 -180
a 91 x Fi(q)31 b Fh(A)m(ctivit\351)h(3)e Fk(:)g Fg(POO)j(et)g(c)-5
b(alcul)34 b(sur)f(les)f(fr)-5 b(actions)-128 24 y Fk(Le)32
b(but)g(de)f(l'activit\351)h(est)f(de)g(mettre)i(en)e(o)s(euvre)g(en)g
(Python)h(un)g(mo)s(dule)f(p)s(ermettan)m(t)i(d'e\033ectuer)g(des)e
(calculs)g(\(addi-)-128 137 y(tions,)25 b(soustractions,)f(m)m
(ultiplications,)j(divisions\))d(et)g(des)g(manipulations)h
(\(simpli\034cation\))h(en)e(utilisan)m(t)i(le)e(paradigme)-128
250 y(de)31 b(programmation)i(ob)5 b(jet.)-128 268 y
SDict begin H.S end

-128 268 a -128 268 a
SDict begin 13.6 H.A end
 -128 268 a -128 268 a
SDict begin [/View [/XYZ H.V]/Dest (Question.3.1) cvn /DEST pdfmark
end
 -128 268
a 0 TeXcolorgray 13 386 a Fk(1.)p 0 TeXcolorgray 61 w(L'ob)g(jet)31
b(fraction)144 499 y(On)37 b(mo)s(d\351lise)g(une)g(fraction)h(par)f
(ses)f(attributs)h(n)m(um\351rateur)j(et)c(d\351nominateur,)k(le)c
(d\351nominateur)j(doit)f(\352tre)144 611 y(non)30 b(n)m(ul,)i(sinon)e
(c'est)h(une)f(division)h(par)g(z\351ro.)-128 629 y
SDict begin H.S end
 -128
629 a -128 629 a
SDict begin 13.6 H.A end
 -128 629 a -128 629 a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 -128 629 a 0 TeXcolorgray
214 724 a Fk(a\))p 0 TeXcolorgray 30 w(Cr\351er)g(la)g(classe)f
Ff(Fraction)g Fk(et)h(son)f(constructeur.)2144 724 y
SDict begin H.S end

2144 724 a 2144 724 a
SDict begin 13.6 H.A end
 2144 724 a 2144 724 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 2144 724
a 0 TeXcolorgray 209 837 a Fk(b\))p 0 TeXcolorgray 30
w(Mo)s(di\034er)j(le)g(constructeur)h(de)f(fa\347on)g(\340)g(p)s(ouv)m
(oir)g(cr\351er)g(une)h(fraction)f(\340)g(partir)g(d'un)g(en)m(tier,)h
(par)g(exemple)324 988 y(l'en)m(tier)e(4)f(corresp)s(ond)g(\340)f(la)g
(fraction)1683 927 y Fe(4)p 1683 967 46 4 v 1683 1051
a(1)1739 988 y Fk(.)1794 988 y
SDict begin H.S end
 1794 988 a 1794 988 a
SDict begin 13.6 H.A end

1794 988 a 1794 988 a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 1794 988 a 0 TeXcolorgray 219 1127
a Fk(c\))p 0 TeXcolorgray 30 w(T)-8 b(outes)34 b(les)f(fractions)g(a)m
(y)m(an)m(t)h(z\351ro)g(comme)f(n)m(um\351rateur)i(son)m(t)f(n)m
(ulles,)f(on)g(les)g(repr\351sen)m(tera)i(toutes)e(par)g(la)324
1278 y(fraction)668 1217 y Fe(0)p 668 1257 46 4 v 668
1341 a(1)724 1278 y Fk(,)d(mo)s(di\034er)h(le)g(constructeur)g(en)g(ce)
f(sens.)2199 1278 y
SDict begin H.S end
 2199 1278 a 2199 1278 a
SDict begin 13.6 H.A end
 2199 1278
a 2199 1278 a
SDict begin [/View [/XYZ H.V]/Dest (Item.4) cvn /DEST pdfmark end
 2199 1278 a 0 TeXcolorgray 209 1417 a Fk(d\))p
0 TeXcolorgray 30 w(Instancier)39 b(la)g(classe)f(fraction)h(p)s(our)g
(cr\351er)g(la)f(repr\351sen)m(tation)j(informatique)e(des)g(fractions)
f(suiv)-5 b(an)m(tes)39 b(:)374 1568 y Fd(a)26 b Fe(=)553
1507 y(3)p 553 1547 46 4 v 553 1631 a(4)1012 1568 y Fd(b)f
Fe(=)1182 1507 y(2)p 1182 1547 V 1182 1631 a(5)1650 1568
y Fd(c)g Fe(=)g Fc(\000)1914 1507 y Fe(7)p 1891 1547
91 4 v 1891 1631 a(12)2288 1568 y Fd(d)g Fe(=)g(3)-128
1631 y
SDict begin H.S end
 -128 1631 a -128 1631 a
SDict begin 13.6 H.A end
 -128 1631 a -128 1631
a
SDict begin [/View [/XYZ H.V]/Dest (Item.5) cvn /DEST pdfmark end
 -128 1631 a 0 TeXcolorgray 13 1724 a Fk(2.)p 0 TeXcolorgray
61 w(A\036c)m(hage)31 b(de)g(l'ob)5 b(jet)31 b(fraction)144
1837 y Fb(*)50 b Fk(Deux)25 b(m\351tho)s(des)h(sp)s(\351ciales)g(en)f
(Python)h(p)s(ermetten)m(t)h(d'obtenir)g(une)f(repr\351sen)m(tation)i
(sous)d(forme)g(de)h(c)m(haine)144 1950 y(de)j(caract\350res)g(d'un)h
(ob)5 b(jet,)29 b(il)g(s'agit)g(de)g Ff(__repr__)f Fk(et)h(de)g
Ff(__str__)p Fk(,)f(bien)i(que)e(des)h(n)m(uances)h(existen)m(t)f(en)m
(tre)h(ces)144 2063 y(deux)i(m\351tho)s(des,)g(\340)g(notre)h(niv)m
(eau)g(nous)f(ne)g(ferons)g(pas)g(de)g(di\033\351rences)h(et)f(on)g
(utilisera)h(indi\033\351remmen)m(t)i(l'une)144 2176
y(ou)30 b(l'autre)h(p)s(our)g(obtenir)g(une)g(v)m(ersion)g(\023)24
b(c)m(haine)32 b(de)f(caract\350res)25 b(\024de)31 b(notre)g(ob)5
b(jet.)-128 2193 y
SDict begin H.S end
 -128 2193 a -128 2193 a
SDict begin 13.6 H.A end
 -128 2193
a -128 2193 a
SDict begin [/View [/XYZ H.V]/Dest (Item.6) cvn /DEST pdfmark end
 -128 2193 a 0 TeXcolorgray 214 2289 a Fk(a\))p
0 TeXcolorgray 30 w(Ecrire)41 b(une)f(m\351tho)s(de)h(sp)s(\351ciale)f
(p)s(ermettan)m(t)h(de)f(ren)m(v)m(o)m(y)m(er)i(la)e(c)m(haine)h(de)e
(caract\350re)j Ff('a/b')d Fk(\340)h(partir)g(de)324
2420 y(l'ob)5 b(jet)31 b(repr\351sen)m(tan)m(t)i(la)d(fraction)1570
2359 y Fd(a)p 1570 2399 49 4 v 1575 2483 a(b)1659 2420
y
SDict begin H.S end
 1659 2420 a 1659 2420 a
SDict begin 13.6 H.A end
 1659 2420 a 1659 2420 a
SDict begin [/View [/XYZ H.V]/Dest (Item.7) cvn /DEST pdfmark end
 1659
2420 a 0 TeXcolorgray 209 2559 a Fk(b\))p 0 TeXcolorgray
30 w(A\036ner)24 b(cette)g(m\351tho)s(de)g(de)g(fa\347on)g(\340)f(ce)g
(qu'une)h(fraction)g(a)m(y)m(an)m(t)h(p)s(our)f(d\351nominateur)h(1)f
(a\036c)m(he)g(simplemen)m(t)324 2672 y(son)31 b(n)m(um\351rateur.)995
2672 y
SDict begin H.S end
 995 2672 a 995 2672 a
SDict begin 13.6 H.A end
 995 2672 a 995 2672 a
SDict begin [/View [/XYZ H.V]/Dest (Item.8) cvn /DEST pdfmark end
 995
2672 a 0 TeXcolorgray 219 2785 a Fk(c\))p 0 TeXcolorgray
30 w(T)-8 b(ester)32 b(v)m(otre)f(m\351tho)s(de)g(sur)f(les)g
(fractions)h Fd(a;)15 b(b;)g(c)31 b Fk(et)g Fd(d)f Fk(d\351\034nies)h
(ci-dessus.)-128 2808 y
SDict begin H.S end
 -128 2808 a -128 2808 a
SDict begin 13.6 H.A end
 -128
2808 a -128 2808 a
SDict begin [/View [/XYZ H.V]/Dest (Item.9) cvn /DEST pdfmark end
 -128 2808 a 0 TeXcolorgray 13 2920
a Fk(3.)p 0 TeXcolorgray 61 w(A)m(ddition)g(de)g(deux)f(fractions)144
3033 y(La)35 b(premi\350re)i(id\351e)f(est)f(de)g(cr\351er)h(une)g
(m\351tho)s(de)g Ff(addition)f Fk(qui)g(prend)h(en)g(argumen)m(t)h
(deux)f(fractions)f(et)h(ren-)144 3146 y(v)m(oie)i(leur)h(somme,)g
(ainsi)f(si)g(nous)g(a)m(v)m(ons)h(deux)f(ob)5 b(jets)38
b(fractions)g Ff(a)g Fk(et)h Ff(b)p Fk(,)f(nous)g(calculons)h(leur)g
(somme)f(a)m(v)m(ec)144 3259 y Ff(a.addition\(b\))p Fk(.)e(Cette)i
(solution)g(n'est)f(pas)g(satisfaisan)m(te,)g(en)g(e\033et)g(si)g
Ff(a)g Fk(et)g Ff(b)f Fk(son)m(t)i(deux)f(ob)5 b(jets)37
b(fractions,)144 3372 y(nous)31 b(aimerions)h(dans)f(notre)h(programme)
h(calculer)g(leur)e(somme)h(en)f(\351criv)-5 b(an)m(t)33
b(de)e(fa\347on)g(plus)h(naturelle)g(:)f Ff(a+b)p Fk(.)144
3485 y(La)f(m\351tho)s(de)i(sp)s(\351ciale)e Ff(__add__)g
Fk(p)s(ermet)h(en)f(Python)i(d'obtenir)f(ce)g(r\351sultat.)-128
3503 y
SDict begin H.S end
 -128 3503 a -128 3503 a
SDict begin 13.6 H.A end
 -128 3503 a -128 3503
a
SDict begin [/View [/XYZ H.V]/Dest (Item.10) cvn /DEST pdfmark end
 -128 3503 a 0 TeXcolorgray 214 3598 a Fk(a\))p 0 TeXcolorgray
30 w(Ecrire)h(la)e(m\351tho)s(de)h Ff(__add__)324 3711
y Fb(\376)51 b Fk(On)26 b(a)f(b)s(esoin)h(ici)g(de)f(deux)h(ob)5
b(jets)26 b(fractions,)g(en)f(plus)h(du)g(traditionnel)h
Ff(self)p Fk(,)f(on)f(notera)i Ff(other)e Fk(l'autre)324
3861 y(ob)5 b(jet.)31 b(On)g(rapp)s(elle)g(d'autre)g(part)g(que)1763
3800 y Fd(a)p 1763 3841 49 4 v 1768 3924 a(b)1841 3861
y Fe(+)1946 3800 y Fd(c)p 1942 3841 48 4 v 1942 3924
a(d)2025 3861 y Fe(=)2131 3800 y Fd(ad)20 b Fe(+)g Fd(bc)p
2131 3841 285 4 v 2230 3924 a(bd)2456 3861 y
SDict begin H.S end
 2456 3861
a 2456 3861 a
SDict begin 13.6 H.A end
 2456 3861 a 2456 3861 a
SDict begin [/View [/XYZ H.V]/Dest (Item.11) cvn /DEST pdfmark end
 2456 3861 a 0 TeXcolorgray
209 4000 a Fk(b\))p 0 TeXcolorgray 30 w(T)-8 b(ester)32
b(v)m(otre)f(m\351tho)s(de)g(en)f(additionnan)m(t)j(les)d(fractions)h
Fd(a)f Fk(et)h Fd(b)f Fk(ci-dessus)324 4151 y Fb(\376)56
b Ff(print\(a+b\))29 b Fk(devrait)i(a\036c)m(her)h Ff(23/20)p
Fk(,)e(en)h(e\033et)f(:)2268 4090 y Fe(3)p 2268 4130
46 4 v 2268 4214 a(4)2343 4151 y(+)2444 4090 y(2)p 2444
4130 V 2444 4214 a(5)2525 4151 y(=)2631 4090 y(23)p 2631
4130 91 4 v 2631 4214 a(20)-128 4214 y
SDict begin H.S end
 -128 4214 a -128
4214 a
SDict begin 13.6 H.A end
 -128 4214 a -128 4214 a
SDict begin [/View [/XYZ H.V]/Dest (Item.12) cvn /DEST pdfmark end
 -128 4214 a 0 TeXcolorgray
13 4307 a Fk(4.)p 0 TeXcolorgray 61 w(Les)g(autres)h(op)s(\351rations)g
(de)f(base)-128 4325 y
SDict begin H.S end
 -128 4325 a -128 4325 a
SDict begin 13.6 H.A end
 -128 4325
a -128 4325 a
SDict begin [/View [/XYZ H.V]/Dest (Item.13) cvn /DEST pdfmark end
 -128 4325 a 0 TeXcolorgray 214 4420 a Fk(a\))p
0 TeXcolorgray 30 w(Ecrire)i(la)e(m\351tho)s(de)h Ff(__sub__)f
Fk(\(la)h(soustraction\))g(et)g(la)f(tester.)2582 4420
y
SDict begin H.S end
 2582 4420 a 2582 4420 a
SDict begin 13.6 H.A end
 2582 4420 a 2582 4420 a
SDict begin [/View [/XYZ H.V]/Dest (Item.14) cvn /DEST pdfmark end
 2582
4420 a 0 TeXcolorgray 209 4533 a Fk(b\))p 0 TeXcolorgray
30 w(Ecrire)i(la)e(m\351tho)s(de)h Ff(__mul__)f Fk(\(la)h(m)m
(ultiplication\))i(et)e(la)f(tester.)2654 4533 y
SDict begin H.S end
 2654
4533 a 2654 4533 a
SDict begin 13.6 H.A end
 2654 4533 a 2654 4533 a
SDict begin [/View [/XYZ H.V]/Dest (Item.15) cvn /DEST pdfmark end
 2654 4533
a 0 TeXcolorgray 219 4646 a Fk(c\))p 0 TeXcolorgray 30
w(Ecrire)i(la)e(m\351tho)s(de)h Ff(__truediv__)f Fk(\(la)h(division\))g
(et)f(la)h(tester.)2596 4646 y
SDict begin H.S end
 2596 4646 a 2596 4646
a
SDict begin 13.6 H.A end
 2596 4646 a 2596 4646 a
SDict begin [/View [/XYZ H.V]/Dest (Item.16) cvn /DEST pdfmark end
 2596 4646 a 0 TeXcolorgray
209 4759 a Fk(d\))p 0 TeXcolorgray 30 w(On)e(donne)g(ci-dessous)f
(quelques)f(calculs)i(fractionnaires)g(\(donn\351s)g(dans)f(le)g
(pass\351)f(au)i(brev)m(et)g(des)e(coll\350ges\))324
4872 y(utiliser)k(v)m(otre)g(mo)s(dule)g(p)s(our)g(e\033ectuer)g(ces)f
(calculs)h(:)324 5030 y Fd(A)26 b Fe(=)524 4968 y(3)p
524 5009 46 4 v 524 5092 a(7)599 5030 y(+)723 4968 y(4)p
700 5009 91 4 v 700 5092 a(21)821 5030 y Fc(\000)922
4968 y Fe(5)p 922 5009 46 4 v 922 5092 a(2)1369 5030
y Fd(B)k Fe(=)1574 4968 y(12)p 1574 5009 91 4 v 1597
5092 a(5)1695 5030 y Fc(\000)1796 4968 y Fe(3)p 1796
5009 46 4 v 1796 5092 a(5)1872 5030 y Fc(\002)1972 4968
y Fe(7)p 1972 5009 V 1972 5092 a(9)2420 5030 y Fd(C)h
Fe(=)25 b(5)c(+)2769 4901 y Fa(\022)2836 5030 y Fe(1)f(+)3002
4968 y(1)p 3002 5009 V 3002 5092 a(8)3058 4901 y Fa(\023)3145
5030 y Fc(\004)3246 4968 y Fe(3)p 3246 5009 V 3246 5092
a(4)-128 5116 y
SDict begin H.S end
 -128 5116 a -128 5116 a
SDict begin 13.6 H.A end
 -128 5116 a -128
5116 a
SDict begin [/View [/XYZ H.V]/Dest (Item.17) cvn /DEST pdfmark end
 -128 5116 a 0 TeXcolorgray 13 5209 a Fk(5.)p 0
TeXcolorgray 61 w(Simpli\034er)31 b(une)g(fraction)-128
5227 y
SDict begin H.S end
 -128 5227 a -128 5227 a
SDict begin 13.6 H.A end
 -128 5227 a -128 5227
a
SDict begin [/View [/XYZ H.V]/Dest (Item.18) cvn /DEST pdfmark end
 -128 5227 a 0 TeXcolorgray 214 5322 a Fk(a\))p 0 TeXcolorgray
30 w(Ecrire)24 b(une)g(fonction)f Ff(pgcd)g Fk(qui)g(prend)g(en)g
(argumen)m(ts)i(deux)e(en)m(tiers)g(et)g(retourne)i(leur)e(plus)g
(grand)h(comm)m(un)324 5435 y(diviseur.)324 5548 y Fb(\376)56
b Fk(On)30 b(rapp)s(elle)h(que)f(le)h Fl(pgcd)g Fk(de)g(deux)f(en)m
(tiers)h Fd(a)g Fk(et)f Fd(b)g Fk(se)g(calcule)i(a)m(v)m(ec)f
(l'algorithme)h(d'Euclide)g(:)-128 5576 y
SDict begin H.S end
 -128 5576 a
-128 5576 a
SDict begin 13.6 H.A end
 -128 5576 a -128 5576 a
SDict begin [/View [/XYZ H.V]/Dest (Item.19) cvn /DEST pdfmark end
 -128 5576 a 0 TeXcolorgray
394 5682 a Fk(1.)p 0 TeXcolorgray 30 w(Si)f Fd(b)25 b
Fe(=)g(0)31 b Fk(alors)f(l'algorithme)i(se)e(termine)i(et)e(le)h
Fl(pgcd)g Fk(est)f Fd(a)-128 5710 y
SDict begin H.S end
 -128 5710 a -128
5710 a
SDict begin 13.6 H.A end
 -128 5710 a -128 5710 a
SDict begin [/View [/XYZ H.V]/Dest (Item.20) cvn /DEST pdfmark end
 -128 5710 a 0 TeXcolorgray
394 5816 a Fk(2.)p 0 TeXcolorgray 30 w(Sinon)25 b(faire)f(la)g
(division)h(euclidienne)g(de)g Fd(a)p Fk(,)f(par)g Fd(b)p
Fk(,)g(on)g(note)h Fd(r)h Fk(le)e(reste)g(\(et)h(on)f(sait)g(que)g
Fd(r)k(<)d(b)p Fk(\).)f(Rev)m(enir)494 5929 y(\340)31
b(l'\351tap)s(e)g(1)f(en)g(prenan)m(t)i Fd(a)26 b Fe(=)f
Fd(b)30 b Fk(et)g Fd(b)c Fe(=)f Fd(r)s Fk(.)-128 5967
y
SDict begin H.S end
 -128 5967 a -128 5967 a
SDict begin 13.6 H.A end
 -128 5967 a -128 5967 a
SDict begin [/View [/XYZ H.V]/Dest (Item.21) cvn /DEST pdfmark end
 -128
5967 a 0 TeXcolorgray 209 6063 a Fk(b\))p 0 TeXcolorgray
30 w(Ecrire)32 b(une)f(m\351tho)s(de)h Ff(simplifie)e
Fk(qui)g(simpli\034e)i(la)f(fraction)g(pass\351e)f(en)h(param\350tre)i
(p)s(our)d(la)h(rendre)h(irr\351-)324 6175 y(ductible.)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
