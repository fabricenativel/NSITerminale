%!PS-Adobe-2.0
%%Creator: dvips(k) 5.999 Copyright 2019 Radical Eye Software
%%Title: /home/fenarius/Travail/Cours/NSITerminale/docs/evaluations/EP blanches/sujet4.dvi
%%CreationDate: Sun Apr 10 08:14:30 2022
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: Dingbats CMR12 CMR8
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o
%+ "/home/fenarius/Travail/Cours/NSITerminale/docs/evaluations/EP blanches/sujet4.ps"
%+ "/home/fenarius/Travail/Cours/NSITerminale/docs/evaluations/EP blanches/sujet4.dvi"
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2022.04.10:1214
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 872 2018-12-21 20:39:31Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup xGridOffset add y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% $Id: pst-text.pro 891 2018-12-29 19:42:20Z herbert $
%
% PostScript header file pst-text.pro
% Version 1.02, 2018-12-28 (hv)
% For distribution, see pstricks.tex.
%
/tx@TextPathDict 45 dict def
tx@TextPathDict begin
%
% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def
%
/movetoproc { continue { @movetoproc } { pop pop } ifelse } def
%
/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def
%
/linetoproc { continue { @linetoproc } { pop pop } ifelse } def
%
/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def
%
/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def
%
% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def
%
/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def
%
/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def
%
%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint
    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
/warp {
    1 index
    1.4 mul
    cos 2 add
    mul
} def
/warpmove{
    2 index {
        newpath
    } if
    warp moveto
    pop false
} def
/warpline { warp lineto } def
/warpcurve {
    6 2 roll warp
    6 2 roll warp
    6 2 roll warp
    curveto
} def
/warpit {
    true
    { warpmove } { warpline } { warpcurve } { closepath } pathforall
    pop
} def
%
/circle {
    exch neg
    % .5 mul
    90 add
    dup cos 2 index mul
    3 1 roll
    sin mul
} bind def

/circmove{
    2 index { newpath } if
    circle moveto
    pop false
} bind def

/circline { circle lineto } bind def

/circcurve {
    6 2 roll circle
    6 2 roll circle
    6 2 roll circle
    curveto
} bind def

/circit { true { circmove } { circline } { circcurve } { closepath } pathforall pop } bind def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.03 2020/01/09
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 }
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% calculate the line coefficents Ax+By+C=0
%% x1 y1 x2 y2 -> A B C
/LineCoefABC {
  0 index 3 index sub % A=y2-y1
  4 index 3 index sub % B=x1-x2
  3 index 5 index mul 6 index 4 index mul sub % C=x2y1-x1y2
  7 3 roll pop pop pop pop
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% calculate the 2-order determinant
%% |a11 a12|
%% |a21 a22|
%% a11 a12, a21 a22 -> X
/DeterminantTwo {
  4 1 roll mul 3 1 roll mul exch sub
} def
%% calculate the 3-order determinant
%% |a11 a12 a13|
%% |a21 a22 a23|
%% |a31 a32 a33|
%%   8   7   6    5   4   3    2   1   0
%% a11 a12 a13, a21 a22 a23, a31 a32 a33 -> X
/DeterminantThree {
  % |a22 a23, a32 a33| * (-1)^(1+1)a11
  8 index abs 1E-5 lt { %a11=0
    0
  } {
    4 index 4 index 3 index 3 index DeterminantTwo
    9 index mul
  } ifelse
  % |a12 a13, a32 a33| * (-1)^(1+2)a21
  6 index abs 1E-5 lt { %a12=0
    0 sub
  } {
    8 index 8 index 4 index 4 index DeterminantTwo
    7 index mul sub
  } ifelse
  % |a12 a13, a22 a23| * (-1)^(1+3)a31
  3 index abs 1E-5 lt { %a13=0
    0 add
  } {
    8 index 8 index 7 index 7 index DeterminantTwo
    4 index mul add
  } ifelse
  10 1 roll pop pop pop pop pop pop pop pop pop
} def
%% calculate the 4-order determinant
%% |a11 a12 a13 a14|
%% |a21 a22 a23 a24|
%% |a31 a32 a33 a34|
%% |a41 a42 a43 a44|
%%  15  14  13  12   11  10   9   8    7   6   5   4    3   2   1   0
%% a11 a12 a13 a14, a21 a22 a23 a24, a31 a32 a33 a34, a41 a42 a43 a44 -> X
/DeterminantFour {
  % |a22 a23 a24, a32 a33 a34, a42 a43 a44| * (-1)^(1+1)a11
  15 index abs 1E-5 lt { %a11=0
    0
  } {
    10 index 10 index 10 index 9 index 9 index 9 index 8 index 8 index 8 index DeterminantThree
    16 index mul
  } ifelse
  % |a12 a13 a14, a32 a33 a34, a42 a43 a44| * (-1)^(1+2)a21
  12 index abs 1E-5 lt { %a21=0
    0 sub
  } {
    15 index 15 index 15 index 10 index 10 index 10 index 9 index 9 index 9 index DeterminantThree
    13 index mul sub
  } ifelse
  % |a12 a13 a14, a22 a23 a24, a42 a43 a44| * (-1)^(1+3)a31
  8 index abs 1E-5 lt { %a31=0
    0 add
  } {
    15 index 15 index 15 index 14 index 14 index 14 index 9 index 9 index 9 index DeterminantThree
    9 index mul add
  } ifelse
  % |a12 a13 a14, a22 a23 a24, a32 a33 a34| * (-1)^(1+4)a41
  4 index abs 1E-5 lt { %a41=0
    0 sub
  } {
    15 index 15 index 15 index 14 index 14 index 14 index 13 index 13 index 13 index DeterminantThree
    5 index mul sub
  } ifelse
  17 1 roll pop pop pop pop pop pop pop pop
  pop pop pop pop pop pop pop pop
} def
%% calculate the 5-order determinant
%% |a11 a12 a13 a14 a15|
%% |a21 a22 a23 a24 a25|
%% |a31 a32 a33 a34 a35|
%% |a41 a42 a43 a44 a45|
%% |a51 a52 a53 a54 a55|
%%  24  23  22  21  20   19  18  17  16  15   14  13  12  11  10    9   8   7   6   5    4   3   2   1   0
%% a11 a12 a13 a14 a15, a21 a22 a23 a24 a25, a31 a32 a33 a34 a35, a41 a42 a43 a44 a45, a51 a52 a53 a54 a55-> X
/DeterminantFive {
  % |a22 a23 a24 a25, a32 a33 a34 a35, a42 a43 a44 a45, a52 a53 a54 a55| * (-1)^(1+1)a11
  24 index abs 1E-5 lt { %a11=0
    0
  } {
    18 index 18 index 18 index 18 index 17 index 17 index 17 index 17 index 16 index 16 index 16 index 16 index 15 index 15 index 15 index 15 index DeterminantFour
    25 index mul
  } ifelse
  % |a12 a13 a14 a15, a32 a33 a34 a35, a42 a43 a44 a45, a52 a53 a54 a55| * (-1)^(1+2)a21
  20 index abs 1E-5 lt { %a21=0
    0 sub
  } {
    24 index 24 index 24 index 24 index 18 index 18 index 18 index 18 index 17 index 17 index 17 index 17 index 16 index 16 index 16 index 16 index DeterminantFour
    21 index mul sub
  } ifelse
  % |a12 a13 a14 a15, a22 a23 a24 a25, a42 a43 a44 a45, a52 a53 a54 a55| * (-1)^(1+3)a31
  15 index abs 1E-5 lt { %a31=0
    0 add
  } {
    24 index 24 index 24 index 24 index 23 index 23 index 23 index 23 index 17 index 17 index 17 index 17 index 16 index 16 index 16 index 16 index DeterminantFour
    16 index mul add
  } ifelse
  % |a12 a13 a14 a15, a22 a23 a24 a25, a32 a33 a34 a35, a52 a53 a54 a55| * (-1)^(1+4)a41
  10 index abs 1E-5 lt { %a41=0
    0 sub
  } {
    24 index 24 index 24 index 24 index 23 index 23 index 23 index 23 index 22 index 22 index 22 index 22 index 16 index 16 index 16 index 16 index DeterminantFour
    11 index mul sub
  } ifelse
  % |a12 a13 a14 a15, a22 a23 a24 a25, a32 a33 a34 a35, a42 a43 a44 a45| * (-1)^(1+5)a51
  5 index abs 1E-5 lt { %a51=0
    0 add
  } {
    24 index 24 index 24 index 24 index 23 index 23 index 23 index 23 index 22 index 22 index 22 index 22 index 21 index 21 index 21 index 21 index DeterminantFour
    6 index mul add
  } ifelse
  26 1 roll pop pop pop pop pop pop pop pop pop pop
  pop pop pop pop pop pop pop pop pop pop
  pop pop pop pop pop
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 1990-2020 The LaTeX3 Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
true setglobal
/pdf.globaldict 4 dict def
false setglobal

/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict~
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def product (Ghostscript)
search {pop pop pop revision 927 gt}{pop false} ifelse{/BorderArrayPatch{}
def}{/BorderArrayPatch{[exch{dup dup type/integertype eq exch type/realtype
eq or{BPToDvips}if}forall]}def} ifelse /HyperBorder {1 PDFToDvips}
def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx pdf@lly pdf@urx
pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly exch def dup
DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx exch
def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: CMR8
%!PS-AdobeFont-1.0: CMR8 003.002
%%Title: CMR8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR8 known{/CMR8 findfont dup/UniqueID known{dup
/UniqueID get 5000791 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR8 def
/FontBBox {-36 -250 1070 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR8.) readonly def
/FullName (CMR8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
dup 51 /three put
dup 54 /six put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9928A7C95D3A6E9B
8E92F84CA0AA44461D2F4FA0F8B81C6F5B7BE98C9712BE166610465CF689DFAF
27C875C029C0116DE61C21DA0092D029E7DBEDFDDEE3D67E6936623AB53FA2AF
18BEDDD7AC19A19CADB6ED6CA7A26E6044BE414FFF59C0B98D5819A6B881F9AB
7AD0D03BDD5CD309C67811D5CF0B93F6FDC9AE64F74ED4E81F2E18D880BD842A
DAFD0BDF06300201C6946087FC0B999447BC370200BFB8CA420B668B32EBC242
6DB1546A7164CF55B332FE9D239B65F532B69EF9F4F93828A44C8F5C526126F8
B7A369114CA68D4F98638121F4E17F351723D9F1A902FCF087F94AFD23876517
2D15B482AF2D68C3F31FFA864E031596E597882578AC7FB0DAE2A713B065B374
3E2E72519ED6D50CBCA40A7275A7109A4F3ED8A4566AD8832890D3D1F4899850
9B757442B7EA355175CD5D6D8B4152ED2D7EEB4CE30F174FF672140354046A45
7098EC45B9DF3DF5CF7B417E201DA88308CEF4CED8E8903AF24FB8DD0187352D
25738519ECBC70304F8F620CC45D2586619205DA3955696FAFFE2082402B3502
CB682F410DE5FFE80A4DA3D3BCF02E35BD577D0DE55E7B8A33B7A2FD5136B5DD
A0BCB61F8E7F4363C21F890CF287304DDB8FCE7FE207C0D160B81E7EA662BED2
DFF8C444E19C91E72254257CD87240A70F1A964FA54ED9ECF27E27A57DACC3DE
EABB92C085030870C6CF5C40B6E47F5C0AEB30E84A73ECDABB2D754EF6EA28BB
16EBD6636BC288E62F4A38BFB55F5F4DD20FDD77D767F6CB52F9513E8EB75413
07F1877B2C01278675177499E4E8EB09F2657821613F5C7643FC064293EC6E9E
B519FFAEEA36B19C9D1302CF91FCBF87FCB57C5F995CB6712BB3D8681EB6F05B
B2A4195A3C73CB4ABCCFB958EAC533BD89560D2790CDE1444C0F2E4EF27A529C
F01052964E56F6D76A190E5FF45934BB711A3406284AF130D4DC0D8112BB3752
762CA0200CA262359D4F54C0CCFA9A50DE18C7DB14419E2990ADDC4A54B94978
D9174CA39434022FA77FB30179EF805E2189C35919F5EBE215EE2A00B4407826
CE56329C5586D8B414770BA5D45513C3AF1931D632FCE69B4CA504944E03362C
74A1177C6398A61A12DAA0F156543E2A8E9969C4308B7ACC21A5ECAC8F172541
1B1316A88C0C163E574FFD3CD22FF08488662FCF2F9344BC25D02146F36CA6F9
E2D0130C654B7485EEA9A110A33AA0C769121F81821E9A2BD062FAC158359D44
3F9D9947200EF1EDDD5860F10438B162A69683957300C75AF7546C70C97AB2EE
37EAAF0089E2623F787F252569B06C665FDB45EC9681C0774ACFBA76B98C4E89
7EB12AA5F8798FFC110B49C25E3A483ABE83B0BCC6DF0578403ADC369E013762
C9D08FC94D949BAE636ACA9F36F4E3F02296775A062077B011A705B6F1784D36
A926622CB3847533D7ACB24A4EBABB14593B5D8E1DAE2BFEF8A51835C8D4E76D
7543C126A4271C59A5881A5AF89331694F84489CA66725995DC3070F306EA447
CF30F63CD476A46D528EC1FFBFB8EACFA2BEEDCF54C92CE2BD26DEA5827186BD
3A4D1709415CEE7D51D671357B4A5D11E835F63521B9824EE5282E58F05A8ACC
FD249461181A38C2F47BAC4E79BE368D64F886AA493C61CBCB2ED401C8AFBA61
59CA6F6216D941A92AC52ACB3D7ECC28D6A58EF4CC70BA6DE23E80937AB38E89
6F05FDD15B954C0826636267EDAF9F2BB466BF79D2E10EED9B04297E6BC93069
79581ADD1A9D9FAE9306F46AC95B98C60A2E53D60CF1AA4069BE301E17E25070
F98DD67BD8642B1D07571A32766072E48BF27E1576FFEED300D7313A358A823B
49C8F135961B7E259095C9BB67F996CE0B90E95344F203922F47E11753F70D38
2ECB615403490310CEE6C03AFA97DA2F47ED47125D110FA69725BA0018F6A40B
29A307FDB3E52322A77A0102E6F57654CF1E96A134D13860D83AFA0A41112D3F
2247A09ACF7D06713BE443FA27C7E7220E875965D53030FE7D2D62EFD2F1DB87
5FB091FEAF599BA8C5167525899E578AB341BFE2BC4E53A047093168AE189237
EA55F055514EFA939DAE9E859CB5FBCF37D99484F44FE5AA5FA386B28BB642F5
5DBAF059A50FE96C7C6D834531D64F1F2E99AB2E96EE74D149178B1C0618495E
293973D9A03E1790654B67C0882376ABEC17D74785B3737D81644F28B3BC6FFF
F92FE29126995A07E0BC5EF3A4B93789A103C428943E045B8D1A5063AE71E806
568D48072E53DEA85253B01DF0BB7367A6BE4DD7BE514AD74E3F77C825ABA405
64DAFA25EAFF8F63344B5F6B523629776CEB090B546469F6A6008DE43072DD3C
DEF51F62731037D1FBD0C038A1E9B669849EB3BEBA281624F13D20B61917A109
A0A7871A73F7BAA18077360B38A4625C5DB9AB9E43BDEEB856FD0E2D3AA2E075
267B978B9EB47F2369302E87DBD5D5B422830BEC32411FE75D584C58650EFB1D
136FEB92B94BF8939FD63AFB7349C7511E5E46AA7324F8B1FFCA9C2A9E9720C0
A720918E8E860F137567D386AC29870FD990BD69465B3A3D2A0ECF2753578AD7
80DC87EBB319EB5AFE0B6F6FF8616EA30C51425FE3ECBC5F8D0B0BEFDEF32FA7
D168B4E85C804B7326A0942CFDE732B1171C643452B7099B31649CA2C38B62FB
46EBDF7180004C549B53F88021D029452C2B37D8C565BCDB0B11541039A13C0A
E45D4B68C7907B8BF08C6F41F564B62BB554235D50330E78DD02795516D969C9
66119D718798120442CB7EB9877FF84EC69DAE25F8559DCE3BD8042959F695F8
2F99845B1B5680DDCF181D806CC4903E077D1FF5E60918EB34C0B1E028422B71
CA63EFBF3F4F3CD813CE831EB54265A555BDD35AD7D723F9CFBDAB29C54F8AFF
2D35C6A3299E0A2DB470C7B141B1E3E10DABB7873AE302926BA8743278FAA8C0
DC6174501D6A289CF980A3F55F2DD5C3A514E7E7F13133C35D2697D64C25130C
DB78FC997968D6B3BC929E8A31B6D212C5128E4412632BC52B3A1049F7F2F61B
C74AE9A6AD19B9E2E240617E2882F7D29ED3A4279439107AF9AEBEE47CE85DE5
CE9595A96A118ACF1EB1F5929930321AF7732E351E18C6AD378508E37B4C327B
0E06AAE21278AFA9255AFE5C022034DA2968D260879B4B38E7EE2E11A593DC3F
CE71ABA050C004473324CAB6F3C50E85DEDA3E9A27388D8FD3A8F6E42A79670E
F7549CFAD4CCB337A6E0BAA4846ABCA059F1E1933CF11DC0FFBFF550CC4A1B47
CF7BCE0875FA747AA854534960F757884505A5AEE0330179A9547A4AE3E68479
7A457DE83326DC30B67F27CFD4AB697601CEE352F72F0966B3CEE3EA24683BEF
6D23AD51B8432C3F0DD0D0F80791E1091F38988B7A54E466A9AC7810DE8B7893
6B0AA6356597891D56190A7660BC7F657BC559E0525D41EC228078F2FBF89C6C
72D666DAD838CBF0861FBF0A1D4ECC069AA49DFBAE5C56B781A1D5D79DAAC256
13E3F9B928A2394FC71691E4355642764459714412D6F8EF803FC5F7353822DE
6CCBB8FBE5AA1F2C7F4D384039D85E7728527DF9FE0239E2CF8BCB7411C000B7
1FE660AE6A2A19229E5E8776CC83EFF3C27403935756463EB4721C51FE0B1197
86C2F17842A0FB639F28083DFD4F1E86D7D3BEFA922514ABF489C5CCE93D6F72
D2EAAE14F6CBA2BE4BBE7D7EA8EA19DB3A87350D4A52064137C3D15A5B05B03B
70B1DA7328D10713B83974C390C3270AF5A9A47C0BFBFABB9F31063B0CCFBB10
0F236C74446688198EFF039110F6FF42FA9F82D463AD3958B5FD205BDF85DE20
FE3F0C7AEEF350AEE6DBC1DE2E2DA4F4599956F59D6F121F7086DC120416E180
52DBBC4E56C09746938698860F30007091E1CC0351B43990E47208ED495310F5
7BA9C6AB3CA10A3F1B318FD47C1CE3B9FF1304321F9623E32D315AA9CE64B35B
F841E6C62B5B2488A311C94937879E5E0E170FA77AF0AC75C5E6E9F3E8F825AA
09C1702682E14FDFA72D27901C5BDE009B1E52E8C4511C6F6336251BD45261F7
401CA3DAE7C4B0CAEB91B9954BF4A97C48ECE7FAD401351D59DDAE9DA94E2335
74A2B880E4749D3D7026CB5299F16C204B6E00A20A6619C34922C7D3FB50F127
3157CFC08DCC5164C8023CD1B6C3556C73CB8E4ADA845339CA9BABA1457ECEE6
ECB9849DF1F0FEBC89E5F97C92978A500196520839CEBA6C0FD2E3D27BB4B4F0
93CB2BB565F4627C6DB62DD0E084E627D69B5DEF42EF094381B62C0D67EFD197
301B132420F51A41561E6106870147E0D597078435BE3819ACF0DE28AD779847
F3D2CF667DA06955D53E0204CEA2935E9E984E76963D3079EC092031E2A10E61
1227E5EE6770DD4D745A52655369EBA06A19BD7D95BBA271E488241199D1008E
36EA99F8DFD2A9F87B06B070158B466AA4C6EA3BA77DB0F853F0BF9A304EA291
34069714368E0B94DFCBA3BE5EDB6C8204DFA7EAF5C3406F60A7056407D1BF6C
CB85C1F432F97D821F5518BBA79AF8453A568FB2C2D025A70CEC75F46C545011
ACE3A99B2582793BA1DC655230AE2EFD24DE20A01D4A441AFFAB7771F223FA6B
9169849E727E494247F67D6E1EA9DCA06A082FE2094BD548AD7F08B565145634
E7ED832FEC1378306DDC796303392ADB0CBA130B63B38ED57B7828B47732853A
893E8836FE19CCF27002AE92C2B2CACFDF8A42F1B8066E033B965D2E9157FDF8
E1264B40813C1A4CE424274AA3528A4F09B3B53DD4D23789A68B3D17BC1398AE
0ADA2C2168427A49846DE0216908C2FFFEF4F13C1ECA12AD341E238EE46E6DC2
B71B54C52659632911F901660261E493AE2483D64E119D9924489779B62BC9FB
A052E822FD8D83178E09ADC825DF0DA07FCE7AD68EEB29FAA275A13691B4A5A5
B0BC0499CD6307610CD6209583C1152C559A2760823F8DC0B9B990BFFE7B7E9F
3969B968AFEAADB9FC0F1410EBBAA0DB979CF153F0B8C978405F8E6F2B6406D7
AAFBF4A655A15DD6D1E9A7EAE10EF89264659B09283F50B734236885FC09FBE5
98D780012FA77FCB19F15BDC522CC7312546C0730EF5225DEA8C22A3BC6554EF
4FE73B9AEB5C2F7DBD474221760E5F539A064AC450591BCF3499E3968F2CBD6B
F15BA2B37080A4129B66D4C2188524F025414F14DB3F96049A8B0E5EB2BBE7A1
AD64A988FE875FE4FE5186BB4F5DDA16983CB052D474B7D72F3E8965663EB50E
015C72407C3437142D3D7DBC055FA627139488DBC5A0F98D805C2143D99F491A
167E07AF60EC9F17C36289368D740B632CB919A0E74C412B76CE7A5906D5200F
9E79CEB9C65ADA3A0F23E8947E834AE7A329A9F0AA7A6BF545B1D7B4666C6522
CFF268634EA06DB3A82D91A4C0A9B227E79961212881A54A6762C335DE7E0831
130C45D94394D21C049B9D189ED955438C2151514F17BFC67E431DD9A8349202
2F616AEC1C7B19F63D5000EB4771370924BD4B9053FE78B5E4A244B9A149D66D
A8BF3B398396D2233E92E4A5FDC70FAADEADAFD255193D688842DBA865CF6154
C9348D590F3FEB135D4B7BD4D76A52CB140888247CAFAB25ED51F4D187041CA0
ABD956F83A5661CEC171B52AF92F9ADE27973B560C802E1E0FF51C4003D1289A
CDD09F8EDA8AFDFF666D35418CEADF3B0BE298F0D1E5C8E024D6A2017A7E71F3
3A9FEC9930F1118101E040339F9D41379170928DDF5B5875212B271DC843F612
E0C21C67263186E3D6929160464D4D5C8928E14D0845762C36FFBDE548188E20
3B6BAFE5EECA0385142F01216FB8A90C43A472C1D4447FE5C7C78CC088FC72E7
3FAFA062C338BDE8A430FDF1951B107D8D73FF9376FACDE5900BA362C66F8C1D
947F9545C5C13A53E4479B1C1A50472C05E8F8C266C6D4F4EB08E97B3B1BA972
26973B844545089C5732322BCC9A5A8FC972FA0D7DB8BD85D2F515ADE65DA479
0224F7EA2276CFED0B75B2C23AE7377F86F1F6F205D6FE19377D87E782143697
984E731F83CA888199CEB425643C259D4FB8B58DD69A96085198306494BB497E
FE7C9954EF35B679BBE3847A9C73507874F71FC97665E2A58BA41407A1745247
44A79B588D969D11CE4B863CDA655DAA53CEA5C3C263B345E782006CE9831D49
603D2D95DE9E370D617F5928BA416C362BB2B4DEF16A5D44BD24B34257765F3B
6223B3F9B54DAED69A90C7050AB97B06693D253C6894CBD7B497DA449F1D9B7C
D91B421891EC0724F59C82B9CB288DC42F2D2D7A7F22EE3D910E15953D7766AE
276DABED3820390BAF2700C4653E1C77FE63DB71A66D93ED293E25B8412A1EFF
809554BF04ED0DE83F7F190883ED793803CAD2C34A66524D3A580ACDF3C13B22
08F18905E7A4A16DA9ED2A112462FB9FFE481EC2069E484E8BBFC19D594153B7
3DED4C11762223B7586483B06BC164D824D1A6FCAE80A35DE0DB8B33396771DF
76DC5C05578EF1BE00A70BAF3D951A01C87328DB2B0DAD6E1B4C21F37D1BC0C5
A929BDE5EADF20DA60C4DE2E3C151005814F24824D33B95F700E09A0207EB602
3EF60DEB1622B91DB99A855A8F1DA96358F05CFCEDBDDDFC8446AE3391BEEC41
966E594E28D052DD5ADA49DFF65E79540EBE5329DFD86C23CC800F95221B9C18
CBBF941D2FA47EF1EF59A89DB5DD188E75EE94AD2A79E2221107E5992C00D531
2E00B544895A9204656867E3DE9D4CDB64B920B5CCA9A73E6514B36CABAE01BF
94C15603B86780190595560F792E5EF01650074EA4A9BBC6ED284B9AC2020641
DCBCEE0ED27FE58171DFE104EEE4202759E594159DF45113C00236127A46FB35
9EC705F21C0E456C1F0F924594C09AC64D4377C5FEEF764BA4A09ABA8D09DEB1
FC13B0CD202B2F04CF5D73DEAB65C36C2FA7C0DC236BEEF6D23BFFC9C493DC8E
1831F19EEF81EEDD976E43BAC6B5CED13F901DE59835FC75490EA528A72CEB77
24C38B258EC38B9E6B97F85CA8C10D8809BBE55A6FAA12456FCAC786942E123C
06D1E55F7ED04400088BEC968BC5081DC7A1B1B65166E7821679F76694F235FC
6854C8776AF855B83445D9FF919B1D80E98DE0741D06D6C5EEDB3E3EA6392530
F1BA817737D8162F7B3A36AC2A03190CDEC654383E31934C3E0A012B639532C6
26FEBE9B412F1C92D1943B7C18CEF510729D501349644C97F087F2F840074AE6
D8CD0FB2E620FFC908BFCD938B675A0A4A687F7FBE8F3DD06A62D7B6DE7DF3E2
49D367D60B10061EA86CD512F5A1BE8950D83C62695E130128E0037B62552D17
064319BBB9B1FAB9D79705E5D68AAE9B36EA14BF1A59A863BDB8DAD9AB5D7B8A
E30E2B499F952D65877C8E38EDD7DB29F9579D09E629AC188DB6A6403AB4BA3A
D358B3770D727A2B77D84B6C9EC17E29D88E3421F9B7D2D822EB78BB8BB50692
8C46DD6F9BBEF2E848A2B5669B200019802AD19661537A84D3514AEC5AA47445
2C791E01DCEDF18D9506367241255FFADEEA6183F51A9F42448A7DE413C08359
52DAD2A60FD606AFE14702BD3B0EC448720FE63438D020DEDFCDE3582FC31DF1
17B25FC152789D2F17FD60B8209D292D2152DCF8D28B5ADC04F6659BBB746CDF
145163361823CA343763AA951C640B5D4A99B7787105A1609EDD6A596EFC3F6F
2FC33D0D499DBE56C6668E137715D435D6B683E0113647B2765AB0F3D98AC717
5B33C3EDDE18506E73B4E392B022F30480BD30F59B2E3A59D93017296C3156B4
B5722E1955777716388AA987B2665669716F866FE6BDAD5E74A523CC03915F26
9B7B231F5D9B1F61DF7CB01ED3F27070E36547B263855DF5B2E3ABD2ACC440B9
0826E1D8E28E887EC5B2CA95FFD044FF2288FFDD68879C486B077F17522FE8DC
250FEA26AAA10C34F422BD8CCD4D8AA11C6EC3F4A564235B09EA380514F643E9
14833946335AD3D77DC31956FB5881797CA9835D15C6FD1B69C95705CB9B483A
0D894A3CE05D0A3D95F62DB372D6A8BD51829797A356E31AE4D1B404CD7D6EFA
54F9D0F276D9D192E44DC09174621E975226239419CD3EB6898EA2EDB60DAACC
B50BAE7128D75AE66786B2F2F8D482ED827912BD0756C0691F19F2B3BA2512F8
9BBA057C705CF4F1EDB593FBE8E6FF8986DD0EE8D8792787E039B0B72368C1E7
E18A49F1AC81929AE16EADD28A7BAD963D05C3E6CBE2F849B5B70C26C7110836
847DBD50A48B49452A498A67E33B4A3A122926AFDF9833C58E984780FE2B0415
7D5A21CA768CAAA4651048411D0CF53CEF6007939CAAAEF3AE49B0FB2697475B
D22905E36077E7B620D1A5BBED1D205A94F83AE2C5448616627597F3B5CF420F
DFB4CEBA6E61E6A3419D0E72305D5F2F1BE5A189CC77E8227067161FD3C3162B
554F43976A6CF7193ACE1747EAFF99AA8C67E2E9E5236E44BBF35CA797144A05
7393CB7EC5F6F3260D3A976A22745F96E67100CBB65AFD72382C528243425AF4
88CF7A328DF781B82D6AF03249DD095AC5BC8B0F5EFFC17841497BD162C7A09A
4FB7342139866BD6C3B1FD93F41198D9825F1218CBC2B3BF7EEC6422DF00ED7C
36363872A6206D893CD511398062E16178AF63358A1290145D1809E0442DF376
123835B36B3F80F734F46753F1A799067B9038802ECE8F75622AEFE4E2B16AF6
E0BC96A7835962792E0B1DDB8BE5B2D42FF9F8F92DEDD7F239F6A631A25F5730
9B4EE9941CFD9120914D9EDFBC4C23ECB40E18FC04C86725D372482479FD2112
2F3CC15DA30EBE088E7CAA2EBADA7E3A0D5063CC7B9C3189710C7066CF85A8D6
6D46EB2FED451030688812BD6608E0C814C5CE673CC3A78ECF78AFD89A478061
8CFA13FC904E44A997B6D3886BEF9FA0C4B2765FE0C5D65E335C249B0EC6FFCA
E7AD57656574240E3E29C007CD9ADC50CCC9784797AF09AC497685145AEC2935
54EEF736340B4BBB416B100F4B3C794B82AB8FCD90C7743C35C45879C9283827
5F0AE198D9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR12
%!PS-AdobeFont-1.0: CMR12 003.002
%%Title: CMR12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR12 known{/CMR12 findfont dup/UniqueID known{dup
/UniqueID get 5000794 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR12 def
/FontBBox {-34 -251 988 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR12.) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 43 /plus put
dup 50 /two put
dup 53 /five put
dup 55 /seven put
dup 61 /equal put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9C535A5E57376651
F6823308463DC4E0339C78699AC82C769542FD3B410E236AF8AF68CF124D9224
FD6EE92A38075CAAF82447C7AF41EF96F3ADF62F76FB425BEDE4C4124E7B1E0B
8BF254D91912D3A99557F5427907A56514C5A3EB961B94112077FE9417B70DA0
B2E1C1FA3E1D6F01D11F640CF848E45BE3E205258E64FE36AFBD4DF4E93F6B1A
966C8E7FBE2CC8FF43C1F67BF6C361678B5E90F4BA524FE8A4CAD6AB28183E6E
CA6C9636E884845105595A2E40CDBE8D4807A81AF4DB77B31873FEB221BCADD4
2C4669459704CB58A7BC230FC59F867EEADE660E49AEEDEEB042BA9A7DD8193E
56C3A36A1F639F7EA512EE4BC6992F52C2FC82A890EFDA730105B0AF7B819295
EE00B48F64C2B5BCB275B1DD62F289CDAD4AD9B7EF057684642FA6FA6322C277
E779CAC36D78F7779CB6DE12638B3C65B70C6B5F8A8C6421A379719B8DD44973
5F52856A4A29B2ED37F2B1FBE6EF4B79B7C0CD6395C756A00FACD763C235914F
847D1D99831023CE1FD89EFEC83AA7E313131C0C197248605EF5BA773D0A4000
72F607551A8EA6F0FF19441ACA179177D1FF7B423FEBDF58B0C19CAE3C10EEF6
3538D8FC4762B77C5AA023A8186C40D0365A4487DC3564265B3DF908572DEAA2
57E29EC669DD72974F806EFF5ECAFA9ADF1F9D2A63087FB7BBD100F0F81C6FFB
B1EA1C9DD46548AEDD147EE64B1B4894972DAE1DC3E8569D6A3CEF9F9E46DEB7
547E10BB2959D374A33E47C58F1B20419920AB485F166062FCCC08EB5CC9AC88
F388F0C0155027B727729488E44CCABB7064A1432E179189C4627453C5231535
47D1F2B8BA43069696830CBB6E5F9A135CF22D3D1FE490A3A63C088EA32FF444
24A2427BBA63033DFE2E06DF8CE67949B6AB02F26335A376B57376814D2A7DE7
64A4347577EBE9A6E33DD2FC214A09C6D889C8FFBF1D567032548851B8F97204
49E215CC7D222F593E1EF1439ED60AD922D41E0E9EFB5CA48F2FEFF75AC5FEE7
FB6676D8B8D4DB6885FBE8B61B586313E4DAFB09D94CEDC0507E93000104F3DD
F83865A2C6F6A7DA8562BF86F5DB233CC9B53391273A1462E40876A8AC2B098A
DBADD5A160DEAC061F86A5FCCAB495EF8A9D121AF07928EAFD56F618E4EAEA97
CF89A3AFD406FC9DE1E9769C1E1EB83BB883786BC075EB5DA2692CD59C4DD7C1
7FD2FF9B18AC740A390C1DB38670DEB18C67721A1DCD502FE7368F47DB4281D5
459B3F020595FA3B10544AAE9EF786A0645FB7C9BB29D091E1432CD878A05918
1665643005BFD9A4B0FFD347ADC84CE22D6F9AD4EDC05E8C7179DCB360AB57D1
6ABCD200A4B4AD56825DC345984D9A3DE11CDA5E9EC1E5006EE4181E4EFE0846
67D8C27BEE8F84A1E01947E945BBE988702DEB2240C4BED952E433E5305484E5
71965D3DE95C4115FF78CE9EC18E323C599727C8B93CDFBCD1CCA780DB8C81ED
C4B5E596E1603624308972FFAE9A57B0EDB51FDDB6E23EDE2946F61BEB241345
2A192D8CAD53E823D687F9C64A70A4B4B703291FA6317C051DC6A44BCCE0288E
3839D726A8F2E39BFF429865E95C726E808E02CD06F36C1CC9AC77999F8E28BF
CE9D74B699CA982479E9D0DD98EAB24D29C981EF0349721D6819549A39413801
F80182D567EE316E2F0AB208068E15693E4C399A381BF9BBA625E597E6E109B8
16F3A84C8EC92F2ADE288821092A421A8D3B907048FE947230810F0777EE2542
29A3485223FEA079B359034F70464DAD2F0E420271A4E0CCF57A0ABBC20AB327
0CA71B292126D395E0D083B19BEC6B48A9DE2BF470C3D01A8C3F52075BD4BE02
A0C518355814478202FD4762EC542F8E7B9B1F7824F0554660CEB83E35635E1E
DF0D03C94C903ECB36B4948ED98B6324E0094EB1DF70863142D4ED3A932D7346
39D69F8F044B6084482D7748C27328AFD24A3A70B99D1F7D32CB984488672254
28B6A9E9DCA2C9FF6A1B311D72413404B3CE5428BDB7FF3C36357D7975184F56
FA6B32AD54C37D0AF7576663AB1397B80D4E998F0B4C4F6D90B483029EF2EDA9
D4C4204C1546EFF3100629453EAE01918D09FE104E626ABA38646F17B6A94CE8
116BC7A8D9C319434CA5B830859B4164DFADF1D7C3ECA5C78D8DEA930EA4AC3F
59DBBF3148C91A2E807FB934E3439D4F67C6DBBA9972854E6E3688E1E0A34B74
482217CFE031CD7B5DFEF727C3EF8DAEEEDA08F4C90289E62FB2AF2357EB2E45
4BC547980FD479101FFEEE477AAC6268DD659E8DD9E244676FD3C6909713B71A
323B211E571BE711D103FA23B5B9AF077D84E2D20FEE805E81D20C03501F0F17
C3B081946CD0FD577F00E50B76CC37CFA97A61B89C25DD43911B28857284BEBB
5BEC61FFE3A14C64BC5425A7A82326617F6F1FA4FEAE56071C9F559F91568179
46369B394A5CE96FB7420FF8AB7C61CB83492FA5AE4A4B0799578594C9EA67E1
E54498AA5CD6ABA34AD3417F04F5D8D664A7EB39D41E2D17643CAEBBCCD9C38C
C5C9541641A09335EFBCE0D276A54253EFD68141807A66F1DFEB4BEA5889FFA3
4D20BD52012206A9F8D3E0F6AFC03FDBBDF3E51506EC6336E249CEFB571AB84C
BDF8E471E3795C04E38A5306BA6D450D72E50910D1AC385BB06CCD4B8E433A32
5A4B7FACC976BB31FCAA1E62DB2C4FE06DDDE7367930E336B49F47DAD91C8735
9A35D80CA2E117E86B52E41E9278046ED923454989E48610ACB3B1663F197117
52659A9D7BFA561C7ACE0771794FC778675F83C5EDCB132AF124C7E6540A140B
E0A268836C73A3C746DC964E482E63C56C0D396515283970FBFF182F9F684FE2
655FD8F5D057D22246DDC3FD11B77552DB4D90ADBAB77BBB1FB1592129DE0AEC
F822D7D36E52BCDABBD560B403A5C56C5E1BE789C3AC049318C7FAC5E5861E42
FD66C3C0F46361078D7E036281682BCE9BBF77983C93ECBBEBA9B359769CA442
87FCA1B98F4EEC4935CC93B08AAADDF355C99816453587310F08C50B9BA3D107
5388A1F3AED2AE32BEFADF0285DA90436D1D7EA85D7B9B6DF2AC4B778CFADFF6
6EEE54D1A1C5DEE3CCA7EFF57A7C2931933CEED90CA26DAAB45E4388EC4DC366
B9E88518D6CF094861D2A59282044CC06E63EFB390A6DF4BA5EAC7CE39E1EE03
3D84099F5BE96612789AF3EDED07266EF10A0FC23EA1EA97040B6BAA63138B1A
A9CB8F5DED781260962D7618EDB200C3ED976033E8967A8CC676E9C11F74BE34
343A7ECE7EE97E8F76F7E95517A6D6163527406EF5A669535CB2BF4031F29046
BB2D0FFFB47A576F5EAB1D00A582965C56F28C00B3BB7BE2CC8D8391F789070D
775EB775437F0CD53DA840BB3575104B63E4B0BF14E3F14B320EDEF65FD4CAF5
8596DA491BBCF3153DED3B718F833D106432DF8DB8B8E6B34D5308C9010A5DD0
7E0E53260BB84BAB3EA748E8D72F75901604F80F4416920D69B4B983DCDB72C5
E9928F01A4A85954FD74578AE336C782CDF81D1EB7EBCEBFBAE7ED8AB4862584
397928F502D65139CCD582CF0723C5262EE54B9D2B8C39614652A8A90E1C3B65
7D26B99DA298FE4B9A7E98848F619C9BB4FF9FD215B72F99506F06355B332689
37D80AFD9F9ACD8172CDC51FCD3A759ACA0F7D4EBB07840840EE42C2D5B8B257
2C6DB3A7657B75F2F0B9730A20112745703E2D0FE709436CA6A5F36F59E64D9E
37C0A23D6D289E1AC1DA273872F5FC5C3DA2B127F078A4D7AB3FD7E124455817
DDC796D54EF26A1FBFD539D3A21B86DD4477DA49213259ABB3FF241424F2BE5F
89151E02FF87E0BEE26E85C0E518D8BE7CC9214B8E9A9EA1DBB49C6C212CCF08
90C0F23E9858947EE344062EBD9C574979087439975EAD4E85CD7BFAD3C91CF1
EFF577843AF1427D06CB2F3BB519ED1591974218C43F0D2038665F9E2E3960B7
FE68CD3CB2DB6B36C7997C6B21EC11CF1DE049541001FFF26D14C255E3AE862C
5A5701292FD2FB3D04523D6E2F3547923BB117718DFB6E6520F0D0B5450C695B
8C9242CC8671B7284CB2E1E9EB097A3DB1B4D5E8EEB93B4DC7E38C0A10474665
54DDCBAF079B92EA494F6FA75A84C5AAFE280284D0823D7C22249A21044BB0E6
4062074ECD17B62E03EDF4945A294BFEFB51F5FD870D9D7230FC91B83C1D85A8
86CDDF326FC90E04362145D6E8630C50594484FB829DA18F5C078F2EE67D2F2B
08DFF39AE2E8C9741FA989AE494C7166F122D2C5F71B97C973B7CE8500E9F87E
D59C30F2E99CC4D34713DAB680598F41955FBDC26A14CF1E73D6BD6B9AAC8D3B
B998F2D0D647356CD236DEAD6561389ED3A6746221B0CF15D6648412B35A6B54
6A0EF5BBB34AA376D9BAF025BFC650C1B74333CE85413D0EBB2F4D082A26A5BC
3C0A25D2B12CB159F140E00E262F1CFECCB2C802FF94CD34DA0CE9B4B3830FB1
DA85B9B670D5169928990A2E9CC869891CA2FFAD9774E6B92549644DAA5FE00C
A5BE4F5FF91A0B6D2FD8F96121D766391EC4ED3E73DADD476B7DAE1A50AFCD98
DB7E27E44D30416088D9BC07D4661D9ECEC0806830ABF14CE55AA3CA2DF66E8E
748B8ED46466F1EEB072AC0674FE6FED231E0DDA59ED7C42BC05EF00E176050A
C4834D893DE42474EA20DB1E25059E84BD137EF65A02CC295B0FFDE4CDE95879
0FE88BDF2519ABAE7F8CC3E6386ED35E04A14F1E3861922645E3A3F43B48A5AA
1999A5EFE192515FCC625C829FF5A7B337AA422F5E920545F9BB269C869A821D
6C4C26DD2AE746EF0F0B4C1E7E9871ADB5270E1CA9BE28225F7A0370D4C52422
E25263EE101C4EC1C7811B05AD42F364844A56BB91EE72FC8ED53CC6954D2BD6
F945D739BE4C61E36143CE890FC0CBF2F610018D678ECF7CEAB18FF5A0E48F76
FDE2463D40A99380D679B3B76D39C664F4992D23E5988B0D1AF33DFB04894016
E852EFD1EFFE586153C0F31ADBDBDE3F73FB49C5EE64D0D02E1504248FAFAC3D
903FD44679BB09C30288139B41B1E90A10139CA3172677250B16535A1F3E5E4B
6F4264DE58896E66051FC677030A121C5A285C47B6129CB5A3998830CE070D21
2F093FC1B44089F603A21F45F60960F134A47226874C737EF6C085634B0A4A66
139420501351F737A73F39D960EC38420BE46E5B09D298E7C16B8E32F01507D4
0141FC52DA1DE718D634AD9C8B00E46EEEF84356759324D2B9A3473C5DA38DE9
E30182B87F91B6A7F7BACF29A93B44C879CCDEDB063F9D2E51E0F1FC9F018FE1
2433D85AF24B55DE3A61C4D0A2DA4FDE933F5F6FDF17E9FA9932BFC46E2D71F6
585EEF5B2E4E89E797A24B799D7F064DD1A817A53677FC9EB8CC3E7F93FE50E8
D50E3191052943FD6C98B573BDD1F6D70349E1F8011599E3F8FDF1D6E80A710E
51E434E85801617C6FD8ACCF1B77B4BFCCDD35CB4C0367F4EB4D8D9DE8284D5E
B4F43E2F8320C2C5A9AE90ECBA7E65D377E91DB69FEF27069235366AD3E126C3
A73CE97F4C90BA00D206FA012C327FD69EE59AF4470A315B1799CDC0539BF90E
512C8FC3BEFE4D1B01D969EA9E3FEF976CD6E0FA4C9ECEC955B265CFD58AB8E5
F7371E479279EE14B689269205C5B506940606CF3E24A1E7EFF3CA96ED30AD6D
E243DE57690C3D69A401AB3315FA49E4BF4ACD4DD1CA39272533E82EFDD508E5
1C2CD286CCC5DE1202C7C7F654521750632EB637F918667E2233A43DF75239EB
F28F3129EB5DEE2FC5BFC331FF709B0FE9B327CBBCE98BCA2C861C6547E50407
1218CEBE6EB5F9BABA4F2E11BCC6FB553A544A567B459E06375102C69F8018DF
BA6A227CFB13E2D74E6A521E01B74F2963E9A0A1C9FD87A88EE6356E3BFABF55
BABC751D2BF85E6712E8EF57914920775906662E4BA68FFA21AD422D34E15578
43CA0568B431101A1194F8AB1EF25E886BFCDFC10F4A5EBD9530816548BC298E
AE4A0B6B52B8B59C644C409B4191B6F4203F52314F2675F02AEB65A72C66E92A
2AC703E15D8D381522C0AC30C165B822A9B8D18CAECC094EDE020756018DCF51
D0701B507519C4270B70D8CE94B436F640C15872F9B5B77892AA3D110E4D6A65
8F0815C61A5127BA25815378683F46E69E54A391A8675977E7DF9C2D4E6FA991
9F029E50CC2F266B31EE9F9F24452D5838905F330CB7E416B8AF836C5AC26AB8
BE2ECC6EA4BDAA08C30995709E225C21D35DB6369167602CBFA8DB2697635925
969002CD1BEE745DA2E56C17EF3F0C05E3847147F86963C37A221C8827195A8A
3D38993E4939AC915BFD9A212F5FF3F826F742B952018986F9FBDDB69C3AC65A
845F7F33C55D4BE60A1817EBBCA7E1538E8087E1BD5C083A320D52953BE65F31
E8339C612A510B59CE48D2EF7061560C4AD258E7DC59694493E3AC878246F37D
6DE89253EBC8830C6B209E818213C4AC4CF1F391AD91D57BE76FB0E2924A1407
E4A949C905E44F54EAED6419F13D59942C8079336A172D4758BEB5D3E786FB93
3CBE4FD2EB53E4E1DAC34E821EB30FD44BC6CB4298242C38F848FC23AEDC9733
52BE6F32E31E25F18301370F8936810B0566B664B042C7AE0D78ACF0A87E5BF6
F9B66E358168B2CEA30DCD940074F3ADB793CDB136161FE2522905E87B8E463F
95D4DAB7E14A3DF7BCCE8141C5A08FCFA2BCE9F2D1B05A7642E75877EB840149
AAB007CD239AE47AD115929427717F219B0A8907F0EC79ADE1B901DAEE87A2F8
39361DAB43DFFF69650F601B24061A9353CFD619FF9626F63275FD09A5B13BB4
8B3379EC4D147C41197E8387FC04DA7BE409524CEF74EA91DC066808A7FD0EF3
957A44E2503EDA67B1C61827479486134E922E560A673BF314D601C66003CD07
55569085AFC8428389A140EB976CCFB8F29E27587E46C413ABE2EFB51AF5913F
53EEB74063162E0BA1E24CEDCA320377D3E11BD374F0B44E132A5C35835B6E2C
D32948EF9DC7931D104C1385709DA882DED6458319F21C2329938396BC074106
CB9CFB9E0A915F8DBC8435F386917AC87A2BA45D857EC30ECA66FB4044F5439E
CDD556B82A0E43418D179AD883C85AC276E1190CEC242E3E1D86E725ADC39E46
BB6C47FE9E17E29F8EA81E870302A00D91434F3B7A05F243176E6EF1082541A1
B9052191EE5C2B8E94A2E02DB65FC769653CA8D1C07A13CB853544AEC7FC35C5
218DE3128AA31952DCE19C55C23FD69BCEA2C661F57B11B8F9E86BFA718D1521
3346E78C701A5E51923D6D937E62FDE3669B214D240538F069A100A542720A86
31DE88116DE775F7ACC2A49EA6C02A24408271A846990669F2AF60AFAB4C16F9
7F4E88E917F0FFDCE68F22998AC0AF2A60A73258C3A4BBC42A2F918123128195
196D0E150D79AC3CF4628503D1F3FC528265ED8324E56849A47B3B07C29940B9
1BC270071E221D355EA51E9942D3BD7F99816304FFFC8F5B036C953B38759341
ED5D7B9C8E6B70C409DD8362FD291201CC385E4A98D73E8518A4C0E544152563
82032FBD2FCB6E403D34B85ED4053A8CB619BDD4DE001F4C3007B1F317579651
E6D6662189CC2D95AB85D7473F65C5D7B4AC63B0FE928F3400035D5A9D443D0D
F3532B99F3AC26CB25EA3CD64C341159061E02EFBC7C033C05CD919BBD827A6A
BAD47EE10B9AECC871B76227228CA161EA7B61DABB252EF91E607AC8D3F85774
DF0B1507B60BF52E4E9BC0FD04400A548D553D4A6EDB247875E0A2E013685C51
D23EE8A56AF57025AD67D929CE8BE791BE91A4C4D9F00DB8B4F16252C04F7BC2
02236296A9052306639F4672E90E3B9DDE466EAC17E200523B2AECD6C05A0A83
66D4EBC86C0DF27B789D5597FE88BCDAD2925CFF60F5A8EA618FE867857D585A
CE25A158AED63B8FE391030C518693AEC75AC0AADD0C11B0065E2ABCF51132F3
82E3718B9A9FAAF727F2D8286177EE27BAD040C66D0D2D7C092B45D9330265B5
6B5C8E29F71C9EF548BFA4BAFAB242B26455E4B7FC1882D68E408D25E6F58EC3
03AE9B7A5F45D61E02D0AB82AFBE793D708ABEF45FEE865969895654C00A5FA2
093A297AE74BF625A96FD85F58FF994921C9F1276635C8CB65FECFEE37C77BD7
FBD692DBDF1079AD35F8A8198D63A3526ACB37FD5E85EDFAC5A7B20791CF2472
832DCE271CE958881E22B7D4F724C7A0CDC05E45D59FF3D4324DDF396871F61D
D19A92C973B191FF49A7C535BD506B2BE8AF7A569F38FB8EF6912662960351B7
AD10279DFFBBACB86F1EC6E64FE3CB19AD47CC7717D9066895E04818E77DDE47
C894B8C50DEFAE6F731FB509E175C219B59CE7CE1AE5A41BD777B1D78C01C380
99DF3E44D4FB05A2FACE7DB1CBB1C5155D6EA86933F8B05B9236075ADEC9118E
265FC1BE35E4334F35BC727BB85DE5D6B9D35986DA06682697A528BEFCDC916A
B9E095F22A07BF1688C946AF5A57967DB18362539D3644E166F1E41B97DF7835
3B24163AEB4C4AC90F0621DC010EF2E4DC4A7DFDCE40D3C8828A42B8EE1AEDEB
762C82D3EB0555508CA2811F7480E17B294B6B057AC21183620446F9F2815E1B
9C8D4F8607607CF776BFFCF5654F71C96B90C9149C6E3B65E4A3531738E4E11F
C4248A58A193E69114D239EA50964840EA9B0937D4939E41C993A50FA444BB68
120F9385ACECBF5603CE7FABB2473E1DCA13BFA80BAB13C7ABA6C8B47FD25E29
D6CA4869C78D485FDA2E171735400E5F7442BA60AA1F4A7C7B68986FB0F89FE2
9A82DA7A2E22DB34FDA64B0C327E56BFDD41739A79F6E619F71B294BF0A64690
5C5BF752ED73E40DA1995271B8938E6C3B0907EA35991F9F80C8B6A508A364E3
24AA1B3130BC65F245D6FDECDB5219533E485E548CD11930716C2B6E98DECA78
17AE2B2931DE34E8645EA2943BB70B08647A3AF6525E5CA2DC968ACCEEFC85F6
1B45FF4E982DD3EAFBAD0E5474BE67153EBCF6359994B07FE046A2E5EBE88ABF
AD02720AE3246FB530ED09348BCA298652D19B6C02069277D929BC6E7A280B7C
E2313348053E5DFD0B84F0DEE929125BB15333A5428CD87225C7FF2837035659
7E2DE44B8583137325430351BAB9F4EFDB3B0E85EF1D68E1E2BB5FA5D9986567
0607A2925A176B9AE1E0391EEC208B20153D6FDA88F2B2ECBF2840E3562AA163
3B2A66E0473069EEF5D6BFA0F3E3E9F78D272182E501F3932152D3B4A3C3252A
A530C383F46A65D565FB5CF7ADA42D6B6641D813218ED62E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: Dingbats
%!PS-AdobeFont-1.0: Dingbats 001.005
%%CreationDate: Tue Oct 19 1999
% Copyright URW Software, Copyright 1997 by URW
% URW Software, Copyright 1997 by URW
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (001.005) readonly def
/Notice (URW Software, Copyright 1997 by URW. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright URW Software, Copyright 1997 by URW) readonly def
/FullName (Dingbats ) readonly def
/FamilyName (Dingbats) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -72 def
/UnderlineThickness 36 def
end readonly def
/FontName /Dingbats def
/PaintType 0 def
/WMode 0 def
/FontBBox {-1 -143 981 819} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 113 /a75 put
readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB737CF9024F3D038DF9A0002D
8FB689C5F5000C3ADDAFE55EDCBC4E54B36A58190743E32FDCA7A24B64F5E7F9
DC901DE44A25E99E322B3D3CBC10C0412B0531B14E81134FD1DEC47BCB7514E4
64E7550B900404A017C92336BC792744F6F38904282AFE8C998D4B9DB7893830
A6A01872E9D6AABF66C4B08716A39BD9E5ACC0641E506B70430524E780517E59
81EAECFCF9798A634318B8D160438435B65CC6910E609F13A4963AEF2B2540DA
DDD64E0E1D15EFDD5D36D4FCD9E4D81E21D52784DD3DBB741AB5FC052F481B1A
A701AB81CF4EB85075726F3FEC0872C02EBF4D62F5DFB8990C1A0CC8161F83A2
D01108B6C4AEC3845BB4F61288F733429B7B558A225D582AC04BEBF127E8DB14
B59F027502AF59E46E0063B792D35B2DA4EE7DC3F2A64DB325318C1CB1A57504
3527B10BDC733305E18032A64A1002439BE13D163AEE778CAAF5A7A8D00CCCCA
673B8FA9A99551594E85F21580733527E4E19743F4C932D443625DB353CA959B
FBB3BC7996F1F3559E8738D7B3FF1FC8AAFD28CE8C9CDF3CC10A8E7DCE003893
8BB497D690310A0380F290601BE482029578B45097DBD56F52352D7F931A1A1C
735A74CA33FC62A04E1D1E1B023877B96EA2AE6E5E42682E9F4BABD109F039E3
CDCC6B0F9404DA157F91B61905B34C39BD0543872FEBA04FADF1DD613E1E9822
560851385E512B3754A099D21B332D2C9547EEE2B94EBC03B2D954DE0D64D28B
5C0305C968BF1EA14529BE16F9E7F147B08D71B9332ABB7B5EF1B8B60A8D19F5
22B497164EA1A20E17E9B45FE94A09D54FA74709C83B0824F96BC972F4FD728A
BEBD57EFF668607F499E1C51E9FB45286F4C13BD0AFA0A508F56824CF0EAA82F
4FE235BBA8D245C937FACAF4DFF3681FBA6D35EEBA001B55704878F22E7A2C86
476C1CCF1FDAD0E29EE5CB818640B6853A362F764E9A5DBE640CA905A9146590
3F8F2CE8881EADDBC6FA9C1505D0EACDA995DA8D00B9EB755B79D90D68B335F9
49FBCE867D0F7DE2076A879038601083B20389216CB01A808CF4069034CD1152
FF9BEFCB0DB36F87FBFFD269DDA23439D738D84DA9C96CC7435484DA8BF6FB1A
34BC1DA8F3FE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600
(/home/fenarius/Travail/Cours/NSITerminale/docs/evaluations/EP blanches/sujet4.dvi)
@start
%DVIPSBitmapFont: Fa ectt1095 10.95 8
/Fa 8 120 df<000003FF8000000007FFC000000007FFC000000007FFC000000007FFC0
00000003FFC0000000000FC0000000000FC0000000000FC0000000000FC0000000000FC0
000000000FC0000000000FC0000000000FC0000000000FC0000000000FC0000003FC0FC0
00001FFF0FC000007FFFCFC00000FFFFEFC00001FFFFFFC00003FFFFFFC00007FE07FFC0
000FF801FFC0001FF0007FC0001FC0003FC0003F80003FC0003F80001FC0007F00001FC0
007F00000FC0007E00000FC000FE00000FC000FE00000FC000FC00000FC000FC00000FC0
00FC00000FC000FC00000FC000FC00000FC000FC00000FC000FC00000FC000FC00000FC0
00FE00000FC0007E00001FC0007E00001FC0007F00001FC0003F80003FC0003F80007FC0
001FC0007FC0001FE000FFC0000FF801FFC00007FE07FFFF0007FFFFFFFF8003FFFFEFFF
8001FFFFCFFF80007FFF8FFF80001FFE07FF000007F800000029397DB72F>100
D<0003FE0000000FFF8000003FFFE00000FFFFF00001FFFFF80003FFFFFC0007FE07FE00
0FF800FF000FF0007F001FC0003F803FC0001F803F80001FC03F00000FC07F00000FC07E
00000FC07E00000FE0FE000007E0FC000007E0FFFFFFFFE0FFFFFFFFE0FFFFFFFFE0FFFF
FFFFE0FFFFFFFFE0FFFFFFFFC0FC00000000FE000000007E000000007E000000007F0000
00003F800003C03F800007E01FC00007E01FE0000FE00FF8001FC007FE003FC007FF80FF
8003FFFFFF8001FFFFFF00007FFFFC00003FFFF800000FFFE0000001FF0000232A7BA82F
>I<000001FF00000007FFC000001FFFE000007FFFE00000FFFFF00000FFFFF00001FF0F
F00003FC0FF00003F807E00007F001800007E000000007E000000007E000000007E00000
0007E000000007E000000007E000000007E000007FFFFFFF80FFFFFFFFC0FFFFFFFFC0FF
FFFFFFC0FFFFFFFFC07FFFFFFF800007E000000007E000000007E000000007E000000007
E000000007E000000007E000000007E000000007E000000007E000000007E000000007E0
00000007E000000007E000000007E000000007E000000007E000000007E000000007E000
000007E000000007E000000007E000000007E000000007E000000007E000000007E00000
0007E000003FFFFFFC007FFFFFFE007FFFFFFE007FFFFFFE007FFFFFFE003FFFFFFC0024
397DB82F>I<7FF000000000FFF800000000FFF800000000FFF800000000FFF800000000
7FF80000000001F80000000001F80000000001F80000000001F80000000001F800000000
01F80000000001F80000000001F80000000001F80000000001F80000000001F80FF00000
01F83FFC000001F8FFFE000001FBFFFF000001FFFFFF800001FFFFFF800001FFF03FC000
01FFC01FC00001FF800FE00001FF000FE00001FE0007E00001FC0007E00001FC0007E000
01FC0007E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007E000
01F80007E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007E000
01F80007E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007E000
01F80007E00001F80007E00001F80007E0007FFFE07FFF80FFFFF0FFFFC0FFFFF0FFFFC0
FFFFF0FFFFC0FFFFF0FFFFC07FFFE07FFF802A387EB72F>104 D<0003800000000FE000
00000FE00000001FF00000001FF00000001FF00000000FE00000000FE000000003800000
000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000003FFFE000007FFFF000007FFFF000007FFFF000007FFFF000003FFF
F000000003F000000003F000000003F000000003F000000003F000000003F000000003F0
00000003F000000003F000000003F000000003F000000003F000000003F000000003F000
000003F000000003F000000003F000000003F000000003F000000003F000000003F00000
0003F000000003F000000003F000000003F000000003F000000003F000007FFFFFFF00FF
FFFFFF00FFFFFFFF80FFFFFFFF80FFFFFFFF007FFFFFFF00213979B82F>I<7FFFF00000
7FFFF80000FFFFF80000FFFFF800007FFFF800007FFFF800000001F800000001F8000000
01F800000001F800000001F800000001F800000001F800000001F800000001F800000001
F800000001F800000001F800000001F800000001F800000001F800000001F800000001F8
00000001F800000001F800000001F800000001F800000001F800000001F800000001F800
000001F800000001F800000001F800000001F800000001F800000001F800000001F80000
0001F800000001F800000001F800000001F800000001F800000001F800000001F8000000
01F800000001F800000001F800000001F800000001F800000001F800007FFFFFFFE07FFF
FFFFE0FFFFFFFFF0FFFFFFFFF07FFFFFFFE07FFFFFFFE024387BB72F>108
D<001FFC0E0001FFFF9F0007FFFFFF000FFFFFFF001FFFFFFF003FFFFFFF007FF007FF00
7F8000FF00FE00007F00FE00007F00FC00003F00FC00003F00FC00003F00FE00003F007F
00001E007FC00000003FFC0000001FFFF000000FFFFF800003FFFFE00000FFFFF800001F
FFFE0000007FFF00000001FF800000007F807800001FC0FC00000FC0FC000007E0FC0000
07E0FE000007E0FE000007E0FF000007E0FF80000FE0FFC0001FC0FFE0003FC0FFFC01FF
80FFFFFFFF80FFFFFFFF00FFFFFFFE00F8FFFFF800F83FFFE0007007FF0000232A7AA82F
>115 D<7FFF801FFFE07FFFC03FFFE0FFFFC03FFFF0FFFFC03FFFF07FFFC03FFFE07FFF
801FFFE007C000003E0007C000003E0007C000003E0007E000007E0003E000007C0003E0
00007C0003E000007C0003E000007C0003E000007C0001F00000F80001F00F80F80001F0
1FC0F80001F03FE0F80001F03FE0F80001F03FE0F80000F87FF0F00000F87DF1F00000F8
7DF1F00000F8FDF1F00000F8FDF9F00000F8F9F9F0000078F8F9E0000079F8F9E000007D
F8F9E000007DF8F9E000007DF079E000007DF07BE000003FF07FC000003FE07FC000003F
E03FC000003FE03FC000003FC01FC000001F800F80002C277FA62F>119
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb ecrm1095 10.95 31
/Fb 31 119 df<3E001F007F003F807F003F80FF807FC07F003F807F003F807F003F807F
003F807F003F807F003F807F003F807F003F807F003F807E001F803E001F003E001F003E
001F003E001F003E001F003E001F003E001F003E001F003E001F001C000E001C000E001C
000E001C000E001C000E001C000E001C000E001C000E001C000E00180006001A2177BF2D
>34 D<0000300000700000E00001C0000380000700000F00001E00003C00003C00007800
00F00000F00001E00001E00003C00003C00007C0000780000F80000F80000F00001F0000
1F00001E00003E00003E00003E00003C00007C00007C00007C00007C00007C00007C0000
780000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000
F80000F80000F80000F80000F80000F80000F800007800007C00007C00007C00007C0000
7C00007C00003C00003E00003E00003E00001E00001F00001F00000F00000F80000F8000
07800007C00003C00003C00001E00001E00000F00000F000007800003C00003C00001E00
000F000007000003800001C00000E0000070000030145A77C323>40
D<C00000E000007000003800001C00000E00000F000007800003C00003C00001E00000F0
0000F000007800007800003C00003C00003E00001E00001F00001F00000F00000F80000F
800007800007C00007C00007C00003C00003E00003E00003E00003E00003E00003E00001
E00001F00001F00001F00001F00001F00001F00001F00001F00001F00001F00001F00001
F00001F00001F00001F00001F00001F00001F00001E00003E00003E00003E00003E00003
E00003E00003C00007C00007C00007C0000780000F80000F80000F00001F00001F00001E
00003E00003C00003C0000780000780000F00000F00001E00003C00003C0000780000F00
000E00001C0000380000700000E00000C00000145A7BC323>I<1C007F00FF80FF80FFC0
FFC0FFC07FC01CC000C000C000C000C000C001C00180018003800300070006000E000C00
1C003800700060000A1B788819>44 D<1C007F00FF80FF80FF80FF80FF807F001C000909
788819>46 D<0003FC0000001FFF8000003E07C00000F801F00001F000F80003E0007C00
03C0003C0007C0003E000F80001F000F80001F001F00000F801F00000F803F00000FC03F
00000FC03F00000FC03F00000FC07E000007E07E000007E07E000007E07E000007E07E00
0007E0FE000007F0FE000007F0FE000007F0FE000007F0FE000007F0FE000007F0FE0000
07F0FE000007F0FE000007F0FE000007F0FE000007F0FE000007F0FE000007F0FE000007
F0FE000007F0FE000007F0FE000007F0FE000007F0FE000007F0FE000007F0FE000007F0
7E000007E07E000007E07E000007E07E000007E07F00000FE03F00000FC03F00000FC03F
00000FC03F00000FC01F00000F801F80001F800F80001F000F80001F0007C0003E0007C0
003E0003E0007C0001F000F80000F801F000003E07C000001FFF80000003FC0000243F7C
BC2D>48 D<0000C0000003C0000007C000001FC000007FC00007FFC000FFFFC000FF9FC0
00F81FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC0
00001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC0
00001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC0
00001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC0
00001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC0
00001FC000001FC000001FC000001FC000007FF000FFFFFFF8FFFFFFF8FFFFFFF81D3D78
BC2D>I<0007FC0000003FFF800000FFFFE00001F00FF800078003FC000F0001FE000E00
00FF001C00007F803800003FC03000003FC07000001FE06000001FE06000001FE0FE0000
0FF0FF00000FF0FF80000FF0FF80000FF0FF80000FF0FF80000FF0FF80000FF07F00000F
F01C00000FF00000000FE00000001FE00000001FE00000001FC00000003FC00000003F80
0000007F800000007F00000000FE00000001FC00000001FC00000003F800000007F00000
000FE00000000FC00000001F800000003E000000007C00000000F800000001F000000003
E000000003C000000007800000000F000030001E000030003C000030007800003000F000
006001E000006003C0000060078000006007000000E00FFFFFFFE01FFFFFFFE03FFFFFFF
E07FFFFFFFC0FFFFFFFFC0FFFFFFFFC0FFFFFFFFC0243D7CBC2D>I<0000000E00000000
0E000000001E000000003E000000003E000000007E00000000FE00000000FE00000001FE
00000003FE00000003FE00000006FE0000000EFE0000000CFE00000018FE00000038FE00
000030FE00000060FE000000E0FE000000C0FE00000180FE00000380FE00000300FE0000
0600FE00000E00FE00000C00FE00001800FE00003800FE00003000FE00006000FE0000E0
00FE0000C000FE00018000FE00038000FE00030000FE00060000FE000E0000FE000C0000
FE00180000FE00380000FE00300000FE00600000FE00E00000FE00FFFFFFFFFFFFFFFFFF
FFFFFFFFFFFF000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00
000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000001FF0000
01FFFFFF0001FFFFFF0001FFFFFF283E7EBD2D>52 D<00001FE0000000FFF8000003FFFE
00000FF01F00001F800780003F000380007E000FC000FC001FC001F8003FC003F0003FC0
03F0003FC007E0003FC00FE0001F800FC0000F001FC00000001FC00000001F800000003F
800000003F800000003F800000007F800000007F000000007F01FE00007F07FF8000FF0E
03E000FF1C01F000FF3800FC00FF70007E00FF60003E00FFE0003F00FFC0001F80FFC000
1FC0FF80001FC0FF80001FE0FF80000FE0FF80000FE0FF00000FF0FF00000FF0FF00000F
F0FF00000FF0FF00000FF0FF00000FF07F00000FF07F00000FF07F00000FF07F00000FF0
7F00000FF03F80000FF03F80000FE03F80000FE01F80000FE01F80001FC01FC0001FC00F
C0001F800FC0003F8007E0003F0003F0007E0001F800FC0000FC01F800007E07F000003F
FFE000000FFF80000003FC0000243F7CBC2D>54 D<1C007F00FF80FF80FF80FF80FF807F
001C00000000000000000000000000000000000000000000000000000000000000000000
0000000000000000001C007F00FF80FF80FF80FF80FF807F001C00092778A619>58
D<FFFFFFFFFFFFFFE0FFFFFFFFFFFFFFE000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
00FFFFFFFFFFFFFFE0FFFFFFFFFFFFFFE03B147BA046>61 D<E000000000000078000000
0000001E00000000000007C0000000000001F00000000000003C0000000000000F000000
00000003C0000000000000F00000000000003E0000000000000F80000000000001E00000
00000000780000000000001E0000000000000780000000000001F00000000000007C0000
000000000F00000000000003C0000000000000F00000000000003C0000000000000F8000
0000000003E0000000000000780000000000001E0000000000001E000000000000780000
00000003E000000000000F8000000000003C000000000000F0000000000003C000000000
000F0000000000007C000000000001F00000000000078000000000001E00000000000078
000000000001E000000000000F8000000000003E000000000000F0000000000003C00000
0000000F0000000000003C000000000001F0000000000007C000000000001E0000000000
0078000000000000E0000000000000373279AF46>I<FFFEFFFEFC00FC00FC00FC00FC00
FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00
FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00
FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00
FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00
FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FFFEFFFE0F5B78C319>91
D<FFFEFFFE007E007E007E007E007E007E007E007E007E007E007E007E007E007E007E00
7E007E007E007E007E007E007E007E007E007E007E007E007E007E007E007E007E007E00
7E007E007E007E007E007E007E007E007E007E007E007E007E007E007E007E007E007E00
7E007E007E007E007E007E007E007E007E007E007E007E007E007E007E007E007E007E00
7E007E007E007E007E007E007E007E007E007E007E007E007E007E007E007E007E007EFF
FEFFFE0F5B7FC319>93 D<7FFFFFFFFFFFFCFFFFFFFFFFFFFEFFFFFFFFFFFFFE7FFFFFFF
FFFFFC3704796E46>95 D<001FF0000000FFFC000003E03F00000F000FC0001C0007E000
1F0003F0003F8001F8003FC000FC003FC000FC003FC000FC003FC0007E001F80007E000F
00007E000000007E000000007E000000007E000000007E0000001FFE000003FFFE00001F
F87E00007F807E0001FC007E0007F0007E000FE0007E001FC0007E003F80007E007F8000
7E007F00007E007F00007E03FE00007E03FE00007E03FE00007E03FE0000FE03FE0000FE
03FE0001FE037F0001BE037F0003BE033F80071F061FC00E1F8E0FF03C0FFC03FFF007F8
003FC003E0282A7CA82D>97 D<01F800000000FFF800000000FFF800000000FFF8000000
0007F80000000003F80000000001F80000000001F80000000001F80000000001F8000000
0001F80000000001F80000000001F80000000001F80000000001F80000000001F8000000
0001F80000000001F80000000001F80000000001F80000000001F80000000001F8000000
0001F80000000001F807F8000001F81FFF000001F8780FC00001F9E003F00001FB8001F8
0001FF0000FC0001FE00007E0001FC00003F0001FC00001F8001F800001F8001F800001F
C001F800000FC001F800000FE001F800000FE001F8000007E001F8000007F001F8000007
F001F8000007F001F8000007F001F8000007F001F8000007F001F8000007F001F8000007
F001F8000007F001F8000007F001F8000007E001F800000FE001F800000FE001F800000F
E001F800000FC001F800001FC001F800001F8001FC00003F0001FE00003F0001F600007E
0001F70000FC0001E38001F80001C1C003E00001C0F81F800001803FFE0000000007F000
002C407EBE32>I<0001FF0000000FFFE000003F00F800007C001E0001F800070003F000
1F0007E0003F800FC0007F800FC0007F801F80007F801F80007F803F00003F003F00001E
007F000000007F000000007E00000000FE00000000FE00000000FE00000000FE00000000
FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE000000007F
000000007F000000007F000000003F000000C03F800000C01F800001C01FC00001800FC0
00038007E000070003F000060001F8001E0000FC003800003F01F000000FFFC0000001FE
0000222A7DA828>I<00000001F800000000FFF800000000FFF800000000FFF800000000
07F80000000003F80000000001F80000000001F80000000001F80000000001F800000000
01F80000000001F80000000001F80000000001F80000000001F80000000001F800000000
01F80000000001F80000000001F80000000001F80000000001F80000000001F800000000
01F8000000FF01F8000007FFC1F800001F80F1F800007C0039F80001F8001DF80003F000
0FF80007E00007F8000FC00003F8000FC00003F8001F800001F8003F800001F8003F0000
01F8007F000001F8007F000001F8007F000001F8007E000001F800FE000001F800FE0000
01F800FE000001F800FE000001F800FE000001F800FE000001F800FE000001F800FE0000
01F800FE000001F800FE000001F8007E000001F8007F000001F8007F000001F8003F0000
01F8003F800001F8001F800003F8001F800003F8000FC00007F80007E0000FF80003F000
0DFC0001F8003DFE0000FC0071FFF0003F01E1FFF0000FFF81FFF00001FE01F8002C407D
BE32>I<0003FC0000001FFF8000007E07E00000F801F00001F000F80003E0007C0007C0
003E000FC0003F001F80001F001F80001F803F00001F803F00000F807F00000F807F0000
0FC07E00000FC07E00000FC0FE00000FC0FE00000FC0FFFFFFFFC0FFFFFFFFC0FE000000
00FE00000000FE00000000FE00000000FE00000000FE000000007E000000007F00000000
7F000000007F000000003F000000C03F800000C01F800001C00FC00001800FC000038007
E000070003F0000E0001F8001C0000FC003800003F01F000000FFFC0000001FE0000222A
7DA828>I<01C00007F0000FF8000FF8000FF8000FF8000FF80007F00001C00000000000
000000000000000000000000000000000000000000000000000000000000000001F8007F
F8007FF8007FF80007F80003F80001F80001F80001F80001F80001F80001F80001F80001
F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001
F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80003FC00FF
FFE0FFFFE0FFFFE0133D7EBC19>105 D<0000700001FC0003FE0003FE0003FE0003FE00
03FE0001FC00007000000000000000000000000000000000000000000000000000000000
00000000000000000000FE003FFE003FFE003FFE0001FE0000FE00007E00007E00007E00
007E00007E00007E00007E00007E00007E00007E00007E00007E00007E00007E00007E00
007E00007E00007E00007E00007E00007E00007E00007E00007E00007E00007E00007E00
007E00007E00007E00007E00007E00007E00007E00007E00007E00007E00007E00007E00
007E00007E00007E3C007E7E007CFF00FCFF00FCFF00F8FF01F8FE01F07803E03E07C00F
FF0001FC00175084BC1C>I<01F800FFF800FFF800FFF80007F80003F80001F80001F800
01F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F800
01F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F800
01F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F800
01F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F800
01F80001F80001F80003FC00FFFFF0FFFFF0FFFFF0143F7EBE19>108
D<01F803FC0001FE0000FFF80FFF8007FFC000FFF83C0FC01E07E000FFF8F003E07801F0
0007F9C003F0E001F80003FB8001F9C000FC0001FB0001F98000FC0001FF0000FF80007E
0001FE0000FF00007E0001FE0000FF00007E0001FC0000FE00007E0001FC0000FE00007E
0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E
0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E
0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E
0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E
0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E
0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E
0003FC0001FE0000FF00FFFFF07FFFF83FFFFCFFFFF07FFFF83FFFFCFFFFF07FFFF83FFF
FC46287EA74B>I<01F803FC0000FFF80FFF8000FFF83C0FC000FFF8F003E00007F9C003
F00003FB8001F80001FB0001F80001FF0000FC0001FE0000FC0001FE0000FC0001FC0000
FC0001FC0000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000
FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000
FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000
FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000
FC0001F80000FC0003FC0001FE00FFFFF07FFFF8FFFFF07FFFF8FFFFF07FFFF82D287EA7
32>I<01F807F80000FFF81FFF0000FFF8780FC000FFF9E003F00003FB8001F80001FF00
00FC0001FE00007E0001FC00007F0001FC00003F8001F800001F8001F800001FC001F800
001FC001F800000FE001F800000FE001F800000FE001F800000FF001F8000007F001F800
0007F001F8000007F001F8000007F001F8000007F001F8000007F001F8000007F001F800
0007F001F8000007F001F800000FE001F800000FE001F800000FE001F800000FE001F800
001FC001F800001FC001F800003F8001FC00003F0001FE00007F0001FE0000FE0001FF00
01FC0001FB8003F80001F9C007E00001F8F81F800001F83FFE000001F807F0000001F800
00000001F80000000001F80000000001F80000000001F80000000001F80000000001F800
00000001F80000000001F80000000001F80000000001F80000000001F80000000001F800
00000003FC00000000FFFFF0000000FFFFF0000000FFFFF00000002C3A7EA732>112
D<03F00FC0FFF03FF0FFF0F0F8FFF1C3FC07F183FC03F383FC01F703FC01F603FC01F601
F801FE006001FC000001FC000001FC000001FC000001F8000001F8000001F8000001F800
0001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F800
0001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F800
0003FC0000FFFFF800FFFFF800FFFFF8001E287EA723>114 D<007FC06003FFF8E007C0
3DE01E000FE03C0003E0780001E0780001E0700000E0F00000E0F0000060F0000060F800
0060F8000060FC000060FF0000007FC000007FFE00003FFFE0001FFFFC0007FFFE0003FF
FF80007FFFC00007FFE000003FE000000FF0C00003F0C00001F8C00000F8E00000F8E000
0078E0000078F0000078F0000078F8000078F80000F0FC0000F0FC0001E0FE0001C0F780
0780F1E01F00E0FFFC00C01FE0001D2A7DA824>I<001800000018000000180000001800
00001800000018000000380000003800000038000000380000007800000078000000F800
0000F8000001F8000003F8000007F800001FFFFFC0FFFFFFC0FFFFFFC001F8000001F800
0001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F800
0001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F800
0001F8006001F8006001F8006001F8006001F8006001F8006001F8006001F8006001F800
6000FC00E000FC00C000FC00C0007E01C0003F0380001F87000007FE000001F8001B397E
B723>I<FFFFC007FFE0FFFFC007FFE0FFFFC007FFE007FC0001FF0003F800007C0003F8
0000780001F80000700001FC0000700000FC0000600000FC00006000007E0000C000007E
0000C000007F0001C000003F00018000003F00018000001F80030000001F80030000001F
C0070000000FC0060000000FC00600000007E00C00000007E00C00000007F01C00000003
F01800000003F01800000001F83000000001F83000000001FC7000000000FC6000000000
FC60000000007EC0000000007EC0000000007FC0000000003F80000000003F8000000000
1F00000000001F00000000001F00000000000E00000000000E0000002B287EA630>118
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc ectt0800 6 9
/Fc 9 58 df<00E00000E00001E00003E00003E0000FE0007FE000FFE000FFE00079E000
01E00001E00001E00001E00001E00001E00001E00001E00001E00001E00001E00001E000
01E00001E00001E00001E00001E0007FFF807FFF807FFF807FFF80111F7C9E1A>49
D<03FC000FFF001FFF803FFFC07E0FE07803F0F800F0F800F8F80078F800787000780000
780000780000F80000F00001F00003E00007C0000F80001F00007E0000FC0001F80007E0
000FC0001F80783E00787FFFF8FFFFF8FFFFF87FFFF8151F7E9E1A>I<03FC000FFF001F
FFC03FFFE07E07E07C01F07C00F07C00F03800F00001F00001F00003E0000FC003FFC003
FF8003FF8003FFC00007E00001F00000F00000F8000078700078F80078F800F8F800F8F8
01F07E07E07FFFE03FFFC00FFF0003FC0015207E9E1A>I<001F80003F80003F80007B80
007B8000F38001F38001E38003C38007C3800783800F03801F03801E03803C03803C0380
780380F80380FFFFFEFFFFFEFFFFFEFFFFFE000380000380000380000380000380003FF8
007FFC007FFC003FF8171F7F9E1A>I<3FFFE03FFFE03FFFE03FFFE03C00003C00003C00
003C00003C00003C00003CFE003FFF003FFFC03FFFE03F87E03E01F03C00F03800F80000
78000078000078700078F80078F800F8F800F0F803F07E0FE03FFFC01FFF800FFF0003FC
00151F7E9D1A>I<003F0000FFC003FFE007FFF00FE1F01F81F01F01F03E00E07C00007C
0000781000F9FF00F7FF80FFFFC0FFFFE0FE03F0FC01F0F800F8F800F8F00078F80078F8
00787800787800787C00F87C00F03E01F01F87E01FFFC00FFF8007FF0001FC0015207E9E
1A>I<F00000FFFFF8FFFFF8FFFFF8FFFFF8F001F0F003E00007C0000780000F00001F00
001E00003E00003C00007C0000780000F80000F00000F00001F00001E00001E00001E000
01E00003C00003C00003C00003C00003C00003C00003C00001800015207E9E1A>I<01FC
0007FF000FFF801FFFC03F07E03C01E07C01F07800F07800F07800F07C01F03E03E01F07
C00FFF8007FF000FFF801FFFC03E03E07C01F07800F0F00078F00078F00078F00078F000
787800F07C01F03F07E03FFFE01FFFC007FF0001FC0015207E9E1A>I<01FC0007FF000F
FF801FFFC03F07E07C03E07801F0F801F0F000F0F000F0F000F8F000F8F00078F800F8F8
00F87C01F87E03F83FFFF81FFFF80FFF7807FCF80040F00000F00001F03803E07C03E07C
07C07C1F807FFF003FFE001FFC0007F00015207E9E1A>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd ecbx1200 12 8
/Fd 8 121 df<07C01FF03FF87FFCFFFEFFFEFFFEFFFEFFFEFFFEFFFE7FFC3FF81FF007
C00000000000000000000000000000000000000000000000000000000007C01FF03FF87F
FCFFFEFFFEFFFEFFFEFFFEFFFEFFFE7FFC3FF81FF007C00F2C78AB1F>58
D<FFFFFFFFFFFFFFF800FFFFFFFFFFFFFFF800FFFFFFFFFFFFFFF800FFFFFFFFFFFFFFF8
00FFFFFFFFFFFFFFFC00001FFF000001FFFC00001FFF0000003FFC00001FFF0000000FFC
00001FFF00000003FC00001FFF00000001FC00001FFF00000000FC00001FFF00000000FC
00001FFF000000007E00001FFF000000003E00001FFF000000003E00001FFF000000003E
00001FFF000000001E00001FFF000000001E00001FFF000078001E00001FFF000078001E
00001FFF000078000F00001FFF000078000F00001FFF000078000F00001FFF000078000F
00001FFF0000F8000000001FFF0000F8000000001FFF0000F8000000001FFF0001F80000
00001FFF0003F8000000001FFF001FF8000000001FFFFFFFF8000000001FFFFFFFF80000
00001FFFFFFFF8000000001FFFFFFFF8000000001FFFFFFFF8000000001FFF001FF80000
00001FFF0003F8000000001FFF0001F8000000001FFF0000F8000000001FFF0000F80000
00001FFF0000F80001E0001FFF0000780001E0001FFF0000780001E0001FFF0000780003
C0001FFF0000780003C0001FFF0000780003C0001FFF0000780003C0001FFF0000000003
C0001FFF0000000007C0001FFF0000000007C0001FFF000000000780001FFF0000000007
80001FFF000000000F80001FFF000000000F80001FFF000000001F80001FFF000000001F
80001FFF000000003F80001FFF000000007F00001FFF00000000FF00001FFF00000001FF
00001FFF00000007FF00001FFF0000001FFF00001FFF000001FFFF00FFFFFFFFFFFFFFFF
00FFFFFFFFFFFFFFFE00FFFFFFFFFFFFFFFE00FFFFFFFFFFFFFFFE00FFFFFFFFFFFFFFFE
0043447DC34A>69 D<00003FF800000003FFFF8000000FFFFFE000003FFFFFF000007FF8
3FF80000FFC007FC0001FF8003FE0003FF0001FF0007FE0000FF800FFC0000FF801FFC00
007FC01FF800007FC03FF800003FE03FF800003FE07FF800003FE07FF000003FE07FF000
003FF07FF000001FF0FFF000001FF0FFF000001FF0FFFFFFFFFFF0FFFFFFFFFFF0FFFFFF
FFFFF0FFFFFFFFFFF0FFF000000000FFF000000000FFF000000000FFF000000000FFF000
0000007FF0000000007FF0000000007FF8000000007FF8000000003FF8000000003FF800
0000F01FFC000000F01FFC000001F00FFE000001E007FF000003E003FF800007C001FFC0
000F8000FFF0003F00007FFE01FE00001FFFFFFC000007FFFFF0000001FFFFC00000001F
FE00002C2F7DAD33>101 D<007FC000FFFFC000FFFFC000FFFFC000FFFFC000FFFFC000
03FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC000
01FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC000
01FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC000
01FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC000
01FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC000
01FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC000
01FFC00001FFC00001FFC00001FFC000FFFFFF80FFFFFF80FFFFFF80FFFFFF80FFFFFF80
19457CC420>108 D<007F8007FE00000FFC0000FFFF803FFFC0007FFF8000FFFF80FFFF
F001FFFFE000FFFF81FFFFF803FFFFF000FFFF87F01FFC0FE03FF800FFFF8FC00FFE1F80
1FFC0003FF9F000FFF3E001FFE0001FF9E0007FF3C000FFE0001FFBC0007FF78000FFE00
01FFF80003FFF00007FF0001FFF80003FFF00007FF0001FFF00003FFE00007FF0001FFE0
0003FFC00007FF0001FFE00003FFC00007FF0001FFE00003FFC00007FF0001FFC00003FF
800007FF0001FFC00003FF800007FF0001FFC00003FF800007FF0001FFC00003FF800007
FF0001FFC00003FF800007FF0001FFC00003FF800007FF0001FFC00003FF800007FF0001
FFC00003FF800007FF0001FFC00003FF800007FF0001FFC00003FF800007FF0001FFC000
03FF800007FF0001FFC00003FF800007FF0001FFC00003FF800007FF0001FFC00003FF80
0007FF0001FFC00003FF800007FF0001FFC00003FF800007FF0001FFC00003FF800007FF
0001FFC00003FF800007FF0001FFC00003FF800007FF0001FFC00003FF800007FF0001FF
C00003FF800007FF0001FFC00003FF800007FF0001FFC00003FF800007FF0001FFC00003
FF800007FF0001FFC00003FF800007FF00FFFFFF81FFFFFF03FFFFFEFFFFFF81FFFFFF03
FFFFFEFFFFFF81FFFFFF03FFFFFEFFFFFF81FFFFFF03FFFFFEFFFFFF81FFFFFF03FFFFFE
572D7CAC5E>I<007FC00FF80000FFFFC0FFFF8000FFFFC3FFFFE000FFFFCFFFFFF800FF
FFDFC03FFC00FFFFFF001FFE0003FFFC0007FF0001FFF80003FF8001FFF00003FFC001FF
E00001FFE001FFC00001FFE001FFC00000FFF001FFC00000FFF001FFC000007FF801FFC0
00007FF801FFC000007FF801FFC000007FF801FFC000003FFC01FFC000003FFC01FFC000
003FFC01FFC000003FFC01FFC000003FFC01FFC000003FFC01FFC000003FFC01FFC00000
3FFC01FFC000003FFC01FFC000003FFC01FFC000003FFC01FFC000003FFC01FFC000007F
F801FFC000007FF801FFC000007FF801FFC000007FF001FFC00000FFF001FFC00000FFF0
01FFC00001FFE001FFE00001FFC001FFF00003FFC001FFF80007FF8001FFFC000FFF0001
FFFE001FFE0001FFDFC07FFC0001FFCFFFFFF00001FFC3FFFFC00001FFC0FFFF000001FF
C01FF0000001FFC00000000001FFC00000000001FFC00000000001FFC00000000001FFC0
0000000001FFC00000000001FFC00000000001FFC00000000001FFC00000000001FFC000
00000001FFC00000000001FFC00000000001FFC000000000FFFFFF80000000FFFFFF8000
0000FFFFFF80000000FFFFFF80000000FFFFFF8000000036407DAC3E>112
D<001FFC038000FFFF878003FFFFFF800FFFFFFF801FF003FF803FC000FF803F80003F80
7F00001F807E00001F80FE00000F80FE00000F80FE00000780FF00000780FF00000780FF
80000780FFE0000000FFFE0000007FFFF000007FFFFF00003FFFFFC0003FFFFFF0001FFF
FFFC000FFFFFFE0003FFFFFF0001FFFFFF80007FFFFF80000FFFFFC000003FFFC0000003
FFE0000000FFE0F000003FE0F000003FE0F800001FE0F800000FE0F800000FE0FC00000F
E0FC00000FE0FE00000FC0FF00001FC0FF00001FC0FF80003F80FFE0007F00FFF803FE00
FFFFFFFC00FCFFFFF800F03FFFE000E007FE0000232F7CAD2C>115
D<FFFFFE003FFFF0FFFFFE003FFFF0FFFFFE003FFFF0FFFFFE003FFFF0FFFFFE003FFFF0
00FFF00003E000007FF80007C000003FFC000F8000001FFC001F0000001FFE003F000000
0FFF007E00000007FF807C00000003FFC0F800000001FFC1F000000001FFE3E000000000
FFF7C0000000007FFF80000000003FFF80000000001FFF00000000001FFE00000000000F
FF000000000007FF800000000003FFC00000000003FFC00000000007FFE0000000000FFF
F0000000000FFFF8000000001F3FFC000000003E1FFC000000007C1FFE00000000F80FFF
00000001F007FF80000003F003FFC0000007E001FFC0000007C001FFE000000F8000FFF0
00001F00007FF800003E00003FFC00007E00001FFC00FFFFE000FFFFFCFFFFE000FFFFFC
FFFFE000FFFFFCFFFFE000FFFFFCFFFFE000FFFFFC362C7EAB3B>120
D E
%EndDVIPSBitmapFont
/Fe 201[35 2[35 1[35 35 48[{}4 66.4176 /CMR8 rf /Ff 194[76
5[49 1[49 2[49 6[76 43[{}5 99.6264 /CMR12 rf
%DVIPSBitmapFont: Fg ectt1200 12 24
/Fg 24 119 df<080001003E0007C07F000FE07F000FE0FF000FF0FF000FF07F000FE07F
000FE07F000FE07F000FE07F000FE07F000FE07F000FE07F000FE07F000FE07F000FE07F
000FE07F000FE07F000FE07F000FE07F000FE07F000FE07F000FE07F000FE07F000FE07F
000FE07E0007E03E0007C03E0007C0080001001C1E75BD33>34 D<00000F0000003F8000
007F800000FF800001FF000003FE000007F800000FF000001FE000003FC000007F800000
FF000000FE000001FE000001FC000003F8000007F8000007F000000FF000000FE000001F
E000001FC000001FC000003FC000003F8000003F8000007F8000007F0000007F0000007F
0000007F000000FF000000FE000000FE000000FE000000FE000000FE000000FE000000FE
000000FE000000FE000000FE000000FE000000FE000000FE000000FF0000007F0000007F
0000007F0000007F0000007F8000003F8000003F8000003FC000001FC000001FC000001F
E000000FE000000FF0000007F0000007F8000003F8000001FC000001FE000000FE000000
FF0000007F8000003FC000001FE000000FF0000007F8000003FE000001FF000000FF8000
007F8000003F8000000F00194D6FC433>40 D<78000000FE000000FF000000FF8000007F
C000003FE000000FF0000007F8000003FC000001FE000000FF0000007F8000003F800000
3FC000001FC000000FE000000FF0000007F0000007F8000003F8000003FC000001FC0000
01FC000001FE000000FE000000FE000000FF0000007F0000007F0000007F0000007F0000
007F8000003F8000003F8000003F8000003F8000003F8000003F8000003F8000003F8000
003F8000003F8000003F8000003F8000003F8000007F8000007F0000007F0000007F0000
007F000000FF000000FE000000FE000001FE000001FC000001FC000003FC000003F80000
07F8000007F000000FF000000FE000001FC000003FC000003F8000007F800000FF000001
FE000003FC000007F800000FF000003FE000007FC00000FF800000FF000000FE00000078
000000194D78C433>I<07C00FF01FF83FF83FFC3FFC3FFE3FFE1FFE0FFE07FE007E00FE
00FE00FC01FC03F807F80FF07FE0FFE0FFC0FF00FE0078000F196E8A33>44
D<0000FF00000003FFC000000FFFF000001FFFF800003FFFFC00007FFFFE0000FF81FF00
01FE007F8003FC003FC003F8001FC007F0000FE007F0000FE00FE00007F00FE00007F01F
C00003F81FC00003F83F800001FC3F800001FC3F800001FC7F000000FE7F000000FE7F00
0000FE7F000000FE7E0000007EFE0000007FFE0000007FFE0000007FFE0000007FFE0000
007FFE0000007FFE0000007FFE0000007FFE0000007FFE0000007FFE0000007FFE000000
7FFE0000007FFE0000007FFF000000FF7F000000FE7F000000FE7F000000FE7F000000FE
7F800001FE3F800001FC3F800001FC3FC00003FC1FC00003F81FC00003F80FE00007F00F
E00007F007F0000FE007F8001FE003FC003FC003FC003FC001FF00FF8000FF81FF00007F
FFFE00003FFFFC00001FFFF800000FFFF0000003FFC0000000FF0000283F7BBD33>48
D<0001E000000003F000000003F000000007F000000007F00000000FF00000000FF00000
001FF00000003FF00000007FF0000000FFF0000003FFF000003FFFF000007FFFF00000FF
F7F00000FFE7F00000FF87F000007E07F000000007F000000007F000000007F000000007
F000000007F000000007F000000007F000000007F000000007F000000007F000000007F0
00000007F000000007F000000007F000000007F000000007F000000007F000000007F000
000007F000000007F000000007F000000007F000000007F000000007F000000007F00000
0007F000000007F000000007F000000007F000000007F000000007F000000007F0000000
07F000000007F000000007F000000007F000000007F000000007F000003FFFFFFE007FFF
FFFF007FFFFFFF807FFFFFFF807FFFFFFF003FFFFFFE00213E76BD33>I<000000000E00
0000003F00000000FF00000001FF00000007FF0000000FFE0000003FF8000000FFE00000
01FFC0000007FF0000000FFE0000003FF80000007FE0000001FFC0000007FF0000000FFE
0000003FF80000007FF0000001FFC0000007FF0000000FFE0000003FF80000007FF00000
00FFC0000000FF00000000FFC00000007FF00000003FF80000000FFE00000007FF000000
01FFC00000007FF00000003FF80000000FFE00000007FF00000001FFC00000007FE00000
003FF80000000FFE00000007FF00000001FFC0000000FFE00000003FF80000000FFE0000
0007FF00000001FF00000000FF000000003F000000000E28317BB633>60
D<7FFFFFC0FFFFFFE0FFFFFFE0FFFFFFE0FFFFFFE0FFFFFFC0FE000000FE000000FE0000
00FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE0000
00FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE0000
00FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE0000
00FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE0000
00FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE0000
00FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE0000
00FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FFFFFF
C0FFFFFFE0FFFFFFE0FFFFFFE0FFFFFFE07FFFFFC01B4D6CC433>91
D<7FFFFFC0FFFFFFE0FFFFFFE0FFFFFFE0FFFFFFE07FFFFFE000000FE000000FE000000F
E000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000F
E000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000F
E000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000F
E000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000F
E000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000F
E000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000F
E000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE07FFFFF
E0FFFFFFE0FFFFFFE0FFFFFFE0FFFFFFE07FFFFFC01B4D7DC433>93
D<7FFFFFFFFE7FFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFE7FFFFFFFFE
28077B7D33>95 D<001FFC00000000FFFF80000003FFFFE0000007FFFFF000000FFFFFFC
00001FFFFFFE00001FF007FF00001FE001FF00001FE000FF80001FE0003F80000FC0003F
C0000780001FC0000000001FE0000000000FE0000000000FE0000000000FE0000000000F
E0000000000FE00000000FFFE0000001FFFFE000001FFFFFE000007FFFFFE00001FFFFFF
E00007FFFF0FE0000FFFC00FE0001FFC000FE0003FF0000FE0007FC0000FE0007F80000F
E000FF00000FE000FE00000FE000FE00000FE000FE00000FE000FE00000FE000FE00000F
E000FF00001FE0007F00001FE0007F80007FE0003FE000FFF0003FF807FFFFF01FFFFFFF
FFF80FFFFFFFFFF807FFFFF3FFF803FFFFC1FFF800FFFF003FF0001FF00000002D2E7BAC
33>97 D<3FFC000000007FFE00000000FFFE00000000FFFE000000007FFE000000003FFE
0000000000FE0000000000FE0000000000FE0000000000FE0000000000FE0000000000FE
0000000000FE0000000000FE0000000000FE0000000000FE0000000000FE0000000000FE
01FE000000FE0FFFC00000FE1FFFF00000FE7FFFF80000FEFFFFFE0000FFFFFFFF0000FF
FE07FF0000FFF800FF8000FFE0007FC000FFC0003FE000FF80001FE000FF80000FF000FF
00000FF000FF000007F000FE000007F800FE000003F800FE000003F800FE000003FC00FE
000001FC00FE000001FC00FE000001FC00FE000001FC00FE000001FC00FE000001FC00FE
000001FC00FE000001FC00FE000001FC00FE000003FC00FE000003F800FE000003F800FF
000007F800FF000007F000FF80000FF000FF80000FE000FFC0001FE000FFC0003FC000FF
E0007FC000FFF801FF8000FFFE07FF0000FFFFFFFE0000FEFFFFFC0000FE7FFFF800007E
3FFFE000003C0FFF8000000003FE00002E3E7FBC33>I<0000FFF0000007FFFE00001FFF
FF80003FFFFFC0007FFFFFE001FFFFFFF003FFC01FF003FE000FF007FC000FF00FF8000F
F01FF00007E01FE00003C03FC00000003F800000003F800000007F800000007F00000000
7F00000000FF00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE
00000000FE00000000FE00000000FE00000000FF000000007F000000007F000000007F80
0000003F800001F03FC00003F81FE00003F81FF00007F80FF80007F007FC000FF007FF00
1FE003FFE07FE001FFFFFFC000FFFFFF80003FFFFF00001FFFFC000007FFF8000000FFC0
00252E79AC33>I<0000007FF800000000FFFC00000001FFFC00000001FFFC00000000FF
FC000000007FFC0000000001FC0000000001FC0000000001FC0000000001FC0000000001
FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001
FC000001FF01FC000007FFC1FC00001FFFF1FC00007FFFF9FC0000FFFFFFFC0001FFFFFF
FC0003FF81FFFC0007FE003FFC000FF8001FFC000FF0000FFC001FE00007FC001FC00003
FC003FC00003FC003F800001FC007F800001FC007F000001FC007F000001FC00FF000001
FC00FE000001FC00FE000001FC00FE000001FC00FE000001FC00FE000001FC00FE000001
FC00FE000001FC00FE000001FC00FE000001FC00FF000001FC007F000001FC007F000003
FC007F800003FC003F800003FC003FC00007FC003FC00007FC001FE0000FFC001FF0001F
FC000FF8003FFC0007FC007FFC0003FF81FFFFF003FFFFFFFFF800FFFFFDFFFC007FFFF9
FFFC003FFFE1FFF8000FFF80FFF00001FE0000002E3E7DBC33>I<0000FF80000007FFF0
00001FFFFC00003FFFFE0000FFFFFF0001FFFFFF8003FF80FFC007FE003FE007F8000FF0
0FF00007F01FE00007F81FC00003F83FC00003FC3F800001FC7F800001FC7F000001FC7F
000001FE7F000000FEFF000000FEFE000000FEFFFFFFFFFEFFFFFFFFFEFFFFFFFFFEFFFF
FFFFFEFFFFFFFFFEFFFFFFFFFCFE00000000FF000000007F000000007F000000007F0000
00003F800000003F8000007C1FC00000FE1FE00000FE0FF00000FE0FF80001FE07FC0003
FC03FF000FFC01FFC03FF800FFFFFFF0007FFFFFE0003FFFFFC0000FFFFF000003FFFC00
00007FE000272E7BAC33>I<0000E000000003F800000003F800000007FC00000007FC00
000007FC00000003F800000003F800000000E00000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000003F
FFF800007FFFFC00007FFFFC00007FFFFC00007FFFFC00003FFFFC00000001FC00000001
FC00000001FC00000001FC00000001FC00000001FC00000001FC00000001FC00000001FC
00000001FC00000001FC00000001FC00000001FC00000001FC00000001FC00000001FC00
000001FC00000001FC00000001FC00000001FC00000001FC00000001FC00000001FC0000
0001FC00000001FC00000001FC00000001FC00000001FC00000001FC00000001FC000000
01FC00007FFFFFFFC0FFFFFFFFE0FFFFFFFFF0FFFFFFFFF0FFFFFFFFE07FFFFFFFC0243E
78BD33>105 D<00000070000001FC000001FC000003FE000003FE000003FE000001FC00
0001FC000000700000000000000000000000000000000000000000000000000000000000
0000000000000000000000003FFFFC007FFFFE00FFFFFE00FFFFFE007FFFFE003FFFFE00
0000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE00
0000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE00
0000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE00
0000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE00
0000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE00
0001FE000001FC000001FC180001FC7E0003F87E0007F8FF0007F0FF000FF0FF803FE0FF
FFFFC07FFFFF803FFFFF001FFFFE000FFFF80001FFE0001F557BBD33>I<3FFFFC00007F
FFFE0000FFFFFE0000FFFFFE00007FFFFE00003FFFFE00000000FE00000000FE00000000
FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE
00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00
000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE0000
0000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE000000
00FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000
FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE
00000000FE00000000FE00000000FE00003FFFFFFFF87FFFFFFFFCFFFFFFFFFEFFFFFFFF
FE7FFFFFFFFC3FFFFFFFF8273D7ABC33>108 D<0000FC007E00007FC3FF01FF8000FFEF
FF87FFC000FFFFFFCFFFE000FFFFFFDFFFE000FFFFFFFFFFF0007FFF0FFF87F00007FE07
FF03F00007FC07FE03F80007F803FC01F80007F803FC01F80007F003F801F80007F003F8
01F80007F003F801F80007F003F801F80007E003F001F80007E003F001F80007E003F001
F80007E003F001F80007E003F001F80007E003F001F80007E003F001F80007E003F001F8
0007E003F001F80007E003F001F80007E003F001F80007E003F001F80007E003F001F800
07E003F001F80007E003F001F80007E003F001F80007E003F001F80007E003F001F80007
E003F001F80007E003F001F80007E003F001F80007E003F001F80007E003F001F8007FFE
0FFF07FF80FFFF1FFF8FFFC0FFFF1FFF8FFFC0FFFF1FFF8FFFC0FFFF1FFF8FFFC07FFE0F
FF07FF80322C80AB33>I<000001FF00003FFC07FFC0007FFE1FFFF000FFFE7FFFF800FF
FEFFFFF8007FFFFFFFFC003FFFFF07FE0000FFF801FE0000FFF000FE0000FFE000FF0000
FFC0007F0000FF80007F0000FF80007F0000FF00007F0000FF00007F0000FF00007F0000
FE00007F0000FE00007F0000FE00007F0000FE00007F0000FE00007F0000FE00007F0000
FE00007F0000FE00007F0000FE00007F0000FE00007F0000FE00007F0000FE00007F0000
FE00007F0000FE00007F0000FE00007F0000FE00007F0000FE00007F0000FE00007F0000
FE00007F0000FE00007F0000FE00007F0000FE00007F003FFFF80FFFFC7FFFFC1FFFFEFF
FFFE3FFFFFFFFFFE3FFFFF7FFFFC1FFFFE3FFFF80FFFFC302C7FAB33>I<000001FE0000
3FFC0FFFC0007FFE1FFFF000FFFE7FFFF800FFFEFFFFFE007FFFFFFFFF003FFFFE07FF00
00FFF800FF8000FFE0007FC000FFC0003FE000FF80001FE000FF80000FF000FF00000FF0
00FF000007F000FE000007F800FE000003F800FE000003F800FE000003FC00FE000001FC
00FE000001FC00FE000001FC00FE000001FC00FE000001FC00FE000001FC00FE000001FC
00FE000001FC00FE000001FC00FE000003FC00FE000003F800FE000003F800FF000007F8
00FF000007F000FF80000FF000FF80000FE000FFC0001FE000FFC0003FC000FFE0007FC0
00FFF801FF8000FFFE07FF0000FFFFFFFE0000FEFFFFFC0000FE7FFFF80000FE3FFFE000
00FE0FFF800000FE03FE000000FE0000000000FE0000000000FE0000000000FE00000000
00FE0000000000FE0000000000FE0000000000FE0000000000FE0000000000FE00000000
00FE0000000000FE0000000000FE0000000000FE0000000000FE000000003FFFF8000000
7FFFFC000000FFFFFE000000FFFFFE0000007FFFFC0000003FFFF80000002E427FAB33>
112 D<00000003FE007FFF801FFF80FFFFC07FFFE0FFFFC1FFFFE0FFFFC3FFFFF0FFFFC7
FFFFF07FFFCFFE0FF0001FDFF00FF0001FFFC007E0001FFF8003C0001FFF000000001FFE
000000001FFC000000001FF8000000001FF8000000001FF0000000001FF0000000001FE0
000000001FE0000000001FE0000000001FC0000000001FC0000000001FC0000000001FC0
000000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC0
000000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC0
000000001FC0000000001FC00000007FFFFFFE0000FFFFFFFF0000FFFFFFFF0000FFFFFF
FF0000FFFFFFFF00007FFFFFFE00002C2C7DAB33>114 D<001FFE0F0000FFFF8F8003FF
FFFF800FFFFFFF801FFFFFFF803FFFFFFF803FF007FF807F8001FF807F0000FF80FE0000
7F80FC00007F80FC00003F80FC00003F80FC00003F80FE00003F807F00001F007FC00000
003FF80000003FFFC000001FFFFF00000FFFFFE00003FFFFF80000FFFFFC00001FFFFF00
0000FFFF80000007FFC00000007FC00000001FE07C00000FE0FE000007F0FE000003F0FE
000003F0FF000003F0FF000003F0FF800003F0FF800007F0FFC00007E0FFE0000FE0FFF0
003FC0FFFE01FFC0FFFFFFFF80FFFFFFFF00FDFFFFFE00FCFFFFF800F83FFFE0007807FF
0000242E79AC33>I<3FFFC00FFFF07FFFE01FFFF8FFFFF03FFFFCFFFFF03FFFFC7FFFE0
1FFFF83FFFC00FFFF001F800007E0001FC0000FE0000FC0000FC0000FC0000FC0000FE00
01FC00007E0001F800007E0001F800007F0003F800003F0003F000003F0003F000003F80
07F000001F8007E000001F8007E000001FC00FE000000FC00FC000000FC00FC000000FC0
0FC0000007E01F80000007E01F80000007E01F80000007F03F80000003F03F00000003F0
3F00000003F87F00000001F87E00000001F87E00000001FCFE00000000FCFC00000000FC
FC00000000FFFC000000007FF8000000007FF8000000007FF8000000003FF0000000003F
F0000000001FE0000000000FC000002E2B7EAA33>118 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fh ecti1200 12 22
/Fh 22 234 df<0000003F8000000001FFE000000007C0F80000001F007C0000003C003E
00000078001E000000F0001F000001E0000F000003E0000F800007C0000F80000780000F
80000F80000F80001F00000FC0001F00000FC0003F00000FC0007E00000FC0007E00000F
C000FE00000FC000FC00000FC000FC00001FC001FC00001FC001F800001F8003F800001F
8003F800001F8003F000003F8007F000003F8007F000003F8007F000003F000FE000007F
000FE000007F000FE000007F000FE000007F001FC00000FE001FC00000FE001FC00000FE
001FC00000FE003F800001FC003F800001FC003F800001FC003F800001FC007F000003F8
007F000003F8007F000003F8007F000003F0007F000007F0007E000007F0007E000007E0
00FE00000FE000FE00000FC000FE00000FC000FC00001FC000FC00001F8000FC00001F80
00FC00003F0000FC00003E0000FC00007E00007C00007C00007C0000FC00007C0000F800
007C0001F000003C0003E000003E0003C000003E00078000001F001F0000000F803E0000
0007C0F800000001FFE0000000007F000000002A4475C132>48 D<00000000C000000001
C000000001C000000003C000000007C00000000F800000001F800000003F800000007F80
000001FF00000003FF0000000FFF0000007FFF000007FCFE00000FF0FE00000700FE0000
0001FE00000001FC00000001FC00000001FC00000003FC00000003F800000003F8000000
03F800000007F800000007F000000007F000000007F00000000FF00000000FE00000000F
E00000000FE00000001FE00000001FC00000001FC00000001FC00000003FC00000003F80
0000003F800000003F800000007F800000007F000000007F000000007F00000000FF0000
0000FE00000000FE00000000FE00000001FE00000001FC00000001FC00000001FC000000
03FC00000003F800000003F800000003F800000007F800000007F000000007F00000000F
F00000000FF00000001FF00000003FF00000FFFFFFFC00FFFFFFFC00FFFFFFF800224276
C132>I<000000000FF8000300000000FFFF000700000007FFFFC00F0000001FF803E01F
0000007FC000F81E000000FF00007C3E000003FC00003C7E00000FF000001EFE00001FE0
00000FFC00003FC0000007FC00007F00000007FC0000FE00000003FC0001FC00000003F8
0003FC00000003F80007F800000001F8000FF000000001F8001FE000000001F0003FC000
000001F0007FC000000001F0007F8000000001F000FF8000000001E001FF0000000001E0
01FF0000000001E003FE0000000001E003FE0000000001C007FC0000000001C007FC0000
000001C00FF80000000001C00FF80000000000001FF80000000000001FF0000000000000
1FF00000000000003FF00000000000003FE00000000000003FE00000000000003FE00000
000000007FE00000000000007FC00000000000007FC00000000000007FC0000000000000
7FC0000000000000FF80000000000000FF80000000000000FF80000000000000FF800000
00000000FF80000000003800FF80000000003800FF80000000007800FF80000000007000
FF80000000007000FF8000000000F0007F8000000000E0007F8000000001E0007F800000
0001C0007F8000000003C0003F800000000380003F800000000780003FC00000000F0000
1FC00000000E00001FC00000001E00000FE00000003C00000FF000000078000007F00000
00F0000003F8000001E0000003FC000007C0000001FE00000F800000007F00003E000000
003FC000FC000000001FF807F00000000007FFFFC00000000001FFFF0000000000001FF0
00000000404872C546>67 D<00000003FE000C0000000FFF801C0000007FFFE03C000000
FE03F83C000003F0007C7C000007E0003EF800000FC0001FF800001F80000FF800003F00
000FF800007E000007F00000FC000007F00000FC000003F00001F8000003F00001F80000
03E00003F0000003E00003F0000003E00007F0000003E00007E0000003C00007E0000003
C00007E0000003C0000FE0000003C0000FE000000380000FE000000380000FF000000380
000FF000000000000FF000000000000FF800000000000FFC000000000007FE0000000000
07FFE00000000007FFFC0000000003FFFF8000000001FFFFF000000001FFFFFC00000000
FFFFFF000000003FFFFF800000000FFFFFC000000003FFFFC0000000003FFFE000000000
07FFE00000000000FFF000000000003FF000000000001FF000000000000FF00000000000
0FF0000000000007F0000000000007F0000000000007F0000700000007F0000700000003
F0000700000007F0000700000007F0000F00000007E0000F00000007E0000E00000007E0
000E0000000FE0001E0000000FC0001E0000000FC0001F0000001F80001F0000001F8000
3F0000003F00003F8000003E00003F8000007E00003FC00000FC00007FC00001F800007F
E00003F000007CF00007E00000787C001F800000F03F807F000000F01FFFFC000000E007
FFF0000000C0007F80000000364879C537>83 D<00001F80000000007FE000000001F070
70000007C039F800000F801DF800001F001FF800003E000FF000007E000FF00000FC000F
F00001F80007F00001F80007E00003F00007E00007F00007E00007E0000FE0000FE0000F
C0000FE0000FC0001FC0000FC0001FC0001FC0003FC0001F80003F80001F80003F80001F
80003F80003F80007F80003F00007F00003F00007F00003F00007F00007F00007F00007E
0000FE00007E0000FE00007E0000FE0000FE0380FE0000FC0780FE0000FC0700FE0000FC
07007E0001FC07007E0001FC0F007E0003F80E007E0007F80E003E000FF81E003E000FF8
1C001F001CF81C001F0038F838000F80F078780007C3E07C700001FF801FE000007E0007
8000292D76AB32>97 D<000FE0000007FFE0000007FFE0000007FFE00000001FC0000000
0FC00000001FC00000001FC00000001F800000001F800000001F800000003F800000003F
000000003F000000003F000000007F000000007E000000007E000000007E00000000FE00
000000FC00000000FC00000000FC00000001FC00000001F800000001F81F800001F87FE0
0003F9E0F80003F3C07C0003F7003E0003FE003E0007FC001F0007F8001F0007F8001F00
07F0001F800FE0001F800FE0001F800FC0001F800FC0001F801FC0001F801F80001F801F
80001F801F80003F803F80003F803F00003F803F00003F803F00007F807F00007F007E00
007F007E00007F007E0000FF007E0000FE00FC0000FE00FC0000FE00FC0001FC00FC0001
FC00FC0003F800FC0003F8007C0003F0007C0007E0007C000FE0007C000FC0007C001F80
003C003F00003E007E00001E00FC00000F01F800000783E0000003FF80000000FE000000
214676C42D>I<00000FE00000007FF8000001F81E000007E00F00000F800780001F0003
80007E0003C000FC001FC001FC003FC001F8003FC003F0007F8007F0007F800FE0007F80
0FE0003E001FC00000001FC00000003F800000003F800000007F800000007F000000007F
000000007F00000000FF00000000FE00000000FE00000000FE00000000FE00000000FC00
000000FC00000000FC00000000FC00000000FC00000000FC00000180FC000003C0FC0000
0780FC000007807C00000F007E00001E003E00007C003E0000F0001F0003E0000F800F80
0007C07E000001FFF80000007FC00000222D75AB2D>I<0000000007F000000003FFF000
000003FFF000000003FFF0000000000FE00000000007E0000000000FE0000000000FE000
0000000FC0000000000FC0000000001FC0000000001FC0000000001F80000000001F8000
0000003F80000000003F80000000003F00000000003F00000000007F00000000007F0000
0000007E00000000007E0000000000FE0000000000FE0000000000FC0000001F80FC0000
007FE1FC000001F071FC000007C039F800000F801DF800001F001FF800003E000FF80000
7E000FF00000FC000FF00001F80007F00001F80007F00003F00007E00007F00007E00007
E0000FE0000FE0000FE0000FE0000FC0001FC0000FC0001FC0001FC0003FC0001FC0003F
80001F80003F80001F80003F80003F80007F80003F80007F00003F00007F00003F00007F
00007F00007F00007F0000FE00007E0000FE00007E0000FE0000FE0380FE0000FE0780FE
0000FC0700FE0000FC07007E0001FC07007E0001FC0F007E0003F80E007E0007F80E003E
000FF81E003E000FF81C001F001CF81C001F0038F838000F80F078780007C3E07C700001
FF801FE000007E000780002C4676C432>I<00000FE00000007FF8000001F83E000007C0
0F00001F800780003F000780007E0007C000FC0003C001F80003C003F00007C007F00007
8007E00007800FE0000F801FC0000F001FC0001F003F80003E003F8000FC003F8007F000
7F80FFC0007FFFFE00007FFFC000007F00000000FF00000000FE00000000FE00000000FE
00000000FE00000000FE00000000FC00000000FC00000000FC00000000FC00000000FC00
000180FC000003C07C000007807C000007807E00000F003E00001E003E00007C001F0000
F0000F0003E00007800F800003C07E000001FFF80000003FC00000222D75AB2D>I<0000
3C00007E0000FE0001FE0001FE0001FE0000FC0000700000000000000000000000000000
00000000000000000000000000000000000000000000000000000000007C0001FF0003C7
800703C00F03E00E03E01C03E01C07E03807E03807E07807E0700FE0700FC0701FC0F01F
80E01F80003F80003F00003F00007F00007E00007E0000FE0000FC0001FC0001F80001F8
0003F80003F00003F01E07F01C07E01C07E01C0FE03C0FC0380FC0380FC0780F80700F80
F00F80E00F81C00783C007C78003FE0000F800174378C11E>105
D<0003F801FFF801FFF801FFF80007F00003F00007F00007F00007E00007E0000FE0000F
E0000FC0000FC0001FC0001FC0001F80001F80003F80003F80003F00003F00007F00007F
00007E00007E0000FE0000FE0000FC0000FC0001FC0001FC0001F80001F80003F80003F8
0003F00003F00007F00007F00007E00007E0000FE0000FE0000FC0000FC0001FC0001FC0
001F80001F80003F80003F80003F00003F00007F01C07F03C07E03807E03807E0780FE07
00FC0700FC0700FC0F00FC0E007C1E007C1C003C3C003E78001FF00007C000154678C419
>108 D<01F0000FE00007F0000003FC007FF8003FFC0000071E01F03E00F81F00000E1F
03C01F01E00F80001E0F87001F83800FC0001C0F8E000F870007C0003C0F9C000F8E0007
C000380FB8000FDC0007E000380FF8000FFC0007E000781FF0000FF80007E000701FE000
0FF00007E000701FE0000FF00007E000701FC0000FE00007E000F01F80001FC0000FE000
E03F80001FC0000FC000E03F00001F80000FC000003F00001F80000FC000003F00003F80
001FC000007F00003F80001F8000007E00003F00001F8000007E00003F00001F8000007E
00007F00003F800000FE00007F00003F000000FC00007E00003F000000FC00007E00007F
000000FC0000FE00007E000001FC0000FE00007E000001F80000FC0000FE000001F80000
FC0000FC000001F80001FC0000FC078003F80001FC0001FC070003F00001F80001F80700
03F00001F80001F8070003F00003F80003F80F0007F00003F80003F00E0007E00003F000
03F00E0007E00003F00003F01E0007E00007F00003E01C000FE00007F00003E03C000FC0
0007E00003E038000FC00007E00003E070000FC0000FE00001E0F0001FC0000FE00001F1
E0001F80000FC00000FF8000070000038000003E0000492D78AB50>I<01F0000FE00003
FC007FF800071E01F03E000E0F03C01F001E0F87001F801C0F8E000F803C0F9C000F8038
0FB8000FC0380FF8000FC0781FF0000FC0701FE0000FC0701FE0000FC0701FC0000FC0F0
1F80001FC0E03F80001F80E03F00001F80003F00001F80003F00003F80007F00003F0000
7E00003F00007E00003F00007E00007F0000FE00007E0000FC00007E0000FC0000FE0000
FC0000FC0001FC0000FC0001F80001FC0001F80001F80001F80001F80F03F80003F80E03
F00003F00E03F00003F00E03F00007F01E07F00007E01C07E00007E01C07E00007E03C07
E00007C0380FE00007C0780FC00007C0700FC00007C0E00FC00003C1E01FC00003E3C01F
800001FF00070000007C00302D78AB37>I<00000FE00000007FFC000001F83E000007E0
0F80000F8007C0001F0007C0007E0003E000FC0003F000FC0003F001F80001F003F00001
F807F00001F80FE00001F80FE00001F81FC00001F81FC00001F83F800001F83F800003F8
7F800003F87F000003F87F000003F87F000007F8FF000007F0FE000007F0FE000007F0FE
00000FF0FE00000FE0FC00000FE0FC00001FC0FC00001FC0FC00001F80FC00003F80FC00
003F00FC00007F00FC00007E00FC0000FC007C0001F8007E0003F0003E0003E0003E0007
C0001F001F80000F803E000007C0FC000001FFF00000003F800000252D75AB32>I<0003
E0007E000007F801FF80000E3C0783E0001C1E0F01F0003C1F1C00F800381F3800F80078
1F70007C00701FE0007C00701FE0007C00703FC0007E00E03F80007E00E03F80007E00E0
3F00007E01E07F00007E01C07F00007E01C07E00007E00007E00007E0000FE0000FE0000
FE0000FE0000FC0000FE0000FC0000FE0001FC0001FE0001FC0001FC0001F80001FC0001
F80001FC0003F80003FC0003F80003F80003F00003F80003F00003F80007F00007F00007
F00007F00007E0000FE00007E0000FE0000FE0000FC0000FE0001F80000FE0003F80000F
E0003F00001FF0007E00001FF000FC00001FF001F800001FB803F000003F9C07E000003F
9E0F8000003F07FE0000003F01F80000007F00000000007F00000000007E00000000007E
0000000000FE0000000000FE0000000000FC0000000000FC0000000001FC0000000001FC
0000000001F80000000001F80000000003F80000000003F80000000007F800000000FFFF
F0000000FFFFF0000000FFFFE00000002F3F7FAB32>I<01F0003F8003FC01FFF0071E03
C0F80E0F0F007C1E0F9E01FC1C0F9C01FC1C0FB803FC380FF003FC380FF003FC381FE003
F8781FE000E0701FC00000701FC00000F01F800000E03F800000E03F000000003F000000
003F000000007F000000007E000000007E000000007E00000000FE00000000FC00000000
FC00000000FC00000001FC00000001F800000001F800000001F800000003F800000003F0
00000003F000000003F000000007F000000007E000000007E000000007E00000000FE000
00000FC00000000FC00000000FC00000001FC00000001F800000000700000000262D78AB
29>114 D<00000FE00000007FF8000001F01E000003C00F000007800780000F00038000
1E0003C0001E0007C0003C001FC0003C001FC0007C003F800078003F80007C003F80007C
000E00007C000000007E000000007F000000007FF00000007FFF0000003FFFC000001FFF
F000000FFFF8000007FFFC000000FFFC0000000FFE00000001FE00000000FE000000007F
000000003F000E00003F003F00001E007F80001E007F80001E007F80003E00FF00003C00
FF00003C00FC000078007000007800700000F000780001E0003C0003C0001E000F80000F
803E000003FFF80000007FC00000222D7AAB28>I<000070000001F8000001F8000001F8
000003F8000003F0000003F0000003F0000007F0000007E0000007E0000007E000000FE0
00000FC000000FC000000FC000001FC000001F8000001F80007FFFFFE0FFFFFFE0FFFFFF
C0003F0000003F0000007F0000007E0000007E0000007E000000FE000000FC000000FC00
0000FC000001FC000001F8000001F8000001F8000003F8000003F0000003F0000003F000
0007F0000007E0000007E0000007E000000FE000000FC000000FC000000FC007801FC007
001F8007001F800F001F800E003F801E003F001C003F003C003F0038003F0070001F00F0
001F01E0000F03C0000F87800007FE000001F800001B3F78BD20>I<007C0000000001FF
0000070003C780001F800703C0001F800F03E0001F800E03E0003F801C03E0003F801C07
E0003F003807E0003F003807E0007F007807E0007F00700FE0007E00700FC0007E00701F
C000FE00F01F8000FE00E01F8000FC00003F8000FC00003F0001FC00003F0001FC00007F
0001F800007E0001F800007E0003F80000FE0003F80000FC0003F00000FC0003F00000FC
0007F00001FC0007F00001F80007E00001F80007E00001F8000FE03803F8000FE07803F0
000FC07003F0000FC07003F0000FC07003F0001FC0F003F0001F80E003F0003F80E001F0
003F81E001F0007F81C001F800EF83C000F801EF8380007C03C78780003E0F07C700001F
FE01FE000003F00078002D2D78AB34>I<007C00003801FF0000FC03C78001FE0703C001
FE0F03E001FE0E03E001FE1C03E000FE1C07E0007E3807E0007E3807E0003E7807E0003E
700FE0001E700FC0001E701FC0001EF01F80001CE01F80001C003F80001C003F00003C00
3F000038007F000038007E000038007E00007800FE00007000FC00007000FC00007000FC
0000F001FC0000E001F80000E001F80001E001F80001C001F80001C003F000038003F000
038003F000070003F000070003F0000E0001F0000E0001F0001C0001F800380000F80078
0000FC00F000007C01E000003F078000000FFF00000003F80000272D78AB2D>I<0001E0
00000003F000000007F000000007F800000007FC00000003FC00000001FE00000000FE00
0000003F000000001F800000000F8000000007C000000003E000000001E000000000E000
00000000000000000000000000000000000000000000000000000000000000000FE00000
007FF8000001F83E000007C00F00001F800780003F000780007E0007C000FC0003C001F8
0003C003F00007C007F000078007E00007800FE0000F801FC0000F001FC0001F003F8000
3E003F8000FC003F8007F0007F80FFC0007FFFFE00007FFFC000007F00000000FF000000
00FE00000000FE00000000FE00000000FE00000000FE00000000FC00000000FC00000000
FC00000000FC00000000FC00000180FC000003C07C000007807C000007807E00000F003E
00001E003E00007C001F0000F0000F0003E00007800F800003C07E000001FFF80000003F
C00000224275C02D>232 D<000000003C000000007E00000000FE00000001FE00000007
FC0000000FF80000001FE00000003FC00000007F00000000FC00000001F800000007E000
00000FC00000000F000000000E0000000000000000000000000000000000000000000000
00000000000000000000000FE00000007FF8000001F83E000007C00F00001F800780003F
000780007E0007C000FC0003C001F80003C003F00007C007F000078007E00007800FE000
0F801FC0000F001FC0001F003F80003E003F8000FC003F8007F0007F80FFC0007FFFFE00
007FFFC000007F00000000FF00000000FE00000000FE00000000FE00000000FE00000000
FE00000000FC00000000FC00000000FC00000000FC00000000FC00000180FC000003C07C
000007807C000007807E00000F003E00001E003E00007C001F0000F0000F0003E0000780
0F800003C07E000001FFF80000003FC00000274275C02D>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fi ecsx1200 12 8
/Fi 8 121 df<00000F800000001FC00000003FC0000000FFC0000003FFC000001FFFC0
003FFFFFC0007FFFFFC000FFFFFFC000FFFFFFC000FFFFFFC0007FF3FFC0002003FFC000
0003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC00000
03FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003
FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FF
C0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0
000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC000
0003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC00000
03FFC0000003FFC0000003FFC0000003FFC0000003FFC0003FFFFFFFF87FFFFFFFFCFFFF
FFFFFCFFFFFFFFFC7FFFFFFFFC3FFFFFFFF8264377C238>49 D<0000FFC00000000FFFFC
0000003FFFFF800000FFFFFFE00001FFFFFFF00003FFFFFFFC0007FFFFFFFE000FFFFFFF
FF001FFFFFFFFF803FFF00FFFFC03FFC003FFFC07FF0000FFFE07FE00007FFE0FFC00003
FFF0FFC00001FFF0FF800001FFF07F800000FFF83F000000FFF81F000000FFF81F000000
FFF80E0000007FF8060000007FF8000000007FF800000000FFF800000000FFF800000000
FFF800000000FFF000000001FFF000000001FFF000000003FFE000000003FFC000000007
FFC000000007FF800000000FFF000000001FFE000000003FFC000000007FF800000000FF
F000000001FFE000000003FFC000000007FF800000000FFE000000001FFC000000003FF8
000000007FE000000000FFC000000001FF8000000003FF0000000007FE000000000FF800
0000001FF0000000003FE000000000FFC000000001FF8000000003FE0000000007FC0000
00000FF8000000001FF0000000003FFFFFFFFFF07FFFFFFFFFF8FFFFFFFFFFF8FFFFFFFF
FFF8FFFFFFFFFFF8FFFFFFFFFFF8FFFFFFFFFFF87FFFFFFFFFF83FFFFFFFFFF02D437BC2
38>I<3FFFFFFFFFFFC07FFFFFFFFFFFE0FFFFFFFFFFFFE0FFFFFFFFFFFFE0FFFFFFFFFF
FFE0FFFFFFFFFFFFE0FFFFFFFFFFFFE0FFFFFFFFFFFFE0FFFFFFFFFFFFC0FFF800000000
00FFF80000000000FFF80000000000FFF80000000000FFF80000000000FFF80000000000
FFF80000000000FFF80000000000FFF80000000000FFF80000000000FFF80000000000FF
F80000000000FFF80000000000FFF80000000000FFF80000000000FFF80000000000FFF8
0000000000FFF80000000000FFF80000000000FFF80000000000FFFFFFFFFFFE00FFFFFF
FFFFFF00FFFFFFFFFFFF00FFFFFFFFFFFF00FFFFFFFFFFFF00FFFFFFFFFFFF00FFFFFFFF
FFFF00FFFFFFFFFFFE00FFF80000000000FFF80000000000FFF80000000000FFF8000000
0000FFF80000000000FFF80000000000FFF80000000000FFF80000000000FFF800000000
00FFF80000000000FFF80000000000FFF80000000000FFF80000000000FFF80000000000
FFF80000000000FFF80000000000FFF80000000000FFF80000000000FFF80000000000FF
F80000000000FFF80000000000FFF80000000000FFFFFFFFFFFFE0FFFFFFFFFFFFF0FFFF
FFFFFFFFF0FFFFFFFFFFFFF0FFFFFFFFFFFFF0FFFFFFFFFFFFF0FFFFFFFFFFFFF0FFFFFF
FFFFFFF07FFFFFFFFFFFF03FFFFFFFFFFFE0344577C443>69 D<00003FFC00000003FFFF
C000001FFFFFF000007FFFFFFC0000FFFFFFFE0001FFFFFFFF8003FFF007FF8007FFC000
FF800FFF00003F801FFE00001F001FFE00000F003FFC000007003FFC000003003FF80000
00007FF8000000007FF8000000007FF8000000007FF000000000FFF000000000FFF00000
0000FFF000000000FFF000000000FFF000000000FFF000000000FFF000000000FFF00000
0000FFF000000000FFF000000000FFF000000000FFF000000000FFF000000000FFF00000
00007FF8000000007FF8000000007FF8000000007FF8000000003FFC000000003FFC0000
01801FFE000003801FFE00000F800FFF00001F8007FFC000FFC007FFF007FFC003FFFFFF
FFC000FFFFFFFFC0007FFFFFFF00001FFFFFFC000003FFFFE00000007FFC00002A317CAF
32>99 D<00007FF800000003FFFF0000001FFFFFC000003FFFFFF00000FFFFFFF80001FF
FFFFFC0003FFF01FFE0007FF8007FF000FFF0003FF000FFE0001FF801FFC0000FF801FFC
0000FFC03FF80000FFC03FF800007FE07FF000007FE07FF000007FE07FF000007FE07FF0
00003FF0FFF000003FF0FFF000003FF0FFE000003FF0FFE000003FF0FFE000003FF0FFFF
FFFFFFF0FFFFFFFFFFF0FFFFFFFFFFF0FFFFFFFFFFF0FFFFFFFFFFF0FFFFFFFFFFE0FFF0
00000000FFF0000000007FF0000000007FF0000000007FF0000000007FF8000000003FF8
000000003FF8000000001FFC000000C01FFE000001C00FFE000007C007FF00000FC007FF
C0007FE003FFF803FFE001FFFFFFFFE0007FFFFFFFE0003FFFFFFF80000FFFFFFE000003
FFFFF00000003FFE00002C317DAF33>101 D<3FF07FF8FFF8FFF8FFF8FFF8FFF8FFF8FF
F8FFF8FFF8FFF87FF000000000000000000000000000000000000000000000000000001F
F03FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87F
F87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87F
F87FF87FF87FF87FF87FF87FF87FF83FF81FF00D487AC71B>105
D<000000F83FC007F87FE01FF8FFE07FF8FFE0FFF8FFE1FFF8FFE3FFF8FFE7FFF8FFEFFF
F8FFEFFF00FFFFF800FFFFF000FFFFC000FFFF8000FFFF0000FFFF0000FFFE0000FFFC00
00FFFC0000FFF80000FFF80000FFF80000FFF00000FFF00000FFF00000FFF00000FFF000
00FFF00000FFF00000FFF00000FFF00000FFF00000FFF00000FFF00000FFF00000FFF000
00FFF00000FFF00000FFF00000FFF00000FFF00000FFF00000FFF00000FFF00000FFF000
007FF000003FE000001D2F79AE26>114 D<7FC000001FF07FF000007FF07FF000007FF0
3FF80000FFE01FFC0001FFC01FFE0003FFC00FFF0007FF8007FF8007FF0003FF800FFE00
01FFC01FFC0000FFE03FF800007FF07FF000003FF87FF000003FF8FFE000001FFDFFC000
000FFFFF80000007FFFF00000003FFFE00000001FFFE00000000FFFC000000007FF80000
00007FF0000000003FF0000000007FF000000000FFF800000001FFFC00000003FFFE0000
0003FFFF00000007FDFF8000000FFCFFC000001FF87FE000003FF07FE000007FE03FF000
007FE01FF80000FFC00FFC0001FF800FFE0003FF8007FF0007FF0003FF800FFE0001FF80
1FFC0001FFC01FFC0000FFE03FF800007FF07FF000003FF8FFE000003FFCFFE000001FFC
7FC000000FF82E2E7EAD33>120 D E
%EndDVIPSBitmapFont
/Fj 142[76 113[{}1 99.6264 /Dingbats rf
%DVIPSBitmapFont: Fk ecbx1728 17.28 6
/Fk 6 118 df<0000000000007E0000000000000000FE0000000000000000FE00000000
00000001FE0000000000000003FE0000000000000007FE0000000000000007FE00000000
0000000FFE000000000000001FFE000000000000003FFE000000000000003FFE00000000
0000007FFE00000000000000FFFE00000000000001FFFE00000000000001FFFE00000000
000003FFFE00000000000007FFFE0000000000000FFFFE0000000000000FFFFE00000000
00001FFFFE0000000000003FFFFE0000000000007EFFFE0000000000007CFFFE00000000
0000F8FFFE000000000001F8FFFE000000000003F0FFFE000000000003E0FFFE00000000
0007C0FFFE00000000000FC0FFFE00000000001F80FFFE00000000001F00FFFE00000000
003E00FFFE00000000007E00FFFE0000000000FC00FFFE0000000000F800FFFE00000000
01F000FFFE0000000003F000FFFE0000000007E000FFFE0000000007C000FFFE00000000
0F8000FFFE000000001F8000FFFE000000003F0000FFFE000000003E0000FFFE00000000
7C0000FFFE00000000FC0000FFFE00000001F80000FFFE00000001F00000FFFE00000003
E00000FFFE00000007E00000FFFE0000000FC00000FFFE0000000F800000FFFE0000001F
000000FFFE0000003F000000FFFE0000007E000000FFFE0000007C000000FFFE000000F8
000000FFFE000001F8000000FFFE000003F0000000FFFE000003E0000000FFFE000007C0
000000FFFE00000FC0000000FFFE00001F80000000FFFE00001F00000000FFFE00003E00
000000FFFE00007E00000000FFFE0000FC00000000FFFE0000FFFFFFFFFFFFFFFFF0FFFF
FFFFFFFFFFFFF0FFFFFFFFFFFFFFFFF0FFFFFFFFFFFFFFFFF0FFFFFFFFFFFFFFFFF00000
000001FFFE00000000000001FFFE00000000000001FFFE00000000000001FFFE00000000
000001FFFE00000000000001FFFE00000000000001FFFE00000000000001FFFE00000000
000001FFFE00000000000001FFFE00000000000001FFFE00000000000001FFFE00000000
000001FFFE00000000000001FFFE00000000000001FFFE00000000000001FFFE00000000
000001FFFE00000000000001FFFE0000000000FFFFFFFFFFF0000000FFFFFFFFFFF00000
00FFFFFFFFFFF0000000FFFFFFFFFFF0000000FFFFFFFFFFF0445E7CDD4D>52
D<000000FFF80000070000000FFFFF80000F0000007FFFFFF0001F000001FFFFFFFC001F
000007FFFFFFFF003F00001FFF800FFFC07F00003FF80000FFE0FF0000FFE000001FF1FF
0001FFC0000007F9FF0003FF00000001FFFF0003FE00000000FFFF0007FC000000007FFF
000FFC000000003FFF000FF8000000001FFF001FF8000000000FFF001FF00000000007FF
003FF00000000007FF003FF00000000003FF007FE00000000001FF007FE00000000001FF
007FE00000000000FF007FE00000000000FF00FFE00000000000FF00FFE000000000007F
00FFE000000000007F00FFF000000000007F00FFF000000000003F00FFF000000000003F
00FFF800000000003F00FFF800000000003F00FFFC00000000001F00FFFE00000000001F
00FFFF00000000001F00FFFF80000000001F007FFFC00000000000007FFFE00000000000
007FFFF80000000000003FFFFF0000000000003FFFFFF000000000003FFFFFFF00000000
001FFFFFFFF8000000001FFFFFFFFF800000000FFFFFFFFFF800000007FFFFFFFFFF8000
0003FFFFFFFFFFE0000003FFFFFFFFFFF8000001FFFFFFFFFFFE000000FFFFFFFFFFFF80
00007FFFFFFFFFFFC000001FFFFFFFFFFFE000000FFFFFFFFFFFF0000003FFFFFFFFFFF8
000001FFFFFFFFFFFC0000007FFFFFFFFFFE0000000FFFFFFFFFFF00000001FFFFFFFFFF
000000000FFFFFFFFF8000000000FFFFFFFF80000000000FFFFFFFC000000000007FFFFF
C0000000000007FFFFE0000000000001FFFFE00000000000007FFFF00000000000003FFF
F00000000000000FFFF000000000000007FFF000000000000003FFF800000000000003FF
F8F8000000000001FFF8F8000000000000FFF8F8000000000000FFF8F80000000000007F
F8F80000000000007FF8F80000000000007FF8FC0000000000003FF8FC0000000000003F
F8FC0000000000003FF8FC0000000000003FF8FE0000000000003FF0FE0000000000003F
F0FE0000000000003FF0FF0000000000003FF0FF0000000000003FF0FF8000000000007F
E0FFC000000000007FE0FFC000000000007FC0FFE00000000000FFC0FFF00000000000FF
80FFF80000000001FF80FFFC0000000001FF00FFFE0000000003FF00FFFF8000000007FE
00FFFFC00000000FFC00FF9FF00000001FF800FF8FFE0000007FF000FF03FFC00001FFE0
00FE01FFFE000FFF8000FC007FFFFFFFFF0000F8001FFFFFFFFC0000F80003FFFFFFF000
00F000003FFFFF800000E0000001FFF8000000456678E356>83 D<0000003FFE00000000
0003FFFFE0000000001FFFFFFC000000007FFFFFFF00000001FFF80FFFC0000007FFC003
FFE000000FFF0000FFF000001FFE00007FF800003FFC00003FFC00007FF800001FFE0000
FFF000000FFF0001FFF000000FFF0003FFE0000007FF8007FFE0000007FF8007FFC00000
07FFC00FFFC0000003FFC00FFFC0000003FFE01FFF80000003FFE01FFF80000001FFE03F
FF80000001FFF03FFF80000001FFF03FFF80000001FFF07FFF00000001FFF07FFF000000
01FFF07FFF00000000FFF87FFF00000000FFF87FFF00000000FFF8FFFF00000000FFF8FF
FF00000000FFF8FFFF00000000FFF8FFFFFFFFFFFFFFF8FFFFFFFFFFFFFFF8FFFFFFFFFF
FFFFF8FFFFFFFFFFFFFFF8FFFF000000000000FFFF000000000000FFFF000000000000FF
FF000000000000FFFF000000000000FFFF0000000000007FFF0000000000007FFF000000
0000007FFF0000000000007FFF0000000000007FFF8000000000003FFF8000000000003F
FF8000000000001FFF8000000000001FFF8000000000F81FFFC000000000F80FFFC00000
0001F807FFC000000001F007FFE000000001F003FFE000000003F001FFF000000007E001
FFF800000007C000FFF80000000FC0007FFC0000001F80003FFE0000003F00001FFF8000
00FE000007FFC00003FC000003FFF8000FF8000000FFFF007FE00000003FFFFFFF800000
000FFFFFFE0000000001FFFFF800000000000FFF8000003D437CC146>101
D<00000003F8000000000FFE000000001FFF000000003FFF800000007FFFC00000007FFF
C0000000FFFFE0000000FFFFE0000000FFFFE0000000FFFFE0000000FFFFE0000000FFFF
E0000000FFFFE00000007FFFC00000007FFFC00000003FFF800000001FFF000000000FFE
0000000003F8000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
0000000003FFE000007FFFFFE000007FFFFFE000007FFFFFE000007FFFFFE000007FFFFF
E00000003FFFE00000001FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFF
E00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFF
E00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFF
E00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFF
E00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFF
E00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFF
E00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFF
E00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFF
E00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFF
E00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFF
E00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFF
E00000000FFFE00000000FFFE00FF0000FFFE01FF8000FFFE03FFC000FFFE07FFE000FFF
C0FFFF000FFFC0FFFF001FFFC0FFFF001FFF80FFFF001FFF80FFFF001FFF00FFFF003FFF
00FFFF003FFE007FFE007FFC007FFC007FF8003FF800FFF0001FF001FFE0000FFC07FFC0
0007FFFFFF000003FFFFFC0000007FFFF00000000FFF0000002B8288E42F>106
D<000007C00000000007C00000000007C00000000007C00000000007C00000000007C000
0000000FC0000000000FC0000000000FC0000000000FC0000000000FC0000000001FC000
0000001FC0000000001FC0000000003FC0000000003FC0000000007FC0000000007FC000
000000FFC000000001FFC000000001FFC000000003FFC000000007FFC00000000FFFC000
00001FFFC00000007FFFC0000001FFFFC000000FFFFFFFFFF8FFFFFFFFFFF8FFFFFFFFFF
F8FFFFFFFFFFF8FFFFFFFFFFF8001FFFC00000001FFFC00000001FFFC00000001FFFC000
00001FFFC00000001FFFC00000001FFFC00000001FFFC00000001FFFC00000001FFFC000
00001FFFC00000001FFFC00000001FFFC00000001FFFC00000001FFFC00000001FFFC000
00001FFFC00000001FFFC00000001FFFC00000001FFFC00000001FFFC00000001FFFC000
00001FFFC00000001FFFC00000001FFFC00000001FFFC00000001FFFC00000001FFFC000
00001FFFC00000001FFFC00000001FFFC00000001FFFC00000001FFFC00000001FFFC000
00001FFFC0001F001FFFC0001F001FFFC0001F001FFFC0001F001FFFC0001F001FFFC000
1F001FFFC0001F001FFFC0001F001FFFC0001F001FFFC0001F001FFFC0001F001FFFC000
1F001FFFC0001F000FFFC0003E000FFFE0003E000FFFE0003E0007FFE0007C0007FFF000
7C0003FFF000F80001FFF800F80000FFFC01F000007FFF07E000003FFFFFC000000FFFFF
80000003FFFE000000003FF800305C7DDA3C>116 D<0007FF80000001FFE000FFFFFF80
003FFFFFE000FFFFFF80003FFFFFE000FFFFFF80003FFFFFE000FFFFFF80003FFFFFE000
FFFFFF80003FFFFFE00000FFFF8000003FFFE000007FFF8000001FFFE000003FFF800000
0FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003F
FF8000000FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003FFF8000000FFF
E000003FFF8000000FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003FFF80
00000FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003FFF8000000FFFE000
003FFF8000000FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003FFF800000
0FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003F
FF8000000FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003FFF8000000FFF
E000003FFF8000000FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003FFF80
00000FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003FFF8000000FFFE000
003FFF8000000FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003FFF800000
0FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003FFF8000001FFFE000003F
FF8000001FFFE000003FFF8000001FFFE000003FFF8000001FFFE000003FFF8000003FFF
E000003FFF8000003FFFE000001FFF8000007FFFE000001FFF8000007FFFE000001FFF80
0000FFFFE000001FFFC00001EFFFE000000FFFC00003CFFFE0000007FFC00007CFFFF000
0007FFE0000F8FFFF8000003FFF0001F0FFFFFF80001FFFC00FE0FFFFFF800007FFFFFF8
0FFFFFF800001FFFFFF00FFFFFF8000007FFFFC00FFFFFF80000003FFE000FFF00004D42
7BC056>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fl ecrm1200 12 44
/Fl 44 239 df<000000FFC001FC0000000FFFF80FFF0000003F803E3F03C00000FC0007
7E07E00003F8000FFC0FF00007F0003FF81FF0000FE0007FF01FF0001FC0007FF01FF000
3F80007FE01FF0007F00007FE01FF0007F00007FE00FE000FF00003FC0038000FE00001F
C0000000FE00001FC0000000FE00001FC0000000FE00001FC0000000FE00001FC0000000
FE00001FC0000000FE00001FC0000000FE00001FC0000000FE00001FC0000000FE00001F
C0000000FE00001FC0000000FE00001FC0000000FE00001FC0000000FE00001FC0000000
FE00001FC00000FFFFFFFFFFFFF000FFFFFFFFFFFFF000FFFFFFFFFFFFF00000FE00001F
C0000000FE00001FC0000000FE00001FC0000000FE00001FC0000000FE00001FC0000000
FE00001FC0000000FE00001FC0000000FE00001FC0000000FE00001FC0000000FE00001F
C0000000FE00001FC0000000FE00001FC0000000FE00001FC0000000FE00001FC0000000
FE00001FC0000000FE00001FC0000000FE00001FC0000000FE00001FC0000000FE00001F
C0000000FE00001FC0000000FE00001FC0000000FE00001FC0000000FE00001FC0000000
FE00001FC0000000FE00001FC0000000FE00001FC0000000FE00001FC0000000FE00001F
C0000000FE00001FC0000000FE00001FC0000000FE00001FC0000000FE00001FC0000000
FE00001FC0000000FE00001FC0000000FE00001FC0000000FE00001FC0000001FF00003F
F000007FFFFC0FFFFFE0007FFFFC0FFFFFE0007FFFFC0FFFFFE0003C467EC539>27
D<000001FF000000000FFFE00000007F80F8000001FC001C000003F8000E000007E0000F
00000FC0007F00001FC000FF80003F8000FF80007F0000FF80007F0000FF8000FF0000FF
8000FE00007F0000FE00003E0000FE0000000000FE0000000000FE0000000000FE000000
0000FE0000000000FE0000000000FE0000000000FE0000000000FE0000000000FE000000
0000FE0000000000FE0000000000FE00003F80FFFFFFFFFF80FFFFFFFFFF80FFFFFFFFFF
8000FE0000FF8000FE00007F8000FE00003F8000FE00003F8000FE00003F8000FE00003F
8000FE00003F8000FE00003F8000FE00003F8000FE00003F8000FE00003F8000FE00003F
8000FE00003F8000FE00003F8000FE00003F8000FE00003F8000FE00003F8000FE00003F
8000FE00003F8000FE00003F8000FE00003F8000FE00003F8000FE00003F8000FE00003F
8000FE00003F8000FE00003F8000FE00003F8000FE00003F8000FE00003F8000FE00003F
8000FE00003F8000FE00003F8000FE00003F8000FE00003F8000FE00003F8000FE00003F
8001FF00007FC07FFFFC1FFFFF7FFFFC1FFFFF7FFFFC1FFFFF30467EC536>I<0C000300
3F000FC07F801FE07F801FE0FF801FF0FF801FF0FF801FF07F801FE07F801FE07F801FE0
7F801FE07F801FE07F801FE07F000FE07F000FE03F000FC03F000FC03F000FC03F000FC0
3F000FC03F000FC03F000FC03E0007C03E0007C01E0007801E0007801E0007801E000780
1E0007801E0007801E0007801C0003801C0003800C0003000C0003000C0003001C2476C6
31>34 D<1E007F80FF80FFC0FFC0FFE0FFE0FFE07FE01E60006000600060006000E000C0
00C000C001C0018003800300070006000E001C003800700060000B1D78C41B>39
D<1E007F80FF80FFC0FFC0FFE0FFE0FFE07FE01E60006000600060006000E000C000C000
C001C0018003800300070006000E001C003800700060000B1D78891B>44
D<FFFFFFC0FFFFFFC0FFFFFFC0FFFFFFC0FFFFFFC0FFFFFFC01A067F9721>I<1E007F80
7F80FFC0FFC0FFC0FFC07F807F801E000A0A78891B>I<0000FF00000007FFE000001F81
F800003E007C0000FC003F0001F8001F8001F0000F8003E00007C007C00003E007C00003
E00FC00003F00F800001F01F800001F81F800001F83F800001FC3F800001FC3F800001FC
3F000000FC7F000000FE7F000000FE7F000000FE7F000000FE7F000000FEFF000000FFFF
000000FFFF000000FFFF000000FFFF000000FFFF000000FFFF000000FFFF000000FFFF00
0000FFFF000000FFFF000000FFFF000000FFFF000000FFFF000000FFFF000000FFFF0000
00FFFF000000FFFF000000FFFF000000FFFF000000FFFF000000FFFF000000FF7F000000
FE7F000000FE7F000000FE7F000000FE7F000000FE7F800001FE3F800001FC3F800001FC
3F800001FC1F800001F81F800001F80FC00003F00FC00003F00FC00003F007E00007E003
E00007C003F0000FC001F8001F8000FC003F00003E007C00001F81F8000007FFE0000000
FF000028447CC131>48 D<000030000000F0000001F0000003F000001FF00000FFF000FF
FFF000FFE7F000FF07F0000007F0000007F0000007F0000007F0000007F0000007F00000
07F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F00000
07F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F00000
07F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F00000
07F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F00000
07F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F00000
07F000000FF800001FFC007FFFFFFF7FFFFFFF7FFFFFFF204278C131>I<0003FE000000
1FFFC000007FFFF00001F80FFC0003C001FE00078000FF000E00007F801C00003FC01C00
001FE03800001FF03000000FF07000000FF860000007F86C000007F8FF000007FCFF8000
07FCFFC00007FCFFC00003FCFFC00003FCFFC00003FCFFC00003FC7F800007FC3F000007
FC00000007FC00000007F800000007F80000000FF80000000FF00000001FF00000001FE0
0000001FE00000003FC00000007F800000007F00000000FF00000000FE00000001FC0000
0003F800000007F000000007E00000000FC00000001F800000003F000000007C00000000
F800000000F000000001E000000003C000000007800000000F00000C001E00000C003C00
000C0038000018007000001800E000001801C0000018038000003807000000300E000000
701FFFFFFFF01FFFFFFFF03FFFFFFFF07FFFFFFFF0FFFFFFFFE0FFFFFFFFE0FFFFFFFFE0
26427BC131>I<06000000C007C00007C007FC007F8007FFFFFF0007FFFFFE0007FFFFFC
0007FFFFF80007FFFFE00007FFFF8000063FFC0000060000000006000000000600000000
060000000006000000000600000000060000000006000000000600000000060000000006
000000000600000000060000000006000000000600FF00000607FFC000061F01F0000638
00FC0006F0007E0007C0003F000780001F800780001FC00700000FC00600000FE0000000
07F000000007F000000007F000000007F800000003F800000003F800000003FC00000003
FC00000003FC00000003FC00000003FC3E000003FC7F000003FCFF800003FCFF800003FC
FF800003FCFF800003FCFF800003F8FF000007F8FE000007F860000007F060000007F070
00000FF03000000FE03800001FC01C00001FC01E00003F800F00007F00078000FE0003C0
01FC0001F807F000007FFFE000001FFF00000007F8000026447BC131>53
D<1C00000000001C00000000001F80000000001FFFFFFFFFC01FFFFFFFFFC01FFFFFFFFF
C03FFFFFFFFF803FFFFFFFFF803FFFFFFFFF003FFFFFFFFE00380000000C00300000001C
0070000000380060000000300060000000700060000000E00060000000C000C0000001C0
00C00000038000C000000700000000000600000000000E00000000001C00000000001800
00000000380000000000700000000000600000000000E00000000001C00000000001C000
0000000380000000000780000000000700000000000F00000000000F00000000001F0000
0000001E00000000003E00000000003E00000000007E00000000007C00000000007C0000
000000FC0000000000FC0000000001FC0000000001FC0000000001FC0000000003F80000
000003F80000000003F80000000003F80000000007F80000000007F80000000007F80000
000007F80000000007F80000000007F8000000000FF8000000000FF8000000000FF80000
00000FF8000000000FF8000000000FF8000000000FF8000000000FF8000000000FF80000
00000FF80000000007F00000000001C00000002A457BC231>55 D<1E007F807F80FFC0FF
C0FFC0FFC07F807F801E0000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000001E007F807F80FFC0FFC0FFC0FFC07F
807F801E000A2B78AA1B>58 D<FFFFFFFFFFFFF800FFFFFFFFFFFFF800FFFFFFFFFFFFF8
0001FFC000007FF800007F80000007FC00007F80000001FC00007F80000000FC00007F80
0000007C00007F800000003C00007F800000001C00007F800000001C00007F800000000E
00007F800000000E00007F800000000E00007F800000000600007F800000000600007F80
0000000600007F800000000600007F800000000700007F800006000300007F8000060003
00007F800006000300007F800006000000007F800006000000007F800006000000007F80
0006000000007F80000E000000007F80000E000000007F80001E000000007F80003E0000
00007F8000FE000000007FFFFFFE000000007FFFFFFE000000007FFFFFFE000000007F80
00FE000000007F80003E000000007F80001E000000007F80000E000000007F80000E0000
00007F800006000000007F800006000000007F800006000000007F8000060000C0007F80
00060000C0007F8000060000C0007F800006000180007F800000000180007F8000000001
80007F800000000180007F800000000180007F800000000380007F800000000380007F80
0000000300007F800000000300007F800000000700007F800000000700007F800000000F
00007F800000000F00007F800000001E00007F800000001E00007F800000003E00007F80
0000007E00007F80000001FE00007F80000007FE0001FFC000007FFE00FFFFFFFFFFFFFC
00FFFFFFFFFFFFFC00FFFFFFFFFFFFFC003A447CC342>69 D<0000001FFC000000000000
01FFFFC0000000000007F007F000000000001F8000FC00000000007E00003F0000000001
F800000FC000000003F0000007E000000007E0000003F00000000FC0000001F80000001F
80000000FC0000003F000000007E0000007E000000003F000000FE000000003F800001FC
000000001FC00003F8000000000FE00003F8000000000FE00007F00000000007F00007F0
0000000007F0000FF00000000007F8000FE00000000003F8001FE00000000003FC001FE0
0000000003FC003FC00000000001FE003FC00000000001FE003FC00000000001FE007FC0
0000000001FF007FC00000000001FF007F800000000000FF007F800000000000FF007F80
0000000000FF00FF800000000000FF80FF800000000000FF80FF800000000000FF80FF80
0000000000FF80FF800000000000FF80FF800000000000FF80FF800000000000FF80FF80
0000000000FF80FF800000000000FF80FF800000000000FF80FF800000000000FF80FF80
0000000000FF80FF800000000000FF807FC00000000001FF007FC00000000001FF007FC0
0000000001FF007FC00000000001FF003FC00000000001FE003FE00000000003FE003FE0
0000000003FE001FE00000000003FC001FE00000000003FC000FF00000000007F8000FF0
0000000007F80007F8000000000FF00007F8000000000FF00003F8000000000FE00003FC
000000001FE00001FE000000003FC00000FE000000003F8000007F000000007F0000007F
80000000FF0000003F80000000FE0000001FC0000001FC00000007E0000003F000000003
F0000007E000000001FC00001FC0000000007E00003F00000000001F8000FC0000000000
07F007F0000000000001FFFFC00000000000001FFC0000000041487BC54C>79
D<FFFFFFFFFC0000FFFFFFFFFFC000FFFFFFFFFFF80001FFC0000FFC00007F800001FF00
007F8000007F80007F8000001FE0007F8000000FE0007F80000007F0007F80000007F800
7F80000003FC007F80000003FC007F80000003FE007F80000001FE007F80000001FE007F
80000001FF007F80000001FF007F80000001FF007F80000001FF007F80000001FF007F80
000001FF007F80000001FF007F80000001FE007F80000001FE007F80000003FE007F8000
0003FC007F80000003FC007F80000007F8007F80000007F0007F8000000FE0007F800000
1FC0007F8000007F80007F800001FE00007F80000FFC00007FFFFFFFF000007FFFFFFF80
00007F8000000000007F8000000000007F8000000000007F8000000000007F8000000000
007F8000000000007F8000000000007F8000000000007F8000000000007F800000000000
7F8000000000007F8000000000007F8000000000007F8000000000007F8000000000007F
8000000000007F8000000000007F8000000000007F8000000000007F8000000000007F80
00000000007F8000000000007F8000000000007F8000000000007F8000000000007F8000
000000007F8000000000007F800000000001FFE000000000FFFFFFC0000000FFFFFFC000
0000FFFFFFC000000038447CC342>I<3FFFFFFFFFFFFFF83FFFFFFFFFFFFFF83FFFFFFF
FFFFFFF83FF0001FF8001FF83F80000FF00003F83E00000FF00000F87C00000FF000007C
7800000FF000003C7800000FF000003C7000000FF000001C7000000FF000001C7000000F
F000001C6000000FF000000C6000000FF000000C6000000FF000000C6000000FF000000C
6000000FF000000CC000000FF0000006C000000FF0000006C000000FF0000006C000000F
F0000006C000000FF00000060000000FF00000000000000FF00000000000000FF0000000
0000000FF00000000000000FF00000000000000FF00000000000000FF00000000000000F
F00000000000000FF00000000000000FF00000000000000FF00000000000000FF0000000
0000000FF00000000000000FF00000000000000FF00000000000000FF00000000000000F
F00000000000000FF00000000000000FF00000000000000FF00000000000000FF0000000
0000000FF00000000000000FF00000000000000FF00000000000000FF00000000000000F
F00000000000000FF00000000000000FF00000000000000FF00000000000000FF0000000
0000000FF00000000000000FF00000000000000FF00000000000000FF00000000000000F
F00000000000000FF00000000000000FF00000000000000FF00000000000000FF0000000
0000000FF00000000000000FF00000000000001FF80000000000007FFE0000000001FFFF
FFFF80000001FFFFFFFF80000001FFFFFFFF80003F447DC346>84
D<0007FC000000003FFF80000000F80FE0000003C003F00000070001F800000E0000FC00
000FC0007E00001FE0007F00001FF0003F80001FF0003F80001FF0003F80001FF0001FC0
001FF0001FC0000FE0001FC0000380001FC0000000001FC0000000001FC0000000001FC0
000000001FC00000000FFFC0000001FFFFC000000FFE1FC000003FC01FC00000FF001FC0
0003FC001FC00007F8001FC0000FF0001FC0001FE0001FC0003FC0001FC0007FC0001FC0
007F80001FC0007F80001FC060FF00001FC060FF00001FC060FF00001FC060FF00003FC0
60FF00003FC060FF00003FC060FF80007FC0607F8000EFC0607FC000C7E0C03FC001C7E0
C01FE00783F1C007F81E03FF8001FFFC01FF00001FE0007C002B2E7CAC31>97
D<01FC00000000FFFC00000000FFFC00000000FFFC0000000007FC0000000003FC000000
0001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC000000
0001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC000000
0001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC000000
0001FC0000000001FC03FC000001FC0FFF800001FC3C07E00001FC7001F80001FDE0007E
0001FD80003F0001FF80001F8001FF00001FC001FE00000FE001FC000007E001FC000007
F001FC000007F001FC000003F801FC000003F801FC000003FC01FC000003FC01FC000001
FC01FC000001FE01FC000001FE01FC000001FE01FC000001FE01FC000001FE01FC000001
FE01FC000001FE01FC000001FE01FC000001FE01FC000001FE01FC000001FE01FC000001
FC01FC000003FC01FC000003FC01FC000003F801FC000003F801FC000007F001FC000007
F001FE00000FE001FE00000FC001FF00001FC001FB00003F8001F380007E0001E1C000FC
0001E0F001F80001C03C07E00001801FFF8000000003FC00002F467DC436>I<00007F80
000003FFF000000FC07C00003F000F0000FC00038001F80001C003F8000FC007F0001FE0
07E0003FE00FE0003FE01FC0003FE01FC0003FE03F80003FE03F80001FC07F800007007F
800000007F800000007F00000000FF00000000FF00000000FF00000000FF00000000FF00
000000FF00000000FF00000000FF00000000FF00000000FF00000000FF000000007F0000
00007F800000007F800000003F800000003F800000303FC00000301FC00000700FE00000
600FE00000E007F00000C003F80001C001F800038000FC000700003F001E00001FC07800
0007FFF0000000FF8000242E7DAC2B>I<000000007F000000003FFF000000003FFF0000
00003FFF0000000001FF0000000000FF00000000007F00000000007F00000000007F0000
0000007F00000000007F00000000007F00000000007F00000000007F00000000007F0000
0000007F00000000007F00000000007F00000000007F00000000007F00000000007F0000
0000007F00000000007F00000000007F00000000007F0000007F807F000003FFF07F0000
0FC07C7F00003F000E7F00007E00077F0000FC0003FF0003F80001FF0007F00000FF0007
E00000FF000FE000007F001FC000007F001FC000007F003F8000007F003F8000007F007F
8000007F007F8000007F007F0000007F00FF0000007F00FF0000007F00FF0000007F00FF
0000007F00FF0000007F00FF0000007F00FF0000007F00FF0000007F00FF0000007F00FF
0000007F00FF0000007F007F0000007F007F8000007F007F8000007F003F8000007F003F
8000007F001FC000007F001FC000007F000FC00000FF000FE00000FF0007F00001FF0003
F00003FF0001F800077F8000FC000E7FC0003F001C7FFE000FC0F87FFE0003FFE07FFE00
007F007F002F467DC436>I<0001FE00000007FFC000001F03F000007E00FC0000FC007E
0001F8003F0003F0003F0007E0001F800FE0001FC00FC0000FC01FC0000FC03F80000FE0
3F800007E03F800007E07F800007F07F000007F07F000007F0FF000007F0FF000007F0FF
000007F0FFFFFFFFF0FFFFFFFFF0FF00000000FF00000000FF00000000FF00000000FF00
000000FF000000007F000000007F000000007F800000007F800000003F800000003F8000
00301FC00000301FC00000700FC00000600FE00000E007F00000C003F00001C001F80003
8000FC000700003E001E00001F80F8000003FFE0000000FF0000242E7DAC2B>I<00000F
E00000007FF8000001F81E000003F03F00000FE07F80001FC0FF80001F80FF80003F80FF
80007F00FF80007F00FF80007F007F0000FE001C0000FE00000000FE00000000FE000000
00FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000
FE00000000FE00000000FE00000000FE00000000FE000000FFFFFF8000FFFFFF8000FFFF
FF800000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00
000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE0000
0000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE000000
00FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000
FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE
00000001FF8000007FFFFF00007FFFFF00007FFFFF000021467EC51E>I<000000000F80
0001FC007FE0000FFF81F0F0003F07E381F000FC01FF03F001F800FE01F003F0007E01E0
07F0007F000007E0003F00000FE0003F80000FC0001F80001FC0001FC0001FC0001FC000
1FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC000
1FC0001FC0000FC0001F80000FE0003F800007E0003F000007F0007F000003F0007E0000
01F800FC000001FC01F8000003BF07E00000030FFF8000000701FC000000070000000000
0700000000000F00000000000F00000000000F00000000000F800000000007C000000000
07E00000000007FFFFF8000003FFFFFF000003FFFFFFE00001FFFFFFF800007FFFFFFC00
01FFFFFFFE0007C0000FFF000F800000FF003F0000003F803E0000001F807C0000000FC0
7C0000000FC0F800000007C0F800000007C0F800000007C0F800000007C0F800000007C0
FC0000000FC07C0000000F807E0000001F803E0000001F001F0000003E000F8000007C00
07E00001F80001F80007E000007F003F8000001FFFFE00000001FFE000002C427DAC31>
I<01FC00000000FFFC00000000FFFC00000000FFFC0000000007FC0000000003FC000000
0001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC000000
0001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC000000
0001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC000000
0001FC0000000001FC01FE000001FC07FFC00001FC1E07F00001FC3801F80001FC7001FC
0001FCE000FC0001FDC000FE0001FD8000FE0001FF80007F0001FF00007F0001FF00007F
0001FE00007F0001FE00007F0001FE00007F0001FC00007F0001FC00007F0001FC00007F
0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F
0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F
0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F
0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0003FE0000FF
80FFFFF83FFFFEFFFFF83FFFFEFFFFF83FFFFE2F457DC436>I<01E00007F80007F8000F
FC000FFC000FFC000FFC0007F80007F80001E00000000000000000000000000000000000
000000000000000000000000000000000000000000000001FC00FFFC00FFFC00FFFC0007
FC0003FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001
FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001
FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0003
FE00FFFFF8FFFFF8FFFFF815437DC21C>I<01FC00FFFC00FFFC00FFFC0007FC0003FC00
01FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC00
01FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC00
01FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC00
01FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC00
01FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0003FE00
FFFFF8FFFFF8FFFFF815457DC41C>108 D<01FC00FF00001FE00000FFFC07FFE000FFFC
0000FFFC0F03F801E07F0000FFFC3C01FC07803F800007FC7000FE0E001FC00003FCE000
7E1C000FC00001FDC0007F38000FE00001FD80007F30000FE00001FF80003FF00007F000
01FF00003FE00007F00001FF00003FE00007F00001FE00003FC00007F00001FE00003FC0
0007F00001FE00003FC00007F00001FC00003F800007F00001FC00003F800007F00001FC
00003F800007F00001FC00003F800007F00001FC00003F800007F00001FC00003F800007
F00001FC00003F800007F00001FC00003F800007F00001FC00003F800007F00001FC0000
3F800007F00001FC00003F800007F00001FC00003F800007F00001FC00003F800007F000
01FC00003F800007F00001FC00003F800007F00001FC00003F800007F00001FC00003F80
0007F00001FC00003F800007F00001FC00003F800007F00001FC00003F800007F00001FC
00003F800007F00001FC00003F800007F00001FC00003F800007F00001FC00003F800007
F00001FC00003F800007F00001FC00003F800007F00003FE00007FC0000FF800FFFFF81F
FFFF03FFFFE0FFFFF81FFFFF03FFFFE0FFFFF81FFFFF03FFFFE04B2C7DAB52>I<01FC01
FE0000FFFC07FFC000FFFC1E07F000FFFC3801F80007FC7001FC0003FCE000FC0001FDC0
00FE0001FD8000FE0001FF80007F0001FF00007F0001FF00007F0001FE00007F0001FE00
007F0001FE00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00
007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00
007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00
007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00
007F0001FC00007F0001FC00007F0001FC00007F0003FE0000FF80FFFFF83FFFFEFFFFF8
3FFFFEFFFFF83FFFFE2F2C7DAB36>I<00007F8000000003FFF00000000FC0FC0000003E
001F0000007C000F800000F80007C00001F00003E00003E00001F00007C00000F8000FC0
0000FC000FC00000FC001F8000007E003F8000007F003F8000007F003F0000003F007F00
00003F807F0000003F807F0000003F807F0000003F80FF0000003FC0FF0000003FC0FF00
00003FC0FF0000003FC0FF0000003FC0FF0000003FC0FF0000003FC0FF0000003FC0FF00
00003FC0FF0000003FC07F0000003F807F0000003F807F8000007F803F8000007F003F80
00007F001F8000007E001FC00000FE000FC00000FC000FE00001FC0007E00001F80003F0
0003F00001F80007E00000FC000FC000003E001F0000001FC0FE00000007FFF800000000
7F8000002A2E7DAC31>I<01FC03FC0000FFFC0FFF8000FFFC3C07E000FFFC7001F80007
FDE000FE0001FD80007F0001FF80003F8001FF00001FC001FE00001FE001FC00000FE001
FC00000FF001FC000007F001FC000007F801FC000003F801FC000003FC01FC000003FC01
FC000003FC01FC000001FE01FC000001FE01FC000001FE01FC000001FE01FC000001FE01
FC000001FE01FC000001FE01FC000001FE01FC000001FE01FC000001FE01FC000001FE01
FC000003FC01FC000003FC01FC000003FC01FC000007F801FC000007F801FC000007F001
FC00000FF001FE00000FE001FE00001FC001FF00003FC001FF00003F8001FF80007E0001
FDC000FC0001FCF003F80001FC3C0FE00001FC1FFF800001FC03FC000001FC0000000001
FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001
FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001
FC0000000003FE00000000FFFFF8000000FFFFF8000000FFFFF80000002F3F7DAB36>I<
00007F8003000003FFE00700000FE0780700003F801C0F00007E000E0F0000FC00071F00
03F800039F0007F80001BF0007F00001FF000FE00000FF001FE00000FF001FC00000FF00
3FC000007F003FC000007F007F8000007F007F8000007F007F8000007F00FF0000007F00
FF0000007F00FF0000007F00FF0000007F00FF0000007F00FF0000007F00FF0000007F00
FF0000007F00FF0000007F00FF0000007F00FF0000007F007F8000007F007F8000007F00
7F8000007F003F8000007F003FC000007F001FC000007F001FE00000FF000FE00000FF00
0FF00001FF0007F00001FF0003F80003FF0001FC00077F0000FE000E7F00003F001C7F00
000FC0F87F000003FFE07F0000007F007F00000000007F00000000007F00000000007F00
000000007F00000000007F00000000007F00000000007F00000000007F00000000007F00
000000007F00000000007F00000000007F00000000007F00000000007F0000000000FF80
0000003FFFFE0000003FFFFE0000003FFFFE2F3F7DAB33>I<03F803F0FFF81FFCFFF83C
3EFFF8707F07F8E0FF03F9C0FF01F980FF01FB80FF01FB007E01FB003C01FF000001FE00
0001FE000001FE000001FE000001FC000001FC000001FC000001FC000001FC000001FC00
0001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC00
0001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC00
0001FC000003FF0000FFFFFE00FFFFFE00FFFFFE00202C7DAB26>I<003FE01801FFFC38
07E01F780F0003F81E0001F83C0000F87C00007878000078F8000038F8000038F8000018
F8000018FC000018FC000018FE000018FF8000007FC000007FFC00003FFFE0001FFFFC00
0FFFFF0007FFFFC003FFFFE000FFFFF0001FFFF80000FFF800000FFC000003FCC00001FE
C00000FEC000007EE000007EE000003EE000003EF000003EF000003EF000003EF800003C
FC00007CFC000078FE0000F8FF0001F0F38003E0F1F00F80E07FFE00C00FF0001F2E7DAC
26>I<0006000000060000000600000006000000060000000E0000000E0000000E000000
0E0000001E0000001E0000001E0000003E0000007E0000007E000000FE000001FE000007
FE00001FFFFFF0FFFFFFF0FFFFFFF000FE000000FE000000FE000000FE000000FE000000
FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000
FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000C00
FE000C00FE000C00FE000C00FE000C00FE000C00FE000C00FE000C00FE000C00FE000C00
7E001C007F0018007F0018003F0038001F8030001FC0700007E0E00001FFC000007F001E
3E7EBC26>I<01FC00007F00FFFC003FFF00FFFC003FFF00FFFC003FFF0007FC0001FF00
03FC0000FF0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F00
01FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F00
01FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F00
01FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F00
01FC00007F0001FC00007F0001FC00007F0001FC0000FF0001FC0000FF0001FC0000FF00
01FC0001FF0001FC0001FF0000FC0001FF0000FE0003FF00007E00077F80007F000E7FC0
003F001C7FFE000FC0787FFE0003FFF07FFE00007F807F002F2D7DAB36>I<FFFFF001FF
FCFFFFF001FFFCFFFFF001FFFC07FF00007FE003FE00001F8001FE00001F0001FE00000E
0000FE00000E0000FE00000C00007F00001800007F00001800007F80001800003F800030
00003F80003000003FC0007000001FC0006000001FE0006000000FE000C000000FE000C0
00000FF001C0000007F00180000007F00180000003F80300000003F80300000003FC0700
000001FC0600000001FC0600000000FE0C00000000FE0C00000000FF0C000000007F1800
0000007F18000000007FB8000000003FB0000000003FF0000000001FE0000000001FE000
0000001FE0000000000FC0000000000FC000000000078000000000078000000000078000
000000030000002E2C7EAA33>I<FFFFF007FFFCFFFFF007FFFCFFFFF007FFFC03FFC001
FFC000FF8000FF00007F8000FC00003F8000F800003FC000E000001FE000E000000FE001
C0000007F00380000007F80300000003FC0600000001FC0E00000001FE1C00000000FF18
000000007F30000000003FF0000000003FE0000000001FE0000000000FE00000000007F0
0000000007F8000000000FF8000000000DFC0000000019FE0000000038FF00000000707F
00000000603F80000000C03FC0000001C01FC0000003800FE0000003000FF00000060007
F800000E0003F800001C0001FC00003C0001FE00007C0001FF0001FC0001FF800FFE0003
FFC0FFFF800FFFFFFFFF800FFFFFFFFF800FFFFF302B7FAA33>120
D<FFFFF001FFFCFFFFF001FFFCFFFFF001FFFC07FF00007FE003FE00001F8001FE00001F
0001FE00000E0000FE00000C0000FF00001C00007F00001800007F00001800007F800038
00003F80003000003F80003000001FC0006000001FC0006000001FE000E000000FE000C0
00000FE000C0000007F00180000007F00180000007F80380000003F80300000003F80300
000001FC0600000001FC0600000001FE0E00000000FE0C00000000FE0C000000007F1800
0000007F18000000007FB8000000003FB0000000003FB0000000001FE0000000001FE000
0000001FE0000000000FC0000000000FC000000000078000000000078000000000078000
0000000300000000000300000000000600000000000600000000000600000000000C0000
0000000C0000000000180000000000180000003C00180000007E0030000000FF00300000
00FF0060000000FF0060000000FF00C0000000FE01C00000007C03800000007007000000
003C1E000000000FFC0000000003F0000000002E3F7EAA33>I<000780000000000FC000
0000001FE0000000001FF0000000000FF8000000000FFC0000000003FE0000000001FF00
000000007F00000000001F80000000000FC00000000003E00000000000F0000000000070
00000000001000000000000000000000000000000000000000000000000000000007FC00
0000003FFF80000000F80FE0000003C003F00000070001F800000E0000FC00000FC0007E
00001FE0007F00001FF0003F80001FF0003F80001FF0003F80001FF0001FC0001FF0001F
C0000FE0001FC0000380001FC0000000001FC0000000001FC0000000001FC0000000001F
C00000000FFFC0000001FFFFC000000FFE1FC000003FC01FC00000FF001FC00003FC001F
C00007F8001FC0000FF0001FC0001FE0001FC0003FC0001FC0007FC0001FC0007F80001F
C0007F80001FC060FF00001FC060FF00001FC060FF00001FC060FF00003FC060FF00003F
C060FF00003FC060FF80007FC0607F8000EFC0607FC000C7E0C03FC001C7E0C01FE00783
F1C007F81E03FF8001FFFC01FF00001FE0007C002B417CBF31>224
D<00007F80000003FFF000000FC07C00003F000F0000FC00038001F80001C003F8000FC0
07F0001FE007E0003FE00FE0003FE01FC0003FE01FC0003FE03F80003FE03F80001FC07F
800007007F800000007F800000007F00000000FF00000000FF00000000FF00000000FF00
000000FF00000000FF00000000FF00000000FF00000000FF00000000FF00000000FF0000
00007F000000007F800000007F800000003F800000003F800000303FC00000301FC00000
700FE00000600FE00000E007F00000C003F80001C001F800038000FC000700003F001E00
001FC078000007FFF0000000FF800000007F000000007F000000007F000000007F000000
007F000000007FE000000007F800000001FC00000000FE000000007F000000007F000000
007F000000007F000000007F00000000FE00000003FC0000001FF800007FFFE000007FFC
000024417DAC2B>231 D<00008000000003E000000007F000000007F800000007FC0000
0007FC00000003FE00000001FF000000007F800000003FC00000000FE000000003E00000
0001F0000000007800000000380000000008000000000000000000000000000000000000
0000000001FE00000007FFC000001F03F000007E00FC0000FC007E0001F8003F0003F000
3F0007E0001F800FE0001FC00FC0000FC01FC0000FC03F80000FE03F800007E03F800007
E07F800007F07F000007F07F000007F0FF000007F0FF000007F0FF000007F0FFFFFFFFF0
FFFFFFFFF0FF00000000FF00000000FF00000000FF00000000FF00000000FF000000007F
000000007F000000007F800000007F800000003F800000003F800000301FC00000301FC0
0000700FC00000600FE00000E007F00000C003F00001C001F800038000FC000700003E00
1E00001F80F8000003FFE0000000FF000024427DC02B>I<000002000000000F80000000
1FC00000003FC00000007FC00000007FC0000000FF80000001FF00000003FC00000007F8
0000000FE00000000F800000001F000000003C0000000038000000002000000000000000
000000000000000000000000000000000001FE00000007FFC000001F03F000007E00FC00
00FC007E0001F8003F0003F0003F0007E0001F800FE0001FC00FC0000FC01FC0000FC03F
80000FE03F800007E03F800007E07F800007F07F000007F07F000007F0FF000007F0FF00
0007F0FF000007F0FFFFFFFFF0FFFFFFFFF0FF00000000FF00000000FF00000000FF0000
0000FF00000000FF000000007F000000007F000000007F800000007F800000003F800000
003F800000301FC00000301FC00000700FC00000600FE00000E007F00000C003F00001C0
01F800038000FC000700003E001E00001F80F8000003FFE0000000FF000024427DC02B>
I<001800003C00007E0000FF0001FF8001E78003C3C00781E00F00F01E00783C003C3800
1C70000EE00007C0000300000000000000000000000000000000FE007FFE007FFE007FFE
0003FE0001FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE
0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE
0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE
0001FF007FFFFC7FFFFC7FFFFC18407EBF1C>238 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fm eccc1200 12 18
/Fm 18 234 df<00007F8000000003FFF00000000FC0FC0000003F003F0000007C000F80
0000F80007C00001F00003E00003E00001F00007E00001F80007C00000F8000FC00000FC
000FC00000FC001F8000007E001F8000007E001F8000007E003F8000007F003F8000007F
003F8000007F007F0000003F807F0000003F807F0000003F807F0000003F807F0000003F
807F0000003F80FF0000003FC0FF0000003FC0FF0000003FC0FF0000003FC0FF0000003F
C0FF0000003FC0FF0000003FC0FF0000003FC0FF0000003FC0FF0000003FC0FF0000003F
C0FF0000003FC0FF0000003FC0FF0000003FC0FF0000003FC0FF0000003FC0FF0000003F
C0FF0000003FC0FF0000003FC0FF0000003FC0FF0000003FC07F0000003F807F0000003F
807F0000003F807F0000003F807F8000007F803F8000007F003F8000007F003F8000007F
003F8000007F001F8000007E001FC00000FE000FC00000FC000FC00000FC0007E00001F8
0007E00001F80003F00003F00001F00003E00000F80007C000007C000F8000003F003F00
00000FC0FC00000003FFF0000000007F8000002A447BC135>48 D<0003FF0000001FFFE0
00007FFFFC0000FC03FE0003E000FF800780003FC00F00001FE01E00000FF01C00000FF8
38000007FC30000003FC70000003FE60000003FE6C000001FEFF000001FFFF800001FFFF
C00001FFFFC00000FFFFC00000FFFFC00000FFFFC00000FF7F800001FF3F000001FF0000
0001FF00000001FE00000001FE00000003FE00000003FC00000007FC00000007F8000000
0FF00000000FF00000001FE00000001FC00000003F800000007F00000000FE00000000FC
00000001F800000003F000000007E00000000FC00000001F800000001F000000003E0000
00007800000000F000000001E000000003C000000007800003000F000003001E00000300
3C000006007800000600F000000601E000000603C000000E038000000C070000001C0FFF
FFFFFC1FFFFFFFFC3FFFFFFFFC7FFFFFFFFCFFFFFFFFF8FFFFFFFFF8FFFFFFFFF828427A
C135>50 D<00000030000000000000780000000000007800000000000078000000000000
FC000000000000FC000000000001FE000000000001FE000000000001FE0000000000037F
0000000000037F0000000000077F8000000000063F8000000000063F80000000000C3FC0
000000000C1FC0000000001C1FE000000000180FE000000000180FE000000000300FF000
0000003007F0000000007007F8000000006003F8000000006003F800000000C003FC0000
0000C001FC00000000C001FC000000018000FE000000018000FE000000030000FF000000
0300007F0000000300007F0000000600003F8000000600003F8000000FFFFFFFC000000F
FFFFFFC000000FFFFFFFC000001800000FE000001800000FE000003800000FF000003000
0007F0000030000007F0000060000007F8000060000003F80000E0000003FC0000C00000
01FC0001C0000001FC0001C0000001FE0003C0000000FE0007E0000001FF001FF0000003
FF80FFFC00001FFFFCFFFC00001FFFFCFFFC00001FFFFC36367CB53E>97
D<FFFFFFFF8000FFFFFFFFF000FFFFFFFFFC0003FE0001FF0001FC00007F8001FC00003F
C001FC00001FE001FC00000FE001FC00000FF001FC000007F001FC000007F801FC000007
F801FC000007F801FC000007F801FC000007F801FC000007F801FC000007F001FC00000F
F001FC00000FE001FC00001FE001FC00003FC001FC00007F8001FC0000FE0001FC0007FC
0001FFFFFFE00001FFFFFFFC0001FC0000FF0001FC00001FC001FC00000FE001FC000007
F001FC000003F801FC000001FC01FC000001FE01FC000001FE01FC000000FE01FC000000
FF01FC000000FF01FC000000FF01FC000000FF01FC000000FF01FC000000FF01FC000000
FE01FC000001FE01FC000001FC01FC000003FC01FC000007F801FC00000FF001FC00003F
E003FE0000FFC0FFFFFFFFFF00FFFFFFFFFC00FFFFFFFFE00030347BB33A>I<000001FF
8000C000001FFFF001C000007FFFFE03C00001FF803F03C00007F80007C7C0001FE00001
EFC0003FC000007FC0007F0000003FC000FE0000001FC001FC0000000FC003F800000007
C007F000000007C00FF000000003C00FE000000003C01FE000000001C01FC000000001C0
3FC000000001C03F8000000000C07F8000000000C07F8000000000C07F8000000000007F
000000000000FF000000000000FF000000000000FF000000000000FF000000000000FF00
0000000000FF000000000000FF000000000000FF000000000000FF000000000000FF0000
000000007F0000000000007F8000000000007F8000000000007F8000000000C03F800000
0000C03FC000000000C01FC000000000C01FE000000001C00FE000000001800FF0000000
018007F0000000038003F8000000030001FC000000070000FE0000000E00007F0000001C
00003FC000003800001FE00000F0000007F80003E0000001FF801F800000007FFFFE0000
00001FFFF80000000001FFC0000032367BB43C>I<FFFFFFFFFFF0FFFFFFFFFFF0FFFFFF
FFFFF003FE00001FF001FC000003F001FC000001F801FC000000F801FC0000007801FC00
00003801FC0000003801FC0000001801FC0000001801FC0000001801FC0000001801FC00
03000C01FC0003000C01FC0003000C01FC0003000C01FC0003000001FC0007000001FC00
07000001FC000F000001FC003F000001FFFFFF000001FFFFFF000001FFFFFF000001FC00
3F000001FC000F000001FC0007000001FC0007000001FC0003000001FC0003000301FC00
03000301FC0003000301FC0003000601FC0000000601FC0000000601FC0000000601FC00
00000601FC0000000E01FC0000000E01FC0000000C01FC0000001C01FC0000001C01FC00
00003C01FC0000007C01FC000000FC01FC000003FC03FE00001FF8FFFFFFFFFFF8FFFFFF
FFFFF8FFFFFFFFFFF830347BB338>101 D<FFFFF801FFFFF0FFFFF801FFFFF0FFFFF801
FFFFF003FE000007FC0001FC000003F80001FC000003F80001FC000003F80001FC000003
F80001FC000003F80001FC000003F80001FC000003F80001FC000003F80001FC000003F8
0001FC000003F80001FC000003F80001FC000003F80001FC000003F80001FC000003F800
01FC000003F80001FC000003F80001FC000003F80001FC000003F80001FC000003F80001
FFFFFFFFF80001FFFFFFFFF80001FFFFFFFFF80001FC000003F80001FC000003F80001FC
000003F80001FC000003F80001FC000003F80001FC000003F80001FC000003F80001FC00
0003F80001FC000003F80001FC000003F80001FC000003F80001FC000003F80001FC0000
03F80001FC000003F80001FC000003F80001FC000003F80001FC000003F80001FC000003
F80001FC000003F80001FC000003F80001FC000003F80001FC000003F80003FE000007FC
00FFFFF801FFFFF0FFFFF801FFFFF0FFFFF801FFFFF034347BB33E>104
D<FFFFF8FFFFF8FFFFF803FE0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC
0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC
0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC
0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC
0003FE00FFFFF8FFFFF8FFFFF815347BB31E>I<FFFFFE000000FFFFFE000000FFFFFE00
000003FF0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000
000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000
000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000
000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000
000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000006001FC0000
006001FC0000006001FC0000006001FC0000006001FC000000C001FC000000C001FC0000
00C001FC000000C001FC000001C001FC000001C001FC000003C001FC000003C001FC0000
07C001FC00000FC001FC00001FC001FC00007F8003FE0003FF80FFFFFFFFFF80FFFFFFFF
FF80FFFFFFFFFF802B347BB334>108 D<FFFC00000FFFF0FFFE00000FFFF0FFFF00000F
FFF001FF000001FF8001FF8000007E0001BFC000003C00019FE000001800019FE0000018
00018FF0000018000187F8000018000187FC000018000183FC000018000181FE00001800
0180FF000018000180FF0000180001807F8000180001803FC000180001801FE000180001
801FE000180001800FF0001800018007F8001800018007F8001800018003FC0018000180
01FE001800018000FF001800018000FF0018000180007F8018000180003FC01800018000
3FC018000180001FE018000180000FF0180001800007F8180001800007F8180001800003
FC180001800001FE180001800001FF180001800000FF1800018000007F9800018000003F
D800018000003FD800018000001FF800018000000FF8000180000007F8000180000007F8
000180000003F8000180000001F80003C0000001F80007E0000000F8001FF80000007800
FFFF0000003800FFFF0000003800FFFF000000180034347BB33E>110
D<FFFFFFFF0000FFFFFFFFE000FFFFFFFFFC0003FE0003FE0001FC00007F8001FC00001F
C001FC00000FE001FC00000FF001FC000007F001FC000007F801FC000003F801FC000003
FC01FC000003FC01FC000003FC01FC000003FC01FC000003FC01FC000003FC01FC000003
FC01FC000003F801FC000007F801FC000007F001FC00000FE001FC00000FE001FC00003F
C001FC00007F0001FC0003FE0001FFFFFFF80001FFFFFFC00001FC0000000001FC000000
0001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC000000
0001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC000000
0001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC000000
0003FE00000000FFFFF8000000FFFFF8000000FFFFF80000002E347BB338>112
D<000003FF00000000003FFFF000000000FE01FC00000003F0003F0000000FC0000FC000
001F800007E000007F000003F80000FE000001FC0001FC000000FE0001F80000007E0003
F00000003F0007F00000003F800FE00000001FC00FE00000001FC01FC00000000FE01FC0
0000000FE03F8000000007F03F8000000007F07F8000000007F87F8000000007F87F8000
000007F87F0000000003F8FF0000000003FCFF0000000003FCFF0000000003FCFF000000
0003FCFF0000000003FCFF0000000003FCFF0000000003FCFF0000000003FCFF00000000
03FCFF0000000003FC7F0000000003F87F0000000003F87F8000000007F87F8000000007
F83F8000000007F03F8000000007F01FC00000000FE01FC00000000FE00FE00000001FC0
0FE00000001FC007F000FC003F8003F003FF003F0003F80703807F0001FC0E01C0FE0000
FE0C00C1FC00007F0C00E3F800001F8C0077E000000FCC007FC0000003FE003F00000000
FF01FC000000003FFFF8000C000003FF3C000C000000003C000C000000001E001C000000
001E001C000000001F003C000000001F807C000000000FC0F8000000000FFFF800000000
0FFFF80000000007FFF00000000007FFF00000000003FFE00000000003FFC00000000000
FF8000000000003E0036447BB440>I<FFFFFFFC000000FFFFFFFF800000FFFFFFFFF000
0003FE000FFC000001FC0000FE000001FC00007F800001FC00001FC00001FC00001FE000
01FC00000FE00001FC00000FF00001FC000007F00001FC000007F80001FC000007F80001
FC000007F80001FC000007F80001FC000007F80001FC000007F80001FC000007F00001FC
00000FF00001FC00000FE00001FC00001FC00001FC00003F800001FC00007F000001FC00
01FC000001FC000FF0000001FFFFFFC0000001FFFFFF00000001FC001FE0000001FC0003
F0000001FC0001FC000001FC0000FE000001FC00007E000001FC00007F000001FC00007F
000001FC00003F800001FC00003F800001FC00003F800001FC00003F800001FC00003F80
0001FC00003FC00001FC00003FC00001FC00003FC00001FC00003FC00001FC00003FC000
01FC00003FC00601FC00003FE00601FC00001FE00601FC00001FE00E03FE00000FF00CFF
FFF80007F01CFFFFF80003F838FFFFF80000FFF000000000001FC037357BB33D>I<000F
F00180007FFE038001FFFF838007F007E7800FC000FF801F00007F803E00003F803E0000
1F807C00000F807C00000780F800000780F800000380F800000380F800000380F8000001
80FC00000180FC00000180FE000000007F000000007F800000007FE00000003FFE000000
1FFFF000001FFFFF00000FFFFFE00003FFFFF80001FFFFFC00007FFFFE000007FFFF0000
007FFF80000007FFC00000007FC00000003FE00000000FE000000007F000000007F00000
0003F0C0000003F0C0000001F0C0000001F0C0000001F0E0000001F0E0000001F0E00000
01E0F0000003E0F8000003C0F8000007C0FE00000F80FF00001F00FFC0003E00F3FC00FC
00E0FFFFF800E01FFFE000C003FF000024367BB42E>I<7FFFFFFFFFFFE07FFFFFFFFFFF
E07FFFFFFFFFFFE07F8003FE001FE07C0001FC0003E0780001FC0001E0700001FC0000E0
700001FC0000E0600001FC000060E00001FC000070E00001FC000070E00001FC000070C0
0001FC000030C00001FC000030C00001FC000030C00001FC000030C00001FC000030C000
01FC000030000001FC000000000001FC000000000001FC000000000001FC000000000001
FC000000000001FC000000000001FC000000000001FC000000000001FC000000000001FC
000000000001FC000000000001FC000000000001FC000000000001FC000000000001FC00
0000000001FC000000000001FC000000000001FC000000000001FC000000000001FC0000
00000001FC000000000001FC000000000001FC000000000001FC000000000001FC000000
000001FC000000000001FC000000000001FC000000000001FC000000000003FE00000000
0007FF0000000007FFFFFF00000007FFFFFF00000007FFFFFF000034347CB33C>I<FFFF
F8000FFFF0FFFFF8000FFFF0FFFFF8000FFFF003FE000001FF8001FC0000007E0001FC00
00003C0001FC000000180001FC000000180001FC000000180001FC000000180001FC0000
00180001FC000000180001FC000000180001FC000000180001FC000000180001FC000000
180001FC000000180001FC000000180001FC000000180001FC000000180001FC00000018
0001FC000000180001FC000000180001FC000000180001FC000000180001FC0000001800
01FC000000180001FC000000180001FC000000180001FC000000180001FC000000180001
FC000000180001FC000000180001FC000000180001FC000000180001FC000000180001FC
000000180001FC000000180001FC000000380000FE000000300000FE000000300000FE00
00007000007E0000006000007F000000E000003F800001C000001F800003C000000FC000
0780000007E0000F00000003F8003E00000001FE01FC000000007FFFF0000000001FFFC0
0000000001FE00000034357BB33E>I<FFFFE000003FFFFFFFE000003FFFFFFFE000003F
FF07FE0000000FF803FC00000007E003FC00000003C001FE000000038001FE0000000380
00FE000000030000FF0000000300007F0000000600007F8000000600003F8000000C0000
3F8000000C00003FC000001C00001FC000001800001FE000001800000FE000003000000F
F0000030000007F0000060000007F0000060000007F80000E0000003F80000C0000003FC
0000C0000001FC000180000001FE000180000000FE000300000000FE000300000000FF00
07000000007F0006000000007F8006000000003F800C000000003FC00C000000001FC018
000000001FC018000000001FE038000000000FE030000000000FF0300000000007F06000
00000007F8600000000003F8C00000000003F8C00000000003FDC00000000001FD800000
000001FF800000000000FF000000000000FF0000000000007E0000000000007E00000000
00007E0000000000003C0000000000003C0000000000001800000038357DB33E>I<0000
00000E00000000003F0000000000FF0000000001FF8000000007FF000000001FFF000000
003FFE00000000FFE000000003FF0000000007F8000000000F80000000000C0000000000
00000000000000000000000000000000000000000000000000000000000000000000FFFF
FFFFFFF0FFFFFFFFFFF0FFFFFFFFFFF003FE00001FF001FC000003F001FC000001F801FC
000000F801FC0000007801FC0000003801FC0000003801FC0000001801FC0000001801FC
0000001801FC0000001801FC0003000C01FC0003000C01FC0003000C01FC0003000C01FC
0003000001FC0007000001FC0007000001FC000F000001FC003F000001FFFFFF000001FF
FFFF000001FFFFFF000001FC003F000001FC000F000001FC0007000001FC0007000001FC
0003000001FC0003000301FC0003000301FC0003000301FC0003000601FC0000000601FC
0000000601FC0000000601FC0000000601FC0000000E01FC0000000E01FC0000000C01FC
0000001C01FC0000001C01FC0000003C01FC0000007C01FC000000FC01FC000003FC03FE
00001FF8FFFFFFFFFFF8FFFFFFFFFFF8FFFFFFFFFFF830467BC538>233
D E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref)/Author ()/Keywords () /DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -136 -396
a
SDict begin H.S end
 -136 -396 a -136 -396 a
SDict begin H.R end
 -136 -396 a -136 -396 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -136
-396 a 0 TeXcolorgray -128 -299 a Fm(\351preuve)36 b(pra)-8
b(tique)36 b(blanche)f(2022)2073 b(nsi)33 b Fl(T)-8 b(erminale)p
-128 -260 4252 4 v Black 0 TeXcolorgray -128 -180 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -128
-180 a -128 -180 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -128 -180 a -128 -180 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -128 -180
a -128 -180 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -128 -180 a -128 -180 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -128 -180 a -128
-180 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -128 -180 a -128 -180 a
SDict begin H.S end
 -128 -180 a -128 -180
a
SDict begin 14.5 H.A end
 -128 -180 a -128 -180 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -128 -180 a 0 TeXcolorgray
0 TeXcolorgray 1526 -80 945 9 v 1759 40 a Fk(Sujet)52
b(4)p 1526 111 V -128 281 a Fj(q)33 b Fi(Exercice)j(1)d
Fl(:)f Fh(Conversion)i(du)h(binair)-5 b(e)33 b(vers)i(le)g(d\351)-5
b(cimal)-128 401 y Fl(Ecrire)36 b(une)f(fonction)f Fg
(binaire_vers_decimal)41 b Fl(qui)34 b(prend)i(en)g(param\350tre)f(une)
g(c)m(ha\356ne)h(de)f(caract\350res)i(com-)-128 522 y(p)s(os\351e)28
b(uniquemen)m(t)f(de)g("0")f(et)h(de)g("1")f(et)h(ren)m(v)m(oie)g(l'en)
m(tier)f(a)m(y)m(an)m(t)i(cette)f(c)m(ha\356ne)g(de)g(caract\350res)h
(comme)d(\351criture)-128 642 y(binaire.)e(P)m(ar)g(exemple,)h
Fg(binaire_vers_decimal\("10010)q(11"\))30 b Fl(ren)m(v)m(oie)24
b(75.)f(En)h(e\033et)g(:)f Ff(2)3316 606 y Fe(6)3359
642 y Ff(+)s(2)3487 606 y Fe(3)3530 642 y Ff(+)s(2)3658
606 y Fe(1)3701 642 y Ff(+)s(2)3829 606 y Fe(0)3896 642
y Ff(=)28 b(75)p Fl(.)-128 762 y Fd(Exemples)37 b(:)-128
832 y
SDict begin H.S end
 -128 832 a -128 832 a
SDict begin 14.5 H.A end
 -128 832 a -128 832 a
SDict begin [/View [/XYZ H.V]/Dest (lstlisting.-1) cvn /DEST pdfmark
end
 -128
832 a 0.95 TeXcolorgray 128 849 4025 29 v 0 TeXcolorgray
0.95 TeXcolorgray 0 TeXcolorgray 128 849 4 29 v 128 824
29 4 v 156 824 3969 4 v 4125 824 29 4 v 4149 849 4 29
v 0.95 TeXcolorgray 131 962 25 113 v 0 TeXcolorgray 0.95
TeXcolorgray 128 962 4 113 v 0 TeXcolorgray 128 962 V
0.95 TeXcolorgray 156 962 3969 113 v 0 TeXcolorgray 0.95
TeXcolorgray 4124 962 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray
4149 962 4 113 v 0 TeXcolorgray 4149 962 V 156 928 a
SDict begin H.S end

156 928 a 156 928 a
SDict begin 13.6 H.A end
 156 928 a 156 928 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.1) cvn /DEST pdfmark
end
 156 928 a -110
w Fc(1)70 b Fb(>)-14 b(>)g(>)59 b(b)10 b(i)g(n)g(a)g(i)g(r)g(e)g(_)g(v)
g(e)g(r)g(s)g(_)g(d)g(e)g(c)g(i)g(m)g(a)g(l)25 b(\()14
b(")f(1)8 b(0)g(0)g(0)g(0)g(0)g(0)13 b(")h(\))p 0.95
TeXcolorgray 131 1075 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray
128 1075 4 113 v 0 TeXcolorgray 128 1075 V 0.95 TeXcolorgray
156 1075 3969 113 v 0 TeXcolorgray 0.95 TeXcolorgray
4124 1075 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4149
1075 4 113 v 0 TeXcolorgray 4149 1075 V 156 1041 a
SDict begin H.S end
 156
1041 a 156 1041 a
SDict begin 13.6 H.A end
 156 1041 a 156 1041 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.2) cvn /DEST pdfmark
end
 156 1041 a -110
w Fc(2)90 b Fb(6)6 b(4)p 0.95 TeXcolorgray 131 1187 25
113 v 0 TeXcolorgray 0.95 TeXcolorgray 128 1187 4 113
v 0 TeXcolorgray 128 1187 V 0.95 TeXcolorgray 156 1187
3969 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4124 1187
25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4149 1187 4
113 v 0 TeXcolorgray 4149 1187 V 156 1154 a
SDict begin H.S end
 156 1154
a 156 1154 a
SDict begin 13.6 H.A end
 156 1154 a 156 1154 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.3) cvn /DEST pdfmark
end
 156 1154 a -110 w
Fc(3)70 b Fb(>)-14 b(>)g(>)59 b(b)10 b(i)g(n)g(a)g(i)g(r)g(e)g(_)g(v)g
(e)g(r)g(s)g(_)g(d)g(e)g(c)g(i)g(m)g(a)g(l)25 b(\()14
b(")f(1)8 b(1)g(1)g(1)g(0)g(1)g(0)13 b(")h(\))p 0.95
TeXcolorgray 131 1300 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray
128 1300 4 113 v 0 TeXcolorgray 128 1300 V 0.95 TeXcolorgray
156 1300 3969 113 v 0 TeXcolorgray 0.95 TeXcolorgray
4124 1300 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4149
1300 4 113 v 0 TeXcolorgray 4149 1300 V 156 1266 a
SDict begin H.S end
 156
1266 a 156 1266 a
SDict begin 13.6 H.A end
 156 1266 a 156 1266 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.4) cvn /DEST pdfmark
end
 156 1266 a -110
w Fc(4)91 b Fb(1)7 b(2)g(2)p 0.95 TeXcolorgray 131 1413
25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 128 1413 4
113 v 0 TeXcolorgray 128 1413 V 0.95 TeXcolorgray 156
1413 3969 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4124
1413 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4149 1413
4 113 v 0 TeXcolorgray 4149 1413 V 156 1379 a
SDict begin H.S end
 156 1379
a 156 1379 a
SDict begin 13.6 H.A end
 156 1379 a 156 1379 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.5) cvn /DEST pdfmark
end
 156 1379 a -110 w
Fc(5)70 b Fb(>)-14 b(>)g(>)59 b(b)10 b(i)g(n)g(a)g(i)g(r)g(e)g(_)g(v)g
(e)g(r)g(s)g(_)g(d)g(e)g(c)g(i)g(m)g(a)g(l)25 b(\()14
b(")f(1)8 b(1)g(0)g(0)g(1)g(1)g(0)g(0)14 b(")h(\))p 0.95
TeXcolorgray 131 1526 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray
128 1526 4 113 v 0 TeXcolorgray 128 1526 V 0.95 TeXcolorgray
156 1526 3969 113 v 0 TeXcolorgray 0.95 TeXcolorgray
4124 1526 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4149
1526 4 113 v 0 TeXcolorgray 4149 1526 V 156 1492 a
SDict begin H.S end
 156
1492 a 156 1492 a
SDict begin 13.6 H.A end
 156 1492 a 156 1492 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.6) cvn /DEST pdfmark
end
 156 1492 a -110
w Fc(6)91 b Fb(2)7 b(0)g(4)p 0.95 TeXcolorgray 128 1554
4025 29 v 0 TeXcolorgray 0.95 TeXcolorgray 0 TeXcolorgray
128 1554 4 29 v 129 1554 29 4 v 156 1554 3969 4 v 4125
1554 29 4 v 4149 1554 4 29 v 0 TeXcolorgray 0 TeXcolorgray
-128 1744 a Fj(q)33 b Fi(Exercice)j(2)d Fl(:)f Fh(S\351p)-5
b(ar)g(ation)34 b(des)h(0)f(et)h(des)g(1)f(dans)g(une)h(liste)-128
1864 y Fl(On)e(souhaite)e(\351crire)h(une)h(fonction)e
Fg(separe)j Fl(qui)d(prend)i(en)g(argumen)m(t)f(une)g(liste)f(comp)s
(os\351e)i(uniquemen)m(t)f(de)h(0)-128 1984 y(et)i(de)f(1)g(et)h(mo)s
(di\034e)d(cette)j(liste)e(de)i(fa\347on)f(\340)g(ranger)g(les)g(0)g
(en)g(d\351but)h(de)g(liste)e(et)h(les)h(1)e(\340)h(la)f(\034n.)i(P)m
(ar)f(exemple,)-128 2105 y Fg(separe\([1,0,0,1,0,1,0]\))39
b Fl(doit)31 b(ren)m(v)m(o)m(y)m(er)k Fg([0,0,0,0,1,1,1])p
Fl(.)h(P)m(our)d(cela)f(on)h(prop)s(ose)f(l'algorithme)d(sui-)-128
2225 y(v)-5 b(an)m(t)33 b(:)-128 2242 y
SDict begin H.S end
 -128 2242 a -128
2242 a
SDict begin 14.5 H.A end
 -128 2242 a -128 2242 a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 -128 2242 a 0 TeXcolorgray
-8 2380 a Fl(1.)p 0 TeXcolorgray 48 w(on)d(cr\351e)g(deux)g(indices)f
Fg(i)h Fl(et)f Fg(j)p Fl(,)h(tous)g(les)f(nom)m(bres)h(situ\351s)f
Fh(avant)39 b Fg(i)29 b Fl(son)m(t)h(des)g(0)f(et)h(tous)g(ceux)g
(situ\351s)g Fh(apr)-5 b(\350s)116 2500 y Fg(j)33 b Fl(son)m(t)g(des)h
(1.)-128 2539 y
SDict begin H.S end
 -128 2539 a -128 2539 a
SDict begin 14.5 H.A end
 -128 2539 a -128
2539 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 -128 2539 a 0 TeXcolorgray -8 2655 a Fl(2.)p 0
TeXcolorgray 48 w(T)-8 b(an)m(t)36 b(que)g Fg(i)52 b(<)f(j)36
b Fl(certaines)f(v)-5 b(aleurs)35 b(ne)h(son)m(t)g(pas)g(class\351es,)g
(si)f(la)f(v)-5 b(aleur)35 b(est)h(un)f(0,)h(on)f(d\351cale)g(l'indice)
116 2775 y Fg(i)e Fl(\340)f(droite)g(sinon)g(c'est)i(un)f(1)f(et)h
(donc)g(on)f(l'\351c)m(hange)h(a)m(v)m(ec)h(l'indice)d
Fg(j)i Fl(et)g(on)f(dimin)m(ue)f Fg(j)-128 2882 y
SDict begin H.S end
 -128
2882 a -128 2882 a
SDict begin 14.5 H.A end
 -128 2882 a -128 2882 a
SDict begin [/View [/XYZ H.V]/Dest (lstlisting.-2) cvn /DEST pdfmark
end
 -128 2882
a 0.95 TeXcolorgray 128 2896 4025 29 v 0 TeXcolorgray
0.95 TeXcolorgray 0 TeXcolorgray 128 2896 4 29 v 128
2871 29 4 v 156 2871 3969 4 v 4125 2871 29 4 v 4149 2896
4 29 v 0.95 TeXcolorgray 131 3009 25 113 v 0 TeXcolorgray
0.95 TeXcolorgray 128 3009 4 113 v 0 TeXcolorgray 128
3009 V 0.95 TeXcolorgray 156 3009 3969 113 v 0 TeXcolorgray
0.95 TeXcolorgray 4124 3009 25 113 v 0 TeXcolorgray 0.95
TeXcolorgray 4149 3009 4 113 v 0 TeXcolorgray 4149 3009
V 156 2975 a
SDict begin H.S end
 156 2975 a 156 2975 a
SDict begin 13.6 H.A end
 156 2975 a 156 2975
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.1) cvn /DEST pdfmark
end
 156 2975 a -110 w Fc(1)306 b Fa(d)5 b(e)g(f)72 b Fb(s)11
b(e)g(p)g(a)g(r)g(e)23 b(\()28 b(l)18 b(i)h(s)f(t)g(e)28
b(\))c(:)p 0.95 TeXcolorgray 131 3122 25 113 v 0 TeXcolorgray
0.95 TeXcolorgray 128 3122 4 113 v 0 TeXcolorgray 128
3122 V 0.95 TeXcolorgray 156 3122 3969 113 v 0 TeXcolorgray
0.95 TeXcolorgray 4124 3122 25 113 v 0 TeXcolorgray 0.95
TeXcolorgray 4149 3122 4 113 v 0 TeXcolorgray 4149 3122
V 156 3088 a
SDict begin H.S end
 156 3088 a 156 3088 a
SDict begin 13.6 H.A end
 156 3088 a 156 3088
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.2) cvn /DEST pdfmark
end
 156 3088 a -110 w Fc(2)315 b Fb(i)61 b(=)70 b(.)24
b(.)f(.)g(.)p 0.95 TeXcolorgray 131 3235 25 113 v 0 TeXcolorgray
0.95 TeXcolorgray 128 3235 4 113 v 0 TeXcolorgray 128
3235 V 0.95 TeXcolorgray 156 3235 3969 113 v 0 TeXcolorgray
0.95 TeXcolorgray 4124 3235 25 113 v 0 TeXcolorgray 0.95
TeXcolorgray 4149 3235 4 113 v 0 TeXcolorgray 4149 3235
V 156 3201 a
SDict begin H.S end
 156 3201 a 156 3201 a
SDict begin 13.6 H.A end
 156 3201 a 156 3201
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.3) cvn /DEST pdfmark
end
 156 3201 a -110 w Fc(3)314 b Fb(j)59 b(=)70 b(.)24
b(.)f(.)g(.)p 0.95 TeXcolorgray 131 3348 25 113 v 0 TeXcolorgray
0.95 TeXcolorgray 128 3348 4 113 v 0 TeXcolorgray 128
3348 V 0.95 TeXcolorgray 156 3348 3969 113 v 0 TeXcolorgray
0.95 TeXcolorgray 4124 3348 25 113 v 0 TeXcolorgray 0.95
TeXcolorgray 4149 3348 4 113 v 0 TeXcolorgray 4149 3348
V 156 3314 a
SDict begin H.S end
 156 3314 a 156 3314 a
SDict begin 13.6 H.A end
 156 3314 a 156 3314
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.4) cvn /DEST pdfmark
end
 156 3314 a -110 w Fc(4)307 b Fa(w)6 b(h)g(i)g(l)g(e)84
b Fb(.)23 b(.)g(.)h(.)92 b(:)p 0.95 TeXcolorgray 131
3460 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 128 3460
4 113 v 0 TeXcolorgray 128 3460 V 0.95 TeXcolorgray 156
3460 3969 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4124
3460 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4149 3460
4 113 v 0 TeXcolorgray 4149 3460 V 156 3427 a
SDict begin H.S end
 156 3427
a 156 3427 a
SDict begin 13.6 H.A end
 156 3427 a 156 3427 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.5) cvn /DEST pdfmark
end
 156 3427 a -110 w
Fc(5)523 b Fa(i)5 b(f)77 b Fb(l)18 b(i)h(s)f(t)g(e)33
b([)c(i)14 b(])o(=)o(=)80 b(.)25 b(.)g(.)g(.)g(.)g(:)p
0.95 TeXcolorgray 131 3573 25 113 v 0 TeXcolorgray 0.95
TeXcolorgray 128 3573 4 113 v 0 TeXcolorgray 128 3573
V 0.95 TeXcolorgray 156 3573 3969 113 v 0 TeXcolorgray
0.95 TeXcolorgray 4124 3573 25 113 v 0 TeXcolorgray 0.95
TeXcolorgray 4149 3573 4 113 v 0 TeXcolorgray 4149 3573
V 156 3540 a
SDict begin H.S end
 156 3540 a 156 3540 a
SDict begin 13.6 H.A end
 156 3540 a 156 3540
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.6) cvn /DEST pdfmark
end
 156 3540 a -110 w Fc(6)749 b Fb(i)93 b(.)25 b(.)f(.)h(.)f(.)p
0.95 TeXcolorgray 131 3686 25 113 v 0 TeXcolorgray 0.95
TeXcolorgray 128 3686 4 113 v 0 TeXcolorgray 128 3686
V 0.95 TeXcolorgray 156 3686 3969 113 v 0 TeXcolorgray
0.95 TeXcolorgray 4124 3686 25 113 v 0 TeXcolorgray 0.95
TeXcolorgray 4149 3686 4 113 v 0 TeXcolorgray 4149 3686
V 156 3652 a
SDict begin H.S end
 156 3652 a 156 3652 a
SDict begin 13.6 H.A end
 156 3652 a 156 3652
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.7) cvn /DEST pdfmark
end
 156 3652 a -110 w Fc(7)524 b Fa(e)6 b(l)g(s)g(e)19
b Fb(:)p 0.95 TeXcolorgray 131 3799 25 113 v 0 TeXcolorgray
0.95 TeXcolorgray 128 3799 4 113 v 0 TeXcolorgray 128
3799 V 0.95 TeXcolorgray 156 3799 3969 113 v 0 TeXcolorgray
0.95 TeXcolorgray 4124 3799 25 113 v 0 TeXcolorgray 0.95
TeXcolorgray 4149 3799 4 113 v 0 TeXcolorgray 4149 3799
V 156 3765 a
SDict begin H.S end
 156 3765 a 156 3765 a
SDict begin 13.6 H.A end
 156 3765 a 156 3765
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.8) cvn /DEST pdfmark
end
 156 3765 a -110 w Fc(8)753 b Fb(l)19 b(i)f(s)g(t)g(e)33
b([)d(i)f(])g(,)k(l)19 b(i)f(s)g(t)h(e)33 b([)28 b(j)f(])61
b(=)p 0.95 TeXcolorgray 131 3912 25 113 v 0 TeXcolorgray
0.95 TeXcolorgray 128 3912 4 113 v 0 TeXcolorgray 128
3912 V 0.95 TeXcolorgray 156 3912 3969 113 v 0 TeXcolorgray
0.95 TeXcolorgray 4124 3912 25 113 v 0 TeXcolorgray 0.95
TeXcolorgray 4149 3912 4 113 v 0 TeXcolorgray 4149 3912
V 156 3878 a
SDict begin H.S end
 156 3878 a 156 3878 a
SDict begin 13.6 H.A end
 156 3878 a 156 3878
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.9) cvn /DEST pdfmark
end
 156 3878 a -110 w Fc(9)748 b Fb(j)92 b(.)25 b(.)g(.)g(.)g(.)h(.)p
0.95 TeXcolorgray 128 3940 4025 29 v 0 TeXcolorgray 0.95
TeXcolorgray 0 TeXcolorgray 128 3940 4 29 v 129 3940
29 4 v 156 3940 3969 4 v 4125 3940 29 4 v 4149 3940 4
29 v 0 TeXcolorgray 0 TeXcolorgray -128 4082 a Fd(Exemple)36
b(:)-128 4151 y
SDict begin H.S end
 -128 4151 a -128 4151 a
SDict begin 14.5 H.A end
 -128 4151 a -128
4151 a
SDict begin [/View [/XYZ H.V]/Dest (lstlisting.-3) cvn /DEST pdfmark
end
 -128 4151 a 0.95 TeXcolorgray 128 4169 4025 29
v 0 TeXcolorgray 0.95 TeXcolorgray 0 TeXcolorgray 128
4169 4 29 v 128 4144 29 4 v 156 4144 3969 4 v 4125 4144
29 4 v 4149 4169 4 29 v 0.95 TeXcolorgray 131 4282 25
113 v 0 TeXcolorgray 0.95 TeXcolorgray 128 4282 4 113
v 0 TeXcolorgray 128 4282 V 0.95 TeXcolorgray 156 4282
3969 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4124 4282
25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4149 4282 4
113 v 0 TeXcolorgray 4149 4282 V 156 4248 a
SDict begin H.S end
 156 4248
a 156 4248 a
SDict begin 13.6 H.A end
 156 4248 a 156 4248 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.1) cvn /DEST pdfmark
end
 156 4248 a -110 w
Fc(1)70 b Fb(>)-14 b(>)g(>)67 b(l)19 b(i)f(s)g(t)h(e)64
b(=)c([)13 b(0)27 b(,)13 b(1)28 b(,)13 b(1)27 b(,)13
b(1)27 b(,)13 b(0)27 b(,)13 b(0)27 b(,)13 b(1)28 b(,)13
b(0)27 b(,)13 b(1)g(])p 0.95 TeXcolorgray 131 4394 25
113 v 0 TeXcolorgray 0.95 TeXcolorgray 128 4394 4 113
v 0 TeXcolorgray 128 4394 V 0.95 TeXcolorgray 156 4394
3969 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4124 4394
25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4149 4394 4
113 v 0 TeXcolorgray 4149 4394 V 156 4361 a
SDict begin H.S end
 156 4361
a 156 4361 a
SDict begin 13.6 H.A end
 156 4361 a 156 4361 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.2) cvn /DEST pdfmark
end
 156 4361 a -110 w
Fc(2)70 b Fb(>)-14 b(>)g(>)60 b(s)11 b(e)g(p)g(a)g(r)g(e)23
b(\()28 b(l)18 b(i)h(s)f(t)g(e)28 b(\))p 0.95 TeXcolorgray
131 4507 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 128
4507 4 113 v 0 TeXcolorgray 128 4507 V 0.95 TeXcolorgray
156 4507 3969 113 v 0 TeXcolorgray 0.95 TeXcolorgray
4124 4507 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4149
4507 4 113 v 0 TeXcolorgray 4149 4507 V 156 4474 a
SDict begin H.S end
 156
4474 a 156 4474 a
SDict begin 13.6 H.A end
 156 4474 a 156 4474 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.3) cvn /DEST pdfmark
end
 156 4474 a -110
w Fc(3)70 b Fb(>)-14 b(>)g(>)67 b(l)19 b(i)f(s)g(t)h(e)p
0.95 TeXcolorgray 131 4620 25 113 v 0 TeXcolorgray 0.95
TeXcolorgray 128 4620 4 113 v 0 TeXcolorgray 128 4620
V 0.95 TeXcolorgray 156 4620 3969 113 v 0 TeXcolorgray
0.95 TeXcolorgray 4124 4620 25 113 v 0 TeXcolorgray 0.95
TeXcolorgray 4149 4620 4 113 v 0 TeXcolorgray 4149 4620
V 156 4586 a
SDict begin H.S end
 156 4586 a 156 4586 a
SDict begin 13.6 H.A end
 156 4586 a 156 4586
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.4) cvn /DEST pdfmark
end
 156 4586 a -110 w Fc(4)97 b Fb([)13 b(0)27 b(,)13 b(0)28
b(,)13 b(0)27 b(,)13 b(0)27 b(,)13 b(1)27 b(,)13 b(1)28
b(,)13 b(1)27 b(,)13 b(1)27 b(,)13 b(1)g(])p 0.95 TeXcolorgray
128 4649 4025 29 v 0 TeXcolorgray 0.95 TeXcolorgray 0
TeXcolorgray 128 4649 4 29 v 129 4649 29 4 v 156 4649
3969 4 v 4125 4649 29 4 v 4149 4649 4 29 v 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
