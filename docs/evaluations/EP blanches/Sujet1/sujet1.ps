%!PS-Adobe-2.0
%%Creator: dvips(k) 2021.1 (TeX Live 2022/dev)  Copyright 2021 Radical Eye Software
%%Title: sujet1.dvi
%%CreationDate: Wed Aug 31 05:13:59 2022
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: Dingbats
%%DocumentPaperSizes: a4
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o
%+ "/home/fenarius/Travail/Cours/NSITerminale/docs/evaluations/EP blanches/Sujet1/sujet1.ps"
%+ "/home/fenarius/Travail/Cours/NSITerminale/docs/evaluations/EP blanches/Sujet1/sujet1.dvi"
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2022.08.31:0913
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 2019-2022 The LaTeX Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
/color.sc { } def
TeXDict begin
/TeXcolorseparation { setcolor } def
end
true setglobal
/pdf.globaldict 4 dict def
false setglobal
/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 317 2021-11-16 20:47:25Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.41, 2021/11/16
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
revision 952 gt 
{
    systemdict /.setopacityalpha known not 
      { 
         (\n\n%%%% WARNING: Transparency operations ignored - need to use -dALLOWPSTRANSPARENCY\n\n) print flush
         /.setopacityalpha { pop } bind def 
         /.setshapealpha { pop } bind def 
         /.setfillconstantalpha { pop } bind def 
         /.setstrokeconstantalpha { pop } bind def 
      }
      {
        /.setopacityalpha /.setfillconstantalpha load def 
%        /.setblendmode { pop } def   %% works again    hv 20210825
        /.setshapealpha {dup .setfillconstantalpha .setstrokeconstantalpha true .setalphaisshape } def  
      } ifelse
}
{
  systemdict /.setopacityalpha known not 
  { 
    (\n\n%%%% WARNING: Transparency operations ignored - need to use -dNOSAFER\n\n) print flush
    /.setopacityalpha { pop } bind def 
    /.setshapealpha { pop } bind def 
  } if
} ifelse
%
%%<bool> .setalphaisshape -
%%    If true, the values set by setstrokeconstantalpha and setfillconstantalpha are interpreted as shape values. The initial value of the AIS flag is false. 
%
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/fill@Dict 30 dict def				% the fill dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/addCoors { 
  3 -1 roll 		% xA xB yB yA
  add			% xA xB yB+yA
  3 1 roll 		% yB+yA xA xB
  add			% yB+yA xA+xB
  exch                  % xA+xB yA+yB
} def
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (original)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
%
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  10 dict begin
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
  end
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  40 dict begin
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
    { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
  end % userdict
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  50 dict begin
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
  end % userdict
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/ArrowT { % like tikz
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
  w 2 mul /w exch def
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
%  w neg Inset neg rlineto % move to x=0 and inset
%  CLW SLW
%  1 0 0 setrgbcolor
  2 setlinejoin
  stroke
  0 0 moveto
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
%  5 dict begin
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
%  end
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid {
  40 dict begin 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul         %	\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  dup % run loop two times: lines and labels
  { i dx mul dup xGridOffset add y0 moveto % draw the lines
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  /i x1 def 
  GridDX div ceiling cvi 
  { i dx mul GridDX mul dup xGridOffset add y0 moveto % plot the labels
    b 0 gt 
      { gsave c i GridDX mul a cvs dup stringwidth pop /z2 ED  
        w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse exch GridDX div z2 2 div sub exch 
        rmoveto show grestore } if 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  dup % run loop two times: lines and labels
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  /i y1 def 
  GridDY div ceiling cvi
  { newpath i dy mul GridDY mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i GridDY mul a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse GridDY div b 2 div sub
      rmoveto show grestore } if 
    /i i h add def 
  } repeat 
  grestore 
  end
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /RotAngle ED 
  RotAngle Rot /RAngle [ RAngle dup RotAngle add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 4 2020-06-09 08:32:19Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 249 2021-09-14 10:22:55Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
  4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
  end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  1 dict begin
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
  end
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 291 2021-10-01 09:22:45Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 0.02,  2021/10/01
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
12 dict dup begin
/FontType 1 def
/FontName /PSTricksDotFont def
/FontInfo 9 dict dup begin
/version (001.000) def
/Notice (Timothy Van Zandt <tvz@Princeton.EDU>

This program can be redistributed and/or modified under the terms
of the LaTeX Project Public License Distributed from CTAN archives
in directory macros/latex/base/lppl.txt.

Modified by Etienne Riga  - Dec. 16, 1999
Modified by Etienne Riga  - 2005/01/01 (er) to add /Diamond, /SolidDiamond and /BoldDiamond
Modified by Herbert Voss (hv) - 2008/04/17 
Converted to OpenType by Marcel Krueger 2021
) def
/FullName (PSTricks Dots) def
/FamilyName (PSTricksDotFont) def
/Weight (Regular) def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put } for
dup 65 /BoldAdd put
dup 67 /BoldCircle put	% 67
dup 68 /BoldDiamond put
dup 69 /SolidOtimes put
dup 70 /BoldOctogon put
dup 71 /SolidHexagon put
dup 72 /BoldHexagon put
dup 73 /BoldBar put
dup 74 /SolidAsterisk put
dup 75 /BoldAsterisk put
dup 77 /BOplus put
dup 78 /BOtimes put
dup 80 /BoldPentagon put
dup 83 /BoldSquare put
dup 84 /BoldTriangle put
dup 88 /BoldMul put
dup 97 /Add put
dup 98 /Bullet put
dup 99 /Circle put
dup 100 /Diamond put
dup 101 /SolidOplus put
dup 102 /Octogon put
dup 103 /SolidOctogon put
dup 104 /Hexagon put
dup 105 /Bar put
dup 107 /Asterisk put
dup 108 /SolidDiamond put
dup 109 /Oplus put
dup 110 /Otimes put
dup 112 /Pentagon put
dup 113 /SolidPentagon put
dup 114 /SolidSquare put
dup 115 /Square put
dup 116 /Triangle put
dup 117 /SolidTriangle put
dup 120 /Mul put
readonly def
/FontBBox {-572 -743 572 743} def
end
currentfile eexec BAB431EA06BB0A1031E1AA11919E714AC69FC5B91315E2
3949B468EA8965C09E14B93FD8F0A9A9B4A0240775693C371C9F5E8CFB4752C5
B8C3907EB8B475C65DEE88EC0510BC599D0660C41C842A3CCA793376ECDB36BF
799EB8631B5A08846013BAF4256252AF16B24E3BEE4C45F8AE9AEC40351B49C3
CC0B1DFA717674CDC7A3BEA5CE689121348DBBD82720A92C2D68DB27F03F105D
87587E74605E01EDE24B0539FAACD5311070E7BE0BDC57182DA408ED060B7B6B
964AE3EED6C8F348F298B28987B635D1332B77CC33F0B6BF682193B93CE93416
64F638070894F299603700A95B876A3FE5CEFD5BD19928E5DB60E0FB25969A26
05A6651F04B60470D0CE8E37C50EF9350CE0A4EA9F5251F0E9A1B7ACEAE4DFF7
40578E61DA30D0C9067954E23DA81539D0601CCB3FB78040200CE8A1B1E2B4BE
E6BA8FC9121F04EB916D5F9D98C77AE10A51F451B440230C23077251E29FC6E4
2844FC17F11EE282266DEC3A15C96832E595773ADA1A48330AEE455DC4A2805A
C7C7CA085D16113F30AF3EFCFFE079C45CB512DBF81EBD6137314545CA6CE891
19B42A3518E28989CA7DB1DB6F28ED3CB0E9F227A023660A46D14CF05E197E23
3015D9046635F59924C00F5EBC3561132B94C23E91D3AA1EB997B9F486C8793C
E2B8B9224C2C13AEE4AF9AA6E2FF96FFE84223ED1A902C38AD739E0C863A3A37
0482E2F28EB620257113D8EFBE63FCCD181158CC92CFA474170798746B73808F
8D4CB2A16B5BED0ACE4673AACD1484A8CF1F437F58D478A2CFBDA394851AE87F
E8E488302B346131EE903FFF22B882624BD2EF1381761C1FE4BAD1E701CA9C4F
F34AC1E9F9EC27E673FA78703FFB2432FDCD62AE52DE02D55580636F347297C4
A74D04EB5FF11D31D3D04EB580E6C54F88A817049249B0749FAEBF78C4A3CE4A
3F375E7C57D35D8CCA7810BFC7C0F4D4F14F8A29EF000D2BA97AAB26D48D50D7
CFA8E3586105575D14DD80F3D2022373F802C98A78E465F7688C9952848876D4
D7BECAD0FAFBA4674944BEAFA75ED8A87873439FDA03B482FF60B84007FCA6C0
1A04B7C8BF346E30BB6D838EA08FAFF3A3D331527459C665264B9E07A7262419
E0AF9F0AB9897891BF0CB656FE222587FC8890C3FF9D848ED557732CBD2865E0
F4838A6C6E5D794F7781359855ABBD8B2BA63EF2190D930D20C74E9088BBB9BA
62865A174D03BF90A0959079C28DA220598AD0A960C66697A49513D3F152C306
0A9E3133F750EFCDD43E34492A65321EE3B08F904968BB642D3E46DFAF2697CF
52589695642631DEAC79C3B4DD9DE61885901D9465B538643F60FC1B46D83DC4
2D6AB7AEF088D43531C4CB5957A74FCEA04E4BB05B5AF68BCF316C62F7A26CB7
88C6CCFC7859DB9915626FEE3C95F6FA3777B3F6ACE5271BF3309B0A41AF9853
5866F4EBABF5CBFA2D3F411BFB2C3B66962102B183B281FABFF17CBE2A744CE6
A8CB6E1B3D624A68104A7E43F20483622B9C93D8803D71C5ABD930DA44DD6177
F6F411619A130954C54D3BDC24E66A4EE2B3F6C7EA40167FF6E21CA13DF3E903
3E88F8F46C5CDB75E816EA0235669625A772779079CABC8DA76AFBBBC1C15EF3
5695EB0FD46E34C3FE121CC29F7FDA3384B0F1292087CBCB9CBD7B2377AC0F76
5BE0CD3485F2FCD3C6C0012125C273B48900E5200008B21F6DB9F4D4E8027E7B
34265E1FFBC9666A2678CEBA46AE908BDADA630B135683D4F66934702F939912
EDFF3EE524B38F25A0E12239EA471DC4A90814D38747EEF125FA30BBA9998119
A1499E6E6BC26ED39814B64D04D500C2E14A062125A7E4AE9985BEDB6C4A800B
D37D8F13274B28F86D73600A165214E1A8F0F787C92B3ACFC274A34EE064732B
BAB298F0DD452B3DA4E230624FA5296C7ED8A464C5E7D31E0A9C88FD767D4C6F
E2348CE16CAAE803DBA21AF5B8A44ED8B92ADB9C07D422878C63EA6163DFFA5B
FD8AD97240D760FB6667DF08A0F16FB66B2934E64A39C0D82535FC1ABC3C28F6
DD83851928AE495312AFE7F0B7C3D0990D7725B54B0D8644C01CF2BD29340E92
FDCC5D221298669CBD1F842A1BF45D59D4BCC425E3D7FECB69AEF5FF54E86B80
A6011AA0ACD1D286F7BD2CC6F995355E214BEA9DA0696F3D436BAB29C2328173
4661158DBB87A777A8C0FECA5B1DEC07197BADE6B65EBC7152E119BD58204353
4C4793FA4566107EFFF912A0E03255C11824CD079923F7296DB156A8C9134BF4
E573795C7C720A3CDBFF693602A141D436B2F7495B01F6FBA43ED1CB444AEAD2
400638034AA4D95EF5849E61EF2068A4848A27FA16EC8931456000E61E1181BF
545AD271F9D10C60C6AE8616B12998B08270B9E29464DE2725F61EC431C7023D
FB012FFB2DB2EAA1C61C06519BCD8114331FF644B79E9E96E21720B38098D513
59BF4CA62716A9289C555C1B5C05D68F762B5B2E0B9BE7F67D9EFB20B8A0A898
4DE73C07853DAD10A8805E5844A36027E2AECF4F10CA66BFAFEC17DD1CC93373
547071168AF5018B0B6A40E606207ECFE146DE6F8881F969E06207A973DF290D
29E325B6D59F363A5F4105AFDDF24CD4FABAE1B5E784638F3EB2E67C88879F69
00101C3F6DF95D7F81E6E3FE732DCC175F1FEE41D87120F52AB5EA54FD2E1666
CFA5D665F9B97531D74B56CEB8A9E1417A58C1790ABEB68F2F1B49EEB34D24B2
855294A892EC5C92D090BB460AD8844E85E25094B7CE117F343A856F27CEEB36
1CC7AC29D4048E6ACC5947AE7FB937807AC29E65353D20A57E461AC33EEBC75C
24068278B586B33A5E534B1A9ABAAFF492250074EA4CF3EF0818D8F0BA0C7428
40BF46DFCC9711A0420413D0667C7361C8ED428BC510616C34AB28BCC9ABA6F2
43F08A2FCCFC5D1BAA77AE90BF0E296E2C3A99268D7906AE12CDCEA5CE8B5FC9
5A75526CC0B72C7E122C2ED67153BC9AE380DF04FE51E7B0C5AE4363D95DC730
AD0EF34542C179668A9D5807AA22256ADED921E8711E673C67CB5086D7563C98
2A6C681813E07A8E7440FE562EEF08661E1D9CB5761595B515DEC347F0DC84AA
1B3C272792F2D9B4B11C5EA50F7584C7D931BF5BA1A39F635C87CEC31BD22D64
10F7855D66EC86193FFA19ADD7880BCE5588D2322071D443F47D6B4F3F66CE68
4B87D99A5A0D375535D153353DA6E154FF78F458A671CBE1E7136C16435BF244
6E60705C79C82EB5D40934AD496FB08999EFC6E52E56C0106E39603F25D3B946
A7850B4A4EF56B1E5CA32021F191236EA0FB315DC37D708115765F85B668D051
D49167E374DFA9078D128E745F1583EF885F6614D0D1CE1F3F27571B5C68451F
38BDD4758A54A3C6F8ADB3DC20CE95DA5B22C77227CD8EA53C51A643250FA288
4DA7B6F3D93EA1C82B6639B6090352F6E4ACD6A478701D88F8591F71ECB15CEC
FE6FA0C4C049FE9F04612DEB944271F1EA167B2103D69C11E5B6C66CB8C859FE
8DBF7D2E4B26FDE68CFE085B61212906AB7B4E4DC2FB44E8B035DC6938B09632
5C2AFE3B1742756E1DDE8E2D16D957B07713C650928ABFD08BB5BA216086D699
797884E3D06F0096BDE68F929F9FCC4E5819320BF62AA75686A8EF7A11B33281
2477A82B9B0D3B71E8AD3CD41388A69C33B7A4482BF2345419DA669BB7544636
CEF7C14F8C55620724B05B7EDA33584D9CA46B697EFE6CF01B6152DAF28F42CD
DFABA3788B04D5A3AF493625E3387AFCAFE7EFDC62F4A31CA69E7563ECC5F919
91763C850EE7F7B6A979DB2955BA8E4BCA4039D2F083DB3B256F68BB34624CDE
2A745010D76C85300691A0DABBE33109721FAFF7C9BF7D9B2E0F1F9CF5C76676
02A9C95488976ED8956EC9C1B9A9F3CE3B0F7E2DF387DF831C855D9E21908376
BCEFB52FFBA0AD0F9B56CE4043643BC582750110B16399281C79183A8D693AD8
A961C6DE94A882D27A0D9806A5D0ACFC29180CC21E375BA98DAA4C6043EC4532
937C4870CB65365D2CF81C66A72841E189EE4BC12F8882AF0652D0EE3DA63D1F
010248A498F3809036D1FBB712F2D78CE71E0C9AA2BB3A55094E4FAAB574A474
5B153A3D4AD4ED347819033CD288FAD39E440D2FA03630F9529E50BF1E6A51CB
309A34CCCEAEE87C8B3DFDFB81A9B3F0D36DCA6AC69588F51F29BB83015E3244
5C666CC22DC85F7A86FD1D0311A8D8D1F399F87B2859E66C9432E8C14E04585C
A01642BEEAAA975AE4D7977D40FBC85D4B8F40646721A9F38E916C226EB2C045
04EEB6027C835EC0F0F8091EA0250404BE75563D44B40A5D67C1A122E9E9DF7A
5692F8902FDAEED37EB2C430AD36E021CF56CA560B77137710090D8685624CAD
9E6BFDF5BB2FF6147A65F164ED0490E1126D67FE1A93D5E77275FA925CE8666B
E8FF666F97E3101881467A955FDC9864C9B85E943918D4C22F84391D35DBBD14
2EE39F130DB83BA304C931113287A3F7CA042128135D9AF672319B1C3C1FBD59
80BE72F051D6A6FC34174C461A77F000F446E594CE046052A571505F0E4922EF
04A8185830D6D47E006F893973CE8740FC82F77CCD5B2CEF7DBAA9D2A0EFBFA3
2B0A73412A362977B01FCDC95FC8E0B920D884FF7E40FE9AFDB683776B95487B
F096B4BBBA2BED724ECE2CD766C8D83E28FD65924942AA4A3064AC3D5A322D86
3A4D41DBC2F5C6E21C2184CEECE1101A10F8290CBF0D4116EA1C1DB8988785FF
E50B066A4C21E99AA660872A5EEAC307C7794B303EE066C57594AE2389DBEA5E
85CDD9D314CF686811C2022E8E0EBBA0B699EB0405FD2426EA4D698CB4757B6C
53E65BB5D42C65C7A9DA515DA23CB3834C89F769154447BE2D92229016235658
4F40E982A14EB4E6BACC81313C8E0A74A19FD184B1364CA275FC6A62A8709428
BA35305F02331212B45B9268D582A8B638B430BD0A51C607D4C4FD862F0E591C
1A1273650BBE5DA16CE10C98F5209A7C998877BE8F57DEB4D9AA46CC2EF71588
0EDBD79F25594D516AD74C54762FD393D4810EBC8AAF10F821DCFE8D503B37D5
6AF14F0FA57DA3A3365EF38470C1F0BCD693378BA20DF34D263165841DF96F90
32FCB81A44BAF77D3C294697CC8CC971B555F94E768A275A154D63E71A1D6C67
CFDC729E86FB9315B9234D2AB1D6529BFD0D4C852C5438D368B350D8420DCD34
4A164EAC0AE99AC9A2D07A1F77D2E68255EC3F7448F10DABF969653D21590661
2B1DE5DF11BEFA41CECFB00C9A6A7AE3808009E41E2B933C6AA50E1E9BC8AE00
651C8AEFC9FCE6E647FB5D6032000CF87663510D97C12386227E58DD71FD4228
A070BE013F86155C46C8F96D3CF1DE07D60DA3D0E05C3B4A6B5FBAD168B06A50
30738754199245C8AF782F76C58A8F638A2D85CC51309C866729297E3CFC075D
6F9ABB484C5D1D307E06D6ADEFC769E5F51E389520288843F373B71B233E8B96
E59A7053D1D7E17972EDFCBD700A001EBE7759818EECC03353EB0B990EE6DA34
8C65B5092EF565AE325B00DFA892FF2E7217990F6020AEB57974D38E31F97183
FFB436B7DD8C18A80EB7D43D1EFB9A8D3EA99E77F65AD1443AB10857C44B7AB8
2EB0BE22CE0CDDE525B9DE03251E192A3B436C3907AC59EA40BBB63A5A7DC56B
DF08035260ADE398AD7ED78F895AE0CE0ADC74F4BCF4FD9ABEEBE132A537D788
B884084A69BEAD6791D7458A0BC58635A1576F368FA8D2D99DCB6C31BE97F432
5FF313DDA4B7411296716D32049D31F8E85C7D4B4DAE656AEFF8B7B8C1053A57
F13B93F29800E250C98BA58B6061AE740762F9202122F156852A326C13F3675A
4FE680CB4FD1B94C875840A97F2D14D6C1EFD4D4C37F39752572225377072C53
6854A002922441AF733B6F90EFF39E37E1605AC5A3F4B45F66DFC2357B57CF40
263D66A21EE0F0C1D1A0E4BA12454F9A252CAF55B46F5A907DF9D94650DA1D5C
4CBE7E65DE6BC996F52CEC6A02D4D987D99F7B66A1C786E9463A5628A50F5163
02A7F1CDDA1FB3337774AD640B02D504018E7C11267BEB7F51B8AC2FB3326EB5
1EF125B3AA855B3AF7891595077B9FD5960896A022BC3CB4F97F4CC175F09B81
128452C576CB26479E769DE0B75150360EF0C2AD3530A8A3B0C61005BD13EBB8
4F6A707A8D1565529BC1ABE78FBFBEBAB170ECD6908CCD31FA33368E485DCBF5
24DAC34619A38FBDA43C886FC6B4D58C7349C6D577D3AB8DF830F3DC3E06BE4F
8D1283533AE54551513735E278DC928869953AE85693870179055B8D953A8062
0339D4FC9D3DCE68C408FBDE261FAC68438ACFFC7E0F12168B91ECF56ADEEF93
FF6A2D2AE5D35CB0B49BCDED51EF5B16B6A7364D38592BE0EC092C66309F6D0E
E9E73D7AC69A9F9F8C83B5D7352E92D27751D149F552DF5ED5825A79507C5C8A
725E19E744631C96C74EC15829092BE11AB890C9AFBFF608B4F3B5FB42B29F1B
DA5436480A26657A2EBA297FD9933FC6B0071E62551C1A6398F82B097726E06F
4EAC8ECD5C4B316AF63B64A131F3EDFC50F1141E56EE81CB44A03B0CE8B6CC4C
B9E6DF9F47E957E47D4C5C51508C0825537EADCE33E9C3432AA0C0E7890FCFAA
54E1D95E922165EAECC89E7E18A7E36A269D68D918B4E64246066C88F009D478
D17DEAD4CE93F288531DA3CDD4F0B040CC82544B95E6EA26F002357CCF6E3D7D
F52FF5C84DB56CAE8F64D9DE498A54C28558E34F2EBCB8CD3F3F2AB2531D3D74
6A1DC97F93E312DC04158ABA06E9E55BE5A8DE5E0F3D8087188C8055B4C6B7F1
AC373AB1563F756E269BF3D90BDFB9EF3E62E610906E1928A4FF14665EC4DF2F
1703DEDC813E3BD7EFC9CDAD47E0DAF19D2C0701F2C027AE2986BE7715E0B0F4
15D4501FC252AB0608A9BF79FC085AE7F9340C073817296A900E1AB7033D4FD5
21AB67D4AD5E29DC4F20283A7864A4D6CA60908CE2D544E7C3C894A5635FDB42
989443A0DB0AC9281BA74DD27B1B573911DF90AE01984A865A3DB95125594779
C77DFFEB5699712598DD86F94CD032D14E0B71A92890D3EDE1443A3E30968AC6
33A004ACE18A56520853F64A4244C7B479530A8C5D18E47B38D67BB508A58710
6B5753081BF59EDC0793542987F1BC26553DC19CFC6EF456DA872DEAA95884C5
D4D8E503E6BFCF252AA8E144F2A24F21A08CBD05C4F65C9A9636B102ED4ED535
2A3C0A4FF4A039C3ED2C9E00C3E680C4A8FCFFBD90E871E5075FEB7661340E96
44DDBD719F2D4DD690457568802749D1E6A1EB15F64A85414B1680BCE311E8AC
1C08758B6453DD440D8A9816EDEA14E09224144E91276B842280E04A0BBA4E68
CEC5A9603A7F56551C2B11DADF1F4810C734BDEAE930B5DE4556DA67981B820B
CD2BC5A0FB8D8790D2666E0AE5558B1D2200534E83F7851F3D9482A2E8908F92
3BA87358A66968605B3D53DA4AB1D93389BB689B0822526D9F240952001DD054
09B9BE40559FA3FA4F216F022D50C408ACB34021AAE5F2B257DEF13A25F02701
234CA72E44287FA9D88D7EF4F768C35A65CDA6B411323A501BF3848AFE448DAC
2240C6CDB5208EB259D89A8F1BE43B39F911F55D88B5822E443C898E7ABC7EF5
B3953C2EC6DDAF174DCED0BF9353A2713774A8DF9A9091AA553D30361C9EA580
56F4993B29EDF2D3F3F1D6DBDB31728A84CB10019CE7407FE4201FC9A9D70F9E
8FF56B5CE83D2810A507AE941431A5D9B513A6F55FDD452D6309492C76D9C5C6
DD9D8F6CCD27BD71AFFF7FCE5D34DC355A066BCC3C9282EC971521260CF0E12E
936517B05ED0108AC13A671654A2EFD5FB71109B16B3B4274BCE4EBD624F288D
9E90D28D18D27FE4628444E76D3EEA619AE9476D181B4AC774AA62BC6D8AE5F0
84F90982D5EE1D24AFB37703671B2493AFFA4C51245086BE865627AE7D0E7759
179D509827104F840BD2C720F35D46D9C8338C0F8C03ECAC14E9BF044A04A96E
177D1C5CE74D34AFF22F3937F05A1B54F46CE9C5F2D60907DB971F5B2F8E5B9D
3ABA4ABA144209E6845B85A64F3A97CDC9B6AA5BD9E68F726F511255CDD9394C
0A0332C27139192F0C5D79668CA0CC0CBBB14E4CDD707F11F048CD6E0756D90A
F2EFCD882A296CF97148364A31FE8D7B5250C8BBC7E9F39EFC55B4662EC31535
416F2F90DDAC955FBB297FD4829BB73079FA91012386544B98E65BABA975C754
36B64848E3903D03C59BE0DB94E12E600E82A72EDCDEB4AB2260EE95F46568EB
D0A7002D21C9BAE538CF8A347A2751868343EE4FB3730984335FB2B5B88DFEE9
66A8062C26E4B834F568CA6164D6FE9AEB126502B943DD390A50B93D1CDABCD3
C96FACE03115D56C6BE19F06CF7DDC375238E238B448D27D64FA49ADCC0A5B24
AEF014B5D48F6CC493AD69E74DF47FEA376C6EF4B14C2FB71ED0F42E09F1651C
EAEE97341F26A6591B83FE723C448AA04AE504D6C34BCAECD27DE4B247678C7E
C51DBF53850EE7E615C7A01BC705F714B7B0C80B7AB79C42C24C036C6718E5A3
6E1475F07D9F7035866A73B4D0A67807A03FB61352F73A349AFFE3CCF566F457
6A62FA32004F3FE6A15E7B25C6E9AB2D1DBC9964E6903AEB408F09A0427933F3
4E92753419A9FE79513A2E39FAA295A92292D521E3A95FBBB77AD659D4E03D2B
39EE02738A10059514A8B51A35D3302C25891B90F74EBDB362E1017C676F0A0A
9CB67C9794A27FC7F0ACD189AE59C8A75A5E9BED84A5FB6EE5DC1F74A620E559
51D8C5CDDC4B37CAE2AF70C48B6C306BE826EBE8D22DF714D1F2FCA10369A266
F5DA86D65F730262B0035E5FF68817C93CE0FBBC201B593D955E40C99E235D45
7F70F497A8A11748AAA70FEA09AD8F5BD1A01E06D56BB6059DBEF8AC8AC5FB0C
59B5CA3C447022EA6AE6F928DA7C9A6A1F322C5D53CE905829C41408CF7449C2
69FF41A9B83869D7F230C78871C22933C991EAE40EBC97D8DB082B20E4895E49
6D6EE9D22FD9B395CA79073C08C0053E3C26124538544D9C68717076746A8D72
7DC34AE353D29983338A2D1998A0D62BFC296E433A8E48CA90B999B298609587
1164C2A65BC00D0F124A8EACCCCDA7A7F65D5AA4DBF70A273B6CB918B00F6ECC
0131BA9461BFC53357E09E0A3C615E79A26261D83F71B944DAAAE74A4B7484AB
D22B4BB40D4E9038E721EFB5F672796A3C961C298B29ED896A27E389D134C21E
7BED9DBB0FBB3AE2ED4A661992BCC8E4976F842785431AAD804360FBE8A134E4
3CA9D26F8571E18D0F27F70ECAF659A99FB7955E0F4D8690447CA37F42A05D15
E1D6559A1C95CA424A643DD58D0416A374091D94CD7A48859EEB4A461A6A436F
D07DD5A94E7D5B033D2AD99FDA4E7373A1D6CFD11DE94DF6537F25F5CFA1428F
9A126E21D819AE1A044510186FC8A9D51C20D922F3279A85E31C1F34B6B240C3
000775B140120C6E697D7BC14AE22F87EC6885C3CA40E718BAD7688C8A0B3E9F
49652FE7D0DE406B2EB70F039AA8B10C7601C4929B2971A9A3CF98F52F9FE122
CCD2D944BE6F68EF6F4F8EBEF51AEB1DFAC87C164F94B36511BF120D126D6824
01736A019ABF0BA4355854251D381828F2D5C8460F3B066EEA447009C01DB22E
33764CBBFDC5C74CB881098E7586725777144FC38DCBAB71413A26068EE3EC6E
53300BA5BEDBE53E5FD61E6D2E390C7E1D82454093264E8A2013AA0C91058031
B52A08D996CF2C82993DE9497AF91D4AF8C99E68577589F98564AB36FA448901
E671920A8DEC9535AFA9038AA1D528C4B31ECC27A505A5B83E4ACA119C6D3BF7
1AD9B21318030B2F1F69F132E3DBC5264A4AD516AD4736CED6E8CA4C3352C78B
2B836CA994A67BD63576593FAE07433051723DE3A67FEAEDA3CF10F66F7DB936
D96BD0A813A5C40B144EE897A5CC701B0297E190B6999EE9808A54F86AE2C05B
0FC4056944066CDBADCE78A0524D6F190B155120749CA84957FEBF447B748BC6
27B3AEE460D4D5FCF042B7CCF4A4DC92110AC09B16669CBFA4CDA713606FC086
97E8EF90EF2BFC8BF6C811FBEA5163C68B95C0B65EA87B9D12942EA0DE78FCCE
9DD86341497DF3F0CD388BB386658FB6D774A46E9857E0091F3B2C6E016BC24D
037FADA56418D223E672609C891E32E96BAEB77C7C568F26FE03B720F5F2D875
9F1C5BF185C4B1DB2E6BBA48F4BD5F6457D92B701E7DCDF0ABE154A9CDE3BC17
8F1F1CF521081036019C20E3A8AA6958D08C3EA3275CCE2F96F0FDACCB50ACB9
37204C55EC41CEDA3AF577FB778E606C7C2EE814E8D3E1C250DE4D3E587AFDFF
A1266218FC1D9A386D00BE86EB2433531F5A978031775862254994315B01C937
CCAF1C5DD69F96F5D64DD288087639B02BDD29F9B96C5B4F525DDABE245371DD
4717AC198F6477E1A2E6CA5CC2AC20FC94314212F5146721FF639C6CEB6936DA
A7ABE5348153D0DBEC6F96F61B6B7E53DD82107EB85F5D2FD094D82F4F446CEE
B64340FCE74AD83B2082952ECA69C53ED64B6F03FE3F54695FEEB8EE1D61C6DF
87F7214F97C165F4962E5B78500E7F4E684AD4F4F575F06FB275D449BAB97B06
BBC205D8FFE660C682A8CED9E1F7907214AB2E6BC7C830885EA32605B069ACE8
66EBFA95DA16774EDDCA73685D1B145770BABEBCFB3989284B27B7E698E12064
147A2EF3F2883F85C9C0E927DAFFBC9450E1B6E918726DD37B5CDA55E6D0D8A5
C3B5ED376F4772DF45D45C4CF18BEB4811CF1B9B3D920BA4A98A80F8DABC91BA
362EA6A74FA33DDF518B09564FED9F04D4312CD988EBA55DFD3145438A223943
488699B3D16846B51F2BB650790EB63BB9ABB2B3EE27C62B1B01FBA662B70542
DBB61743DC569337082176ECBAD417354A5F900EA0BB5479162ED7ECCCD71AE8
3B3EE296F3D14D289B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%/PSTricksDotFont exch definefont
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 438 2022-01-31 17:45:26Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 216 2021-09-10 12:28:13Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def

/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% $Id: pst-text.pro 891 2018-12-29 19:42:20Z herbert $
%
% PostScript header file pst-text.pro
% Version 1.02, 2018-12-28 (hv)
% For distribution, see pstricks.tex.
%
/tx@TextPathDict 45 dict def
tx@TextPathDict begin
%
% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def
%
/movetoproc { continue { @movetoproc } { pop pop } ifelse } def
%
/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def
%
/linetoproc { continue { @linetoproc } { pop pop } ifelse } def
%
/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def
%
/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def
%
% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def
%
/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def
%
/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def
%
%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint
    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
/warp {
    1 index
    1.4 mul
    cos 2 add
    mul
} def
/warpmove{
    2 index {
        newpath
    } if
    warp moveto
    pop false
} def
/warpline { warp lineto } def
/warpcurve {
    6 2 roll warp
    6 2 roll warp
    6 2 roll warp
    curveto
} def
/warpit {
    true
    { warpmove } { warpline } { warpcurve } { closepath } pathforall
    pop
} def
%
/circle {
    exch neg
    % .5 mul
    90 add
    dup cos 2 index mul
    3 1 roll
    sin mul
} bind def

/circmove{
    2 index { newpath } if
    circle moveto
    pop false
} bind def

/circline { circle lineto } bind def

/circcurve {
    6 2 roll circle
    6 2 roll circle
    6 2 roll circle
    curveto
} bind def

/circit { true { circmove } { circline } { circcurve } { closepath } pathforall pop } bind def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.04 2020/09/29
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Prcision
/epsilon 1E-5 def
/epsilonMin 1E-6 def
/epsilonMax 1E-3 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < epsilonMin)
/ZeroEq { abs epsilonMin lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 }
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% calculate the line coefficents Ax+By+C=0
%% x1 y1 x2 y2 -> A B C
/LineCoefABC {
  0 index 3 index sub % A=y2-y1
  4 index 3 index sub % B=x1-x2
  3 index 5 index mul 6 index 4 index mul sub % C=x2y1-x1y2
  7 3 roll pop pop pop pop
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% calculate the 2-order determinant
%% |a11 a12|
%% |a21 a22|
%% a11 a12, a21 a22 -> X
/DeterminantTwo {
  4 1 roll mul 3 1 roll mul exch sub
} def
%% calculate the 3-order determinant
%% |a11 a12 a13|
%% |a21 a22 a23|
%% |a31 a32 a33|
%%   8   7   6    5   4   3    2   1   0
%% a11 a12 a13, a21 a22 a23, a31 a32 a33 -> X
/DeterminantThree {
  % |a22 a23, a32 a33| * (-1)^(1+1)a11
  8 index abs epsilon lt { %a11=0
    0
  } {
    4 index 4 index 3 index 3 index DeterminantTwo
    9 index mul
  } ifelse
  % |a12 a13, a32 a33| * (-1)^(1+2)a21
  6 index abs epsilon lt { %a12=0
    0 sub
  } {
    8 index 8 index 4 index 4 index DeterminantTwo
    7 index mul sub
  } ifelse
  % |a12 a13, a22 a23| * (-1)^(1+3)a31
  3 index abs epsilon lt { %a13=0
    0 add
  } {
    8 index 8 index 7 index 7 index DeterminantTwo
    4 index mul add
  } ifelse
  10 1 roll pop pop pop pop pop pop pop pop pop
} def
%% calculate the 4-order determinant
%% |a11 a12 a13 a14|
%% |a21 a22 a23 a24|
%% |a31 a32 a33 a34|
%% |a41 a42 a43 a44|
%%  15  14  13  12   11  10   9   8    7   6   5   4    3   2   1   0
%% a11 a12 a13 a14, a21 a22 a23 a24, a31 a32 a33 a34, a41 a42 a43 a44 -> X
/DeterminantFour {
  % |a22 a23 a24, a32 a33 a34, a42 a43 a44| * (-1)^(1+1)a11
  15 index abs epsilon lt { %a11=0
    0
  } {
    10 index 10 index 10 index 9 index 9 index 9 index 8 index 8 index 8 index DeterminantThree
    16 index mul
  } ifelse
  % |a12 a13 a14, a32 a33 a34, a42 a43 a44| * (-1)^(1+2)a21
  12 index abs epsilon lt { %a21=0
    0 sub
  } {
    15 index 15 index 15 index 10 index 10 index 10 index 9 index 9 index 9 index DeterminantThree
    13 index mul sub
  } ifelse
  % |a12 a13 a14, a22 a23 a24, a42 a43 a44| * (-1)^(1+3)a31
  8 index abs epsilon lt { %a31=0
    0 add
  } {
    15 index 15 index 15 index 14 index 14 index 14 index 9 index 9 index 9 index DeterminantThree
    9 index mul add
  } ifelse
  % |a12 a13 a14, a22 a23 a24, a32 a33 a34| * (-1)^(1+4)a41
  4 index abs epsilon lt { %a41=0
    0 sub
  } {
    15 index 15 index 15 index 14 index 14 index 14 index 13 index 13 index 13 index DeterminantThree
    5 index mul sub
  } ifelse
  17 1 roll pop pop pop pop pop pop pop pop
  pop pop pop pop pop pop pop pop
} def
%% calculate the 5-order determinant
%% |a11 a12 a13 a14 a15|
%% |a21 a22 a23 a24 a25|
%% |a31 a32 a33 a34 a35|
%% |a41 a42 a43 a44 a45|
%% |a51 a52 a53 a54 a55|
%%  24  23  22  21  20   19  18  17  16  15   14  13  12  11  10    9   8   7   6   5    4   3   2   1   0
%% a11 a12 a13 a14 a15, a21 a22 a23 a24 a25, a31 a32 a33 a34 a35, a41 a42 a43 a44 a45, a51 a52 a53 a54 a55-> X
/DeterminantFive {
  % |a22 a23 a24 a25, a32 a33 a34 a35, a42 a43 a44 a45, a52 a53 a54 a55| * (-1)^(1+1)a11
  24 index abs epsilon lt { %a11=0
    0
  } {
    18 index 18 index 18 index 18 index 17 index 17 index 17 index 17 index 16 index 16 index 16 index 16 index 15 index 15 index 15 index 15 index DeterminantFour
    25 index mul
  } ifelse
  % |a12 a13 a14 a15, a32 a33 a34 a35, a42 a43 a44 a45, a52 a53 a54 a55| * (-1)^(1+2)a21
  20 index abs epsilon lt { %a21=0
    0 sub
  } {
    24 index 24 index 24 index 24 index 18 index 18 index 18 index 18 index 17 index 17 index 17 index 17 index 16 index 16 index 16 index 16 index DeterminantFour
    21 index mul sub
  } ifelse
  % |a12 a13 a14 a15, a22 a23 a24 a25, a42 a43 a44 a45, a52 a53 a54 a55| * (-1)^(1+3)a31
  15 index abs epsilon lt { %a31=0
    0 add
  } {
    24 index 24 index 24 index 24 index 23 index 23 index 23 index 23 index 17 index 17 index 17 index 17 index 16 index 16 index 16 index 16 index DeterminantFour
    16 index mul add
  } ifelse
  % |a12 a13 a14 a15, a22 a23 a24 a25, a32 a33 a34 a35, a52 a53 a54 a55| * (-1)^(1+4)a41
  10 index abs epsilon lt { %a41=0
    0 sub
  } {
    24 index 24 index 24 index 24 index 23 index 23 index 23 index 23 index 22 index 22 index 22 index 22 index 16 index 16 index 16 index 16 index DeterminantFour
    11 index mul sub
  } ifelse
  % |a12 a13 a14 a15, a22 a23 a24 a25, a32 a33 a34 a35, a42 a43 a44 a45| * (-1)^(1+5)a51
  5 index abs epsilon lt { %a51=0
    0 add
  } {
    24 index 24 index 24 index 24 index 23 index 23 index 23 index 23 index 22 index 22 index 22 index 22 index 21 index 21 index 21 index 21 index DeterminantFour
    6 index mul add
  } ifelse
  26 1 roll pop pop pop pop pop pop pop pop pop pop
  pop pop pop pop pop pop pop pop pop pop
  pop pop pop pop pop
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Conic Intersections
% The following macros implements the conic intersectionpoints in Asymptote
% module geometry.asy provided by Philippe IVALDI.
% http://www.piprime.fr/files/asymptote/geometry/modules/geometry.asy.html
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% num len [array] numIsInArray -> bool 
/numIsInArray {
  /arr ED /len ED /num ED
  /res false def
  0 1 len 1 sub {
    /idx ED
    /val arr idx get def
    num val sub abs epsilonMax lt {
      /res true def
      exit 
    } if
  } for
  res
} def

% find the real roots of quadratic equation ax^2+bx+c=0
% a b c -> [roots] nroots
/QuadraticRealRoots {
15 dict begin % all variables are local
  /Coefc ED /Coefb ED /Coefa ED
  /nroots 0 def /roots 2 array def
  %[ Coefa Coefb Coefc ] ==
  Coefa abs epsilonMin lt {
    Coefb abs epsilonMin gt {
      roots 0 Coefc Coefb div neg put
      /nroots 1 def
    }
  }{
    /delta Coefb Coefb mul 4 Coefc Coefa mul mul sub def
    delta abs epsilon lt {
      roots 0 Coefb 2 Coefa mul div neg put
      /nroots 1 def
    }{
      delta 0.0 gt {
        /delta delta sqrt def
        roots 0 Coefb neg delta add 2 Coefa mul div put
        roots 1 Coefb neg delta sub 2 Coefa mul div put
        /nroots 2 def
      } if
    } ifelse
  } ifelse
  roots nroots % push the roots on stack.
end} def

% find the real roots of cubic equation a*x^3+b*x^2+c*x+d=0
% a b c d CubicRealRoots -> [roots] nroots
/CubicRealRoots {
15 dict begin % all variables are local
  /Coefd ED /Coefc ED /Coefb ED /Coefa ED
  % [ Coefa Coefb Coefc Coefd ] ==
  /nroots 0 def /roots 3 array def
  Coefa abs epsilonMin lt { % quadratic case
    Coefb Coefc Coefd QuadraticRealRoots
    /nroots ED roots copy pop
  }{% true cubic
    % normalize to x^3+bx^2+cx+d=0
    /Coefb Coefb Coefa div def
    /Coefc Coefc Coefa div def
    /Coefd Coefd Coefa div def
    % let x=y-b/3, we have
    % y^3+py+q=0
    % where p=(3c-b^2)/3,q=(27d-9bc+2b^3)/27
    % let y=u+v, where uv=-p/3, then
    % u^3+v^3=-q, u^3v^3=-p^3/27
    % then u^3=-q/2-\sqrt(q^2/4+p^3/27)
    %      u^3=-q/2+\sqrt(q^2/4+p^3/27)
    % http://eqworld.ipmnet.ru/en/solutions/ae/ae0103.pdf
    Coefb abs epsilonMin lt {
      /bthird 0 def
      /p Coefc def
      /q Coefd def
    }{
      /bthird Coefb 3 div def 
      /p 3 Coefc mul Coefb Coefb mul sub 3 div def
      /q 27 Coefd mul 9 Coefb mul Coefc mul sub 2 Coefb mul Coefb mul Coefb mul add 27 div def
    } ifelse
    /ppp p dup dup mul mul def
    /qq q dup mul def
    /delta qq 4 div ppp 27 div add def
    % p = q = delta =
    delta abs epsilon lt {
      q abs epsilon lt {
        /nroots 1 def
        roots 0 bthird neg put
      }{
        /nroots 2 def
        q 0.0 gt {
          /r1 q 2 div 1 3 div exp def
        }{
          /r1 q 2 div neg 1 3 div exp neg def
        } ifelse
        /r2 r1 -2 mul def
        roots 0 r1 bthird sub put
        roots 1 r2 bthird sub put
      } ifelse
    }{
      delta 0.0 gt {
        /nroots 1 def
        /qhalfneg q 2 div neg def
        /deltasqrt delta sqrt def
        /pthirdneg p 3 div neg def
        p abs epsilon lt {
          /tu qhalfneg deltasqrt add def
          /tv qhalfneg deltasqrt sub def
          tu abs epsilon lt {
            /u 0.0 def
          }{
            tu 0.0 gt {
              /u tu 1 3 div exp def
            }{
              /u tu neg 1 3 div exp neg def
            } ifelse
          } ifelse
          tv abs epsilon lt {
            /v 0.0 def
          }{
            tv 0.0 gt {
              /v tv 1 3 div exp def
            }{
              /v tv neg 1 3 div exp neg def
            } ifelse
          } ifelse
        }{
          /tu qhalfneg deltasqrt add def
          tu 0.0 gt {
            /u tu 1 3 div exp def
          }{
            /u tu neg 1 3 div exp neg def
          } ifelse
          /v pthirdneg u div def
        } ifelse
        /r1 u v add def
        roots 0 r1 bthird sub put
      }{
        /nroots 3 def
        /qhalfneg q 2 div neg def
        /pthirdnegsqrt p 3 div neg sqrt def
        /argalpha qhalfneg pthirdnegsqrt dup dup mul mul div Acos 3 div def
        /r1 pthirdnegsqrt 2 mul argalpha cos mul def
        /r2 pthirdnegsqrt -2 mul argalpha 60 add cos mul def
        /r3 pthirdnegsqrt -2 mul argalpha 60 sub cos mul def
        roots 0 r1 bthird sub put
        roots 1 r2 bthird sub put
        roots 2 r3 bthird sub put
      } ifelse
    } ifelse
  } ifelse
  roots nroots % push the roots on stack.
end} def

% find the real roots of quartic equation a*x^4+b*x^3+c*x^2+dx+e=0
% a b c d e QuarticRealRoots -> [roots] nroots
/QuarticRealRoots {
15 dict begin % all variables are local
  /Coefe ED /Coefd ED /Coefc ED /Coefb ED /Coefa ED
  /nroots 0 def /roots 4 array def
  Coefa abs epsilonMin lt { % cubic case
    Coefb Coefc Coefd Coefe CubicRealRoots
    /nroots ED roots copy pop
  }{
    Coefe abs epsilonMin lt { % cubic case
      Coefa Coefb Coefc Coefd CubicRealRoots
      /nroots ED roots copy pop
      roots nroots 0.0 put
      /nroots nroots 1 add def
    }{ % true quartic
      % normalize to x^4+bx^3+cx^2+dx+e=0
      /Coefb Coefb Coefa div def
      /Coefc Coefc Coefa div def
      /Coefd Coefd Coefa div def
      /Coefe Coefe Coefa div def
      /qeval { 
        /vx ED
        1 vx mul Coefb add vx mul Coefc add vx mul Coefd add vx mul Coefe add % x(x(x(ax+b)+c)+d)+e
      } def
      % [1 Coefb Coefc Coefd Coefe ] ==
      % x^4+bx^3+cx^2+dx+e=0
      % (x^2+b/2x)^2=(b^2/4-c)x^2-dx-e
      % add (x^2+b/2x)y+y^2/4 in each side,
      % (x^2+b/2x+y/2)^2=(b^2/4+y-c)x^2+(by/2-d)x+(y^2/4-e)
      % choose y such that
      % (by/2-d)^2-4(b^2/4+y-c)(y^2/4-e)=0
      % i.e,
      % y^3-cy^2+(bd-4e)y-eb^2+4ec-d^2=0
      % let t=sqrt(b^2/4+y-c), then
      % (x^2+b/2x+y/2)^2=(tx+(by/2-d)/(2t))^2
      % we have
      % x^2+(b/2+t)x+y/2+(by/2-d)/(2t)=0
      % x^2+(b/2-t)x+y/2-(by/2-d)/(2t)=0
      1 Coefc neg Coefb Coefd mul 4 Coefe mul sub 4 Coefc Coefe mul mul Coefb Coefb Coefe mul mul sub Coefd Coefd mul sub
      CubicRealRoots /CubicNumRoots ED /CubicRoots ED
      %CubicNumRoots = CubicRoots ==
      0 1 CubicNumRoots 1 sub {
        /idx ED
        /y0 CubicRoots idx get def
        /delta y0 Coefc sub Coefb Coefb mul 4 div add def
        % [ idx y0 delta ] ==
        delta abs epsilonMax lt {
          /squareval y0 y0 mul 4 div Coefe sub def
          squareval abs epsilon lt {
            % x^2+b/2x+y/2=0
            %[squareval (squareval=0) ] ==
            1 Coefb 2 div y0 2 div QuadraticRealRoots
            /nroots1 ED /roots1 ED %nroots1 = roots1 == 
            0 1 nroots1 1 sub {
              /idx ED
              /rv roots1 idx get def
              rv qeval abs epsilonMax lt {
                rv nroots roots numIsInArray not {
                  roots nroots rv put
                  /nroots nroots 1 add def
                } if
              } if
            } for
          }{
            squareval 0.0 gt {
              %[squareval (squareval>0) ] ==
              % x^2+b/2x+y/2\pm\sqrt(y^2/4-e)=0
              /squareval squareval sqrt def
              1 Coefb 2 div y0 2 div squareval add QuadraticRealRoots
              /nroots1 ED /roots1 ED %nroots1 = roots1 == 
              1 Coefb 2 div y0 2 div squareval sub QuadraticRealRoots
              /nroots2 ED /roots2 ED %nroots2 = roots2 ==
              nroots1 0 gt nroots2 0 gt or {
                0 1 nroots1 1 sub {
                  /idx ED
                  /rv roots1 idx get def
                  rv qeval abs epsilonMax lt {
                    rv nroots roots numIsInArray not {
                      roots nroots rv put
                      /nroots nroots 1 add def
                    } if
                  } if
                } for
                0 1 nroots2 1 sub {
                  /idx ED
                  /rv roots2 idx get def
                  rv qeval abs epsilonMax lt {
                    rv nroots roots numIsInArray not {
                      roots nroots rv put
                      /nroots nroots 1 add def
                    } if
                  } if
                } for
              } if
            } if
          } ifelse
        }{
          delta 0.0 gt {
            %[delta (delta>0) ] ==
            /sqrtdelta delta sqrt def
            /Coefp Coefb 2 div sqrtdelta add def
            /Coefq y0 2 div y0 Coefb mul 2 div Coefd sub sqrtdelta div 2 div add def
            1 Coefp Coefq QuadraticRealRoots /nroots1 ED /roots1 ED %nroots1 = roots1 == 
            /Coefp Coefb 2 div sqrtdelta sub def
            /Coefq y0 2 div y0 Coefb mul 2 div Coefd sub sqrtdelta div 2 div sub def
            1 Coefp Coefq QuadraticRealRoots /nroots2 ED /roots2 ED %nroots2 = roots2 ==
            nroots1 0 gt nroots2 0 gt or {
              0 1 nroots1 1 sub {
                /idx ED
                /rv roots1 idx get def
                rv qeval abs epsilonMax lt {
                  rv nroots roots numIsInArray not {
                    roots nroots rv put
                    /nroots nroots 1 add def
                  } if
                } if
              } for
              0 1 nroots2 1 sub {
                /idx ED
                /rv roots2 idx get def
                rv qeval abs epsilonMax lt {
                  rv nroots roots numIsInArray not {
                    roots nroots rv put
                    /nroots nroots 1 add def
                  } if
                } if
              } for
            } if
          } if
        } ifelse
        nroots 4 eq {
          exit
        } if
      } for
    } ifelse
  } ifelse
  roots nroots % push the roots on stack.
end} def

% SortInters
% sort the intersections from smallest to largest abscissa.
% [Inters] nInters SortInters -> [Inters] nInters
/SortInters {
  /nInters ED /Inters ED
  nInters 1 gt {
    /PairCmp {
      /PairB ED /PairA ED
      PairA 0 get PairB 0 get sub
    } def
    /PairSwap {
      /PairB ED /PairA ED /IdxB ED /IdxA ED
      Inters IdxA PairB put
      Inters IdxB PairA put
    } def
    0 1 nInters 2 sub {
      /Idx ED
      0 1 nInters 2 sub Idx sub {
        /Bubidx ED
        /PairA Inters Bubidx get def
        /PairB Inters Bubidx 1 add get def
        PairA PairB PairCmp 0 gt {
          Bubidx Bubidx 1 add
          PairA PairB PairSwap
        } if
      } for
    } for
  } if
  Inters nInters % push the intersections on stack.
} def

% ConicCircleInter
% find all intersections of conic $cc(x,y)=ax^2+bxy+cy^2+dx+ey+f=0$ and
% circle $c(x,y)=(x-x0)^2+(y-y0)^2=r^2$.
%
% a b c d e f  x0 y0 r ConicCircleInter -> [Inters] nInters
/ConicCircleInter {
15 dict begin % all variables are local
  /cr ED /cy0 ED /cx0 ED
  /ccf ED /cce ED /ccd ED /ccc ED /ccb ED /cca ED
  %[ cca ccb ccc ccd cce ccf ] ==
  % x y cceval -> cc(x,y)
  /cceval {
    /ty ED /tx ED
    cca tx mul tx mul
    ccb tx mul ty mul add
    ccc ty mul ty mul add
    ccd tx mul add
    cce ty mul add
    ccf add
  } def
  /m 2 cca mul cx0 mul ccb cy0 mul add ccd add def
  /n 2 ccc mul cy0 mul ccb cx0 mul add cce add def
  /s cx0 cy0 cceval def
  /p s cr div ccc cr mul add def
  /t cca cr mul ccc cr mul sub def
  % [ m n s p t ] ==
  /Qqa ccb ccb mul cr mul cr mul t t mul add def
  /Qqb 2 t mul m mul 2 n mul ccb mul cr mul add def
  /Qqc m m mul n n mul add 2 t mul p mul add ccb ccb mul cr mul cr mul sub def
  /Qqd 2 m mul p mul 2 n mul ccb mul cr mul sub def
  /Qqe p p mul n n mul sub def
  %[ Qqa Qqb Qqc Qqd Qqe ] ==
  Qqa Qqb Qqc Qqd Qqe QuarticRealRoots /nroots ED /roots ED
  %nroots = roots ==
  /nInters 0 def /Inters 4 array def
  /SaveInter {
    /tty ED /ttx ED
    nInters 4 lt {
      Inters nInters [ttx tty] put
      /nInters nInters 1 add def
    } if
  } def
  0 1 nroots 1 sub {
    /idx ED
    /cosx roots idx get def
    /sinx 1.0 cosx cosx mul sub sqrt def
    /x cr cosx mul cx0 add def
    /y cr sinx mul cy0 add def
    /ccxy x y cceval def
    % [idx 0 cosx sinx x y ccxy ] ==
    ccxy abs epsilonMax lt {
      x y SaveInter
    } if
    /y cr sinx mul neg cy0 add def
    /ccxy x y cceval def
    % [idx 1 cosx sinx x y ccxy ] ==
    ccxy abs epsilonMax lt {
      x y SaveInter
    } if
  } for
  Inters nInters SortInters% push the intersections on stack.
end} def

% ConicEllipseInter
% find all intersections of conic $cc(x,y)=ax^2+bxy+cy^2+dx+ey+f=0$ and
% ellipse $e(x,y): (x-x0)^2/m^2+(y-y0)^2/n^2=1$.
%
% a b c d e f  x0 y0 m n ConicEllipseInter -> [Inters] nInters
/ConicEllipseInter {
15 dict begin % all variables are local
  /en ED /em ED /ey0 ED /ex0 ED
  /ccf ED /cce ED /ccd ED /ccc ED /ccb ED /cca ED
  %[ cca ccb ccc ccd cce ccf ] ==
  % x y cceval -> cc(x,y)
  /cceval {
    /ty ED /tx ED
    cca tx mul tx mul
    ccb tx mul ty mul add
    ccc ty mul ty mul add
    ccd tx mul add
    cce ty mul add
    ccf add
  } def
  /p 2 cca mul em mul ex0 mul ccb em mul ey0 mul add ccd em mul add def
  /q 2 ccc mul en mul ey0 mul ccb en mul ex0 mul add cce en mul add def
  /r ex0 ey0 cceval def
  /s r ccc en mul en mul add def
  /t cca em mul em mul ccc en mul en mul sub def
  % [ p q r s t ] ==
  /Qqa t t mul ccb ccb mul em mul em mul en mul en mul add def
  /Qqb 2 t mul p mul 2 q mul ccb mul em mul en mul add def
  /Qqc p p mul q q mul add 2 t mul s mul add ccb ccb mul em mul em mul en mul en mul sub def
  /Qqd 2 p mul s mul 2 q mul ccb mul em mul en mul sub def
  /Qqe s s mul q q mul sub def
  %[ Qqa Qqb Qqc Qqd Qqe ] ==
  Qqa Qqb Qqc Qqd Qqe QuarticRealRoots /nroots ED /roots ED
  %nroots = roots ==
  /nInters 0 def /Inters 4 array def
  /SaveInter {
    /tty ED /ttx ED
    nInters 4 lt {
      Inters nInters [ttx tty] put
      /nInters nInters 1 add def
    } if
  } def
  0 1 nroots 1 sub {
    /idx ED
    /cosx roots idx get def
    /sinx 1.0 cosx cosx mul sub sqrt def
    /x em cosx mul ex0 add def
    /y en sinx mul ey0 add def
    /ccxy x y cceval def
    % [idx 0 cosx sinx x y ccxy ] ==
    ccxy abs epsilonMax lt {
      x y SaveInter
    } if
    /y en sinx mul neg ey0 add def
    /ccxy x y cceval def
    % [idx 1 cosx sinx x y ccxy ] ==
    ccxy abs epsilonMax lt {
      x y SaveInter
    } if
  } for
  Inters nInters SortInters% push the intersections on stack.
end} def

% ConicHyperbolaInter
% find all intersections of conic $cc(x,y)=ax^2+bxy+cy^2+dx+ey+f=0$ and
% hyperbola $h(x,y): (x-x0)^2/m^2-(y-y0)^2/n^2=1$.
%
% a b c d e f  x0 y0 m n ConicHyperbolaInter -> [Inters] nInters
/ConicHyperbolaInter {
15 dict begin % all variables are local
  /hn ED /hm ED /hy0 ED /hx0 ED
  /ccf ED /cce ED /ccd ED /ccc ED /ccb ED /cca ED
  %[ cca ccb ccc ccd cce ccf ] ==
  % x y cceval -> cc(x,y)
  /cceval {
    /ty ED /tx ED
    cca tx mul tx mul
    ccb tx mul ty mul add
    ccc ty mul ty mul add
    ccd tx mul add
    cce ty mul add
    ccf add
  } def
  /p 2 cca mul hm mul hx0 mul ccb hm mul hy0 mul add ccd hm mul add def
  /q 2 ccc mul hn mul hy0 mul ccb hn mul hx0 mul add cce hn mul add def
  /r hx0 hy0 cceval def
  /s r ccc hn mul hn mul sub def
  /t cca hm mul hm mul ccc hn mul hn mul add def
  % [ p q r s t ] ==
  /Qqe t t mul ccb ccb mul hm mul hm mul hn mul hn mul sub def
  /Qqd 2 t mul p mul 2 q mul ccb mul hm mul hn mul sub def
  /Qqc p p mul q q mul sub 2 t mul s mul add ccb ccb mul hm mul hm mul hn mul hn mul add def
  /Qqb 2 p mul s mul 2 q mul ccb mul hm mul hn mul add def
  /Qqa s s mul q q mul add def
  %[ Qqa Qqb Qqc Qqd Qqe ] ==
  Qqa Qqb Qqc Qqd Qqe QuarticRealRoots /nroots ED /roots ED
  % nroots = roots ==
  /nInters 0 def /Inters 4 array def
  /SaveInter {
    /tty ED /ttx ED
    nInters 4 lt {
      Inters nInters [ttx tty] put
      /nInters nInters 1 add def
    } if
  } def
  0 1 nroots 1 sub {
    /idx ED
    /cosx roots idx get def
    /sinx 1.0 cosx cosx mul sub sqrt def
    /x hm cosx div hx0 add def
    /y hn sinx mul cosx div hy0 add def
    /ccxy x y cceval def
    % [idx 0 cosx sinx x y ccxy ] ==
    ccxy abs epsilonMax lt {
      x y SaveInter
    } if
    /y hn sinx mul cosx div neg hy0 add def
    /ccxy x y cceval def
    % [idx 1 cosx sinx x y ccxy ] ==
    ccxy abs epsilonMax lt {
      x y SaveInter
    } if
  } for
  Inters nInters SortInters% push the intersections on stack.
end} def

% ConicIHyperbolaInter
% find all intersections of conic $cc(x,y)=ax^2+bxy+cy^2+dx+ey+f=0$ and
% conjugate hyperbola $h(x,y): (y-y0)^2/m^2-(x-x0)^2/n^2=1$.
%
% a b c d e f  x0 y0 m n ConicIHyperbolaInter -> [Inters] nInters
/ConicIHyperbolaInter {
15 dict begin % all variables are local
  /hn ED /hm ED /hy0 ED /hx0 ED
  /ccf ED /cce ED /ccd ED /ccc ED /ccb ED /cca ED
  % [ cca ccb ccc ccd cce ccf ] ==
  % x y cceval -> cc(x,y)
  /cceval {
    /ty ED /tx ED
    cca tx mul tx mul
    ccb tx mul ty mul add
    ccc ty mul ty mul add
    ccd tx mul add
    cce ty mul add
    ccf add
  } def
  /p 2 ccc mul hm mul hy0 mul ccb hm mul hx0 mul add cce hm mul add def
  /q 2 cca mul hn mul hx0 mul ccb hn mul hy0 mul add ccd hn mul add def
  /r hx0 hy0 cceval def
  /s r cca hn mul hn mul sub def
  /t cca hn mul hn mul ccc hm mul hm mul add def
  % [ p q r s t ] ==
  /Qqe t t mul ccb ccb mul hm mul hm mul hn mul hn mul sub def
  /Qqd 2 t mul p mul 2 q mul ccb mul hm mul hn mul sub def
  /Qqc p p mul q q mul sub 2 t mul s mul add ccb ccb mul hm mul hm mul hn mul hn mul add def
  /Qqb 2 p mul s mul 2 q mul ccb mul hm mul hn mul add def
  /Qqa s s mul q q mul add def
  %[ Qqa Qqb Qqc Qqd Qqe ] ==
  Qqa Qqb Qqc Qqd Qqe QuarticRealRoots /nroots ED /roots ED
  %nroots = roots ==
  /nInters 0 def /Inters 4 array def
  /SaveInter {
    /tty ED /ttx ED
    nInters 4 lt {
      Inters nInters [ttx tty] put
      /nInters nInters 1 add def
    } if
  } def
  0 1 nroots 1 sub {
    /idx ED
    /cosx roots idx get def
    /sinx 1.0 cosx cosx mul sub sqrt def
    /x hn sinx mul cosx div hx0 add def
    /y hm cosx div hy0 add def
    /ccxy x y cceval def
    % [idx 0 cosx sinx x y ccxy ] ==
    ccxy abs epsilonMax lt {
      x y SaveInter
    } if
    /x hn sinx mul cosx div neg hx0 add def
    /ccxy x y cceval def
    % [idx 1 cosx sinx x y ccxy ] ==
    ccxy abs epsilonMax lt {
      x y SaveInter
    } if
  } for
  Inters nInters SortInters% push the intersections on stack.
end} def

% ConicParabolaInter
% find all intersections of conic $cc(x,y)=ax^2+bxy+cy^2+dx+ey+f=0$ and
% parabola $p(x,y): (x-x0)^2=2p(y-y0)$.
%
% a b c d e f  x0 y0 p ConicParabolaInter -> [Inters] nInters
/ConicParabolaInter {
15 dict begin % all variables are local
  /pp ED /py0 ED /px0 ED
  /ccf ED /cce ED /ccd ED /ccc ED /ccb ED /cca ED
  % [ cca ccb ccc ccd cce ccf ] ==
  % x y cceval -> cc(x,y)
  /cceval {
    /ty ED /tx ED
    cca tx mul tx mul
    ccb tx mul ty mul add
    ccc ty mul ty mul add
    ccd tx mul add
    cce ty mul add
    ccf add
  } def
  /Qqa ccc 4 pp pp mul mul div def
  /Qqb ccb 2 pp mul div def
  /Qqc cca ccb px0 mul 2 pp mul div add ccc py0 mul pp div add cce 2 pp mul div add def
  /Qqd 2 cca px0 mul mul ccb py0 mul add ccd add def
  /Qqe px0 py0 cceval def
  Qqa Qqb Qqc Qqd Qqe QuarticRealRoots /nroots ED /roots ED
  %nroots = roots ==
  /nInters 0 def /Inters 4 array def
  /SaveInter {
    /tty ED /ttx ED
    nInters 4 lt {
      Inters nInters [ttx tty] put
      /nInters nInters 1 add def
    } if
  } def
  0 1 nroots 1 sub {
    /idx ED
    /argt roots idx get def
    /x argt px0 add def
    /y argt argt mul 2 pp mul div py0 add def
    /ccxy x y cceval def
    % [idx 0 argt x y ccxy ] ==
    ccxy abs epsilonMax lt {
      x y SaveInter
    } if
  } for
  Inters nInters SortInters% push the intersections on stack.
end} def

% ConicIParabolaInter
% find all intersections of conic $cc(x,y)=ax^2+bxy+cy^2+dx+ey+f=0$ and
% conjugate parabola $p(x,y): (y-y0)^2=2p(x-x0)$.
%
% a b c d e f  x0 y0 p ConicIParabolaInter -> [Inters] nInters
/ConicIParabolaInter {
15 dict begin % all variables are local
  /pp ED /py0 ED /px0 ED
  /ccf ED /cce ED /ccd ED /ccc ED /ccb ED /cca ED
  % [ cca ccb ccc ccd cce ccf ] ==
  % x y cceval -> cc(x,y)
  /cceval {
    /ty ED /tx ED
    cca tx mul tx mul
    ccb tx mul ty mul add
    ccc ty mul ty mul add
    ccd tx mul add
    cce ty mul add
    ccf add
  } def
  /Qqa cca 4 pp pp mul mul div def
  /Qqb ccb 2 pp mul div def
  /Qqc ccc ccb py0 mul 2 pp mul div add cca px0 mul pp div add ccd 2 pp mul div add def
  /Qqd 2 ccc py0 mul mul ccb px0 mul add cce add def
  /Qqe px0 py0 cceval def
  Qqa Qqb Qqc Qqd Qqe QuarticRealRoots /nroots ED /roots ED
  % nroots = roots ==
  /nInters 0 def /Inters 4 array def
  /SaveInter {
    /tty ED /ttx ED
    nInters 4 lt {
      Inters nInters [ttx tty] put
      /nInters nInters 1 add def
    } if
  } def
  0 1 nroots 1 sub {
    /idx ED
    /argt roots idx get def
    /y argt py0 add def
    /x argt argt mul 2 pp mul div px0 add def
    /ccxy x y cceval def
    % [idx 0 argt x y ccxy ] ==
    ccxy abs epsilonMax lt {
      x y SaveInter
    } if
  } for
  Inters nInters SortInters% push the intersections on stack.
end} def

% ConicInter
% find all intersections of conic $cc1(x,y)=ax^2+bxy+cy^2+dx+ey+f=0$ and
% $cc2(x,y)=a'x^2+b'xy+c'y^2+d'x+e'y+f'=0$.
%
% a b c d e f  a' b' c' d' e' f' ConicInter -> [Inters] nInters
/ConicInter {
15 dict begin % all variables are local
  /cxf ED /cxe ED /cxd ED /cxc ED /cxb ED /cxa ED
  /ccf ED /cce ED /ccd ED /ccc ED /ccb ED /cca ED
  % [ cxa cxb cxc cxd cxe cxf ] ==
  % [ cca ccb ccc ccd cce ccf ] ==
  % x y cceval -> cc(x,y)
  /cceval {
    /ty ED /tx ED
    cca tx mul tx mul
    ccb tx mul ty mul add
    ccc ty mul ty mul add
    ccd tx mul add
    cce ty mul add
    ccf add
  } def
  /cxeval {
    /ty ED /tx ED
    cxa tx mul tx mul
    cxb tx mul ty mul add
    cxc ty mul ty mul add
    cxd tx mul add
    cxe ty mul add
    cxf add
  } def
  /nInters 0 def /Inters 4 array def
  /SaveInter {
    /tty ED /ttx ED
    nInters 4 lt {
      Inters nInters [ttx tty] put
      /nInters nInters 1 add def
    } if
  } def
  cca cxa sub abs epsilon gt
  ccb cxb sub abs epsilon gt
  ccc cxc sub abs epsilon gt or or {
    /Qqa -2 cca ccc cxa cxc mul mul mul mul
            cca ccc cxb cxb mul mul mul add
            cca ccb cxc cxb mul mul mul sub
            ccb ccb cxa cxc mul mul mul add
            ccc ccb cxa cxb mul mul mul sub
            cca cca cxc cxc mul mul mul add
            ccc ccc cxa cxa mul mul mul add def
    /Qqb    ccc ccb cxa cxe mul mul mul neg
            ccc cce cxa cxb mul mul mul sub
            ccb ccd cxc cxb mul mul mul sub
          2 cca ccc cxb cxe mul mul mul mul add
            cca ccb cxc cxe mul mul mul sub
            ccb ccb cxc cxd mul mul mul add
          2 ccc ccd cxa cxc mul mul mul mul sub
          2 cca ccc cxc cxd mul mul mul mul sub
            ccc ccd cxb cxb mul mul mul add
            ccc ccb cxb cxd mul mul mul sub
          2 ccb cce cxa cxc mul mul mul mul add
          2 ccc ccc cxa cxd mul mul mul mul add
            cca cce cxc cxb mul mul mul sub
          2 cca ccd cxc cxc mul mul mul mul add def
    /Qqc    ccd cce cxc cxb mul mul mul neg
            ccc ccf cxb cxb mul mul mul add
            ccb ccf cxc cxb mul mul mul sub
            ccb ccd cxc cxe mul mul mul sub
            ccb ccb cxc cxf mul mul mul add
          2 ccc ccd cxc cxd mul mul mul mul sub
          2 ccc ccc cxa cxf mul mul mul mul add
          2 cca ccf cxc cxc mul mul mul mul add
            ccd ccd cxc cxc mul mul mul add
          2 ccc ccf cxa cxc mul mul mul mul sub
          2 ccb cce cxc cxd mul mul mul mul add
            ccc cce cxb cxd mul mul mul sub
          2 cca ccc cxc cxf mul mul mul mul sub
            ccc ccc cxd cxd mul mul mul add
          2 ccc ccd cxb cxe mul mul mul mul add
            ccc cce cxa cxe mul mul mul sub
            cce cce cxa cxc mul mul mul add
            ccc ccb cxd cxe mul mul mul sub
            ccc ccb cxb cxf mul mul mul sub
            cca cce cxc cxe mul mul mul sub
            cca ccc cxe cxe mul mul mul add def
    /Qqd    cce ccf cxc cxb mul mul mul neg
            ccc ccd cxe cxe mul mul mul add
          2 ccd ccf cxc cxc mul mul mul mul add
            ccc ccb cxe cxf mul mul mul sub
            ccc cce cxd cxe mul mul mul sub
          2 ccc ccc cxd cxf mul mul mul mul add
          2 ccc ccd cxc cxf mul mul mul mul sub
            ccd cce cxc cxe mul mul mul sub
          2 ccc ccf cxc cxd mul mul mul mul sub
            ccc cce cxb cxf mul mul mul sub
          2 ccb cce cxc cxf mul mul mul mul add
            ccb ccf cxc cxe mul mul mul sub
            cce cce cxc cxd mul mul mul add
          2 ccc ccf cxb cxe mul mul mul mul add def
    /Qqe -2 ccc ccf cxc cxf mul mul mul mul
            cce cce cxc cxf mul mul mul add
            ccf ccf cxc cxc mul mul mul add
            cce ccf cxc cxe mul mul mul sub
            ccc ccf cxe cxe mul mul mul add
            ccc ccc cxf cxf mul mul mul add
            ccc cce cxe cxf mul mul mul sub def
    % [ Qqa Qqb Qqc Qqd Qqe ] ==
    Qqa Qqb Qqc Qqd Qqe QuarticRealRoots /nQRoots ED /QRoots ED
  } {
    cce cxe sub abs epsilon gt {
      /D cxe cce sub dup mul def
      /Qda cca cxe cxe mul mul
           ccb ccd mul ccb cxd mul sub 2 cca cce mul mul mul sub cxe mul add
           ccc cxd cxd mul mul add
           ccb cce mul 2 ccc ccd mul mul sub cxd mul add
           cca cce cce mul mul add
           ccb ccd cce mul mul sub
           ccc ccd ccd mul mul add D div def
      /Qdb ccb cxe mul 2 ccc cxd mul mul sub ccb cce mul sub 2 ccc ccd mul mul add cxf mul
           ccd cxe cxe mul mul sub
           cce cxd mul ccb ccf mul sub ccd cce mul add  cxe mul add
           2 ccc ccf mul mul cce cce mul sub cxd mul add
           ccb cce mul 2 ccc ccd mul mul sub ccf mul add
           D div neg def
      /Qdc ccc ccf cxf sub dup mul mul D div
           cce ccf cxf sub mul cxe cce sub div add ccf add def
      Qda Qdb Qdc QuadraticRealRoots /nQRoots ED /QRoots ED
    } {
      ccd cxd sub abs epsilon gt {
        /D cxd ccd sub def
        /Qda ccc def
        /Qdb ccb cxf mul neg cce cxd mul add ccb ccf mul add ccd cce mul sub D div def
        /Qdc cca ccf cxf sub dup mul mul D dup mul div ccd ccf cxf sub mul D div add ccf add def
        Qda Qdb Qdc QuadraticRealRoots /nDRoots ED /DRoots ED
        0 1 nDRoots 1 sub {
          /DIdx ED
          /DVal DRoots DIdx get def
          /Qea cca def
          /Qeb ccb DVal mul ccd add def
          /Qec ccc DVal dup mul mul cce DVal mul add ccf add def
          Qea Qeb Qec QuadraticRealRoots /nERoots ED /ERoots ED
          0 1 nERoots 1 sub {
            /EIdx ED
            /XVal ERoots EIdx get def
            /ccxy XVal DVal cceval def
            /cxxy XVal DVal cxeval def
            ccxy abs epsilonMax lt cxxy abs epsilonMax lt and {
              XVal DVal SaveInter
            } if
          } for
        } for
        Inters nInters SortInters% push the intersections on stack.
        exit
      } {
        ccf cxf sub abs epsilon lt {
          (cannot find intersection of identical conics) =
          exit
        } if
      } ifelse
    } ifelse
  } ifelse
  0 1 nQRoots 1 sub {
    /QIdx ED
    /QVal QRoots QIdx get def
    /Qea ccc def
    /Qeb ccb QVal mul cce add def
    /Qec cca QVal dup mul mul ccd QVal mul add ccf add def
    Qea Qeb Qec QuadraticRealRoots /nERoots ED /ERoots ED
    0 1 nERoots 1 sub {
      /EIdx ED
      /YVal ERoots EIdx get def
      /ccxy QVal YVal cceval def
      /cxxy QVal YVal cxeval def
      ccxy abs epsilonMax lt cxxy abs epsilonMax lt and {
        QVal YVal SaveInter
      } if
    } for
  } for
  Inters nInters SortInters% push the intersections on stack.
end} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def product (Ghostscript)
search {pop pop pop revision 927 gt}{pop false} ifelse{/BorderArrayPatch{}
def}{/BorderArrayPatch{[exch{dup dup type/integertype eq exch type/realtype
eq or{BPToDvips}if}forall]}def} ifelse /HyperBorder {1 PDFToDvips}
def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx pdf@lly pdf@urx
pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly exch def dup
DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx exch
def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setblendmode where {pop} {/.setblendmode{pop}def} ifelse /.setfillconstantalpha
where {pop /.setopacityalpha {.setfillconstantalpha} def} {/.setopacityalpha
where {pop} {/.setopacityalpha {pop} def} ifelse} ifelse /.pgfsetfillopacityalpha{/pgffoa
exch def /.setfillconstantalpha where {pop pgffoa .setfillconstantalpha}
{/pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath
fill grestore newpath}bind def /pgfeofill{gsave pgffoa .setopacityalpha
eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}
ifelse} bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def /.setstrokeconstantalpha
where {pop pgfsoa .setstrokeconstantalpha} {/pgfstr{gsave pgfsoa .setopacityalpha
stroke grestore newpath}bind def} ifelse}bind def /pgffoa 1 def /pgfsoa
1 def /.pushpdf14devicefilter where {pop [userdict /bop-hook known
{userdict /bop-hook get aload pop} if {0 .pushpdf14devicefilter} aload
pop] cvx userdict exch /bop-hook exch put [userdict /eop-hook known
{userdict /eop-hook get aload pop} if {.poppdf14devicefilter} aload
pop] cvx userdict exch /eop-hook exch put} if systemdict /pdfmark known
not {userdict /pdfmark systemdict /cleartomark get put} if end

  /pgfwritesamplecmyk { 4 index 0 5 index pgfcheckcolorrange 255 mul
round cvi put 4 index 1 4 index pgfcheckcolorrange 255 mul round cvi
put 4 index 2 3 index pgfcheckcolorrange 255 mul round cvi put 4 index
3 2 index pgfcheckcolorrange 255 mul round cvi put pop pop pop pop
} bind def /pgfwritesamplergb { 3 index 0 4 index pgfcheckcolorrange
255 mul round cvi put 3 index 1 3 index pgfcheckcolorrange 255 mul
round cvi put 3 index 2 2 index pgfcheckcolorrange 255 mul round cvi
put pop pop pop } bind def /pgfwritesamplegray { pgfcheckcolorrange
16777215 mul round cvi 1 index 0 2 index -16 bitshift put 1 index 1
2 index 65535 and -8 bitshift put 1 index 2 2 index 255 and put pop
} bind def /pgfcheckcolorrange { dup 0.0 lt {pop 0.0} if dup 1.0 gt
{pop 1.0} if } bind def /pgfchanneldepthcmyk 8 def /pgfchanneldepthrgb
8 def /pgfchanneldepthgray 24 def /pgfcolorsamplecmyk 4 string def
/pgfcolorsamplergb 3 string def /pgfcolorsamplegray 3 string def /pgfrangecmyk
[0 1 0 1 0 1 0 1] def /pgfrangergb [0 1 0 1 0 1] def /pgfrangegray
[0 1] def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: Dingbats
%!PS-AdobeFont-1.0: Dingbats 001.005
%%CreationDate: Tue Oct 19 1999
% Copyright URW Software, Copyright 1997 by URW
% URW Software, Copyright 1997 by URW
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (001.005) readonly def
/Notice (URW Software, Copyright 1997 by URW. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright URW Software, Copyright 1997 by URW) readonly def
/FullName (Dingbats ) readonly def
/FamilyName (Dingbats) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -72 def
/UnderlineThickness 36 def
end readonly def
/FontName /Dingbats def
/PaintType 0 def
/WMode 0 def
/FontBBox {-1 -143 981 819} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 113 /a75 put
readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB737CF9024F3D038DF9A0002D
8FB689C5F5000C3ADDAFE55EDCBC4E54B36A58190743E32FDCA7A24B64F5E7F9
DC901DE44A25E99E322B3D3CBC10C0412B0531B14E81134FD1DEC47BCB7514E4
64E7550B900404A017C92336BC792744F6F38904282AFE8C998D4B9DB7893830
A6A01872E9D6AABF66C4B08716A39BD9E5ACC0641E506B70430524E780517E59
81EAECFCF9798A634318B8D160438435B65CC6910E609F13A4963AEF2B2540DA
DDD64E0E1D15EFDD5D36D4FCD9E4D81E21D52784DD3DBB741AB5FC052F481B1A
A701AB81CF4EB85075726F3FEC0872C02EBF4D62F5DFB8990C1A0CC8161F83A2
D01108B6C4AEC3845BB4F61288F733429B7B558A225D582AC04BEBF127E8DB14
B59F027502AF59E46E0063B792D35B2DA4EE7DC3F2A64DB325318C1CB1A57504
3527B10BDC733305E18032A64A1002439BE13D163AEE778CAAF5A7A8D00CCCCA
673B8FA9A99551594E85F21580733527E4E19743F4C932D443625DB353CA959B
FBB3BC7996F1F3559E8738D7B3FF1FC8AAFD28CE8C9CDF3CC10A8E7DCE003893
8BB497D690310A0380F290601BE482029578B45097DBD56F52352D7F931A1A1C
735A74CA33FC62A04E1D1E1B023877B96EA2AE6E5E42682E9F4BABD109F039E3
CDCC6B0F9404DA157F91B61905B34C39BD0543872FEBA04FADF1DD613E1E9822
560851385E512B3754A099D21B332D2C9547EEE2B94EBC03B2D954DE0D64D28B
5C0305C968BF1EA14529BE16F9E7F147B08D71B9332ABB7B5EF1B8B60A8D19F5
22B497164EA1A20E17E9B45FE94A09D54FA74709C83B0824F96BC972F4FD728A
BEBD57EFF668607F499E1C51E9FB45286F4C13BD0AFA0A508F56824CF0EAA82F
4FE235BBA8D245C937FACAF4DFF3681FBA6D35EEBA001B55704878F22E7A2C86
476C1CCF1FDAD0E29EE5CB818640B6853A362F764E9A5DBE640CA905A9146590
3F8F2CE8881EADDBC6FA9C1505D0EACDA995DA8D00B9EB755B79D90D68B335F9
49FBCE867D0F7DE2076A879038601083B20389216CB01A808CF4069034CD1152
FF9BEFCB0DB36F87FBFFD269DDA23439D738D84DA9C96CC7435484DA8BF6FB1A
34BC1DA8F3FE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600
(/home/fenarius/Travail/Cours/NSITerminale/docs/evaluations/EP blanches/Sujet1/sujet1.dvi)
@start
%DVIPSBitmapFont: Fa tcrm1095 10.95 1
[/Grave/Acute/Circumflex/Tilde/Dieresis/Hungarumlaut/Ring/Caron/Breve/Macron
/Dotaccent/cedilla/ogonek/quotesinglbase.ts1 4{/.notdef}repeat
/quotedblbase.ts1/.notdef/.notdef/twelveudash/threequartersemdash
/afii61664.cap/arrowleft/arrowright/tieaccentlowercase/tieaccentcapital
/tieaccentlowercase.new/tieaccentcapital.new/.notdef/afii61664.asc/uni2422 3
{/.notdef}repeat/dollar/.notdef/.notdef/quotesingle/.notdef/.notdef
/asteriskmath/.notdef/comma/hyphendbl/period/fraction/zerooldstyle
/oneoldstyle/twooldstyle/threeoldstyle/fouroldstyle/fiveoldstyle/sixoldstyle
/sevenoldstyle/eightoldstyle/nineoldstyle/.notdef/.notdef/angleleft/minus
/angleright 14{/.notdef}repeat/uni2127/.notdef/circle 7{/.notdef}repeat
/Omega 3{/.notdef}repeat/uni301A/.notdef/uni301B/arrowup/arrowdown/grave.ts1
/.notdef/born/divorced/died 7{/.notdef}repeat/leaf/married/musicalnote 15{
/.notdef}repeat/tildelow/hyphendbl.alt/breve.ts1/caron.ts1/hungarumlaut.ts1
/dblgrave.ts1/dagger/daggerdbl/uni2016/perthousand/bullet/uni2103
/dollaroldstyle/centoldstyle/florin/colonmonetary/uni20A9/uni20A6/guarani
/peso/lira/recipe/uni203D/gnaborretni/dong/trademark/uni2031/paragraph.alt
/uni0E3F/afii61352/discount/estimated/openbullet/uni2120/uni2045/uni2046
/cent/sterling/currency/yen/brokenbar/section/dieresis.ts1/copyright
/ordfeminine/copyleft/logicalnot/uni2117/registered/macron.ts1/degree
/plusminus/twosuperior/threesuperior/acute.ts1/mu/paragraph/periodcentered
/uni203B/onesuperior/ordmasculine/radical/onequarter/onehalf/threequarters
/Euro 22{/.notdef}repeat/multiply 31{/.notdef}repeat/divide 9{/.notdef}
repeat]
A/EN0 X IEn S/IEn X FBB FMat/FMat[0.0109589 0 0 -0.0109589
0 0]N/FBB[-18 -27 131 70]N
/Fa 1 62 df<FFFFFFFFFFFFFFE0FFFFFFFFFFFFFFE03B027B9746>61
D E
/Fa load 0 Fa currentfont 91.25 scalefont put/FMat X/FBB
X/IEn X
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb ecti1095 10.95 20
[/grave/acute/circumflex/tilde/dieresis/hungarumlaut/ring/caron/breve/macron
/dotaccent/cedilla/ogonek/quotesinglbase/guilsinglleft/guilsinglright
/quotedblleft/quotedblright/quotedblbase/guillemotleft/guillemotright/endash
/emdash/afii61664/perthousandzero/dotlessi/dotlessj/ff/fi/fl/ffi/ffl/uni2423
/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright/parenleft
/parenright/asterisk/plus/comma/hyphen/period/slash/zero/one/two/three/four
/five/six/seven/eight/nine/colon/semicolon/less/equal/greater/question/at/A
/B/C/D/E/F/G/H/I/J/K/L/M/N/O/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash
/bracketright/asciicircum/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o
/p/q/r/s/t/u/v/w/x/y/z/braceleft/bar/braceright/asciitilde/hyphen.alt/Abreve
/Aogonek/Cacute/Ccaron/Dcaron/Ecaron/Eogonek/Gbreve/Lacute/Lcaron/Lslash
/Nacute/Ncaron/Eng/Ohungarumlaut/Racute/Rcaron/Sacute/Scaron/Scedilla/Tcaron
/Tcommaaccent/Uhungarumlaut/Uring/Ydieresis/Zacute/Zcaron/Zdotaccent/IJ
/Idotaccent/dcroat/section/abreve/aogonek/cacute/ccaron/dcaron/ecaron
/eogonek/gbreve/lacute/lcaron/lslash/nacute/ncaron/eng/ohungarumlaut/racute
/rcaron/sacute/scaron/scedilla/tcaron/tcommaaccent/uhungarumlaut/uring
/ydieresis/zacute/zcaron/zdotaccent/ij/exclamdown/questiondown/sterling
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute
/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde/Ograve
/Oacute/Ocircumflex/Otilde/Odieresis/OE/Oslash/Ugrave/Uacute/Ucircumflex
/Udieresis/Yacute/Thorn/SS/agrave/aacute/acircumflex/atilde/adieresis/aring
/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex
/idieresis/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/oe/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/germandbls]
A/EN1 X IEn S/IEn X FBB FMat/FMat[0.0109589 0 0 -0.0109589
0 0]N/FBB[-4 -25 104 85]N
/Fb 20 234 df<01E007F00FF80FF80FF80FF80FF80FF807B80030003000300070006000
E000C001C00180038007000E000C001C0038007000E000C0000D1B6CBE1C>39
D<000000018000000007800000000F000000001C0000000038000000007000000000E000
000001E000000003C000000007800000000F000000001E000000003E000000007C000000
007800000000F000000001F000000003E000000003E000000007C000000007800000000F
800000001F000000001F000000003E000000003E000000007C000000007C00000000FC00
000000F800000001F800000001F000000001F000000003F000000003E000000007E00000
0007E000000007C00000000FC00000000FC00000000F800000000F800000001F80000000
1F800000001F000000001F000000003F000000003F000000003E000000003E000000007E
000000007E000000007C000000007C000000007C000000007C000000007C000000007C00
000000F800000000F800000000F800000000F800000000F800000000F800000000F80000
0000F800000000F800000000F800000000F8000000007800000000780000000078000000
007800000000780000000078000000003C000000003C000000003C000000003C00000000
1E000000001E000000000E000000000F0000000007000000000700000000038000000003
8000000001C000000000E00000000060000000215A73C325>I<00000300000003800000
0380000001C0000000E0000000E0000000700000007000000078000000380000003C0000
003C0000003C0000001E0000001E0000001E0000001E0000001F0000001F0000000F0000
000F0000000F0000000F0000000F0000000F0000000F0000001F0000001F0000001F0000
001F0000001F0000001F0000001F0000001F0000001F0000003F0000003F0000003E0000
003E0000003E0000007E0000007E0000007C0000007C000000FC000000FC000000F80000
00F8000001F8000001F8000001F0000001F0000003F0000003E0000003E0000007E00000
07C0000007C000000F8000000F8000001F8000001F0000003F0000003E0000003E000000
7C0000007C000000F8000000F8000001F0000001E0000003E0000007C00000078000000F
8000001F0000001E0000003C0000007C000000F8000000F0000001E0000003C000000780
00000F0000001E0000003C00000070000000E0000000C0000000205A7FC325>I<0001FF
FFFE0001FFFFFE0001FFFFFC000003FE00000003FC00000003F800000003F800000003F8
00000007F800000007F000000007F000000007F00000000FF00000000FE00000000FE000
00000FE00000001FE00000001FC00000001FC00000001FC00000003FC00000003F800000
003F800000003F800000007F800000007F000000007F000000007F00000000FF00000000
FE00000000FE00000000FE00000001FE00000001FC00000001FC00000001FC00000003FC
00000003F800000003F800000003F800000007F800000007F000000007F000000007F000
00000FF00000000FE00000000FE00000000FE00000001FE00000001FC00000001FC00000
001FC00000003FC00000003F800000003F800000007F800000007F800000007F00000000
FF800000FFFFFF0000FFFFFF0000FFFFFF0000273E7BBD23>73 D<00007E00000001FF80
000007C1C380001F80EFC0003F00FFC0007E007FC000FC007F8001F8003F8003F0003F80
03F0003F8007E0003F000FE0003F000FC0003F001FC0007F001FC0007E003F80007E003F
80007E003F8000FE007F8000FC007F0000FC007F0000FC007F0001FC00FF0001F800FE00
01F800FE0001F800FE0003F800FE0003F038FC0003F038FC0003F038FC0007F038FC0007
E078FC000FE0707C000FE0707C001FE0F07E003FE0E03E007FE0E03E00F3E1E01F01E3E1
C00F8781E38003FF00FF0000FC003E00252977A72E>97 D<000000003F800000001FFF80
0000001FFF000000001FFF00000000007F00000000007F00000000007E00000000007E00
00000000FE0000000000FE0000000000FC0000000000FC0000000001FC0000000001FC00
00000001F80000000001F80000000003F80000000003F80000000003F00000000003F000
00000007F00000000007F00000000007E00000007E07E0000001FF8FE0000007C1CFE000
001F80EFC000003F00FFC000007E007FC00000FC007FC00001F8003F800003F0003F8000
03F0003F800007E0003F80000FE0003F00000FC0003F00001FC0007F00001FC0007F0000
3F80007E00003F80007E00003F8000FE00007F8000FE00007F0000FC00007F0000FC0000
7F0001FC0000FF0001FC0000FE0001F80000FE0001F80000FE0003F80000FE0003F83800
FC0003F03800FC0003F03800FC0007F03800FC0007F07800FC000FE070007C000FE07000
7C001FE0F0007E003FE0E0003E007FE0E0003E00F3E1E0001F01E3E1C0000F8781E38000
03FF00FF000000FC003E0000294077BE2E>100 D<00003F000001FFE00007C0F0001F00
78007E007800FC003C01F8003C03F0003C07F0003C0FE0007C0FC000781FC000783F8000
F83F8001F07F8007E07F001FC07F01FF007FFFF800FFFF8000FE000000FE000000FE0000
00FE000000FC000000FC000000FC000000FC000000FC000000FC000000FC00000CFC0000
1CFC00003C7C0000787C0000F07E0001E03E0003C01F000F800F001E000780FC0003FFE0
0000FF00001E2976A729>I<0000700001FC0001FC0001FC0001F80001F80000E0000000
000000000000000000000000000000000000000000000000000000000000000000000000
007C0001FF00038F800707800E07C01E07C01C07C03C0FC0380FC0380FC0781FC0701F80
701F80F03F80F03F00003F00007F00007E0000FE0000FC0000FC0001FC0001F80001F800
03F80003F00003F03807F03807E0380FE0780FC0700FC0700FC0F00F80E00F80E00F81C0
0F83C00F838007870003FE0000F800163D79BB1C>105 D<00000003800000000FC00000
001FC00000001FC00000001FC00000001F800000000F0000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000007C00000003FF000000078F8000000E07C00
0001C07C000003C07C000003807E000007007E000007007E00000E00FE00000E00FC0000
1E00FC00001C00FC00003C01FC00003C01FC00000001F800000001F800000003F8000000
03F800000003F000000003F000000007F000000007F000000007E000000007E00000000F
E00000000FE00000000FC00000000FC00000001FC00000001FC00000001F800000001F80
0000003F800000003F800000003F000000003F000000007F000000007F000000007E0000
00007E00000000FE00000000FE00000000FC00000000FC00000001FC00000001F8000000
01F800000001F800003C03F000007E03F00000FE07E00000FE07C00000FE0F800000FC1F
000000F03E000000707C0000003FF00000000FC0000000224F83BB1C>I<0007F003FFF0
03FFE003FFE0000FE0000FE0000FC0000FC0001FC0001FC0001F80001F80003F80003F80
003F00003F00007F00007F00007E00007E0000FE0000FE0000FC0000FC0001FC0001FC00
01F80001F80003F80003F80003F00003F00007F00007F00007E00007E0000FE0000FE000
0FC0000FC0001FC0001FC0001F80001F80003F80003F80003F00003F00007F00007F0700
7E07007E0700FE0F00FE0E00FC0E00FC0E00FC1E00FC1C00FC1C007C38007C78003C7000
1FE000078000144079BE17>108 D<01F0003F80007F000007FC01FFE003FFC0000F3E07
C1F80F83F0000E1F0F00FC1E01F8001E1F1C007C3800F8001C1F38007E7000FC003C1FF0
007EE000FC00381FF0007FE000FC00381FE0007FC000FC00783FC0007F8000FC00703FC0
007F8000FC00703F80007F0000FC00703F00007E0000FC00F03F0000FE0001FC00F07F00
00FC0001F800007E0000FC0001F800007E0000FC0001F800007E0001FC0003F80000FE00
01FC0003F00000FC0001F80003F00000FC0001F80003F00000FC0003F80007F00001FC00
03F80007E00001F80003F00007E00001F80003F0000FE00001F80007F0000FC00003F800
07F0001FC0E003F00007E0001F80E003F00007E0001F80E003F0000FE0003F81E007F000
0FE0003F01C007E0000FC0003F01C007E0000FC0003F01C007E0001FC0003E03800FE000
1FC0003E03800FC0001F80003E07000FC0001F80003E07000FC0003F80003E0E001FC000
3F80001E1C001F80003F00000FF8000700000E000003E000432979A74A>I<01F0003F80
0007FC01FFE0000F3E07C1F8000E1F0F00FC001E1F1C007C001C1F38007E003C1FF0007E
00381FF0007E00381FE0007E00783FC0007E00703FC0007E00703F80007E00703F00007E
00F03F0000FE00F07F0000FC00007E0000FC00007E0000FC00007E0001FC0000FE0001F8
0000FC0001F80000FC0001F80000FC0003F80001FC0003F00001F80003F00001F80007F0
0001F80007E00003F8000FE07003F0000FC07003F0000FC07003F0001FC0F007F0001F80
E007E0001F80E007E0001F81E007E0001F01C00FE0001F01C00FC0001F03800FC0001F03
800FC0001F07001FC0000F0E001F800007FC0007000001F0002C2979A733>I<00007C00
C00001FF03C00007C387C0001F01CF80003E00EF80007C00FF8000FC007F8001F8007F00
03F0007F0003F0007F0007E0007F000FE0007E000FC0007E001FC0007E001FC000FE003F
8000FC003F8000FC003F8000FC007F8001FC007F0001F8007F0001F8007F0001F800FF00
03F800FE0003F000FE0003F000FE0003F000FE0007F000FC0007E000FC0007E000FC0007
E000FC000FE000FC000FC0007C001FC0007C003FC0007C007FC0003E00FF80003E01FF80
001F03DF80000F07BF800007FE3F000001F83F000000003F000000007F000000007E0000
00007E000000007E00000000FE00000000FC00000000FC00000000FC00000001FC000000
01F800000001F800000003F800000007F8000001FFFFE00001FFFFE00001FFFFE000223A
77A729>113 D<01F000FE0007FC03FF800F3E0F03E00E1F1C01E01E1F3807E01C1F7007
F03C1FF00FE0381FE00FE0381FC00FE0783FC00380703F800000703F800000703F000000
F03F000000F07F000000007E000000007E000000007E00000000FE00000000FC00000000
FC00000000FC00000001FC00000001F800000001F800000001F800000003F800000003F0
00000003F000000003F000000007F000000007E000000007E000000007E00000000FE000
00000FC00000000FC00000000FC00000001FC00000001F800000000700000000242979A7
26>I<00007F800001FFE00007C0F8001E003C003C001C003C001E0078000E00F0003E00
F0007E00F0007E01F0007C01F0007C01F0001001F8000001FC000001FF800001FFF80000
FFFF0000FFFF80007FFFC0001FFFE00007FFE000007FF000000FF0000003F0000003F000
0001F03E0001F07E0000F07F0001F0FE0001E0FE0001E0FC0001E0F80003C0F000078070
00078078000F003C003C001F00F80007FFE00000FF00001F297AA725>I<0001C0000003
F0000007F0000007F0000007E0000007E000000FE000000FE000000FC000000FC000001F
C000001FC000001F8000001F8000003F8000003F8000003F0000003F00007FFFFF80FFFF
FF80FFFFFF00007E000000FE000000FE000000FC000000FC000001FC000001FC000001F8
000001F8000003F8000003F8000003F0000003F0000007F0000007F0000007E0000007E0
00000FE000000FE000000FC000000FC000001FC000001FC01C001F801C001F801C003F80
3C003F8038003F0078003F0070003F00F0003F00E0003F01C0001F03C0001F0780000F0F
000007FC000001F00000193A78B81E>I<007C0000000001FF00003800038F8000FC0007
078000FC000E07C000FC001E07C001FC001C07C001FC003C0FC001F800380FC001F80038
0FC003F800781FC003F800701F8003F000701F8003F000F03F8007F000F03F0007F00000
3F0007E000007F0007E000007E000FE000007E000FE00000FE000FC00000FC000FC00000
FC001FC00001FC001FC00001F8001F800001F8001F800001F8003F800003F8003F838003
F0003F038003F0003F038003F0007F038003F0007F078003F0007E070003F0007E070003
F000FE0F0003F000FE0E0001F001FE0E0001F803BE1C0000F8073E1C00007C1E1E380000
3FF80FF0000007E003E000292979A730>I<00007000000000F800000001FC00000001FC
00000001FE00000000FF000000007F000000003F800000001FC00000000FC000000007E0
00000003F000000000F00000000060000000000000000000000000000000000000000000
000000000000007E00000001FF80000007C1C380001F80EFC0003F00FFC0007E007FC000
FC007F8001F8003F8003F0003F8003F0003F8007E0003F000FE0003F000FC0003F001FC0
007F001FC0007E003F80007E003F80007E003F8000FE007F8000FC007F0000FC007F0000
FC007F0001FC00FF0001F800FE0001F800FE0001F800FE0003F800FE0003F038FC0003F0
38FC0003F038FC0007F038FC0007E078FC000FE0707C000FE0707C001FE0F07E003FE0E0
3E007FE0E03E00F3E1E01F01E3E1C00F8781E38003FF00FF0000FC003E00253C77BA2E>
224 D<000180000007E0000007E0000007F0000007F0000007F8000003FC000001FC0000
007E0000003E0000001F0000000F80000007800000038000000000000000000000000000
0000000000000000003F000001FFE00007C0F0001F0078007E007800FC003C01F8003C03
F0003C07F0003C0FE0007C0FC000781FC000783F8000F83F8001F07F8007E07F001FC07F
01FF007FFFF800FFFF8000FE000000FE000000FE000000FE000000FC000000FC000000FC
000000FC000000FC000000FC000000FC00000CFC00001CFC00003C7C0000787C0000F07E
0001E03E0003C01F000F800F001E000780FC0003FFE00000FF00001E3C76BA29>232
D<000000038000000007C00000000FC00000001FC00000003FC0000000FF80000001FE00
000003FC00000007F00000000FC00000001F800000003E000000007C0000000030000000
00000000000000000000000000000000000000000000000000003F00000001FFE0000007
C0F000001F007800007E00780000FC003C0001F8003C0003F0003C0007F0003C000FE000
7C000FC00078001FC00078003F8000F8003F8001F0007F8007E0007F001FC0007F01FF00
007FFFF80000FFFF800000FE00000000FE00000000FE00000000FE00000000FC00000000
FC00000000FC00000000FC00000000FC00000000FC00000000FC00000C00FC00001C00FC
00003C007C000078007C0000F0007E0001E0003E0003C0001F000F80000F001E00000780
FC000003FFE0000000FF000000223C76BA29>I E
/Fb load 0 Fb currentfont 91.25 scalefont put/FMat X/FBB
X/IEn X
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc ectt1095 10.95 9
/EN1 load IEn S/IEn X FBB FMat/FMat[0.0109589 0 0 -0.0109589
0 0]N/FBB[-1 -24 52 76]N
/Fc 9 120 df<007FF000000003FFFE00000007FFFF8000000FFFFFC000001FFFFFE000
003FFFFFF000003FC01FF800003FC003FC00003FC001FC00003FC000FE00001F80007E00
000F00007F00000000003F00000000003F00000000003F00000000003F000000007FFF00
000007FFFF0000003FFFFF000001FFFFFF000007FFFFFF00000FFFF83F00001FFE003F00
003FF0003F00007FC0003F00007F00003F0000FE00003F0000FC00003F0000FC00003F00
00FC00003F0000FC00003F0000FC00007F0000FE00007F00007F0000FF00007F8003FF80
003FE01FFFFF003FFFFFFFFF801FFFFFFFFF800FFFFFDFFF8007FFFF0FFF8001FFFC01FF
00007FE0000000292A7BA82F>97 D<000003FF8000000007FFC000000007FFC000000007
FFC000000007FFC000000003FFC0000000000FC0000000000FC0000000000FC000000000
0FC0000000000FC0000000000FC0000000000FC0000000000FC0000000000FC000000000
0FC0000003FC0FC000001FFF0FC000007FFFCFC00000FFFFEFC00001FFFFFFC00003FFFF
FFC00007FE07FFC0000FF801FFC0001FF0007FC0001FC0003FC0003F80003FC0003F8000
1FC0007F00001FC0007F00000FC0007E00000FC000FE00000FC000FE00000FC000FC0000
0FC000FC00000FC000FC00000FC000FC00000FC000FC00000FC000FC00000FC000FC0000
0FC000FC00000FC000FE00000FC0007E00001FC0007E00001FC0007F00001FC0003F8000
3FC0003F80007FC0001FC0007FC0001FE000FFC0000FF801FFC00007FE07FFFF0007FFFF
FFFF8003FFFFEFFF8001FFFFCFFF80007FFF8FFF80001FFE07FF000007F800000029397D
B72F>100 D<0003FE0000000FFF8000003FFFE00000FFFFF00001FFFFF80003FFFFFC00
07FE07FE000FF800FF000FF0007F001FC0003F803FC0001F803F80001FC03F00000FC07F
00000FC07E00000FC07E00000FE0FE000007E0FC000007E0FFFFFFFFE0FFFFFFFFE0FFFF
FFFFE0FFFFFFFFE0FFFFFFFFE0FFFFFFFFC0FC00000000FE000000007E000000007E0000
00007F000000003F800003C03F800007E01FC00007E01FE0000FE00FF8001FC007FE003F
C007FF80FF8003FFFFFF8001FFFFFF00007FFFFC00003FFFF800000FFFE0000001FF0000
232A7BA82F>I<000001FF00000007FFC000001FFFE000007FFFE00000FFFFF00000FFFF
F00001FF0FF00003FC0FF00003F807E00007F001800007E000000007E000000007E00000
0007E000000007E000000007E000000007E000000007E000007FFFFFFF80FFFFFFFFC0FF
FFFFFFC0FFFFFFFFC0FFFFFFFFC07FFFFFFF800007E000000007E000000007E000000007
E000000007E000000007E000000007E000000007E000000007E000000007E000000007E0
00000007E000000007E000000007E000000007E000000007E000000007E000000007E000
000007E000000007E000000007E000000007E000000007E000000007E000000007E00000
0007E000000007E000003FFFFFFC007FFFFFFE007FFFFFFE007FFFFFFE007FFFFFFE003F
FFFFFC0024397DB82F>I<7FF000000000FFF800000000FFF800000000FFF800000000FF
F8000000007FF80000000001F80000000001F80000000001F80000000001F80000000001
F80000000001F80000000001F80000000001F80000000001F80000000001F80000000001
F80FF0000001F83FFC000001F8FFFE000001FBFFFF000001FFFFFF800001FFFFFF800001
FFF03FC00001FFC01FC00001FF800FE00001FF000FE00001FE0007E00001FC0007E00001
FC0007E00001FC0007E00001F80007E00001F80007E00001F80007E00001F80007E00001
F80007E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007E00001
F80007E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007E00001
F80007E00001F80007E00001F80007E00001F80007E0007FFFE07FFF80FFFFF0FFFFC0FF
FFF0FFFFC0FFFFF0FFFFC0FFFFF0FFFFC07FFFE07FFF802A387EB72F>104
D<0003800000000FE00000000FE00000001FF00000001FF00000001FF00000000FE00000
000FE0000000038000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000003FFFE000007FFFF000007FFFF000007FFF
F000007FFFF000003FFFF000000003F000000003F000000003F000000003F000000003F0
00000003F000000003F000000003F000000003F000000003F000000003F000000003F000
000003F000000003F000000003F000000003F000000003F000000003F000000003F00000
0003F000000003F000000003F000000003F000000003F000000003F000000003F0000000
03F000007FFFFFFF00FFFFFFFF00FFFFFFFF80FFFFFFFF80FFFFFFFF007FFFFFFF002139
79B82F>I<7FFFF000007FFFF80000FFFFF80000FFFFF800007FFFF800007FFFF8000000
01F800000001F800000001F800000001F800000001F800000001F800000001F800000001
F800000001F800000001F800000001F800000001F800000001F800000001F800000001F8
00000001F800000001F800000001F800000001F800000001F800000001F800000001F800
000001F800000001F800000001F800000001F800000001F800000001F800000001F80000
0001F800000001F800000001F800000001F800000001F800000001F800000001F8000000
01F800000001F800000001F800000001F800000001F800000001F800000001F800000001
F800007FFFFFFFE07FFFFFFFE0FFFFFFFFF0FFFFFFFFF07FFFFFFFE07FFFFFFFE024387B
B72F>108 D<00000FF000007FF03FFC0000FFF8FFFE0000FFFBFFFF0000FFFFFFFF8000
FFFFFFFF80007FFFF03FC00001FFC01FC00001FF800FE00001FF000FE00001FE0007E000
01FC0007E00001FC0007E00001FC0007E00001F80007E00001F80007E00001F80007E000
01F80007E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007E000
01F80007E00001F80007E00001F80007E00001F80007E00001F80007E00001F80007E000
01F80007E00001F80007E00001F80007E00001F80007E00001F80007E0007FFFE07FFF80
FFFFF0FFFFC0FFFFF0FFFFC0FFFFF0FFFFC0FFFFF0FFFFC07FFFE07FFF802A287EA72F>
110 D<7FFF801FFFE07FFFC03FFFE0FFFFC03FFFF0FFFFC03FFFF07FFFC03FFFE07FFF80
1FFFE007C000003E0007C000003E0007C000003E0007E000007E0003E000007C0003E000
007C0003E000007C0003E000007C0003E000007C0001F00000F80001F00F80F80001F01F
C0F80001F03FE0F80001F03FE0F80001F03FE0F80000F87FF0F00000F87DF1F00000F87D
F1F00000F8FDF1F00000F8FDF9F00000F8F9F9F0000078F8F9E0000079F8F9E000007DF8
F9E000007DF8F9E000007DF079E000007DF07BE000003FF07FC000003FE07FC000003FE0
3FC000003FE03FC000003FC01FC000001F800F80002C277FA62F>119
D E
/Fc load 0 Fc currentfont 91.25 scalefont put/FMat X/FBB
X/IEn X
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd ecrm1095 10.95 32
/EN1 load IEn S/IEn X FBB FMat/FMat[0.0109589 0 0 -0.0109589
0 0]N/FBB[-5 -25 96 85]N
/Fd 32 118 df<3E001F007F003F807F003F80FF807FC07F003F807F003F807F003F807F
003F807F003F807F003F807F003F807F003F807F003F807E001F803E001F003E001F003E
001F003E001F003E001F003E001F003E001F003E001F003E001F001C000E001C000E001C
000E001C000E001C000E001C000E001C000E001C000E001C000E00180006001A2177BF2D
>34 D<0000300000700000E00001C0000380000700000F00001E00003C00003C00007800
00F00000F00001E00001E00003C00003C00007C0000780000F80000F80000F00001F0000
1F00001E00003E00003E00003E00003C00007C00007C00007C00007C00007C00007C0000
780000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000
F80000F80000F80000F80000F80000F80000F800007800007C00007C00007C00007C0000
7C00007C00003C00003E00003E00003E00001E00001F00001F00000F00000F80000F8000
07800007C00003C00003C00001E00001E00000F00000F000007800003C00003C00001E00
000F000007000003800001C00000E0000070000030145A77C323>40
D<C00000E000007000003800001C00000E00000F000007800003C00003C00001E00000F0
0000F000007800007800003C00003C00003E00001E00001F00001F00000F00000F80000F
800007800007C00007C00007C00003C00003E00003E00003E00003E00003E00003E00001
E00001F00001F00001F00001F00001F00001F00001F00001F00001F00001F00001F00001
F00001F00001F00001F00001F00001F00001F00001E00003E00003E00003E00003E00003
E00003E00003C00007C00007C00007C0000780000F80000F80000F00001F00001F00001E
00003E00003C00003C0000780000780000F00000F00001E00003C00003C0000780000F00
000E00001C0000380000700000E00000C00000145A7BC323>I<1C007F00FF80FF80FFC0
FFC0FFC07FC01CC000C000C000C000C000C001C00180018003800300070006000E000C00
1C003800700060000A1B788819>44 D<1C007F00FF80FF80FF80FF80FF807F001C000909
788819>46 D<0000C0000003C0000007C000001FC000007FC00007FFC000FFFFC000FF9F
C000F81FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001F
C000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001F
C000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001F
C000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001F
C000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001F
C000001FC000001FC000001FC000001FC000007FF000FFFFFFF8FFFFFFF8FFFFFFF81D3D
78BC2D>49 D<0007FC0000003FFF800000FFFFE00001F807F80007C003FC000F0001FE00
0E0000FF001C00007F801F80007F803FC0003FC03FE0003FC03FE0003FC03FE0003FC03F
E0003FC03FE0003FC01FC0003FC00700003FC00000003F800000007F800000007F800000
007F00000000FF00000000FE00000001FC00000003F800000003F00000000FC00000003F
0000001FFC0000001FFF800000000FE000000003F800000001FC00000000FE000000007F
000000007F800000003FC00000003FC00000003FE00000003FE00000001FE00000001FF0
0000001FF00C00001FF03F00001FF07F80001FF0FFC0001FF0FFC0001FF0FFC0001FF0FF
C0001FF0FFC0003FE0FF80003FE07F00003FC07000003FC07000007F803800007F801C00
00FF000F0001FE0007C003FC0003F80FF00000FFFFE000003FFF80000007FC0000243F7C
BC2D>51 D<0000000E000000000E000000001E000000003E000000003E000000007E0000
0000FE00000000FE00000001FE00000003FE00000003FE00000006FE0000000EFE000000
0CFE00000018FE00000038FE00000030FE00000060FE000000E0FE000000C0FE00000180
FE00000380FE00000300FE00000600FE00000E00FE00000C00FE00001800FE00003800FE
00003000FE00006000FE0000E000FE0000C000FE00018000FE00038000FE00030000FE00
060000FE000E0000FE000C0000FE00180000FE00380000FE00300000FE00600000FE00E0
0000FE00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000FE00000000FE00000000FE000000
00FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000
FE00000000FE00000001FF000001FFFFFF0001FFFFFF0001FFFFFF283E7EBD2D>I<3000
00000038000000003E000000003FFFFFFFFC3FFFFFFFFC3FFFFFFFFC3FFFFFFFF87FFFFF
FFF87FFFFFFFF07FFFFFFFE070000000E060000001C06000000380600000030060000007
00C000000E00C000000C00C000001C00C00000380000000030000000007000000000E000
000001C000000001800000000380000000070000000007000000000E000000000E000000
001C000000001C000000003C00000000380000000078000000007800000000F800000000
F000000001F000000001F000000001F000000003F000000003F000000003F000000007F0
00000007E000000007E000000007E00000000FE00000000FE00000000FE00000000FE000
00000FE00000001FE00000001FE00000001FE00000001FE00000001FE00000001FE00000
001FE00000001FE00000001FE00000001FE00000000FC00000000780000026407BBD2D>
55 D<0003FC0000001FFF8000007FFFE00000FC03F80001E000FC0003C0003E00078000
1F000F00000F000E00000F801E000007801C000007C03C000003C03C000003C03C000003
C03E000003C03E000003C03F000003C03F000007C03F800007801FE0000F801FF0000F00
1FFC001E000FFE003C000FFF80780007FFC0F00003FFF1E00001FFFF800000FFFF000000
3FFF0000001FFFC000000FFFE000001FFFF8000078FFFC0001F07FFE0003C01FFF000780
0FFF800F0003FFC01F0001FFC01E00007FE03C00003FE07C00000FE078000007F0780000
03F0F8000003F0F0000001F0F0000001F0F0000000F0F0000000F0F0000000F0F0000000
F0F8000000E078000001E078000001E07C000001C03E000003C01E000007801F00000F00
0FC0001E0007E0007C0001FC03F80000FFFFE000001FFF80000003FC0000243F7CBC2D>
I<1C007F00FF80FF80FF80FF80FF807F001C000000000000000000000000000000000000
000000000000000000000000000000000000000000000000001C007F00FF80FF80FF80FF
80FF807F001C00092778A619>58 D<0000000000000E0000000000003C000000000000F0
000000000007C000000000001F00000000000078000000000001E0000000000007800000
0000001E000000000000F8000000000003E000000000000F0000000000003C0000000000
00F0000000000003C000000000001F0000000000007C000000000001E000000000000780
00000000001E00000000000078000000000003E000000000000F8000000000003C000000
000000F0000000000000F00000000000003C0000000000000F80000000000003E0000000
000000780000000000001E0000000000000780000000000001E00000000000007C000000
0000001F00000000000003C0000000000000F00000000000003C0000000000000F000000
00000003E0000000000000F80000000000001E0000000000000780000000000001E00000
00000000780000000000001F00000000000007C0000000000000F00000000000003C0000
000000000E373279AF46>60 D<FFFFFFFFFFFFFFE0FFFFFFFFFFFFFFE000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000FFFFFFFFFFFFFFE0FFFFFFFFFFFFFFE03B147BA046>I<
E0000000000000780000000000001E00000000000007C0000000000001F0000000000000
3C0000000000000F00000000000003C0000000000000F00000000000003E000000000000
0F80000000000001E0000000000000780000000000001E00000000000007800000000000
01F00000000000007C0000000000000F00000000000003C0000000000000F00000000000
003C0000000000000F80000000000003E0000000000000780000000000001E0000000000
001E00000000000078000000000003E000000000000F8000000000003C000000000000F0
000000000003C000000000000F0000000000007C000000000001F0000000000007800000
0000001E00000000000078000000000001E000000000000F8000000000003E0000000000
00F0000000000003C000000000000F0000000000003C000000000001F0000000000007C0
00000000001E00000000000078000000000000E0000000000000373279AF46>I<FFFFFF
FFFFFF80FFFFFFFFFFFF80FFFFFFFFFFFF8000FFC00003FF80007F8000003F80007F8000
001FC0007F80000007C0007F80000003C0007F80000003C0007F80000001C0007F800000
01C0007F80000001C0007F80000000C0007F80000000C0007F80000000C0007F80000000
C0007F8000000060007F8000000060007F8000300060007F8000300060007F8000300060
007F8000300000007F8000300000007F8000300000007F8000700000007F800070000000
7F8000F00000007F8001F00000007F8007F00000007FFFFFF00000007FFFFFF00000007F
FFFFF00000007F8007F00000007F8001F00000007F8000F00000007F8000700000007F80
00700000007F8000300000007F8000300000007F8000300000007F8000300000007F8000
300000007F8000300000007F8000000000007F8000000000007F8000000000007F800000
0000007F8000000000007F8000000000007F8000000000007F8000000000007F80000000
00007F8000000000007F8000000000007F8000000000007F8000000000007F8000000000
007F800000000000FFE000000000FFFFFFF0000000FFFFFFF0000000FFFFFFF000000033
3E7DBD3B>70 D<3FFFFFFFFFFFFF003FFFFFFFFFFFFF003FFFFFFFFFFFFF003FE000FFC0
01FF003F00007F80003F007E00007F80001F807C00007F80000F807800007F8000078070
00007F800003807000007F800003807000007F800003806000007F800001806000007F80
0001806000007F800001806000007F800001806000007F80000180C000007F800000C0C0
00007F800000C0C000007F800000C0C000007F800000C0C000007F800000C00000007F80
0000000000007F800000000000007F800000000000007F800000000000007F8000000000
00007F800000000000007F800000000000007F800000000000007F800000000000007F80
0000000000007F800000000000007F800000000000007F800000000000007F8000000000
00007F800000000000007F800000000000007F800000000000007F800000000000007F80
0000000000007F800000000000007F800000000000007F800000000000007F8000000000
00007F800000000000007F800000000000007F800000000000007F800000000000007F80
0000000000007F800000000000007F800000000000007F800000000000007F8000000000
00007F800000000000007F800000000000007F800000000000007F80000000000000FFC0
000000000001FFE00000000007FFFFFFF800000007FFFFFFF800000007FFFFFFF800003A
3E7DBD41>84 D<FFFEFFFEFC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC
00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC
00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC
00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC
00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC00FC
00FC00FC00FFFEFFFE0F5B78C319>91 D<FFFEFFFE007E007E007E007E007E007E007E00
7E007E007E007E007E007E007E007E007E007E007E007E007E007E007E007E007E007E00
7E007E007E007E007E007E007E007E007E007E007E007E007E007E007E007E007E007E00
7E007E007E007E007E007E007E007E007E007E007E007E007E007E007E007E007E007E00
7E007E007E007E007E007E007E007E007E007E007E007E007E007E007E007E007E007E00
7E007E007E007E007E007E007E007EFFFEFFFE0F5B7FC319>93 D<7FFFFFFFFFFFFCFFFF
FFFFFFFFFEFFFFFFFFFFFFFE7FFFFFFFFFFFFC3704796E46>95 D<001FF0000000FFFC00
0003E03F00000F000FC0001C0007E0001F0003F0003F8001F8003FC000FC003FC000FC00
3FC000FC003FC0007E001F80007E000F00007E000000007E000000007E000000007E0000
00007E0000001FFE000003FFFE00001FF87E00007F807E0001FC007E0007F0007E000FE0
007E001FC0007E003F80007E007F80007E007F00007E007F00007E03FE00007E03FE0000
7E03FE00007E03FE0000FE03FE0000FE03FE0001FE037F0001BE037F0003BE033F80071F
061FC00E1F8E0FF03C0FFC03FFF007F8003FC003E0282A7CA82D>97
D<00000001F800000000FFF800000000FFF800000000FFF80000000007F80000000003F8
0000000001F80000000001F80000000001F80000000001F80000000001F80000000001F8
0000000001F80000000001F80000000001F80000000001F80000000001F80000000001F8
0000000001F80000000001F80000000001F80000000001F80000000001F8000000FF01F8
000007FFC1F800001F80F1F800007C0039F80001F8001DF80003F0000FF80007E00007F8
000FC00003F8000FC00003F8001F800001F8003F800001F8003F000001F8007F000001F8
007F000001F8007F000001F8007E000001F800FE000001F800FE000001F800FE000001F8
00FE000001F800FE000001F800FE000001F800FE000001F800FE000001F800FE000001F8
00FE000001F8007E000001F8007F000001F8007F000001F8003F000001F8003F800001F8
001F800003F8001F800003F8000FC00007F80007E0000FF80003F0000DFC0001F8003DFE
0000FC0071FFF0003F01E1FFF0000FFF81FFF00001FE01F8002C407DBE32>100
D<0003FC0000001FFF8000007E07E00000F801F00001F000F80003E0007C0007C0003E00
0FC0003F001F80001F001F80001F803F00001F803F00000F807F00000F807F00000FC07E
00000FC07E00000FC0FE00000FC0FE00000FC0FFFFFFFFC0FFFFFFFFC0FE00000000FE00
000000FE00000000FE00000000FE00000000FE000000007E000000007F000000007F0000
00007F000000003F000000C03F800000C01F800001C00FC00001800FC000038007E00007
0003F0000E0001F8001C0000FC003800003F01F000000FFFC0000001FE0000222A7DA828
>I<01C00007F0000FF8000FF8000FF8000FF8000FF80007F00001C00000000000000000
000000000000000000000000000000000000000000000000000000000001F8007FF8007F
F8007FF80007F80003F80001F80001F80001F80001F80001F80001F80001F80001F80001
F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001
F80001F80001F80001F80001F80001F80001F80001F80001F80001F80003FC00FFFFE0FF
FFE0FFFFE0133D7EBC19>105 D<01F800FFF800FFF800FFF80007F80003F80001F80001
F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001
F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001
F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001
F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001
F80001F80001F80001F80003FC00FFFFF0FFFFF0FFFFF0143F7EBE19>108
D<01F803FC0001FE0000FFF80FFF8007FFC000FFF83C0FC01E07E000FFF8F003E07801F0
0007F9C003F0E001F80003FB8001F9C000FC0001FB0001F98000FC0001FF0000FF80007E
0001FE0000FF00007E0001FE0000FF00007E0001FC0000FE00007E0001FC0000FE00007E
0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E
0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E
0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E
0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E
0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E
0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E
0003FC0001FE0000FF00FFFFF07FFFF83FFFFCFFFFF07FFFF83FFFFCFFFFF07FFFF83FFF
FC46287EA74B>I<01F803FC0000FFF80FFF8000FFF83C0FC000FFF8F003E00007F9C003
F00003FB8001F80001FB0001F80001FF0000FC0001FE0000FC0001FE0000FC0001FC0000
FC0001FC0000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000
FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000
FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000
FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000
FC0001F80000FC0003FC0001FE00FFFFF07FFFF8FFFFF07FFFF8FFFFF07FFFF82D287EA7
32>I<0001FE0000000FFFC000003F03F000007C00F80001F0003E0003E0001F0007C000
0F8007C0000F800F800007C01F800007E01F000003E03F000003F03F000003F07E000001
F87E000001F87E000001F87E000001F8FE000001FCFE000001FCFE000001FCFE000001FC
FE000001FCFE000001FCFE000001FCFE000001FCFE000001FC7E000001F87E000001F87E
000001F87F000003F83F000003F03F000003F01F800007E00F800007C00FC0000FC007C0
000F8003E0001F0001F0003E0000FC00FC00003F03F000000FFFC0000001FE0000262A7D
A82D>I<01F807F80000FFF81FFF0000FFF8780FC000FFF9E003F00003FB8001F80001FF
0000FC0001FE00007E0001FC00007F0001FC00003F8001F800001F8001F800001FC001F8
00001FC001F800000FE001F800000FE001F800000FE001F800000FF001F8000007F001F8
000007F001F8000007F001F8000007F001F8000007F001F8000007F001F8000007F001F8
000007F001F8000007F001F800000FE001F800000FE001F800000FE001F800000FE001F8
00001FC001F800001FC001F800003F8001FC00003F0001FE00007F0001FE0000FE0001FF
0001FC0001FB8003F80001F9C007E00001F8F81F800001F83FFE000001F807F0000001F8
0000000001F80000000001F80000000001F80000000001F80000000001F80000000001F8
0000000001F80000000001F80000000001F80000000001F80000000001F80000000001F8
0000000003FC00000000FFFFF0000000FFFFF0000000FFFFF00000002C3A7EA732>I<03
F00FC0FFF03FF0FFF0F0F8FFF1C3FC07F183FC03F383FC01F703FC01F603FC01F601F801
FE006001FC000001FC000001FC000001FC000001F8000001F8000001F8000001F8000001
F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001
F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000003
FC0000FFFFF800FFFFF800FFFFF8001E287EA723>114 D<007FC06003FFF8E007C03DE0
1E000FE03C0003E0780001E0780001E0700000E0F00000E0F0000060F0000060F8000060
F8000060FC000060FF0000007FC000007FFE00003FFFE0001FFFFC0007FFFE0003FFFF80
007FFFC00007FFE000003FE000000FF0C00003F0C00001F8C00000F8E00000F8E0000078
E0000078F0000078F0000078F8000078F80000F0FC0000F0FC0001E0FE0001C0F7800780
F1E01F00E0FFFC00C01FE0001D2A7DA824>I<0018000000180000001800000018000000
1800000018000000380000003800000038000000380000007800000078000000F8000000
F8000001F8000003F8000007F800001FFFFFC0FFFFFFC0FFFFFFC001F8000001F8000001
F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001
F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001
F8006001F8006001F8006001F8006001F8006001F8006001F8006001F8006001F8006000
FC00E000FC00C000FC00C0007E01C0003F0380001F87000007FE000001F8001B397EB723
>I<01F80000FC00FFF8007FFC00FFF8007FFC00FFF8007FFC0007F80003FC0003F80001
FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000
FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000
FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000
FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80001
FC0001F80001FC0001F80001FC0001F80003FC0000F80003FC0000FC0007FC0000FC000E
FE00007C001CFF00003E0038FFF8001F80F0FFF80007FFE0FFF80000FF00FC002D297EA7
32>I E
/Fd load 0 Fd currentfont 91.25 scalefont put/FMat X/FBB
X/IEn X
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fe ectt0800 6 7
/EN1 load IEn S/IEn X FBB FMat/FMat[0.02 0 0 -0.02 0
0]N/FBB[-2 -14 30 41]N
/Fe 7 56 df<00E00000E00001E00003E00003E0000FE0007FE000FFE000FFE00079E000
01E00001E00001E00001E00001E00001E00001E00001E00001E00001E00001E00001E000
01E00001E00001E00001E00001E0007FFF807FFF807FFF807FFF80111F7C9E1A>49
D<03FC000FFF001FFF803FFFC07E0FE07803F0F800F0F800F8F80078F800787000780000
780000780000F80000F00001F00003E00007C0000F80001F00007E0000FC0001F80007E0
000FC0001F80783E00787FFFF8FFFFF8FFFFF87FFFF8151F7E9E1A>I<03FC000FFF001F
FFC03FFFE07E07E07C01F07C00F07C00F03800F00001F00001F00003E0000FC003FFC003
FF8003FF8003FFC00007E00001F00000F00000F8000078700078F80078F800F8F800F8F8
01F07E07E07FFFE03FFFC00FFF0003FC0015207E9E1A>I<001F80003F80003F80007B80
007B8000F38001F38001E38003C38007C3800783800F03801F03801E03803C03803C0380
780380F80380FFFFFEFFFFFEFFFFFEFFFFFE000380000380000380000380000380003FF8
007FFC007FFC003FF8171F7F9E1A>I<3FFFE03FFFE03FFFE03FFFE03C00003C00003C00
003C00003C00003C00003CFE003FFF003FFFC03FFFE03F87E03E01F03C00F03800F80000
78000078000078700078F80078F800F8F800F0F803F07E0FE03FFFC01FFF800FFF0003FC
00151F7E9D1A>I<003F0000FFC003FFE007FFF00FE1F01F81F01F01F03E00E07C00007C
0000781000F9FF00F7FF80FFFFC0FFFFE0FE03F0FC01F0F800F8F800F8F00078F80078F8
00787800787800787C00F87C00F03E01F01F87E01FFFC00FFF8007FF0001FC0015207E9E
1A>I<F00000FFFFF8FFFFF8FFFFF8FFFFF8F001F0F003E00007C0000780000F00001F00
001E00003E00003C00007C0000780000F80000F00000F00001F00001E00001E00001E000
01E00003C00003C00003C00003C00003C00003C00003C00001800015207E9E1A>I
E
/Fe load 0 Fe currentfont 50 scalefont put/FMat X/FBB
X/IEn X
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ff ecbx1200 12 8
/EN1 load IEn S/IEn X FBB FMat/FMat[0.01 0 0 -0.01 0
0]N/FBB[-7 -32 119 93]N
/Ff 8 121 df<07C01FF03FF87FFCFFFEFFFEFFFEFFFEFFFEFFFEFFFE7FFC3FF81FF007
C00000000000000000000000000000000000000000000000000000000007C01FF03FF87F
FCFFFEFFFEFFFEFFFEFFFEFFFEFFFE7FFC3FF81FF007C00F2C78AB1F>58
D<FFFFFFFFFFFFFFF800FFFFFFFFFFFFFFF800FFFFFFFFFFFFFFF800FFFFFFFFFFFFFFF8
00FFFFFFFFFFFFFFFC00001FFF000001FFFC00001FFF0000003FFC00001FFF0000000FFC
00001FFF00000003FC00001FFF00000001FC00001FFF00000000FC00001FFF00000000FC
00001FFF000000007E00001FFF000000003E00001FFF000000003E00001FFF000000003E
00001FFF000000001E00001FFF000000001E00001FFF000078001E00001FFF000078001E
00001FFF000078000F00001FFF000078000F00001FFF000078000F00001FFF000078000F
00001FFF0000F8000000001FFF0000F8000000001FFF0000F8000000001FFF0001F80000
00001FFF0003F8000000001FFF001FF8000000001FFFFFFFF8000000001FFFFFFFF80000
00001FFFFFFFF8000000001FFFFFFFF8000000001FFFFFFFF8000000001FFF001FF80000
00001FFF0003F8000000001FFF0001F8000000001FFF0000F8000000001FFF0000F80000
00001FFF0000F80001E0001FFF0000780001E0001FFF0000780001E0001FFF0000780003
C0001FFF0000780003C0001FFF0000780003C0001FFF0000780003C0001FFF0000000003
C0001FFF0000000007C0001FFF0000000007C0001FFF000000000780001FFF0000000007
80001FFF000000000F80001FFF000000000F80001FFF000000001F80001FFF000000001F
80001FFF000000003F80001FFF000000007F00001FFF00000000FF00001FFF00000001FF
00001FFF00000007FF00001FFF0000001FFF00001FFF000001FFFF00FFFFFFFFFFFFFFFF
00FFFFFFFFFFFFFFFE00FFFFFFFFFFFFFFFE00FFFFFFFFFFFFFFFE00FFFFFFFFFFFFFFFE
0043447DC34A>69 D<00003FF800000003FFFF8000000FFFFFE000003FFFFFF000007FF8
3FF80000FFC007FC0001FF8003FE0003FF0001FF0007FE0000FF800FFC0000FF801FFC00
007FC01FF800007FC03FF800003FE03FF800003FE07FF800003FE07FF000003FE07FF000
003FF07FF000001FF0FFF000001FF0FFF000001FF0FFFFFFFFFFF0FFFFFFFFFFF0FFFFFF
FFFFF0FFFFFFFFFFF0FFF000000000FFF000000000FFF000000000FFF000000000FFF000
0000007FF0000000007FF0000000007FF8000000007FF8000000003FF8000000003FF800
0000F01FFC000000F01FFC000001F00FFE000001E007FF000003E003FF800007C001FFC0
000F8000FFF0003F00007FFE01FE00001FFFFFFC000007FFFFF0000001FFFFC00000001F
FE00002C2F7DAD33>101 D<007FC000FFFFC000FFFFC000FFFFC000FFFFC000FFFFC000
03FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC000
01FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC000
01FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC000
01FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC000
01FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC000
01FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC00001FFC000
01FFC00001FFC00001FFC00001FFC000FFFFFF80FFFFFF80FFFFFF80FFFFFF80FFFFFF80
19457CC420>108 D<007F8007FE00000FFC0000FFFF803FFFC0007FFF8000FFFF80FFFF
F001FFFFE000FFFF81FFFFF803FFFFF000FFFF87F01FFC0FE03FF800FFFF8FC00FFE1F80
1FFC0003FF9F000FFF3E001FFE0001FF9E0007FF3C000FFE0001FFBC0007FF78000FFE00
01FFF80003FFF00007FF0001FFF80003FFF00007FF0001FFF00003FFE00007FF0001FFE0
0003FFC00007FF0001FFE00003FFC00007FF0001FFE00003FFC00007FF0001FFC00003FF
800007FF0001FFC00003FF800007FF0001FFC00003FF800007FF0001FFC00003FF800007
FF0001FFC00003FF800007FF0001FFC00003FF800007FF0001FFC00003FF800007FF0001
FFC00003FF800007FF0001FFC00003FF800007FF0001FFC00003FF800007FF0001FFC000
03FF800007FF0001FFC00003FF800007FF0001FFC00003FF800007FF0001FFC00003FF80
0007FF0001FFC00003FF800007FF0001FFC00003FF800007FF0001FFC00003FF800007FF
0001FFC00003FF800007FF0001FFC00003FF800007FF0001FFC00003FF800007FF0001FF
C00003FF800007FF0001FFC00003FF800007FF0001FFC00003FF800007FF0001FFC00003
FF800007FF0001FFC00003FF800007FF00FFFFFF81FFFFFF03FFFFFEFFFFFF81FFFFFF03
FFFFFEFFFFFF81FFFFFF03FFFFFEFFFFFF81FFFFFF03FFFFFEFFFFFF81FFFFFF03FFFFFE
572D7CAC5E>I<007FC00FF80000FFFFC0FFFF8000FFFFC3FFFFE000FFFFCFFFFFF800FF
FFDFC03FFC00FFFFFF001FFE0003FFFC0007FF0001FFF80003FF8001FFF00003FFC001FF
E00001FFE001FFC00001FFE001FFC00000FFF001FFC00000FFF001FFC000007FF801FFC0
00007FF801FFC000007FF801FFC000007FF801FFC000003FFC01FFC000003FFC01FFC000
003FFC01FFC000003FFC01FFC000003FFC01FFC000003FFC01FFC000003FFC01FFC00000
3FFC01FFC000003FFC01FFC000003FFC01FFC000003FFC01FFC000003FFC01FFC000007F
F801FFC000007FF801FFC000007FF801FFC000007FF001FFC00000FFF001FFC00000FFF0
01FFC00001FFE001FFE00001FFC001FFF00003FFC001FFF80007FF8001FFFC000FFF0001
FFFE001FFE0001FFDFC07FFC0001FFCFFFFFF00001FFC3FFFFC00001FFC0FFFF000001FF
C01FF0000001FFC00000000001FFC00000000001FFC00000000001FFC00000000001FFC0
0000000001FFC00000000001FFC00000000001FFC00000000001FFC00000000001FFC000
00000001FFC00000000001FFC00000000001FFC000000000FFFFFF80000000FFFFFF8000
0000FFFFFF80000000FFFFFF80000000FFFFFF8000000036407DAC3E>112
D<001FFC038000FFFF878003FFFFFF800FFFFFFF801FF003FF803FC000FF803F80003F80
7F00001F807E00001F80FE00000F80FE00000F80FE00000780FF00000780FF00000780FF
80000780FFE0000000FFFE0000007FFFF000007FFFFF00003FFFFFC0003FFFFFF0001FFF
FFFC000FFFFFFE0003FFFFFF0001FFFFFF80007FFFFF80000FFFFFC000003FFFC0000003
FFE0000000FFE0F000003FE0F000003FE0F800001FE0F800000FE0F800000FE0FC00000F
E0FC00000FE0FE00000FC0FF00001FC0FF00001FC0FF80003F80FFE0007F00FFF803FE00
FFFFFFFC00FCFFFFF800F03FFFE000E007FE0000232F7CAD2C>115
D<FFFFFE003FFFF0FFFFFE003FFFF0FFFFFE003FFFF0FFFFFE003FFFF0FFFFFE003FFFF0
00FFF00003E000007FF80007C000003FFC000F8000001FFC001F0000001FFE003F000000
0FFF007E00000007FF807C00000003FFC0F800000001FFC1F000000001FFE3E000000000
FFF7C0000000007FFF80000000003FFF80000000001FFF00000000001FFE00000000000F
FF000000000007FF800000000003FFC00000000003FFC00000000007FFE0000000000FFF
F0000000000FFFF8000000001F3FFC000000003E1FFC000000007C1FFE00000000F80FFF
00000001F007FF80000003F003FFC0000007E001FFC0000007C001FFE000000F8000FFF0
00001F00007FF800003E00003FFC00007E00001FFC00FFFFE000FFFFFCFFFFE000FFFFFC
FFFFE000FFFFFCFFFFE000FFFFFCFFFFE000FFFFFC362C7EAB3B>120
D E
/Ff load 0 Ff currentfont 100 scalefont put/FMat X/FBB
X/IEn X
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fg ectt1200 12 16
/EN1 load IEn S/IEn X FBB FMat/FMat[0.01 0 0 -0.01 0
0]N/FBB[-1 -26 56 83]N
/Fg 16 118 df<3FFFFFFFFFE07FFFFFFFFFF0FFFFFFFFFFF0FFFFFFFFFFF07FFFFFFFFF
F03FFFFFFFFFF001FC000007F001FC000007F001FC000007F001FC000007F001FC000007
F001FC000007F001FC000007F001FC000007F001FC000003E001FC0000000001FC000000
0001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC001F00
0001FC003F800001FC003F800001FC003F800001FC003F800001FFFFFF800001FFFFFF80
0001FFFFFF800001FFFFFF800001FFFFFF800001FFFFFF800001FC003F800001FC003F80
0001FC003F800001FC003F800001FC001F000001FC0000000001FC0000000001FC000000
0001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC000000
0001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC000000
0001FC0000000001FC000000003FFFF80000007FFFFC000000FFFFFE000000FFFFFE0000
007FFFFC0000003FFFF80000002C3D7DBC33>70 D<3FFFFFFFFFF87FFFFFFFFFFCFFFFFF
FFFFFCFFFFFFFFFFFCFFFFFFFFFFFCFFFFFFFFFFFCFE000FE001FCFE000FE001FCFE000F
E001FCFE000FE001FCFE000FE001FCFE000FE001FCFE000FE001FCFE000FE001FC7C000F
E000F800000FE0000000000FE0000000000FE0000000000FE0000000000FE0000000000F
E0000000000FE0000000000FE0000000000FE0000000000FE0000000000FE0000000000F
E0000000000FE0000000000FE0000000000FE0000000000FE0000000000FE0000000000F
E0000000000FE0000000000FE0000000000FE0000000000FE0000000000FE0000000000F
E0000000000FE0000000000FE0000000000FE0000000000FE0000000000FE0000000000F
E0000000000FE0000000000FE0000000000FE0000000000FE0000000000FE0000000000F
E0000000000FE0000000000FE0000000000FE0000000000FE000000007FFFFC000000FFF
FFE000001FFFFFF000001FFFFFF000000FFFFFE0000007FFFFC0002E3D7EBC33>84
D<7FFFFFFFFE7FFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFE7FFFFFFFFE
28077B7D33>95 D<001FFC00000000FFFF80000003FFFFE0000007FFFFF000000FFFFFFC
00001FFFFFFE00001FF007FF00001FE001FF00001FE000FF80001FE0003F80000FC0003F
C0000780001FC0000000001FE0000000000FE0000000000FE0000000000FE0000000000F
E0000000000FE00000000FFFE0000001FFFFE000001FFFFFE000007FFFFFE00001FFFFFF
E00007FFFF0FE0000FFFC00FE0001FFC000FE0003FF0000FE0007FC0000FE0007F80000F
E000FF00000FE000FE00000FE000FE00000FE000FE00000FE000FE00000FE000FE00000F
E000FF00001FE0007F00001FE0007F80007FE0003FE000FFF0003FF807FFFFF01FFFFFFF
FFF80FFFFFFFFFF807FFFFF3FFF803FFFFC1FFF800FFFF003FF0001FF00000002D2E7BAC
33>97 D<0000007FF800000000FFFC00000001FFFC00000001FFFC00000000FFFC000000
007FFC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC000000
0001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC000001
FF01FC000007FFC1FC00001FFFF1FC00007FFFF9FC0000FFFFFFFC0001FFFFFFFC0003FF
81FFFC0007FE003FFC000FF8001FFC000FF0000FFC001FE00007FC001FC00003FC003FC0
0003FC003F800001FC007F800001FC007F000001FC007F000001FC00FF000001FC00FE00
0001FC00FE000001FC00FE000001FC00FE000001FC00FE000001FC00FE000001FC00FE00
0001FC00FE000001FC00FE000001FC00FF000001FC007F000001FC007F000003FC007F80
0003FC003F800003FC003FC00007FC003FC00007FC001FE0000FFC001FF0001FFC000FF8
003FFC0007FC007FFC0003FF81FFFFF003FFFFFFFFF800FFFFFDFFFC007FFFF9FFFC003F
FFE1FFF8000FFF80FFF00001FE0000002E3E7DBC33>100 D<0000FF80000007FFF00000
1FFFFC00003FFFFE0000FFFFFF0001FFFFFF8003FF80FFC007FE003FE007F8000FF00FF0
0007F01FE00007F81FC00003F83FC00003FC3F800001FC7F800001FC7F000001FC7F0000
01FE7F000000FEFF000000FEFE000000FEFFFFFFFFFEFFFFFFFFFEFFFFFFFFFEFFFFFFFF
FEFFFFFFFFFEFFFFFFFFFCFE00000000FF000000007F000000007F000000007F00000000
3F800000003F8000007C1FC00000FE1FE00000FE0FF00000FE0FF80001FE07FC0003FC03
FF000FFC01FFC03FF800FFFFFFF0007FFFFFE0003FFFFFC0000FFFFF000003FFFC000000
7FE000272E7BAC33>I<0000E000000003F800000003F800000007FC00000007FC000000
07FC00000003F800000003F800000000E000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000003FFFF8
00007FFFFC00007FFFFC00007FFFFC00007FFFFC00003FFFFC00000001FC00000001FC00
000001FC00000001FC00000001FC00000001FC00000001FC00000001FC00000001FC0000
0001FC00000001FC00000001FC00000001FC00000001FC00000001FC00000001FC000000
01FC00000001FC00000001FC00000001FC00000001FC00000001FC00000001FC00000001
FC00000001FC00000001FC00000001FC00000001FC00000001FC00000001FC00000001FC
00007FFFFFFFC0FFFFFFFFE0FFFFFFFFF0FFFFFFFFF0FFFFFFFFE07FFFFFFFC0243E78BD
33>105 D<3FFFFC00007FFFFE0000FFFFFE0000FFFFFE00007FFFFE00003FFFFE000000
00FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000
FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE
00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00
000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE0000
0000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE000000
00FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000
FE00000000FE00000000FE00000000FE00000000FE00000000FE00003FFFFFFFF87FFFFF
FFFCFFFFFFFFFEFFFFFFFFFE7FFFFFFFFC3FFFFFFFF8273D7ABC33>108
D<0000FC007E00007FC3FF01FF8000FFEFFF87FFC000FFFFFFCFFFE000FFFFFFDFFFE000
FFFFFFFFFFF0007FFF0FFF87F00007FE07FF03F00007FC07FE03F80007F803FC01F80007
F803FC01F80007F003F801F80007F003F801F80007F003F801F80007F003F801F80007E0
03F001F80007E003F001F80007E003F001F80007E003F001F80007E003F001F80007E003
F001F80007E003F001F80007E003F001F80007E003F001F80007E003F001F80007E003F0
01F80007E003F001F80007E003F001F80007E003F001F80007E003F001F80007E003F001
F80007E003F001F80007E003F001F80007E003F001F80007E003F001F80007E003F001F8
0007E003F001F80007E003F001F8007FFE0FFF07FF80FFFF1FFF8FFFC0FFFF1FFF8FFFC0
FFFF1FFF8FFFC0FFFF1FFF8FFFC07FFE0FFF07FF80322C80AB33>I<000001FF00003FFC
07FFC0007FFE1FFFF000FFFE7FFFF800FFFEFFFFF8007FFFFFFFFC003FFFFF07FE0000FF
F801FE0000FFF000FE0000FFE000FF0000FFC0007F0000FF80007F0000FF80007F0000FF
00007F0000FF00007F0000FF00007F0000FE00007F0000FE00007F0000FE00007F0000FE
00007F0000FE00007F0000FE00007F0000FE00007F0000FE00007F0000FE00007F0000FE
00007F0000FE00007F0000FE00007F0000FE00007F0000FE00007F0000FE00007F0000FE
00007F0000FE00007F0000FE00007F0000FE00007F0000FE00007F0000FE00007F0000FE
00007F003FFFF80FFFFC7FFFFC1FFFFEFFFFFE3FFFFFFFFFFE3FFFFF7FFFFC1FFFFE3FFF
F80FFFFC302C7FAB33>I<0001FE0000000FFFC000003FFFF000007FFFF80000FFFFFC00
01FFFFFE0003FF03FF0007FC00FF800FF8007FC00FF0003FC01FE0001FE01FC0000FE03F
800007F03F800007F07F800007F87F000003F87F000003F87F000003F8FE000001FCFE00
0001FCFE000001FCFE000001FCFE000001FCFE000001FCFE000001FCFE000001FCFE0000
01FCFE000001FCFF000003FC7F000003F87F000003F87F800007F83F800007F03FC0000F
F03FC0000FF01FE0001FE01FF0003FE00FF8007FC007FC00FF8003FF03FF0001FFFFFE00
00FFFFFC00007FFFF800003FFFF000000FFFC0000001FE0000262E7AAC33>I<000001FE
00003FFC0FFFC0007FFE1FFFF000FFFE7FFFF800FFFEFFFFFE007FFFFFFFFF003FFFFE07
FF0000FFF800FF8000FFE0007FC000FFC0003FE000FF80001FE000FF80000FF000FF0000
0FF000FF000007F000FE000007F800FE000003F800FE000003F800FE000003FC00FE0000
01FC00FE000001FC00FE000001FC00FE000001FC00FE000001FC00FE000001FC00FE0000
01FC00FE000001FC00FE000001FC00FE000003FC00FE000003F800FE000003F800FF0000
07F800FF000007F000FF80000FF000FF80000FE000FFC0001FE000FFC0003FC000FFE000
7FC000FFF801FF8000FFFE07FF0000FFFFFFFE0000FEFFFFFC0000FE7FFFF80000FE3FFF
E00000FE0FFF800000FE03FE000000FE0000000000FE0000000000FE0000000000FE0000
000000FE0000000000FE0000000000FE0000000000FE0000000000FE0000000000FE0000
000000FE0000000000FE0000000000FE0000000000FE0000000000FE000000003FFFF800
00007FFFFC000000FFFFFE000000FFFFFE0000007FFFFC0000003FFFF80000002E427FAB
33>I<00000003FE007FFF801FFF80FFFFC07FFFE0FFFFC1FFFFE0FFFFC3FFFFF0FFFFC7
FFFFF07FFFCFFE0FF0001FDFF00FF0001FFFC007E0001FFF8003C0001FFF000000001FFE
000000001FFC000000001FF8000000001FF8000000001FF0000000001FF0000000001FE0
000000001FE0000000001FE0000000001FC0000000001FC0000000001FC0000000001FC0
000000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC0
000000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC0
000000001FC0000000001FC00000007FFFFFFE0000FFFFFFFF0000FFFFFFFF0000FFFFFF
FF0000FFFFFFFF00007FFFFFFE00002C2C7DAB33>114 D<001FFE0F0000FFFF8F8003FF
FFFF800FFFFFFF801FFFFFFF803FFFFFFF803FF007FF807F8001FF807F0000FF80FE0000
7F80FC00007F80FC00003F80FC00003F80FC00003F80FE00003F807F00001F007FC00000
003FF80000003FFFC000001FFFFF00000FFFFFE00003FFFFF80000FFFFFC00001FFFFF00
0000FFFF80000007FFC00000007FC00000001FE07C00000FE0FE000007F0FE000003F0FE
000003F0FF000003F0FF000003F0FF800003F0FF800007F0FFC00007E0FFE0000FE0FFF0
003FC0FFFE01FFC0FFFFFFFF80FFFFFFFF00FDFFFFFE00FCFFFFF800F83FFFE0007807FF
0000242E79AC33>I<0003C00000000007E0000000000FE0000000000FE0000000000FE0
000000000FE0000000000FE0000000000FE0000000000FE0000000000FE0000000000FE0
000000000FE00000003FFFFFFFFC007FFFFFFFFE00FFFFFFFFFE00FFFFFFFFFE00FFFFFF
FFFE007FFFFFFFFC00000FE0000000000FE0000000000FE0000000000FE0000000000FE0
000000000FE0000000000FE0000000000FE0000000000FE0000000000FE0000000000FE0
000000000FE0000000000FE0000000000FE0000000000FE0000000000FE0000000000FE0
000000000FE0000000000FE0000000000FE0000000000FE0000000000FE0001F00000FE0
003F80000FE0003F80000FE0003F80000FE0003F80000FE0003F80000FE0007F80000FF0
007F000007F000FF000007F801FF000007FE07FE000003FFFFFC000001FFFFF8000000FF
FFF00000007FFFE00000001FFF8000000007FC000029387EB633>I<3FFC001FFE007FFE
003FFF00FFFE007FFF00FFFE007FFF007FFE003FFF003FFE001FFF0000FE00007F0000FE
00007F0000FE00007F0000FE00007F0000FE00007F0000FE00007F0000FE00007F0000FE
00007F0000FE00007F0000FE00007F0000FE00007F0000FE00007F0000FE00007F0000FE
00007F0000FE00007F0000FE00007F0000FE00007F0000FE00007F0000FE00007F0000FE
00007F0000FE00007F0000FE00007F0000FE00007F0000FE00007F0000FE00007F0000FE
0000FF0000FE0000FF0000FE0001FF0000FE0001FF0000FF0003FF00007F800FFF00007F
E03FFFFC003FFFFFFFFE003FFFFFFFFF001FFFFF7FFF000FFFFE7FFE0003FFF83FFC0000
FFC00000302C7FAA33>I E
/Fg load 0 Fg currentfont 100 scalefont put/FMat X/FBB
X/IEn X
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fh ecti1200 12 20
/EN1 load IEn S/IEn X FBB FMat/FMat[0.01 0 0 -0.01 0
0]N/FBB[-4 -27 112 93]N
/Fh 20 234 df<00000000007FF8000000000007FFFF00000000001FC00FC0000000003E
0001E000000000FC0000F000000001F80001F000000003F00007F000000003E00007F000
000007E0000FF000000007E0000FF00000000FC0000FF00000000FC0000FE00000001FC0
0003800000001F800000000000001F800000000000001F800000000000003F8000000000
00003F000000000000003F000000000000003F000000000000003F000000000000007F00
0000000000007E000000000000007E000000000000007E000000000000007E0000000000
0000FE000000000000FFFFFFFFFF000000FFFFFFFFFF000000FFFFFFFFFE00000000FC00
007E00000001FC0000FE00000001F80000FC00000001F80000FC00000001F80000FC0000
0001F80001FC00000001F80001F800000003F80001F800000003F00001F800000003F000
03F800000003F00003F000000003F00003F000000007F00003F000000007E00007F00000
0007E00007E000000007E00007E000000007E00007E00000000FE0000FE00000000FC000
0FC00000000FC0000FC00000000FC0000FC00000000FC0001FC00000001FC0001F800000
001F80001F800000001F80001F800000001F80003F80E000001F80003F01E000003F8000
3F01C000003F00003F01C000003F00003F01C000003F00007F03C000003F00007E038000
007F00007E038000007E00007E078000007E00007E070000007E00003E070000007E0000
3E0E000000FE00001E1E000000FC00001F1C000000FC000007F8000000FC000001E00000
00FC00000000000001F800000000000001F800000000000001F800000000000001F00000
0000000003F000000000000003F000000000001C03E000000000007F03E00000000000FF
07E00000000000FF07C00000000000FF07C00000000000FF0F800000000000FE0F000000
000000F81F000000000000701E000000000000783C0000000000001FF000000000000007
C00000000000003C5A83C537>28 D<00007FFFFFE00000FFFFFFE00000FFFFFFE0000000
FFE0000000007F8000000000FF8000000000FF8000000000FF0000000000FF0000000000
FF0000000001FF0000000001FE0000000001FE0000000001FE0000000003FE0000000003
FC0000000003FC0000000003FC0000000007FC0000000007F80000000007F80000000007
F8000000000FF8000000000FF0000000000FF0000000000FF0000000001FF0000000001F
E0000000001FE0000000001FE0000000003FE0000000003FC0000000003FC0000000003F
C0000000007FC0000000007F80000000007F80000000007F8000000000FF8000000000FF
0000000000FF0000000000FF0000000001FF0000000001FE0000000001FE0000000001FE
0000000003FE0000000003FC0000000003FC0000000003FC0000000007FC0000000007F8
0000000007F80000000007F8000000000FF8000000000FF0000000000FF0000000000FF0
000000001FF0000000001FE0000000001FE0000000003FE0000000003FE0000000003FC0
00000000FFE0000000FFFFFFE00000FFFFFFE00000FFFFFFC000002B447BC326>73
D<FFFFFF000007FFFEFFFFFF000007FFFEFFFFFE000007FFFE03FFC0000000FFE001FF00
0000007F0001FF000000003E0001FF000000003C0001FF00000000780001FF0000000078
0000FF00000000700000FF00000000E00000FF00000001E00000FF00000001C00000FF00
000003800000FF00000003800000FF00000007000000FF0000000F000000FF0000000E00
0000FF8000001C000000FF8000001C0000007F800000380000007F800000780000007F80
0000700000007F800000E00000007F800000E00000007F800001C00000007F800001C000
00007F800003800000007F800007800000007FC00007000000007FC0000E000000003FC0
000E000000003FC0001C000000003FC0003C000000003FC00038000000003FC000700000
00003FC00070000000003FC000E0000000003FC001E0000000003FC001C0000000003FE0
0380000000003FE00380000000003FE00700000000001FE00700000000001FE00E000000
00001FE01E00000000001FE01C00000000001FE03800000000001FE03800000000001FE0
7000000000001FE0F000000000001FE0E000000000001FF1C000000000001FF1C0000000
00000FF38000000000000FF78000000000000FF70000000000000FFE0000000000000FFE
0000000000000FFC0000000000000FFC0000000000000FF80000000000000FF000000000
00000FF00000000000000FE000000000000007E000000000000007C000000000000007C0
0000000000000780000000000000070000000000003F466CC348>86
D<00001F80000000007FE000000001F07070000007C039F800000F801DF800001F001FF8
00003E000FF000007E000FF00000FC000FF00001F80007F00001F80007E00003F00007E0
0007F00007E00007E0000FE0000FE0000FC0000FE0000FC0001FC0000FC0001FC0001FC0
003FC0001F80003F80001F80003F80001F80003F80003F80007F80003F00007F00003F00
007F00003F00007F00007F00007F00007E0000FE00007E0000FE00007E0000FE0000FE03
80FE0000FC0780FE0000FC0700FE0000FC07007E0001FC07007E0001FC0F007E0003F80E
007E0007F80E003E000FF81E003E000FF81C001F001CF81C001F0038F838000F80F07878
0007C3E07C700001FF801FE000007E00078000292D76AB32>97 D<00000FE00000007FF8
000001F81E000007E00F00000F800780001F000380007E0003C000FC001FC001FC003FC0
01F8003FC003F0007F8007F0007F800FE0007F800FE0003E001FC00000001FC00000003F
800000003F800000007F800000007F000000007F000000007F00000000FF00000000FE00
000000FE00000000FE00000000FE00000000FC00000000FC00000000FC00000000FC0000
0000FC00000000FC00000180FC000003C0FC00000780FC000007807C00000F007E00001E
003E00007C003E0000F0001F0003E0000F800F800007C07E000001FFF80000007FC00000
222D75AB2D>99 D<0000000007F000000003FFF000000003FFF000000003FFF000000000
0FE00000000007E0000000000FE0000000000FE0000000000FC0000000000FC000000000
1FC0000000001FC0000000001F80000000001F80000000003F80000000003F8000000000
3F00000000003F00000000007F00000000007F00000000007E00000000007E0000000000
FE0000000000FE0000000000FC0000001F80FC0000007FE1FC000001F071FC000007C039
F800000F801DF800001F001FF800003E000FF800007E000FF00000FC000FF00001F80007
F00001F80007F00003F00007E00007F00007E00007E0000FE0000FE0000FE0000FE0000F
C0001FC0000FC0001FC0001FC0003FC0001FC0003F80001F80003F80001F80003F80003F
80007F80003F80007F00003F00007F00003F00007F00007F00007F00007F0000FE00007E
0000FE00007E0000FE0000FE0380FE0000FE0780FE0000FC0700FE0000FC07007E0001FC
07007E0001FC0F007E0003F80E007E0007F80E003E000FF81E003E000FF81C001F001CF8
1C001F0038F838000F80F078780007C3E07C700001FF801FE000007E000780002C4676C4
32>I<00000FE00000007FF8000001F83E000007C00F00001F800780003F000780007E00
07C000FC0003C001F80003C003F00007C007F000078007E00007800FE0000F801FC0000F
001FC0001F003F80003E003F8000FC003F8007F0007F80FFC0007FFFFE00007FFFC00000
7F00000000FF00000000FE00000000FE00000000FE00000000FE00000000FE00000000FC
00000000FC00000000FC00000000FC00000000FC00000180FC000003C07C000007807C00
0007807E00000F003E00001E003E00007C001F0000F0000F0003E00007800F800003C07E
000001FFF80000003FC00000222D75AB2D>I<00003C00007E0000FE0001FE0001FE0001
FE0000FC0000700000000000000000000000000000000000000000000000000000000000
00000000000000000000000000007C0001FF0003C7800703C00F03E00E03E01C03E01C07
E03807E03807E07807E0700FE0700FC0701FC0F01F80E01F80003F80003F00003F00007F
00007E00007E0000FE0000FC0001FC0001F80001F80003F80003F00003F01E07F01C07E0
1C07E01C0FE03C0FC0380FC0380FC0780F80700F80F00F80E00F81C00783C007C78003FE
0000F800174378C11E>105 D<00000000F000000003F800000003F800000007F8000000
07F800000007F800000007F000000001C000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000001F000000007FC0000001E1E000000380F0000
00700F800000E00F800001E00F800001C00F800003800F800007801F800007001F800007
001F80000E001F80000E003F80001E003F80001C003F000000003F000000007F00000000
7F000000007E000000007E00000000FE00000000FE00000000FC00000000FC00000001FC
00000001FC00000001F800000001F800000003F800000003F800000003F000000003F000
000007F000000007F000000007E000000007E00000000FE00000000FE00000000FC00000
000FC00000001FC00000001FC00000001F800000001F800000003F800000003F80000000
3F000000003F000000007F000000007E000000007E00000000FE00001C00FC00007F00FC
0000FF01F80000FF03F00000FF03F00000FE07E00000FE0FC00000F81F000000707E0000
003FF80000000FC0000000255683C11E>I<0003F801FFF801FFF801FFF80007F00003F0
0007F00007F00007E00007E0000FE0000FE0000FC0000FC0001FC0001FC0001F80001F80
003F80003F80003F00003F00007F00007F00007E00007E0000FE0000FE0000FC0000FC00
01FC0001FC0001F80001F80003F80003F80003F00003F00007F00007F00007E00007E000
0FE0000FE0000FC0000FC0001FC0001FC0001F80001F80003F80003F80003F00003F0000
7F01C07F03C07E03807E03807E0780FE0700FC0700FC0700FC0F00FC0E007C1E007C1C00
3C3C003E78001FF00007C000154678C419>108 D<01F0000FE00007F0000003FC007FF8
003FFC0000071E01F03E00F81F00000E1F03C01F01E00F80001E0F87001F83800FC0001C
0F8E000F870007C0003C0F9C000F8E0007C000380FB8000FDC0007E000380FF8000FFC00
07E000781FF0000FF80007E000701FE0000FF00007E000701FE0000FF00007E000701FC0
000FE00007E000F01F80001FC0000FE000E03F80001FC0000FC000E03F00001F80000FC0
00003F00001F80000FC000003F00003F80001FC000007F00003F80001F8000007E00003F
00001F8000007E00003F00001F8000007E00007F00003F800000FE00007F00003F000000
FC00007E00003F000000FC00007E00007F000000FC0000FE00007E000001FC0000FE0000
7E000001F80000FC0000FE000001F80000FC0000FC000001F80001FC0000FC078003F800
01FC0001FC070003F00001F80001F8070003F00001F80001F8070003F00003F80003F80F
0007F00003F80003F00E0007E00003F00003F00E0007E00003F00003F01E0007E00007F0
0003E01C000FE00007F00003E03C000FC00007E00003E038000FC00007E00003E070000F
C0000FE00001E0F0001FC0000FE00001F1E0001F80000FC00000FF800007000003800000
3E0000492D78AB50>I<01F0000FE00003FC007FF800071E01F03E000E0F03C01F001E0F
87001F801C0F8E000F803C0F9C000F80380FB8000FC0380FF8000FC0781FF0000FC0701F
E0000FC0701FE0000FC0701FC0000FC0F01F80001FC0E03F80001F80E03F00001F80003F
00001F80003F00003F80007F00003F00007E00003F00007E00003F00007E00007F0000FE
00007E0000FC00007E0000FC0000FE0000FC0000FC0001FC0000FC0001F80001FC0001F8
0001F80001F80001F80F03F80003F80E03F00003F00E03F00003F00E03F00007F01E07F0
0007E01C07E00007E01C07E00007E03C07E00007C0380FE00007C0780FC00007C0700FC0
0007C0E00FC00003C1E01FC00003E3C01F800001FF00070000007C00302D78AB37>I<00
000FE00000007FFC000001F83E000007E00F80000F8007C0001F0007C0007E0003E000FC
0003F000FC0003F001F80001F003F00001F807F00001F80FE00001F80FE00001F81FC000
01F81FC00001F83F800001F83F800003F87F800003F87F000003F87F000003F87F000007
F8FF000007F0FE000007F0FE000007F0FE00000FF0FE00000FE0FC00000FE0FC00001FC0
FC00001FC0FC00001F80FC00003F80FC00003F00FC00007F00FC00007E00FC0000FC007C
0001F8007E0003F0003E0003E0003E0007C0001F001F80000F803E000007C0FC000001FF
F00000003F800000252D75AB32>I<0003E0007E000007F801FF80000E3C0783E0001C1E
0F01F0003C1F1C00F800381F3800F800781F70007C00701FE0007C00701FE0007C00703F
C0007E00E03F80007E00E03F80007E00E03F00007E01E07F00007E01C07F00007E01C07E
00007E00007E00007E0000FE0000FE0000FE0000FE0000FC0000FE0000FC0000FE0001FC
0001FE0001FC0001FC0001F80001FC0001F80001FC0003F80003FC0003F80003F80003F0
0003F80003F00003F80007F00007F00007F00007F00007E0000FE00007E0000FE0000FE0
000FC0000FE0001F80000FE0003F80000FE0003F00001FF0007E00001FF000FC00001FF0
01F800001FB803F000003F9C07E000003F9E0F8000003F07FE0000003F01F80000007F00
000000007F00000000007E00000000007E0000000000FE0000000000FE0000000000FC00
00000000FC0000000001FC0000000001FC0000000001F80000000001F80000000003F800
00000003F80000000007F800000000FFFFF0000000FFFFF0000000FFFFE00000002F3F7F
AB32>I<01F0003F8003FC01FFF0071E03C0F80E0F0F007C1E0F9E01FC1C0F9C01FC1C0F
B803FC380FF003FC380FF003FC381FE003F8781FE000E0701FC00000701FC00000F01F80
0000E03F800000E03F000000003F000000003F000000007F000000007E000000007E0000
00007E00000000FE00000000FC00000000FC00000000FC00000001FC00000001F8000000
01F800000001F800000003F800000003F000000003F000000003F000000007F000000007
E000000007E000000007E00000000FE00000000FC00000000FC00000000FC00000001FC0
0000001F800000000700000000262D78AB29>114 D<00000FE00000007FF8000001F01E
000003C00F000007800780000F000380001E0003C0001E0007C0003C001FC0003C001FC0
007C003F800078003F80007C003F80007C000E00007C000000007E000000007F00000000
7FF00000007FFF0000003FFFC000001FFFF000000FFFF8000007FFFC000000FFFC000000
0FFE00000001FE00000000FE000000007F000000003F000E00003F003F00001E007F8000
1E007F80001E007F80003E00FF00003C00FF00003C00FC000078007000007800700000F0
00780001E0003C0003C0001E000F80000F803E000003FFF80000007FC00000222D7AAB28
>I<000070000001F8000001F8000001F8000003F8000003F0000003F0000003F0000007
F0000007E0000007E0000007E000000FE000000FC000000FC000000FC000001FC000001F
8000001F80007FFFFFE0FFFFFFE0FFFFFFC0003F0000003F0000007F0000007E0000007E
0000007E000000FE000000FC000000FC000000FC000001FC000001F8000001F8000001F8
000003F8000003F0000003F0000003F0000007F0000007E0000007E0000007E000000FE0
00000FC000000FC000000FC007801FC007001F8007001F800F001F800E003F801E003F00
1C003F003C003F0038003F0070001F00F0001F01E0000F03C0000F87800007FE000001F8
00001B3F78BD20>I<007C0000000001FF0000070003C780001F800703C0001F800F03E0
001F800E03E0003F801C03E0003F801C07E0003F003807E0003F003807E0007F007807E0
007F00700FE0007E00700FC0007E00701FC000FE00F01F8000FE00E01F8000FC00003F80
00FC00003F0001FC00003F0001FC00007F0001F800007E0001F800007E0003F80000FE00
03F80000FC0003F00000FC0003F00000FC0007F00001FC0007F00001F80007E00001F800
07E00001F8000FE03803F8000FE07803F0000FC07003F0000FC07003F0000FC07003F000
1FC0F003F0001F80E003F0003F80E001F0003F81E001F0007F81C001F800EF83C000F801
EF8380007C03C78780003E0F07C700001FFE01FE000003F00078002D2D78AB34>I<0000
3C00000000007E0000000000FE0000000000FF0000000000FF80000000007F8000000000
3FC0000000001FC00000000007E00000000003F00000000001F00000000000F800000000
007C00000000003C00000000001C00000000000000000000000000000000000000000000
0000000000000000000000000000000000001F80000000007FE000000001F07070000007
C039F800000F801DF800001F001FF800003E000FF000007E000FF00000FC000FF00001F8
0007F00001F80007E00003F00007E00007F00007E00007E0000FE0000FE0000FC0000FE0
000FC0001FC0000FC0001FC0001FC0003FC0001F80003F80001F80003F80001F80003F80
003F80007F80003F00007F00003F00007F00003F00007F00007F00007F00007E0000FE00
007E0000FE00007E0000FE0000FE0380FE0000FC0780FE0000FC0700FE0000FC07007E00
01FC07007E0001FC0F007E0003F80E007E0007F80E003E000FF81E003E000FF81C001F00
1CF81C001F0038F838000F80F078780007C3E07C700001FF801FE000007E000780002942
76C032>224 D<000000003C000000007E00000000FE00000001FE00000007FC0000000F
F80000001FE00000003FC00000007F00000000FC00000001F800000007E00000000FC000
00000F000000000E00000000000000000000000000000000000000000000000000000000
0000000000000FE00000007FF8000001F83E000007C00F00001F800780003F000780007E
0007C000FC0003C001F80003C003F00007C007F000078007E00007800FE0000F801FC000
0F001FC0001F003F80003E003F8000FC003F8007F0007F80FFC0007FFFFE00007FFFC000
007F00000000FF00000000FE00000000FE00000000FE00000000FE00000000FE00000000
FC00000000FC00000000FC00000000FC00000000FC00000180FC000003C07C000007807C
000007807E00000F003E00001E003E00007C001F0000F0000F0003E00007800F800003C0
7E000001FFF80000003FC00000274275C02D>233 D E
/Fh load 0 Fh currentfont 100 scalefont put/FMat X/FBB
X/IEn X
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fi ecsx1200 12 8
/EN1 load IEn S/IEn X FBB FMat/FMat[0.01 0 0 -0.01 0
0]N/FBB[-8 -35 119 92]N
/Fi 8 121 df<00000F800000001FC00000003FC0000000FFC0000003FFC000001FFFC0
003FFFFFC0007FFFFFC000FFFFFFC000FFFFFFC000FFFFFFC0007FF3FFC0002003FFC000
0003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC00000
03FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003
FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FF
C0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0
000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC000
0003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC0000003FFC00000
03FFC0000003FFC0000003FFC0000003FFC0000003FFC0003FFFFFFFF87FFFFFFFFCFFFF
FFFFFCFFFFFFFFFC7FFFFFFFFC3FFFFFFFF8264377C238>49 D<0000FFC00000000FFFFC
0000003FFFFF800000FFFFFFE00001FFFFFFF00003FFFFFFFC0007FFFFFFFE000FFFFFFF
FF001FFFFFFFFF803FFF00FFFFC03FFC003FFFC07FF0000FFFE07FE00007FFE0FFC00003
FFF0FFC00001FFF0FF800001FFF07F800000FFF83F000000FFF81F000000FFF81F000000
FFF80E0000007FF8060000007FF8000000007FF800000000FFF800000000FFF800000000
FFF800000000FFF000000001FFF000000001FFF000000003FFE000000003FFC000000007
FFC000000007FF800000000FFF000000001FFE000000003FFC000000007FF800000000FF
F000000001FFE000000003FFC000000007FF800000000FFE000000001FFC000000003FF8
000000007FE000000000FFC000000001FF8000000003FF0000000007FE000000000FF800
0000001FF0000000003FE000000000FFC000000001FF8000000003FE0000000007FC0000
00000FF8000000001FF0000000003FFFFFFFFFF07FFFFFFFFFF8FFFFFFFFFFF8FFFFFFFF
FFF8FFFFFFFFFFF8FFFFFFFFFFF8FFFFFFFFFFF87FFFFFFFFFF83FFFFFFFFFF02D437BC2
38>I<3FFFFFFFFFFFC07FFFFFFFFFFFE0FFFFFFFFFFFFE0FFFFFFFFFFFFE0FFFFFFFFFF
FFE0FFFFFFFFFFFFE0FFFFFFFFFFFFE0FFFFFFFFFFFFE0FFFFFFFFFFFFC0FFF800000000
00FFF80000000000FFF80000000000FFF80000000000FFF80000000000FFF80000000000
FFF80000000000FFF80000000000FFF80000000000FFF80000000000FFF80000000000FF
F80000000000FFF80000000000FFF80000000000FFF80000000000FFF80000000000FFF8
0000000000FFF80000000000FFF80000000000FFF80000000000FFFFFFFFFFFE00FFFFFF
FFFFFF00FFFFFFFFFFFF00FFFFFFFFFFFF00FFFFFFFFFFFF00FFFFFFFFFFFF00FFFFFFFF
FFFF00FFFFFFFFFFFE00FFF80000000000FFF80000000000FFF80000000000FFF8000000
0000FFF80000000000FFF80000000000FFF80000000000FFF80000000000FFF800000000
00FFF80000000000FFF80000000000FFF80000000000FFF80000000000FFF80000000000
FFF80000000000FFF80000000000FFF80000000000FFF80000000000FFF80000000000FF
F80000000000FFF80000000000FFF80000000000FFFFFFFFFFFFE0FFFFFFFFFFFFF0FFFF
FFFFFFFFF0FFFFFFFFFFFFF0FFFFFFFFFFFFF0FFFFFFFFFFFFF0FFFFFFFFFFFFF0FFFFFF
FFFFFFF07FFFFFFFFFFFF03FFFFFFFFFFFE0344577C443>69 D<00003FFC00000003FFFF
C000001FFFFFF000007FFFFFFC0000FFFFFFFE0001FFFFFFFF8003FFF007FF8007FFC000
FF800FFF00003F801FFE00001F001FFE00000F003FFC000007003FFC000003003FF80000
00007FF8000000007FF8000000007FF8000000007FF000000000FFF000000000FFF00000
0000FFF000000000FFF000000000FFF000000000FFF000000000FFF000000000FFF00000
0000FFF000000000FFF000000000FFF000000000FFF000000000FFF000000000FFF00000
00007FF8000000007FF8000000007FF8000000007FF8000000003FFC000000003FFC0000
01801FFE000003801FFE00000F800FFF00001F8007FFC000FFC007FFF007FFC003FFFFFF
FFC000FFFFFFFFC0007FFFFFFF00001FFFFFFC000003FFFFE00000007FFC00002A317CAF
32>99 D<00007FF800000003FFFF0000001FFFFFC000003FFFFFF00000FFFFFFF80001FF
FFFFFC0003FFF01FFE0007FF8007FF000FFF0003FF000FFE0001FF801FFC0000FF801FFC
0000FFC03FF80000FFC03FF800007FE07FF000007FE07FF000007FE07FF000007FE07FF0
00003FF0FFF000003FF0FFF000003FF0FFE000003FF0FFE000003FF0FFE000003FF0FFFF
FFFFFFF0FFFFFFFFFFF0FFFFFFFFFFF0FFFFFFFFFFF0FFFFFFFFFFF0FFFFFFFFFFE0FFF0
00000000FFF0000000007FF0000000007FF0000000007FF0000000007FF8000000003FF8
000000003FF8000000001FFC000000C01FFE000001C00FFE000007C007FF00000FC007FF
C0007FE003FFF803FFE001FFFFFFFFE0007FFFFFFFE0003FFFFFFF80000FFFFFFE000003
FFFFF00000003FFE00002C317DAF33>101 D<3FF07FF8FFF8FFF8FFF8FFF8FFF8FFF8FF
F8FFF8FFF8FFF87FF000000000000000000000000000000000000000000000000000001F
F03FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87F
F87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87FF87F
F87FF87FF87FF87FF87FF87FF87FF83FF81FF00D487AC71B>105
D<000000F83FC007F87FE01FF8FFE07FF8FFE0FFF8FFE1FFF8FFE3FFF8FFE7FFF8FFEFFF
F8FFEFFF00FFFFF800FFFFF000FFFFC000FFFF8000FFFF0000FFFF0000FFFE0000FFFC00
00FFFC0000FFF80000FFF80000FFF80000FFF00000FFF00000FFF00000FFF00000FFF000
00FFF00000FFF00000FFF00000FFF00000FFF00000FFF00000FFF00000FFF00000FFF000
00FFF00000FFF00000FFF00000FFF00000FFF00000FFF00000FFF00000FFF00000FFF000
007FF000003FE000001D2F79AE26>114 D<7FC000001FF07FF000007FF07FF000007FF0
3FF80000FFE01FFC0001FFC01FFE0003FFC00FFF0007FF8007FF8007FF0003FF800FFE00
01FFC01FFC0000FFE03FF800007FF07FF000003FF87FF000003FF8FFE000001FFDFFC000
000FFFFF80000007FFFF00000003FFFE00000001FFFE00000000FFFC000000007FF80000
00007FF0000000003FF0000000007FF000000000FFF800000001FFFC00000003FFFE0000
0003FFFF00000007FDFF8000000FFCFFC000001FF87FE000003FF07FE000007FE03FF000
007FE01FF80000FFC00FFC0001FF800FFE0003FF8007FF0007FF0003FF800FFE0001FF80
1FFC0001FFC01FFC0000FFE03FF800007FF07FF000003FF8FFE000003FFCFFE000001FFC
7FC000000FF82E2E7EAD33>120 D E
/Fi load 0 Fi currentfont 100 scalefont put/FMat X/FBB
X/IEn X
%EndDVIPSBitmapFont
/Fj 142[76 113[{}1 99.6264 /Dingbats rf
%DVIPSBitmapFont: Fk ecbx1728 17.28 6
/EN1 load IEn S/IEn X FBB FMat/FMat[0.00694444 0 0 -0.00694444
0 0]N/FBB[-9 -43 164 131]N
/Fk 6 118 df<00000000F0000000000001F0000000000007F000000000001FF0000000
00003FF00000000001FFF00000000007FFF0000000007FFFF00000000FFFFFF00000FFFF
FFFFF00000FFFFFFFFF00000FFFFFFFFF00000FFFF8FFFF00000FFF00FFFF0000000000F
FFF0000000000FFFF0000000000FFFF0000000000FFFF0000000000FFFF0000000000FFF
F0000000000FFFF0000000000FFFF0000000000FFFF0000000000FFFF0000000000FFFF0
000000000FFFF0000000000FFFF0000000000FFFF0000000000FFFF0000000000FFFF000
0000000FFFF0000000000FFFF0000000000FFFF0000000000FFFF0000000000FFFF00000
00000FFFF0000000000FFFF0000000000FFFF0000000000FFFF0000000000FFFF0000000
000FFFF0000000000FFFF0000000000FFFF0000000000FFFF0000000000FFFF000000000
0FFFF0000000000FFFF0000000000FFFF0000000000FFFF0000000000FFFF0000000000F
FFF0000000000FFFF0000000000FFFF0000000000FFFF0000000000FFFF0000000000FFF
F0000000000FFFF0000000000FFFF0000000000FFFF0000000000FFFF0000000000FFFF0
000000000FFFF0000000000FFFF0000000000FFFF0000000000FFFF0000000000FFFF000
0000000FFFF0000000000FFFF0000000000FFFF0000000000FFFF0000000000FFFF00000
00000FFFF0000000000FFFF0000000000FFFF0000000000FFFF0000000000FFFF0000000
000FFFF0000000000FFFF0000000000FFFF0000000000FFFF0000000000FFFF000000000
0FFFF0000000000FFFF0000000000FFFF0000000000FFFF0000000000FFFF0000000000F
FFF0000000000FFFF0000000000FFFF000007FFFFFFFFFFFF87FFFFFFFFFFFF87FFFFFFF
FFFFF87FFFFFFFFFFFF87FFFFFFFFFFFF8355E74DD4D>49 D<000000FFF8000007000000
0FFFFF80000F0000007FFFFFF0001F000001FFFFFFFC001F000007FFFFFFFF003F00001F
FF800FFFC07F00003FF80000FFE0FF0000FFE000001FF1FF0001FFC0000007F9FF0003FF
00000001FFFF0003FE00000000FFFF0007FC000000007FFF000FFC000000003FFF000FF8
000000001FFF001FF8000000000FFF001FF00000000007FF003FF00000000007FF003FF0
0000000003FF007FE00000000001FF007FE00000000001FF007FE00000000000FF007FE0
0000000000FF00FFE00000000000FF00FFE000000000007F00FFE000000000007F00FFF0
00000000007F00FFF000000000003F00FFF000000000003F00FFF800000000003F00FFF8
00000000003F00FFFC00000000001F00FFFE00000000001F00FFFF00000000001F00FFFF
80000000001F007FFFC00000000000007FFFE00000000000007FFFF80000000000003FFF
FF0000000000003FFFFFF000000000003FFFFFFF00000000001FFFFFFFF8000000001FFF
FFFFFF800000000FFFFFFFFFF800000007FFFFFFFFFF80000003FFFFFFFFFFE0000003FF
FFFFFFFFF8000001FFFFFFFFFFFE000000FFFFFFFFFFFF8000007FFFFFFFFFFFC000001F
FFFFFFFFFFE000000FFFFFFFFFFFF0000003FFFFFFFFFFF8000001FFFFFFFFFFFC000000
7FFFFFFFFFFE0000000FFFFFFFFFFF00000001FFFFFFFFFF000000000FFFFFFFFF800000
0000FFFFFFFF80000000000FFFFFFFC000000000007FFFFFC0000000000007FFFFE00000
00000001FFFFE00000000000007FFFF00000000000003FFFF00000000000000FFFF00000
0000000007FFF000000000000003FFF800000000000003FFF8F8000000000001FFF8F800
0000000000FFF8F8000000000000FFF8F80000000000007FF8F80000000000007FF8F800
00000000007FF8FC0000000000003FF8FC0000000000003FF8FC0000000000003FF8FC00
00000000003FF8FE0000000000003FF0FE0000000000003FF0FE0000000000003FF0FF00
00000000003FF0FF0000000000003FF0FF8000000000007FE0FFC000000000007FE0FFC0
00000000007FC0FFE00000000000FFC0FFF00000000000FF80FFF80000000001FF80FFFC
0000000001FF00FFFE0000000003FF00FFFF8000000007FE00FFFFC00000000FFC00FF9F
F00000001FF800FF8FFE0000007FF000FF03FFC00001FFE000FE01FFFE000FFF8000FC00
7FFFFFFFFF0000F8001FFFFFFFFC0000F80003FFFFFFF00000F000003FFFFF800000E000
0001FFF8000000456678E356>83 D<0000003FFE000000000003FFFFE0000000001FFFFF
FC000000007FFFFFFF00000001FFF80FFFC0000007FFC003FFE000000FFF0000FFF00000
1FFE00007FF800003FFC00003FFC00007FF800001FFE0000FFF000000FFF0001FFF00000
0FFF0003FFE0000007FF8007FFE0000007FF8007FFC0000007FFC00FFFC0000003FFC00F
FFC0000003FFE01FFF80000003FFE01FFF80000001FFE03FFF80000001FFF03FFF800000
01FFF03FFF80000001FFF07FFF00000001FFF07FFF00000001FFF07FFF00000000FFF87F
FF00000000FFF87FFF00000000FFF8FFFF00000000FFF8FFFF00000000FFF8FFFF000000
00FFF8FFFFFFFFFFFFFFF8FFFFFFFFFFFFFFF8FFFFFFFFFFFFFFF8FFFFFFFFFFFFFFF8FF
FF000000000000FFFF000000000000FFFF000000000000FFFF000000000000FFFF000000
000000FFFF0000000000007FFF0000000000007FFF0000000000007FFF0000000000007F
FF0000000000007FFF8000000000003FFF8000000000003FFF8000000000001FFF800000
0000001FFF8000000000F81FFFC000000000F80FFFC000000001F807FFC000000001F007
FFE000000001F003FFE000000003F001FFF000000007E001FFF800000007C000FFF80000
000FC0007FFC0000001F80003FFE0000003F00001FFF800000FE000007FFC00003FC0000
03FFF8000FF8000000FFFF007FE00000003FFFFFFF800000000FFFFFFE0000000001FFFF
F800000000000FFF8000003D437CC146>101 D<00000003F8000000000FFE000000001F
FF000000003FFF800000007FFFC00000007FFFC0000000FFFFE0000000FFFFE0000000FF
FFE0000000FFFFE0000000FFFFE0000000FFFFE0000000FFFFE00000007FFFC00000007F
FFC00000003FFF800000001FFF000000000FFE0000000003F80000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000003FFE000007FFFFFE000007FFF
FFE000007FFFFFE000007FFFFFE000007FFFFFE00000003FFFE00000001FFFE00000000F
FFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000F
FFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000F
FFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000F
FFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000F
FFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000F
FFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000F
FFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000F
FFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000F
FFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000F
FFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000F
FFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00000000FFFE00FF0000F
FFE01FF8000FFFE03FFC000FFFE07FFE000FFFC0FFFF000FFFC0FFFF001FFFC0FFFF001F
FF80FFFF001FFF80FFFF001FFF00FFFF003FFF00FFFF003FFE007FFE007FFC007FFC007F
F8003FF800FFF0001FF001FFE0000FFC07FFC00007FFFFFF000003FFFFFC0000007FFFF0
0000000FFF0000002B8288E42F>106 D<000007C00000000007C00000000007C0000000
0007C00000000007C00000000007C0000000000FC0000000000FC0000000000FC0000000
000FC0000000000FC0000000001FC0000000001FC0000000001FC0000000003FC0000000
003FC0000000007FC0000000007FC000000000FFC000000001FFC000000001FFC0000000
03FFC000000007FFC00000000FFFC00000001FFFC00000007FFFC0000001FFFFC000000F
FFFFFFFFF8FFFFFFFFFFF8FFFFFFFFFFF8FFFFFFFFFFF8FFFFFFFFFFF8001FFFC0000000
1FFFC00000001FFFC00000001FFFC00000001FFFC00000001FFFC00000001FFFC0000000
1FFFC00000001FFFC00000001FFFC00000001FFFC00000001FFFC00000001FFFC0000000
1FFFC00000001FFFC00000001FFFC00000001FFFC00000001FFFC00000001FFFC0000000
1FFFC00000001FFFC00000001FFFC00000001FFFC00000001FFFC00000001FFFC0000000
1FFFC00000001FFFC00000001FFFC00000001FFFC00000001FFFC00000001FFFC0000000
1FFFC00000001FFFC00000001FFFC00000001FFFC0001F001FFFC0001F001FFFC0001F00
1FFFC0001F001FFFC0001F001FFFC0001F001FFFC0001F001FFFC0001F001FFFC0001F00
1FFFC0001F001FFFC0001F001FFFC0001F001FFFC0001F000FFFC0003E000FFFE0003E00
0FFFE0003E0007FFE0007C0007FFF0007C0003FFF000F80001FFF800F80000FFFC01F000
007FFF07E000003FFFFFC000000FFFFF80000003FFFE000000003FF800305C7DDA3C>
116 D<0007FF80000001FFE000FFFFFF80003FFFFFE000FFFFFF80003FFFFFE000FFFFFF
80003FFFFFE000FFFFFF80003FFFFFE000FFFFFF80003FFFFFE00000FFFF8000003FFFE0
00007FFF8000001FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003FFF8000
000FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003FFF8000000FFFE00000
3FFF8000000FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003FFF8000000F
FFE000003FFF8000000FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003FFF
8000000FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003FFF8000000FFFE0
00003FFF8000000FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003FFF8000
000FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003FFF8000000FFFE00000
3FFF8000000FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003FFF8000000F
FFE000003FFF8000000FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003FFF
8000000FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003FFF8000000FFFE0
00003FFF8000000FFFE000003FFF8000000FFFE000003FFF8000000FFFE000003FFF8000
000FFFE000003FFF8000001FFFE000003FFF8000001FFFE000003FFF8000001FFFE00000
3FFF8000001FFFE000003FFF8000003FFFE000003FFF8000003FFFE000001FFF8000007F
FFE000001FFF8000007FFFE000001FFF800000FFFFE000001FFFC00001EFFFE000000FFF
C00003CFFFE0000007FFC00007CFFFF0000007FFE0000F8FFFF8000003FFF0001F0FFFFF
F80001FFFC00FE0FFFFFF800007FFFFFF80FFFFFF800001FFFFFF00FFFFFF8000007FFFF
C00FFFFFF80000003FFE000FFF00004D427BC056>I E
/Fk load 0 Fk currentfont 144 scalefont put/FMat X/FBB
X/IEn X
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fl ecrm1200 12 45
/EN1 load IEn S/IEn X FBB FMat/FMat[0.01 0 0 -0.01 0
0]N/FBB[-6 -27 103 94]N
/Fl 45 235 df<00000C000C00000C000C00001C001C0000380038000038003800007000
7000007000700000E000E00001E001E00001C001C00003C003C00007800780000F800F80
001F001F00003E003E00003E003E00007C007C0000F800F80003F003F00007F007F0000F
E00FE0001FC01FC0007F807F8000FF00FF0000FF00FF00007F807F80001FC01FC0000FE0
0FE00007F007F00003F003F00000F800F800007C007C00003E003E00003E003E00001F00
1F00000F800F8000078007800003C003C00001C001C00001E001E00000E000E000007000
7000007000700000380038000038003800001C001C00000C000C00000C000C263076AF36
>19 D<C000C00000C000C00000E000E00000700070000070007000003800380000380038
00001C001C00001E001E00000E000E00000F000F0000078007800007C007C00003E003E0
0001F001F00001F001F00000F800F800007C007C00003F003F00003F803F80001FC01FC0
000FE00FE00007F807F80003FC03FC0003FC03FC0007F807F8000FE00FE0001FC01FC000
3F803F80003F003F00007C007C0000F800F80001F001F00001F001F00003E003E00007C0
07C00007800780000F000F00000E000E00001E001E00001C001C00003800380000380038
000070007000007000700000E000E00000C000C00000C000C0000026307BAF36>I<0000
00FFC001FC0000000FFFF80FFF0000003F803E3F03C00000FC00077E07E00003F8000FFC
0FF00007F0003FF81FF0000FE0007FF01FF0001FC0007FF01FF0003F80007FE01FF0007F
00007FE01FF0007F00007FE00FE000FF00003FC0038000FE00001FC0000000FE00001FC0
000000FE00001FC0000000FE00001FC0000000FE00001FC0000000FE00001FC0000000FE
00001FC0000000FE00001FC0000000FE00001FC0000000FE00001FC0000000FE00001FC0
000000FE00001FC0000000FE00001FC0000000FE00001FC0000000FE00001FC00000FFFF
FFFFFFFFF000FFFFFFFFFFFFF000FFFFFFFFFFFFF00000FE00001FC0000000FE00001FC0
000000FE00001FC0000000FE00001FC0000000FE00001FC0000000FE00001FC0000000FE
00001FC0000000FE00001FC0000000FE00001FC0000000FE00001FC0000000FE00001FC0
000000FE00001FC0000000FE00001FC0000000FE00001FC0000000FE00001FC0000000FE
00001FC0000000FE00001FC0000000FE00001FC0000000FE00001FC0000000FE00001FC0
000000FE00001FC0000000FE00001FC0000000FE00001FC0000000FE00001FC0000000FE
00001FC0000000FE00001FC0000000FE00001FC0000000FE00001FC0000000FE00001FC0
000000FE00001FC0000000FE00001FC0000000FE00001FC0000000FE00001FC0000000FE
00001FC0000000FE00001FC0000000FE00001FC0000001FF00003FF000007FFFFC0FFFFF
E0007FFFFC0FFFFFE0007FFFFC0FFFFFE0003C467EC539>27 D<000001FF000000000FFF
E00000007F80F8000001FC001C000003F8000E000007E0000F00000FC0007F00001FC000
FF80003F8000FF80007F0000FF80007F0000FF8000FF0000FF8000FE00007F0000FE0000
3E0000FE0000000000FE0000000000FE0000000000FE0000000000FE0000000000FE0000
000000FE0000000000FE0000000000FE0000000000FE0000000000FE0000000000FE0000
000000FE00003F80FFFFFFFFFF80FFFFFFFFFF80FFFFFFFFFF8000FE0000FF8000FE0000
7F8000FE00003F8000FE00003F8000FE00003F8000FE00003F8000FE00003F8000FE0000
3F8000FE00003F8000FE00003F8000FE00003F8000FE00003F8000FE00003F8000FE0000
3F8000FE00003F8000FE00003F8000FE00003F8000FE00003F8000FE00003F8000FE0000
3F8000FE00003F8000FE00003F8000FE00003F8000FE00003F8000FE00003F8000FE0000
3F8000FE00003F8000FE00003F8000FE00003F8000FE00003F8000FE00003F8000FE0000
3F8000FE00003F8000FE00003F8000FE00003F8000FE00003F8001FF00007FC07FFFFC1F
FFFF7FFFFC1FFFFF7FFFFC1FFFFF30467EC536>I<1E007F80FF80FFC0FFC0FFE0FFE0FF
E07FE01E60006000600060006000E000C000C000C001C0018003800300070006000E001C
003800700060000B1D78C41B>39 D<1E007F80FF80FFC0FFC0FFE0FFE0FFE07FE01E6000
6000600060006000E000C000C000C001C0018003800300070006000E001C003800700060
000B1D78891B>44 D<1E007F807F80FFC0FFC0FFC0FFC07F807F801E000A0A78891B>46
D<000030000000F0000001F0000003F000001FF00000FFF000FFFFF000FFE7F000FF07F0
000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0
000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0
000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0
000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0
000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0
000007F0000007F0000007F0000007F0000007F0000007F0000007F000000FF800001FFC
007FFFFFFF7FFFFFFF7FFFFFFF204278C131>49 D<0003FE0000001FFFC000007FFFF000
01F80FFC0003C001FE00078000FF000E00007F801C00003FC01C00001FE03800001FF030
00000FF07000000FF860000007F86C000007F8FF000007FCFF800007FCFFC00007FCFFC0
0003FCFFC00003FCFFC00003FCFFC00003FC7F800007FC3F000007FC00000007FC000000
07F800000007F80000000FF80000000FF00000001FF00000001FE00000001FE00000003F
C00000007F800000007F00000000FF00000000FE00000001FC00000003F800000007F000
000007E00000000FC00000001F800000003F000000007C00000000F800000000F0000000
01E000000003C000000007800000000F00000C001E00000C003C00000C00380000180070
00001800E000001801C0000018038000003807000000300E000000701FFFFFFFF01FFFFF
FFF03FFFFFFFF07FFFFFFFF0FFFFFFFFE0FFFFFFFFE0FFFFFFFFE026427BC131>I<1E00
7F807F80FFC0FFC0FFC0FFC07F807F801E00000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000001E007F807F80FFC0
FFC0FFC0FFC07F807F801E000A2B78AA1B>58 D<00000000C00000000000000001E00000
000000000001E00000000000000001E00000000000000003F00000000000000003F00000
000000000003F00000000000000007F80000000000000007F80000000000000007F80000
00000000000FFC000000000000000FFC000000000000000FFC0000000000000019FE0000
000000000019FE0000000000000019FE0000000000000030FF0000000000000030FF0000
000000000070FF80000000000000607F80000000000000607F80000000000000E07FC000
0000000000C03FC0000000000000C03FC0000000000001C03FE0000000000001801FE000
0000000001801FE0000000000003001FF0000000000003000FF0000000000003000FF000
0000000006000FF80000000000060007F80000000000060007F800000000000C0003FC00
000000000C0003FC00000000000C0003FC0000000000180001FE0000000000180001FE00
00000000180001FE0000000000300000FF0000000000300000FF0000000000700000FF80
000000006000007F80000000006000007F8000000000E000007FC000000000FFFFFFFFC0
00000000FFFFFFFFC000000001FFFFFFFFE0000000018000001FE0000000018000001FE0
000000030000001FF0000000030000000FF0000000030000000FF0000000060000000FF8
0000000600000007F80000000600000007F80000000C00000003FC0000000C00000003FC
0000000C00000003FC0000001800000001FE0000001800000001FE0000001800000001FE
0000003000000000FF0000003000000000FF0000007800000000FF800000F800000000FF
800001FC00000000FFC0000FFF00000003FFE000FFFFE000007FFFFFC0FFFFE000007FFF
FFC0FFFFE000007FFFFFC042477DC649>65 D<0000000FFE000060000000FFFFC000E000
0003FFFFF000E000000FFC01FC01E000003FC0003E01E00000FF00000F83E00003FC0000
03C7E00007F8000001E7E0000FF0000000FFE0001FE00000007FE0003FC00000003FE000
7F800000001FE000FF000000000FE001FE000000000FE001FC0000000007E003FC000000
0007E007F80000000003E007F80000000003E00FF00000000001E00FF00000000001E01F
E00000000000E01FE00000000000E03FE00000000000E03FE00000000000E03FC0000000
0000607FC00000000000607FC00000000000607FC00000000000607FC0000000000000FF
80000000000000FF80000000000000FF80000000000000FF80000000000000FF80000000
000000FF80000000000000FF80000000000000FF80000000000000FF80000000000000FF
80000000000000FF80000000000000FF80000000000000FF80000000000000FF80000000
0000007FC00000000000007FC00000000000007FC00000000000607FC00000000000603F
C00000000000603FE00000000000603FE00000000000601FE00000000000E01FF0000000
0000E00FF00000000000C00FF00000000000C007F80000000001C007F800000000018003
FC00000000038001FC00000000038001FE00000000070000FF000000000600007F800000
000E00003FC00000001C00001FE00000003800000FF000000078000007F8000000F00000
03FC000001E0000000FF000007800000003FC0001F000000000FFC00FC0000000003FFFF
F00000000000FFFFC000000000000FFE0000003B487BC546>67 D<FFFFFFFFFFFFF800FF
FFFFFFFFFFF800FFFFFFFFFFFFF80001FFC000007FF800007F80000007FC00007F800000
01FC00007F80000000FC00007F800000007C00007F800000003C00007F800000001C0000
7F800000001C00007F800000000E00007F800000000E00007F800000000E00007F800000
000600007F800000000600007F800000000600007F800000000600007F80000000070000
7F800006000300007F800006000300007F800006000300007F800006000000007F800006
000000007F800006000000007F800006000000007F80000E000000007F80000E00000000
7F80001E000000007F80003E000000007F8000FE000000007FFFFFFE000000007FFFFFFE
000000007FFFFFFE000000007F8000FE000000007F80003E000000007F80001E00000000
7F80000E000000007F80000E000000007F800006000000007F800006000000007F800006
000000007F8000060000C0007F8000060000C0007F8000060000C0007F80000600018000
7F800000000180007F800000000180007F800000000180007F800000000180007F800000
000380007F800000000380007F800000000300007F800000000300007F80000000070000
7F800000000700007F800000000F00007F800000000F00007F800000001E00007F800000
001E00007F800000003E00007F800000007E00007F80000001FE00007F80000007FE0001
FFC000007FFE00FFFFFFFFFFFFFC00FFFFFFFFFFFFFC00FFFFFFFFFFFFFC003A447CC342
>69 D<FFFFFFC00001FFFFC0FFFFFFC00001FFFFC0FFFFFFC00001FFFFC001FFE0000000
7FFC00007FC00000003FE000007F800000003F8000007F800000003E0000007F80000000
3C0000007F80000000380000007F80000000700000007F80000000E00000007F80000001
C00000007F80000003800000007F80000007000000007F8000001E000000007F80000038
000000007F80000070000000007F800000E0000000007F800001C0000000007F80000380
000000007F80000700000000007F80000E00000000007F80001C00000000007F80003800
000000007F80007000000000007F8000E000000000007F8001C000000000007F8003E000
000000007F8007F000000000007F800FF000000000007F801FF800000000007F803FFC00
000000007F8077FC00000000007F80E3FE00000000007F81C1FF00000000007F8381FF00
000000007F8700FF80000000007F8E007FC0000000007F9C007FC0000000007FB8003FE0
000000007FF0001FF0000000007FC0001FF0000000007F80000FF8000000007F800007FC
000000007F800007FC000000007F800003FE000000007F800001FF000000007F800001FF
000000007F800000FF800000007F8000007FC00000007F8000007FC00000007F8000003F
E00000007F8000001FF00000007F8000001FF00000007F8000000FF80000007F80000007
FC0000007F80000007FC0000007F80000003FE0000007F80000001FF0000007F80000001
FF0000007F80000000FF8000007F80000000FFC000007F80000000FFE000007FC0000000
FFF00001FFE0000001FFFC00FFFFFFC0001FFFFFE0FFFFFFC0001FFFFFE0FFFFFFC0001F
FFFFE043447CC34C>75 D<FFFF8000000FFFFFFFFFC000000FFFFFFFFFE000000FFFFF00
FFE0000000FFF0007FF00000001F80006FF80000000F00006FF80000000F000067FC0000
0006000063FE00000006000063FE00000006000061FF00000006000060FF800000060000
60FF800000060000607FC00000060000603FE00000060000603FE00000060000601FF000
00060000600FF80000060000600FF800000600006007FC00000600006003FE0000060000
6003FE00000600006001FF00000600006000FF80000600006000FF800006000060007FC0
0006000060003FE00006000060003FE00006000060001FF00006000060000FF800060000
60000FF800060000600007FC00060000600003FE00060000600003FE00060000600001FF
00060000600000FF80060000600000FF800600006000007FC00600006000003FE0060000
6000003FE00600006000001FF00600006000000FF80600006000000FF806000060000007
FC06000060000003FE06000060000003FE06000060000001FF06000060000000FF860000
60000000FF860000600000007FC60000600000003FE60000600000003FE6000060000000
1FF60000600000000FFE0000600000000FFE00006000000007FE00006000000003FE0000
6000000003FE00006000000001FE00006000000000FE00006000000000FE0000F0000000
007E0000F0000000003E0001F8000000003E000FFF000000001E00FFFFF00000000E00FF
FFF00000000E00FFFFF0000000060040447CC349>78 D<FFFFFFFFFC0000FFFFFFFFFFC0
00FFFFFFFFFFF80001FFC0000FFC00007F800001FF00007F8000007F80007F8000001FE0
007F8000000FE0007F80000007F0007F80000007F8007F80000003FC007F80000003FC00
7F80000003FE007F80000001FE007F80000001FE007F80000001FF007F80000001FF007F
80000001FF007F80000001FF007F80000001FF007F80000001FF007F80000001FF007F80
000001FE007F80000001FE007F80000003FE007F80000003FC007F80000003FC007F8000
0007F8007F80000007F0007F8000000FE0007F8000001FC0007F8000007F80007F800001
FE00007F80000FFC00007FFFFFFFF000007FFFFFFF8000007F8000000000007F80000000
00007F8000000000007F8000000000007F8000000000007F8000000000007F8000000000
007F8000000000007F8000000000007F8000000000007F8000000000007F800000000000
7F8000000000007F8000000000007F8000000000007F8000000000007F8000000000007F
8000000000007F8000000000007F8000000000007F8000000000007F8000000000007F80
00000000007F8000000000007F8000000000007F8000000000007F8000000000007F8000
00000001FFE000000000FFFFFFC0000000FFFFFFC0000000FFFFFFC000000038447CC342
>80 D<3FFFFFFFFFFFFFF83FFFFFFFFFFFFFF83FFFFFFFFFFFFFF83FF0001FF8001FF83F
80000FF00003F83E00000FF00000F87C00000FF000007C7800000FF000003C7800000FF0
00003C7000000FF000001C7000000FF000001C7000000FF000001C6000000FF000000C60
00000FF000000C6000000FF000000C6000000FF000000C6000000FF000000CC000000FF0
000006C000000FF0000006C000000FF0000006C000000FF0000006C000000FF000000600
00000FF00000000000000FF00000000000000FF00000000000000FF00000000000000FF0
0000000000000FF00000000000000FF00000000000000FF00000000000000FF000000000
00000FF00000000000000FF00000000000000FF00000000000000FF00000000000000FF0
0000000000000FF00000000000000FF00000000000000FF00000000000000FF000000000
00000FF00000000000000FF00000000000000FF00000000000000FF00000000000000FF0
0000000000000FF00000000000000FF00000000000000FF00000000000000FF000000000
00000FF00000000000000FF00000000000000FF00000000000000FF00000000000000FF0
0000000000000FF00000000000000FF00000000000000FF00000000000000FF000000000
00000FF00000000000000FF00000000000000FF00000000000000FF00000000000000FF0
0000000000001FF80000000000007FFE0000000001FFFFFFFF80000001FFFFFFFF800000
01FFFFFFFF80003F447DC346>84 D<FFFFFFC0000FFFFFFFFFFFC0000FFFFFFFFFFFC000
0FFFFF01FFE0000000FFF0007F800000001F80007F800000000F00007F800000000F0000
7F800000000600007F800000000600007F800000000600007F800000000600007F800000
000600007F800000000600007F800000000600007F800000000600007F80000000060000
7F800000000600007F800000000600007F800000000600007F800000000600007F800000
000600007F800000000600007F800000000600007F800000000600007F80000000060000
7F800000000600007F800000000600007F800000000600007F800000000600007F800000
000600007F800000000600007F800000000600007F800000000600007F80000000060000
7F800000000600007F800000000600007F800000000600007F800000000600007F800000
000600007F800000000600007F800000000600007F800000000600007F80000000060000
7F800000000600007F800000000600007F800000000600007F800000000600007F800000
000600007F800000000600007F800000000600007F800000000E00003FC00000000C0000
3FC00000000C00003FC00000001C00001FC00000001C00001FE00000001800000FE00000
003800000FE000000030000007F000000070000007F0000000E0000003F8000001E00000
01FC000001C0000000FE000007800000007F00000F000000003F80001E000000001FE000
7C0000000007FC03F00000000001FFFFE000000000007FFF80000000000007FC00000040
467CC349>I<FFFFFF8000000FFFFCFFFFFF8000000FFFFCFFFFFF8000000FFFFC01FFF8
00000003FFC0007FE000000000FE00007FE000000000FC00003FE000000000F000001FF0
00000000E000001FF800000000E000000FF800000000C0000007FC0000000180000007FC
0000000380000003FE0000000300000003FF0000000600000001FF0000000E00000000FF
8000000C00000000FF8000001C000000007FC0000018000000003FE0000030000000003F
E0000070000000001FF0000060000000001FF00000E0000000000FF80000C00000000007
FC0001800000000007FC0003800000000003FE0003000000000003FE0007000000000001
FF0006000000000000FF800C000000000000FF801C0000000000007FC018000000000000
7FC0300000000000003FE0300000000000001FF0600000000000001FF0E0000000000000
0FF8C00000000000000FF98000000000000007FF8000000000000003FF00000000000000
03FF0000000000000001FE0000000000000001FE0000000000000001FE00000000000000
01FE0000000000000001FE0000000000000001FE0000000000000001FE00000000000000
01FE0000000000000001FE0000000000000001FE0000000000000001FE00000000000000
01FE0000000000000001FE0000000000000001FE0000000000000001FE00000000000000
01FE0000000000000001FE0000000000000001FE0000000000000001FE00000000000000
01FE0000000000000001FE0000000000000001FE0000000000000001FE00000000000000
01FE0000000000000007FF80000000000003FFFFFF000000000003FFFFFF000000000003
FFFFFF00000046447FC349>89 D<0007FC000000003FFF80000000F80FE0000003C003F0
0000070001F800000E0000FC00000FC0007E00001FE0007F00001FF0003F80001FF0003F
80001FF0003F80001FF0001FC0001FF0001FC0000FE0001FC0000380001FC0000000001F
C0000000001FC0000000001FC0000000001FC00000000FFFC0000001FFFFC000000FFE1F
C000003FC01FC00000FF001FC00003FC001FC00007F8001FC0000FF0001FC0001FE0001F
C0003FC0001FC0007FC0001FC0007F80001FC0007F80001FC060FF00001FC060FF00001F
C060FF00001FC060FF00003FC060FF00003FC060FF00003FC060FF80007FC0607F8000EF
C0607FC000C7E0C03FC001C7E0C01FE00783F1C007F81E03FF8001FFFC01FF00001FE000
7C002B2E7CAC31>97 D<01FC00000000FFFC00000000FFFC00000000FFFC0000000007FC
0000000003FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC
0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC
0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC
0000000001FC0000000001FC0000000001FC03FC000001FC0FFF800001FC3C07E00001FC
7001F80001FDE0007E0001FD80003F0001FF80001F8001FF00001FC001FE00000FE001FC
000007E001FC000007F001FC000007F001FC000003F801FC000003F801FC000003FC01FC
000003FC01FC000001FC01FC000001FE01FC000001FE01FC000001FE01FC000001FE01FC
000001FE01FC000001FE01FC000001FE01FC000001FE01FC000001FE01FC000001FE01FC
000001FE01FC000001FC01FC000003FC01FC000003FC01FC000003F801FC000003F801FC
000007F001FC000007F001FE00000FE001FE00000FC001FF00001FC001FB00003F8001F3
80007E0001E1C000FC0001E0F001F80001C03C07E00001801FFF8000000003FC00002F46
7DC436>I<00007F80000003FFF000000FC07C00003F000F0000FC00038001F80001C003
F8000FC007F0001FE007E0003FE00FE0003FE01FC0003FE01FC0003FE03F80003FE03F80
001FC07F800007007F800000007F800000007F00000000FF00000000FF00000000FF0000
0000FF00000000FF00000000FF00000000FF00000000FF00000000FF00000000FF000000
00FF000000007F000000007F800000007F800000003F800000003F800000303FC0000030
1FC00000700FE00000600FE00000E007F00000C003F80001C001F800038000FC00070000
3F001E00001FC078000007FFF0000000FF8000242E7DAC2B>I<000000007F000000003F
FF000000003FFF000000003FFF0000000001FF0000000000FF00000000007F0000000000
7F00000000007F00000000007F00000000007F00000000007F00000000007F0000000000
7F00000000007F00000000007F00000000007F00000000007F00000000007F0000000000
7F00000000007F00000000007F00000000007F00000000007F00000000007F0000007F80
7F000003FFF07F00000FC07C7F00003F000E7F00007E00077F0000FC0003FF0003F80001
FF0007F00000FF0007E00000FF000FE000007F001FC000007F001FC000007F003F800000
7F003F8000007F007F8000007F007F8000007F007F0000007F00FF0000007F00FF000000
7F00FF0000007F00FF0000007F00FF0000007F00FF0000007F00FF0000007F00FF000000
7F00FF0000007F00FF0000007F00FF0000007F007F0000007F007F8000007F007F800000
7F003F8000007F003F8000007F001FC000007F001FC000007F000FC00000FF000FE00000
FF0007F00001FF0003F00003FF0001F800077F8000FC000E7FC0003F001C7FFE000FC0F8
7FFE0003FFE07FFE00007F007F002F467DC436>I<0001FE00000007FFC000001F03F000
007E00FC0000FC007E0001F8003F0003F0003F0007E0001F800FE0001FC00FC0000FC01F
C0000FC03F80000FE03F800007E03F800007E07F800007F07F000007F07F000007F0FF00
0007F0FF000007F0FF000007F0FFFFFFFFF0FFFFFFFFF0FF00000000FF00000000FF0000
0000FF00000000FF00000000FF000000007F000000007F000000007F800000007F800000
003F800000003F800000301FC00000301FC00000700FC00000600FE00000E007F00000C0
03F00001C001F800038000FC000700003E001E00001F80F8000003FFE0000000FF000024
2E7DAC2B>I<00000FE00000007FF8000001F81E000003F03F00000FE07F80001FC0FF80
001F80FF80003F80FF80007F00FF80007F00FF80007F007F0000FE001C0000FE00000000
FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE
00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE000000FFFFFF
8000FFFFFF8000FFFFFF800000FE00000000FE00000000FE00000000FE00000000FE0000
0000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE000000
00FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000
FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE
00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00
000000FE00000000FE00000001FF8000007FFFFF00007FFFFF00007FFFFF000021467EC5
1E>I<000000000F800001FC007FE0000FFF81F0F0003F07E381F000FC01FF03F001F800
FE01F003F0007E01E007F0007F000007E0003F00000FE0003F80000FC0001F80001FC000
1FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC000
1FC0001FC0001FC0001FC0001FC0000FC0001F80000FE0003F800007E0003F000007F000
7F000003F0007E000001F800FC000001FC01F8000003BF07E00000030FFF8000000701FC
0000000700000000000700000000000F00000000000F00000000000F00000000000F8000
00000007C00000000007E00000000007FFFFF8000003FFFFFF000003FFFFFFE00001FFFF
FFF800007FFFFFFC0001FFFFFFFE0007C0000FFF000F800000FF003F0000003F803E0000
001F807C0000000FC07C0000000FC0F800000007C0F800000007C0F800000007C0F80000
0007C0F800000007C0FC0000000FC07C0000000F807E0000001F803E0000001F001F0000
003E000F8000007C0007E00001F80001F80007E000007F003F8000001FFFFE00000001FF
E000002C427DAC31>I<01FC00000000FFFC00000000FFFC00000000FFFC0000000007FC
0000000003FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC
0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC
0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC
0000000001FC0000000001FC0000000001FC01FE000001FC07FFC00001FC1E07F00001FC
3801F80001FC7001FC0001FCE000FC0001FDC000FE0001FD8000FE0001FF80007F0001FF
00007F0001FF00007F0001FE00007F0001FE00007F0001FE00007F0001FC00007F0001FC
00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC
00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC
00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC
00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC
00007F0003FE0000FF80FFFFF83FFFFEFFFFF83FFFFEFFFFF83FFFFE2F457DC436>I<01
E00007F80007F8000FFC000FFC000FFC000FFC0007F80007F80001E00000000000000000
000000000000000000000000000000000000000000000000000000000000000001FC00FF
FC00FFFC00FFFC0007FC0003FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001
FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001
FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001
FC0001FC0001FC0003FE00FFFFF8FFFFF8FFFFF815437DC21C>I<00003C000000FF0000
00FF000001FF800001FF800001FF800001FF800000FF000000FF0000003C000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000007F80003FFF80003FFF80003FFF800000FF8000007F8000
003F8000003F8000003F8000003F8000003F8000003F8000003F8000003F8000003F8000
003F8000003F8000003F8000003F8000003F8000003F8000003F8000003F8000003F8000
003F8000003F8000003F8000003F8000003F8000003F8000003F8000003F8000003F8000
003F8000003F8000003F8000003F8000003F8000003F8000003F8000003F8000003F8000
003F8000003F8000003F8000003F8000003F8000003F8000003F8000003F8000003F8000
003F803E003F807F003F80FF807F00FF807F00FF807E00FF807E00FF80FC007F00F8003C
01F0001E03E00007FF800001FE0000195785C21E>I<01FC00FFFC00FFFC00FFFC0007FC
0003FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC
0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC
0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC
0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC
0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC
0003FE00FFFFF8FFFFF8FFFFF815457DC41C>108 D<01FC00FF00001FE00000FFFC07FF
E000FFFC0000FFFC0F03F801E07F0000FFFC3C01FC07803F800007FC7000FE0E001FC000
03FCE0007E1C000FC00001FDC0007F38000FE00001FD80007F30000FE00001FF80003FF0
0007F00001FF00003FE00007F00001FF00003FE00007F00001FE00003FC00007F00001FE
00003FC00007F00001FE00003FC00007F00001FC00003F800007F00001FC00003F800007
F00001FC00003F800007F00001FC00003F800007F00001FC00003F800007F00001FC0000
3F800007F00001FC00003F800007F00001FC00003F800007F00001FC00003F800007F000
01FC00003F800007F00001FC00003F800007F00001FC00003F800007F00001FC00003F80
0007F00001FC00003F800007F00001FC00003F800007F00001FC00003F800007F00001FC
00003F800007F00001FC00003F800007F00001FC00003F800007F00001FC00003F800007
F00001FC00003F800007F00001FC00003F800007F00001FC00003F800007F00001FC0000
3F800007F00001FC00003F800007F00001FC00003F800007F00003FE00007FC0000FF800
FFFFF81FFFFF03FFFFE0FFFFF81FFFFF03FFFFE0FFFFF81FFFFF03FFFFE04B2C7DAB52>
I<01FC01FE0000FFFC07FFC000FFFC1E07F000FFFC3801F80007FC7001FC0003FCE000FC
0001FDC000FE0001FD8000FE0001FF80007F0001FF00007F0001FF00007F0001FE00007F
0001FE00007F0001FE00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F
0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F
0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F
0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F
0001FC00007F0001FC00007F0001FC00007F0001FC00007F0003FE0000FF80FFFFF83FFF
FEFFFFF83FFFFEFFFFF83FFFFE2F2C7DAB36>I<00007F8000000003FFF00000000FC0FC
0000003E001F0000007C000F800000F80007C00001F00003E00003E00001F00007C00000
F8000FC00000FC000FC00000FC001F8000007E003F8000007F003F8000007F003F000000
3F007F0000003F807F0000003F807F0000003F807F0000003F80FF0000003FC0FF000000
3FC0FF0000003FC0FF0000003FC0FF0000003FC0FF0000003FC0FF0000003FC0FF000000
3FC0FF0000003FC0FF0000003FC07F0000003F807F0000003F807F8000007F803F800000
7F003F8000007F001F8000007E001FC00000FE000FC00000FC000FE00001FC0007E00001
F80003F00003F00001F80007E00000FC000FC000003E001F0000001FC0FE00000007FFF8
000000007F8000002A2E7DAC31>I<01FC03FC0000FFFC0FFF8000FFFC3C07E000FFFC70
01F80007FDE000FE0001FD80007F0001FF80003F8001FF00001FC001FE00001FE001FC00
000FE001FC00000FF001FC000007F001FC000007F801FC000003F801FC000003FC01FC00
0003FC01FC000003FC01FC000001FE01FC000001FE01FC000001FE01FC000001FE01FC00
0001FE01FC000001FE01FC000001FE01FC000001FE01FC000001FE01FC000001FE01FC00
0001FE01FC000003FC01FC000003FC01FC000003FC01FC000007F801FC000007F801FC00
0007F001FC00000FF001FE00000FE001FE00001FC001FF00003FC001FF00003F8001FF80
007E0001FDC000FC0001FCF003F80001FC3C0FE00001FC1FFF800001FC03FC000001FC00
00000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC00
00000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC00
00000001FC0000000003FE00000000FFFFF8000000FFFFF8000000FFFFF80000002F3F7D
AB36>I<00007F8003000003FFE00700000FE0780700003F801C0F00007E000E0F0000FC
00071F0003F800039F0007F80001BF0007F00001FF000FE00000FF001FE00000FF001FC0
0000FF003FC000007F003FC000007F007F8000007F007F8000007F007F8000007F00FF00
00007F00FF0000007F00FF0000007F00FF0000007F00FF0000007F00FF0000007F00FF00
00007F00FF0000007F00FF0000007F00FF0000007F00FF0000007F007F8000007F007F80
00007F007F8000007F003F8000007F003FC000007F001FC000007F001FE00000FF000FE0
0000FF000FF00001FF0007F00001FF0003F80003FF0001FC00077F0000FE000E7F00003F
001C7F00000FC0F87F000003FFE07F0000007F007F00000000007F00000000007F000000
00007F00000000007F00000000007F00000000007F00000000007F00000000007F000000
00007F00000000007F00000000007F00000000007F00000000007F00000000007F000000
0000FF800000003FFFFE0000003FFFFE0000003FFFFE2F3F7DAB33>I<03F803F0FFF81F
FCFFF83C3EFFF8707F07F8E0FF03F9C0FF01F980FF01FB80FF01FB007E01FB003C01FF00
0001FE000001FE000001FE000001FE000001FC000001FC000001FC000001FC000001FC00
0001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC00
0001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC00
0001FC000001FC000003FF0000FFFFFE00FFFFFE00FFFFFE00202C7DAB26>I<003FE018
01FFFC3807E01F780F0003F81E0001F83C0000F87C00007878000078F8000038F8000038
F8000018F8000018FC000018FC000018FE000018FF8000007FC000007FFC00003FFFE000
1FFFFC000FFFFF0007FFFFC003FFFFE000FFFFF0001FFFF80000FFF800000FFC000003FC
C00001FEC00000FEC000007EE000007EE000003EE000003EF000003EF000003EF000003E
F800003CFC00007CFC000078FE0000F8FF0001F0F38003E0F1F00F80E07FFE00C00FF000
1F2E7DAC26>I<0006000000060000000600000006000000060000000E0000000E000000
0E0000000E0000001E0000001E0000001E0000003E0000007E0000007E000000FE000001
FE000007FE00001FFFFFF0FFFFFFF0FFFFFFF000FE000000FE000000FE000000FE000000
FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000
FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000
FE000C00FE000C00FE000C00FE000C00FE000C00FE000C00FE000C00FE000C00FE000C00
FE000C007E001C007F0018007F0018003F0038001F8030001FC0700007E0E00001FFC000
007F001E3E7EBC26>I<01FC00007F00FFFC003FFF00FFFC003FFF00FFFC003FFF0007FC
0001FF0003FC0000FF0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC
00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC
00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC
00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC
00007F0001FC00007F0001FC00007F0001FC00007F0001FC0000FF0001FC0000FF0001FC
0000FF0001FC0001FF0001FC0001FF0000FC0001FF0000FE0003FF00007E00077F80007F
000E7FC0003F001C7FFE000FC0787FFE0003FFF07FFE00007F807F002F2D7DAB36>I<FF
FFF001FFFCFFFFF001FFFCFFFFF001FFFC07FF00007FE003FE00001F8001FE00001F0001
FE00000E0000FE00000E0000FE00000C00007F00001800007F00001800007F8000180000
3F80003000003F80003000003FC0007000001FC0006000001FE0006000000FE000C00000
0FE000C000000FF001C0000007F00180000007F00180000003F80300000003F803000000
03FC0700000001FC0600000001FC0600000000FE0C00000000FE0C00000000FF0C000000
007F18000000007F18000000007FB8000000003FB0000000003FF0000000001FE0000000
001FE0000000001FE0000000000FC0000000000FC0000000000780000000000780000000
00078000000000030000002E2C7EAA33>I<FFFFF007FFFCFFFFF007FFFCFFFFF007FFFC
03FFC001FFC000FF8000FF00007F8000FC00003F8000F800003FC000E000001FE000E000
000FE001C0000007F00380000007F80300000003FC0600000001FC0E00000001FE1C0000
0000FF18000000007F30000000003FF0000000003FE0000000001FE0000000000FE00000
000007F00000000007F8000000000FF8000000000DFC0000000019FE0000000038FF0000
0000707F00000000603F80000000C03FC0000001C01FC0000003800FE0000003000FF000
00060007F800000E0003F800001C0001FC00003C0001FE00007C0001FF0001FC0001FF80
0FFE0003FFC0FFFF800FFFFFFFFF800FFFFFFFFF800FFFFF302B7FAA33>120
D<000780000000000FC0000000001FE0000000001FF0000000000FF8000000000FFC0000
000003FE0000000001FF00000000007F00000000001F80000000000FC00000000003E000
00000000F000000000007000000000001000000000000000000000000000000000000000
000000000000000007FC000000003FFF80000000F80FE0000003C003F00000070001F800
000E0000FC00000FC0007E00001FE0007F00001FF0003F80001FF0003F80001FF0003F80
001FF0001FC0001FF0001FC0000FE0001FC0000380001FC0000000001FC0000000001FC0
000000001FC0000000001FC00000000FFFC0000001FFFFC000000FFE1FC000003FC01FC0
0000FF001FC00003FC001FC00007F8001FC0000FF0001FC0001FE0001FC0003FC0001FC0
007FC0001FC0007F80001FC0007F80001FC060FF00001FC060FF00001FC060FF00001FC0
60FF00003FC060FF00003FC060FF00003FC060FF80007FC0607F8000EFC0607FC000C7E0
C03FC001C7E0C01FE00783F1C007F81E03FF8001FFFC01FF00001FE0007C002B417CBF31
>224 D<00008000000003E000000007F000000007F800000007FC00000007FC00000003
FE00000001FF000000007F800000003FC00000000FE000000003E000000001F000000000
78000000003800000000080000000000000000000000000000000000000000000001FE00
000007FFC000001F03F000007E00FC0000FC007E0001F8003F0003F0003F0007E0001F80
0FE0001FC00FC0000FC01FC0000FC03F80000FE03F800007E03F800007E07F800007F07F
000007F07F000007F0FF000007F0FF000007F0FF000007F0FFFFFFFFF0FFFFFFFFF0FF00
000000FF00000000FF00000000FF00000000FF00000000FF000000007F000000007F0000
00007F800000007F800000003F800000003F800000301FC00000301FC00000700FC00000
600FE00000E007F00000C003F00001C001F800038000FC000700003E001E00001F80F800
0003FFE0000000FF000024427DC02B>232 D<000002000000000F800000001FC0000000
3FC00000007FC00000007FC0000000FF80000001FF00000003FC00000007F80000000FE0
0000000F800000001F000000003C00000000380000000020000000000000000000000000
00000000000000000000000001FE00000007FFC000001F03F000007E00FC0000FC007E00
01F8003F0003F0003F0007E0001F800FE0001FC00FC0000FC01FC0000FC03F80000FE03F
800007E03F800007E07F800007F07F000007F07F000007F0FF000007F0FF000007F0FF00
0007F0FFFFFFFFF0FFFFFFFFF0FF00000000FF00000000FF00000000FF00000000FF0000
0000FF000000007F000000007F000000007F800000007F800000003F800000003F800000
301FC00000301FC00000700FC00000600FE00000E007F00000C003F00001C001F8000380
00FC000700003E001E00001F80F8000003FFE0000000FF000024427DC02B>I<00006000
000000F000000001F800000003FC00000007FE0000000F9F0000000F0F0000001E078000
003C03C000007801E00000F000F00001E000780001C00038000380001C000300000C0000
000000000000000000000000000000000000000001FE00000007FFC000001F03F000007E
00FC0000FC007E0001F8003F0003F0003F0007E0001F800FE0001FC00FC0000FC01FC000
0FC03F80000FE03F800007E03F800007E07F800007F07F000007F07F000007F0FF000007
F0FF000007F0FF000007F0FFFFFFFFF0FFFFFFFFF0FF00000000FF00000000FF00000000
FF00000000FF00000000FF000000007F000000007F000000007F800000007F800000003F
800000003F800000301FC00000301FC00000700FC00000600FE00000E007F00000C003F0
0001C001F800038000FC000700003E001E00001F80F8000003FFE0000000FF000024417D
BF2B>I E
/Fl load 0 Fl currentfont 100 scalefont put/FMat X/FBB
X/IEn X
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fm eccc1200 12 18
/EN1 load IEn S/IEn X FBB FMat/FMat[0.01 0 0 -0.01 0
0]N/FBB[-2 -27 152 94]N
/Fm 18 234 df<00007F8000000003FFF00000000FC0FC0000003F003F0000007C000F80
0000F80007C00001F00003E00003E00001F00007E00001F80007C00000F8000FC00000FC
000FC00000FC001F8000007E001F8000007E001F8000007E003F8000007F003F8000007F
003F8000007F007F0000003F807F0000003F807F0000003F807F0000003F807F0000003F
807F0000003F80FF0000003FC0FF0000003FC0FF0000003FC0FF0000003FC0FF0000003F
C0FF0000003FC0FF0000003FC0FF0000003FC0FF0000003FC0FF0000003FC0FF0000003F
C0FF0000003FC0FF0000003FC0FF0000003FC0FF0000003FC0FF0000003FC0FF0000003F
C0FF0000003FC0FF0000003FC0FF0000003FC0FF0000003FC07F0000003F807F0000003F
807F0000003F807F0000003F807F8000007F803F8000007F003F8000007F003F8000007F
003F8000007F001F8000007E001FC00000FE000FC00000FC000FC00000FC0007E00001F8
0007E00001F80003F00003F00001F00003E00000F80007C000007C000F8000003F003F00
00000FC0FC00000003FFF0000000007F8000002A447BC135>48 D<0003FF0000001FFFE0
00007FFFFC0000FC03FE0003E000FF800780003FC00F00001FE01E00000FF01C00000FF8
38000007FC30000003FC70000003FE60000003FE6C000001FEFF000001FFFF800001FFFF
C00001FFFFC00000FFFFC00000FFFFC00000FFFFC00000FF7F800001FF3F000001FF0000
0001FF00000001FE00000001FE00000003FE00000003FC00000007FC00000007F8000000
0FF00000000FF00000001FE00000001FC00000003F800000007F00000000FE00000000FC
00000001F800000003F000000007E00000000FC00000001F800000001F000000003E0000
00007800000000F000000001E000000003C000000007800003000F000003001E00000300
3C000006007800000600F000000601E000000603C000000E038000000C070000001C0FFF
FFFFFC1FFFFFFFFC3FFFFFFFFC7FFFFFFFFCFFFFFFFFF8FFFFFFFFF8FFFFFFFFF828427A
C135>50 D<00000030000000000000780000000000007800000000000078000000000000
FC000000000000FC000000000001FE000000000001FE000000000001FE0000000000037F
0000000000037F0000000000077F8000000000063F8000000000063F80000000000C3FC0
000000000C1FC0000000001C1FE000000000180FE000000000180FE000000000300FF000
0000003007F0000000007007F8000000006003F8000000006003F800000000C003FC0000
0000C001FC00000000C001FC000000018000FE000000018000FE000000030000FF000000
0300007F0000000300007F0000000600003F8000000600003F8000000FFFFFFFC000000F
FFFFFFC000000FFFFFFFC000001800000FE000001800000FE000003800000FF000003000
0007F0000030000007F0000060000007F8000060000003F80000E0000003FC0000C00000
01FC0001C0000001FC0001C0000001FE0003C0000000FE0007E0000001FF001FF0000003
FF80FFFC00001FFFFCFFFC00001FFFFCFFFC00001FFFFC36367CB53E>97
D<FFFFFFFF8000FFFFFFFFF000FFFFFFFFFC0003FE0001FF0001FC00007F8001FC00003F
C001FC00001FE001FC00000FE001FC00000FF001FC000007F001FC000007F801FC000007
F801FC000007F801FC000007F801FC000007F801FC000007F801FC000007F001FC00000F
F001FC00000FE001FC00001FE001FC00003FC001FC00007F8001FC0000FE0001FC0007FC
0001FFFFFFE00001FFFFFFFC0001FC0000FF0001FC00001FC001FC00000FE001FC000007
F001FC000003F801FC000001FC01FC000001FE01FC000001FE01FC000000FE01FC000000
FF01FC000000FF01FC000000FF01FC000000FF01FC000000FF01FC000000FF01FC000000
FE01FC000001FE01FC000001FC01FC000003FC01FC000007F801FC00000FF001FC00003F
E003FE0000FFC0FFFFFFFFFF00FFFFFFFFFC00FFFFFFFFE00030347BB33A>I<000001FF
8000C000001FFFF001C000007FFFFE03C00001FF803F03C00007F80007C7C0001FE00001
EFC0003FC000007FC0007F0000003FC000FE0000001FC001FC0000000FC003F800000007
C007F000000007C00FF000000003C00FE000000003C01FE000000001C01FC000000001C0
3FC000000001C03F8000000000C07F8000000000C07F8000000000C07F8000000000007F
000000000000FF000000000000FF000000000000FF000000000000FF000000000000FF00
0000000000FF000000000000FF000000000000FF000000000000FF000000000000FF0000
000000007F0000000000007F8000000000007F8000000000007F8000000000C03F800000
0000C03FC000000000C01FC000000000C01FE000000001C00FE000000001800FF0000000
018007F0000000038003F8000000030001FC000000070000FE0000000E00007F0000001C
00003FC000003800001FE00000F0000007F80003E0000001FF801F800000007FFFFE0000
00001FFFF80000000001FFC0000032367BB43C>I<FFFFFFFFFFF0FFFFFFFFFFF0FFFFFF
FFFFF003FE00001FF001FC000003F001FC000001F801FC000000F801FC0000007801FC00
00003801FC0000003801FC0000001801FC0000001801FC0000001801FC0000001801FC00
03000C01FC0003000C01FC0003000C01FC0003000C01FC0003000001FC0007000001FC00
07000001FC000F000001FC003F000001FFFFFF000001FFFFFF000001FFFFFF000001FC00
3F000001FC000F000001FC0007000001FC0007000001FC0003000001FC0003000301FC00
03000301FC0003000301FC0003000601FC0000000601FC0000000601FC0000000601FC00
00000601FC0000000E01FC0000000E01FC0000000C01FC0000001C01FC0000001C01FC00
00003C01FC0000007C01FC000000FC01FC000003FC03FE00001FF8FFFFFFFFFFF8FFFFFF
FFFFF8FFFFFFFFFFF830347BB338>101 D<FFFFF801FFFFF0FFFFF801FFFFF0FFFFF801
FFFFF003FE000007FC0001FC000003F80001FC000003F80001FC000003F80001FC000003
F80001FC000003F80001FC000003F80001FC000003F80001FC000003F80001FC000003F8
0001FC000003F80001FC000003F80001FC000003F80001FC000003F80001FC000003F800
01FC000003F80001FC000003F80001FC000003F80001FC000003F80001FC000003F80001
FFFFFFFFF80001FFFFFFFFF80001FFFFFFFFF80001FC000003F80001FC000003F80001FC
000003F80001FC000003F80001FC000003F80001FC000003F80001FC000003F80001FC00
0003F80001FC000003F80001FC000003F80001FC000003F80001FC000003F80001FC0000
03F80001FC000003F80001FC000003F80001FC000003F80001FC000003F80001FC000003
F80001FC000003F80001FC000003F80001FC000003F80001FC000003F80003FE000007FC
00FFFFF801FFFFF0FFFFF801FFFFF0FFFFF801FFFFF034347BB33E>104
D<FFFFF8FFFFF8FFFFF803FE0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC
0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC
0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC
0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC0001FC
0003FE00FFFFF8FFFFF8FFFFF815347BB31E>I<FFFFFE000000FFFFFE000000FFFFFE00
000003FF0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000
000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000
000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000
000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000
000001FC0000000001FC0000000001FC0000000001FC0000000001FC0000006001FC0000
006001FC0000006001FC0000006001FC0000006001FC000000C001FC000000C001FC0000
00C001FC000000C001FC000001C001FC000001C001FC000003C001FC000003C001FC0000
07C001FC00000FC001FC00001FC001FC00007F8003FE0003FF80FFFFFFFFFF80FFFFFFFF
FF80FFFFFFFFFF802B347BB334>108 D<FFFC00000FFFF0FFFE00000FFFF0FFFF00000F
FFF001FF000001FF8001FF8000007E0001BFC000003C00019FE000001800019FE0000018
00018FF0000018000187F8000018000187FC000018000183FC000018000181FE00001800
0180FF000018000180FF0000180001807F8000180001803FC000180001801FE000180001
801FE000180001800FF0001800018007F8001800018007F8001800018003FC0018000180
01FE001800018000FF001800018000FF0018000180007F8018000180003FC01800018000
3FC018000180001FE018000180000FF0180001800007F8180001800007F8180001800003
FC180001800001FE180001800001FF180001800000FF1800018000007F9800018000003F
D800018000003FD800018000001FF800018000000FF8000180000007F8000180000007F8
000180000003F8000180000001F80003C0000001F80007E0000000F8001FF80000007800
FFFF0000003800FFFF0000003800FFFF000000180034347BB33E>110
D<FFFFFFFF0000FFFFFFFFE000FFFFFFFFFC0003FE0003FE0001FC00007F8001FC00001F
C001FC00000FE001FC00000FF001FC000007F001FC000007F801FC000003F801FC000003
FC01FC000003FC01FC000003FC01FC000003FC01FC000003FC01FC000003FC01FC000003
FC01FC000003F801FC000007F801FC000007F001FC00000FE001FC00000FE001FC00003F
C001FC00007F0001FC0003FE0001FFFFFFF80001FFFFFFC00001FC0000000001FC000000
0001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC000000
0001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC000000
0001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC000000
0003FE00000000FFFFF8000000FFFFF8000000FFFFF80000002E347BB338>112
D<000003FF00000000003FFFF000000000FE01FC00000003F0003F0000000FC0000FC000
001F800007E000007F000003F80000FE000001FC0001FC000000FE0001F80000007E0003
F00000003F0007F00000003F800FE00000001FC00FE00000001FC01FC00000000FE01FC0
0000000FE03F8000000007F03F8000000007F07F8000000007F87F8000000007F87F8000
000007F87F0000000003F8FF0000000003FCFF0000000003FCFF0000000003FCFF000000
0003FCFF0000000003FCFF0000000003FCFF0000000003FCFF0000000003FCFF00000000
03FCFF0000000003FC7F0000000003F87F0000000003F87F8000000007F87F8000000007
F83F8000000007F03F8000000007F01FC00000000FE01FC00000000FE00FE00000001FC0
0FE00000001FC007F000FC003F8003F003FF003F0003F80703807F0001FC0E01C0FE0000
FE0C00C1FC00007F0C00E3F800001F8C0077E000000FCC007FC0000003FE003F00000000
FF01FC000000003FFFF8000C000003FF3C000C000000003C000C000000001E001C000000
001E001C000000001F003C000000001F807C000000000FC0F8000000000FFFF800000000
0FFFF80000000007FFF00000000007FFF00000000003FFE00000000003FFC00000000000
FF8000000000003E0036447BB440>I<FFFFFFFC000000FFFFFFFF800000FFFFFFFFF000
0003FE000FFC000001FC0000FE000001FC00007F800001FC00001FC00001FC00001FE000
01FC00000FE00001FC00000FF00001FC000007F00001FC000007F80001FC000007F80001
FC000007F80001FC000007F80001FC000007F80001FC000007F80001FC000007F00001FC
00000FF00001FC00000FE00001FC00001FC00001FC00003F800001FC00007F000001FC00
01FC000001FC000FF0000001FFFFFFC0000001FFFFFF00000001FC001FE0000001FC0003
F0000001FC0001FC000001FC0000FE000001FC00007E000001FC00007F000001FC00007F
000001FC00003F800001FC00003F800001FC00003F800001FC00003F800001FC00003F80
0001FC00003FC00001FC00003FC00001FC00003FC00001FC00003FC00001FC00003FC000
01FC00003FC00601FC00003FE00601FC00001FE00601FC00001FE00E03FE00000FF00CFF
FFF80007F01CFFFFF80003F838FFFFF80000FFF000000000001FC037357BB33D>I<000F
F00180007FFE038001FFFF838007F007E7800FC000FF801F00007F803E00003F803E0000
1F807C00000F807C00000780F800000780F800000380F800000380F800000380F8000001
80FC00000180FC00000180FE000000007F000000007F800000007FE00000003FFE000000
1FFFF000001FFFFF00000FFFFFE00003FFFFF80001FFFFFC00007FFFFE000007FFFF0000
007FFF80000007FFC00000007FC00000003FE00000000FE000000007F000000007F00000
0003F0C0000003F0C0000001F0C0000001F0C0000001F0E0000001F0E0000001F0E00000
01E0F0000003E0F8000003C0F8000007C0FE00000F80FF00001F00FFC0003E00F3FC00FC
00E0FFFFF800E01FFFE000C003FF000024367BB42E>I<7FFFFFFFFFFFE07FFFFFFFFFFF
E07FFFFFFFFFFFE07F8003FE001FE07C0001FC0003E0780001FC0001E0700001FC0000E0
700001FC0000E0600001FC000060E00001FC000070E00001FC000070E00001FC000070C0
0001FC000030C00001FC000030C00001FC000030C00001FC000030C00001FC000030C000
01FC000030000001FC000000000001FC000000000001FC000000000001FC000000000001
FC000000000001FC000000000001FC000000000001FC000000000001FC000000000001FC
000000000001FC000000000001FC000000000001FC000000000001FC000000000001FC00
0000000001FC000000000001FC000000000001FC000000000001FC000000000001FC0000
00000001FC000000000001FC000000000001FC000000000001FC000000000001FC000000
000001FC000000000001FC000000000001FC000000000001FC000000000003FE00000000
0007FF0000000007FFFFFF00000007FFFFFF00000007FFFFFF000034347CB33C>I<FFFF
F8000FFFF0FFFFF8000FFFF0FFFFF8000FFFF003FE000001FF8001FC0000007E0001FC00
00003C0001FC000000180001FC000000180001FC000000180001FC000000180001FC0000
00180001FC000000180001FC000000180001FC000000180001FC000000180001FC000000
180001FC000000180001FC000000180001FC000000180001FC000000180001FC00000018
0001FC000000180001FC000000180001FC000000180001FC000000180001FC0000001800
01FC000000180001FC000000180001FC000000180001FC000000180001FC000000180001
FC000000180001FC000000180001FC000000180001FC000000180001FC000000180001FC
000000180001FC000000180001FC000000380000FE000000300000FE000000300000FE00
00007000007E0000006000007F000000E000003F800001C000001F800003C000000FC000
0780000007E0000F00000003F8003E00000001FE01FC000000007FFFF0000000001FFFC0
0000000001FE00000034357BB33E>I<FFFFE000003FFFFFFFE000003FFFFFFFE000003F
FF07FE0000000FF803FC00000007E003FC00000003C001FE000000038001FE0000000380
00FE000000030000FF0000000300007F0000000600007F8000000600003F8000000C0000
3F8000000C00003FC000001C00001FC000001800001FE000001800000FE000003000000F
F0000030000007F0000060000007F0000060000007F80000E0000003F80000C0000003FC
0000C0000001FC000180000001FE000180000000FE000300000000FE000300000000FF00
07000000007F0006000000007F8006000000003F800C000000003FC00C000000001FC018
000000001FC018000000001FE038000000000FE030000000000FF0300000000007F06000
00000007F8600000000003F8C00000000003F8C00000000003FDC00000000001FD800000
000001FF800000000000FF000000000000FF0000000000007E0000000000007E00000000
00007E0000000000003C0000000000003C0000000000001800000038357DB33E>I<0000
00000E00000000003F0000000000FF0000000001FF8000000007FF000000001FFF000000
003FFE00000000FFE000000003FF0000000007F8000000000F80000000000C0000000000
00000000000000000000000000000000000000000000000000000000000000000000FFFF
FFFFFFF0FFFFFFFFFFF0FFFFFFFFFFF003FE00001FF001FC000003F001FC000001F801FC
000000F801FC0000007801FC0000003801FC0000003801FC0000001801FC0000001801FC
0000001801FC0000001801FC0003000C01FC0003000C01FC0003000C01FC0003000C01FC
0003000001FC0007000001FC0007000001FC000F000001FC003F000001FFFFFF000001FF
FFFF000001FFFFFF000001FC003F000001FC000F000001FC0007000001FC0007000001FC
0003000001FC0003000301FC0003000301FC0003000301FC0003000601FC0000000601FC
0000000601FC0000000601FC0000000601FC0000000E01FC0000000E01FC0000000C01FC
0000001C01FC0000001C01FC0000003C01FC0000007C01FC000000FC01FC000003FC03FE
00001FF8FFFFFFFFFFF8FFFFFFFFFFF8FFFFFFFFFFF830467BC538>233
D E
/Fm load 0 Fm currentfont 100 scalefont put/FMat X/FBB
X/IEn X
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref)/Author ()/Keywords () /DOCINFO pdfmark end
 0 0 a 0 0 a
 currentpoint /pgf@refy exch def /pgf@refx exch def
 0 0 a 833 0 a
 /pgf@top pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul sub def

833 0 a 833 0 a
 /pgf@right currentpoint pop def
 833 0 a 36 0 a
 /pgf@bot pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul add def
 36 0 a 0 0 a
 gsave clippath pathbbox newpath pop pop translate systemdict /pdfmark
known {pgf@refx neg pgf@top neg translate} {pgf@right neg pgf@bot neg
translate} ifelse gsave pgf@refx pgf@refy translate mark /_objdef {pgfsmaskxform@9}
/BBox [clippath pathbbox newpath] /BP pdfmark grestore
 0 0 a
 save
 1 TeXcolorgray
0 0 a

 0 0 a 0 0 a


 pgfo
 0 0 a
  100.00128 100.00128 0 0 pgfe << /PatternType 2 /Shading << /ShadingType
2 /ColorSpace /DeviceRGB /Domain [0.0 100.00128] /Coords [0.0 0 100.00128
0] /Function << /FunctionType 3 /Domain [0.0 100.00128] /Functions
[ << /FunctionType 2 /Domain [0.0 100.00128] /C0 [1 1 1] /C1 [1 1 1]
/N 1 >>  << /FunctionType 2 /Domain [0.0 100.00128] /C0 [1 1 1] /C1
[0 0 0] /N 1 >>  << /FunctionType 2 /Domain [0.0 100.00128] /C0 [0
0 0] /C1 [0 0 0] /N 1 >>  ] /Bounds [ 25.00032 75.00096] /Encode [0
1  0 1 0 1] >> >> >> matrix makepattern setpattern fill
 0 0 a
 pgfc



 restore
 Black 0 0 a
 mark /EP pdfmark grestore
 0 0 a 0 0 a
 currentpoint /pgf@refy exch def /pgf@refx exch def

0 0 a 833 0 a
 /pgf@top pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul sub def
 833 0 a 833 0 a
 /pgf@right currentpoint pop def
 833 0 a 36 0 a
 /pgf@bot pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul add def
 36 0 a 0
0 a
 gsave clippath pathbbox newpath pop pop translate systemdict /pdfmark
known {pgf@refx neg pgf@top neg translate} {pgf@right neg pgf@bot neg
translate} ifelse gsave pgf@refx pgf@refy translate mark /_objdef {pgfsmaskxform@10}
/BBox [clippath pathbbox newpath] /BP pdfmark grestore
 0 0 a
 save
 1 TeXcolorgray 0 0 a

 0 0 a 0 0 a


 pgfo
 0 0 a
  100.00128 100.00128 0 0 pgfe << /PatternType 2 /Shading << /ShadingType
2 /ColorSpace /DeviceRGB /Domain [0.0 100.00128] /Coords [0.0 0 100.00128
0] /Function << /FunctionType 3 /Domain [0.0 100.00128] /Functions
[ << /FunctionType 2 /Domain [0.0 100.00128] /C0 [0 0 0] /C1 [0 0 0]
/N 1 >>  << /FunctionType 2 /Domain [0.0 100.00128] /C0 [0 0 0] /C1
[1 1 1] /N 1 >>  << /FunctionType 2 /Domain [0.0 100.00128] /C0 [1
1 1] /C1 [1 1 1] /N 1 >>  ] /Bounds [ 25.00032 75.00096] /Encode [0
1  0 1 0 1] >> >> >> matrix makepattern setpattern fill
 0 0
a
 pgfc



 restore
 Black 0 0 a
 mark /EP pdfmark grestore
 0 0 a 0 0 a
 currentpoint /pgf@refy exch def /pgf@refx exch def
 0 0 a 833 0 a
 /pgf@top pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul sub def
 833 0 a 833 0
a
 /pgf@right currentpoint pop def
 833 0 a 36 0 a
 /pgf@bot pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul add def
 36 0 a 0 0 a
 gsave clippath pathbbox newpath pop pop translate systemdict /pdfmark
known {pgf@refx neg pgf@top neg translate} {pgf@right neg pgf@bot neg
translate} ifelse gsave pgf@refx pgf@refy translate mark /_objdef {pgfsmaskxform@11}
/BBox [clippath pathbbox newpath] /BP pdfmark grestore
 0 0 a
 save
 1 TeXcolorgray 0
0 a

 0 0 a 0 0 a


 pgfo
 0 0 a
  100.00128 100.00128 0 0 pgfe << /PatternType 2 /Shading << /ShadingType
2 /ColorSpace /DeviceRGB /Domain [0.0 100.00128] /Coords [0 0.0 0 100.00128]
/Function << /FunctionType 3 /Domain [0.0 100.00128] /Functions [ <<
/FunctionType 2 /Domain [0.0 100.00128] /C0 [1 1 1] /C1 [1 1 1] /N
1 >>  << /FunctionType 2 /Domain [0.0 100.00128] /C0 [1 1 1] /C1 [0
0 0] /N 1 >>  << /FunctionType 2 /Domain [0.0 100.00128] /C0 [0 0 0]
/C1 [0 0 0] /N 1 >>  ] /Bounds [ 25.00032 75.00096] /Encode [0 1  0
1 0 1] >> >> >> matrix makepattern setpattern fill
 0 0 a
 pgfc



 restore
 Black 0 0 a
 mark /EP pdfmark grestore
 0 0 a 0 0 a
 currentpoint /pgf@refy exch def /pgf@refx exch def
 0
0 a 833 0 a
 /pgf@top pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul sub def
 833 0 a 833 0 a
 /pgf@right currentpoint pop def
 833 0 a 36 0 a
 /pgf@bot pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul add def
 36 0 a 0 0
a
 gsave clippath pathbbox newpath pop pop translate systemdict /pdfmark
known {pgf@refx neg pgf@top neg translate} {pgf@right neg pgf@bot neg
translate} ifelse gsave pgf@refx pgf@refy translate mark /_objdef {pgfsmaskxform@12}
/BBox [clippath pathbbox newpath] /BP pdfmark grestore
 0 0 a
 save
 1 TeXcolorgray 0 0 a

 0 0 a 0 0 a


 pgfo
 0 0 a
  100.00128 100.00128 0 0 pgfe << /PatternType 2 /Shading << /ShadingType
2 /ColorSpace /DeviceRGB /Domain [0.0 100.00128] /Coords [0 0.0 0 100.00128]
/Function << /FunctionType 3 /Domain [0.0 100.00128] /Functions [ <<
/FunctionType 2 /Domain [0.0 100.00128] /C0 [0 0 0] /C1 [0 0 0] /N
1 >>  << /FunctionType 2 /Domain [0.0 100.00128] /C0 [0 0 0] /C1 [1
1 1] /N 1 >>  << /FunctionType 2 /Domain [0.0 100.00128] /C0 [1 1 1]
/C1 [1 1 1] /N 1 >>  ] /Bounds [ 25.00032 75.00096] /Encode [0 1  0
1 0 1] >> >> >> matrix makepattern setpattern fill
 0 0 a
 pgfc



 restore

Black 0 0 a
 mark /EP pdfmark grestore
 0 0 a 0 0 a
 currentpoint /pgf@refy exch def /pgf@refx exch def
 0 0 a 833 0 a
 /pgf@top pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul sub def
 833 0 a 833 0 a
 /pgf@right currentpoint pop def

833 0 a 36 0 a
 /pgf@bot pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul add def
 36 0 a 0 0 a
 gsave clippath pathbbox newpath pop pop translate systemdict /pdfmark
known {pgf@refx neg pgf@top neg translate} {pgf@right neg pgf@bot neg
translate} ifelse gsave pgf@refx pgf@refy translate mark /_objdef {pgfsmaskxform@13}
/BBox [clippath pathbbox newpath] /BP pdfmark grestore
 0 0 a
 save
 1 TeXcolorgray 0 0
a

 0 0 a 0 0 a


 pgfo
 0 0 a
  << /ShadingType 3 /ColorSpace /DeviceRGB /Domain [0.0 50.00064] /Coords
[50.00064 50.00064 0.0 50.00064 50.00064 50.00064] /Function << /FunctionType
3 /Domain [0.0 50.00064] /Functions [ << /FunctionType 2 /Domain [0.0
50.00064] /C0 [1 1 1] /C1 [1 1 1] /N 1 >>  << /FunctionType 2 /Domain
[0.0 50.00064] /C0 [1 1 1] /C1 [0 0 0] /N 1 >>  << /FunctionType 2
/Domain [0.0 50.00064] /C0 [0 0 0] /C1 [0 0 0] /N 1 >>  ] /Bounds [
22.50027 25.00032] /Encode [0 1  0 1 0 1] >> /Extend [true false] >>
shfill
 0 0 a
 pgfc



 restore
 Black 0 0 a
 mark /EP pdfmark grestore
 0 0 a 0 0 a
 currentpoint /pgf@refy exch def /pgf@refx exch def
 0 0
a 833 0 a
 /pgf@top pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul sub def
 833 0 a 833 0 a
 /pgf@right currentpoint pop def
 833 0 a 36 0 a
 /pgf@bot pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul add def
 36 0 a 0 0 a
 gsave clippath pathbbox newpath pop pop translate systemdict /pdfmark
known {pgf@refx neg pgf@top neg translate} {pgf@right neg pgf@bot neg
translate} ifelse gsave pgf@refx pgf@refy translate mark /_objdef {pgfsmaskxform@14}
/BBox [clippath pathbbox newpath] /BP pdfmark grestore

0 0 a
 save
 1 TeXcolorgray 0 0 a

 0 0 a 0 0 a


 pgfo
 0 0 a
  << /ShadingType 3 /ColorSpace /DeviceRGB /Domain [0.0 50.00064] /Coords
[50.00064 50.00064 0.0 50.00064 50.00064 50.00064] /Function << /FunctionType
3 /Domain [0.0 50.00064] /Functions [ << /FunctionType 2 /Domain [0.0
50.00064] /C0 [1 1 1] /C1 [1 1 1] /N 1 >>  << /FunctionType 2 /Domain
[0.0 50.00064] /C0 [1 1 1] /C1 [0 0 0] /N 1 >>  << /FunctionType 2
/Domain [0.0 50.00064] /C0 [0 0 0] /C1 [0 0 0] /N 1 >>  ] /Bounds [
21.25026 25.00032] /Encode [0 1  0 1 0 1] >> /Extend [true false] >>
shfill
 0 0 a
 pgfc



 restore
 Black
0 0 a
 mark /EP pdfmark grestore
 0 0 a 0 0 a
 currentpoint /pgf@refy exch def /pgf@refx exch def
 0 0 a 833 0 a
 /pgf@top pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul sub def
 833 0 a 833 0 a
 /pgf@right currentpoint pop def
 833 0
a 36 0 a
 /pgf@bot pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul add def
 36 0 a 0 0 a
 gsave clippath pathbbox newpath pop pop translate systemdict /pdfmark
known {pgf@refx neg pgf@top neg translate} {pgf@right neg pgf@bot neg
translate} ifelse gsave pgf@refx pgf@refy translate mark /_objdef {pgfsmaskxform@15}
/BBox [clippath pathbbox newpath] /BP pdfmark grestore
 0 0 a
 save
 1 TeXcolorgray 0 0 a

 0 0
a 0 0 a


 pgfo
 0 0 a
  << /ShadingType 3 /ColorSpace /DeviceRGB /Domain [0.0 50.00064] /Coords
[50.00064 50.00064 0.0 50.00064 50.00064 50.00064] /Function << /FunctionType
3 /Domain [0.0 50.00064] /Functions [ << /FunctionType 2 /Domain [0.0
50.00064] /C0 [1 1 1] /C1 [1 1 1] /N 1 >>  << /FunctionType 2 /Domain
[0.0 50.00064] /C0 [1 1 1] /C1 [0 0 0] /N 1 >>  << /FunctionType 2
/Domain [0.0 50.00064] /C0 [0 0 0] /C1 [0 0 0] /N 1 >>  ] /Bounds [
20.00024 25.00032] /Encode [0 1  0 1 0 1] >> /Extend [true false] >>
shfill
 0 0 a
 pgfc



 restore
 Black 0 0 a
 mark /EP pdfmark grestore
 0 0 a 0 0 a
 currentpoint /pgf@refy exch def /pgf@refx exch def
 0 0 a 833
0 a
 /pgf@top pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul sub def
 833 0 a 833 0 a
 /pgf@right currentpoint pop def
 833 0 a 36 0 a
 /pgf@bot pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul add def
 36 0 a 0 0 a
 gsave clippath pathbbox newpath pop pop translate systemdict /pdfmark
known {pgf@refx neg pgf@top neg translate} {pgf@right neg pgf@bot neg
translate} ifelse gsave pgf@refx pgf@refy translate mark /_objdef {pgfsmaskxform@16}
/BBox [clippath pathbbox newpath] /BP pdfmark grestore
 0 0 a
 save

1 TeXcolorgray 0 0 a

 0 0 a 0 0 a


 pgfo
 0 0 a
  << /ShadingType 3 /ColorSpace /DeviceRGB /Domain [0.0 50.00064] /Coords
[50.00064 50.00064 0.0 50.00064 50.00064 50.00064] /Function << /FunctionType
3 /Domain [0.0 50.00064] /Functions [ << /FunctionType 2 /Domain [0.0
50.00064] /C0 [0 0 0] /C1 [0 0 0] /N 1 >>  << /FunctionType 2 /Domain
[0.0 50.00064] /C0 [0 0 0] /C1 [1 1 1] /N 1 >>  << /FunctionType 2
/Domain [0.0 50.00064] /C0 [1 1 1] /C1 [0 0 0] /N 1 >>  << /FunctionType
2 /Domain [0.0 50.00064] /C0 [0 0 0] /C1 [0 0 0] /N 1 >>  ] /Bounds
[ 21.25026 23.12529 25.00032] /Encode [0 1  0 1 0 1 0 1] >> /Extend
[true false] >> shfill
 0 0 a
 pgfc



 restore
 Black 0
0 a
 mark /EP pdfmark grestore
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -136 -396 a
SDict begin H.S end
 -136 -396 a -136 -396
a
SDict begin H.R end
 -136 -396 a -136 -396 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -136 -396 a 0 TeXcolorgray
-128 -299 a Fm(\351preuve)36 b(pra)-8 b(tique)36 b(blanche)f(2022)2073
b(nsi)33 b Fl(T)-8 b(erminale)p -128 -260 4252 4 v Black
0 TeXcolorgray -128 -180 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -128 -180 a -128 -180 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -128
-180 a -128 -180 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -128 -180 a -128 -180 a
0.8 setlinewidth 0 setgray
 -128 -180
a -128 -180 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -128 -180 a -128 -180 a
0.8 setlinewidth 0 setgray
 -128 -180 a -128
-180 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -128 -180 a -128 -180 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -128 -180 a -128 -180
a
SDict begin H.S end
 -128 -180 a -128 -180 a
SDict begin 14.5 H.A end
 -128 -180 a -128 -180 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -128
-180 a 0 TeXcolorgray 0 TeXcolorgray 1526 -80 945 9 v
1759 40 a Fk(Sujet)52 b(1)p 1526 111 V -128 281 a Fj(q)33
b Fi(Exercice)j(1)d Fl(:)f Fh(V\351ri\034c)-5 b(ation)35
b(de)f(p)-5 b(alindr)g(ome)-128 401 y Fl(Une)45 b(c)m(haine)f(de)g
(caract\350res)h(est)f(un)g Fh(p)-5 b(alindr)g(ome)50
b Fl(lorsqu'elle)42 b(p)s(eut)i(\352tre)h(lue)e(indi\033\351remmen)m(t)
f(de)i(gauc)m(he)h(\340)-128 522 y(droite)29 b(ou)g(de)h(droite)e(\340)
h(gauc)m(he,)h(par)f(exemple)h(\023)23 b(KA)-8 b(Y)g(AK)23
b(\024ou)29 b(\023)24 b(ANNA)g(\024son)m(t)30 b(des)g(palindromes.)e
(Ecrire)h(une)-128 642 y(fonction)36 b Fg(est_palindrome)k
Fl(qui)d(prend)g(en)h(argumen)m(t)e(une)h(c)m(haine)g(de)g
(caract\350res)h(et)f(ren)m(v)m(oie)h Fg(True)f Fl(si)g(cette)-128
762 y(c)m(haine)c(est)g(un)g(palindrome)e(et)h Fg(False)i
Fl(sinon.)-128 883 y Ff(Exemples)j(:)-128 952 y
SDict begin H.S end
 -128
952 a -128 952 a
SDict begin 14.5 H.A end
 -128 952 a -128 952 a
SDict begin [/View [/XYZ H.V]/Dest (lstlisting.-1) cvn /DEST pdfmark
end
 -128 952 a 0.95
TeXcolorgray 128 969 4025 29 v 0 TeXcolorgray 0.95 TeXcolorgray
0 TeXcolorgray 128 969 4 29 v 128 944 29 4 v 156 944
3969 4 v 4125 944 29 4 v 4149 969 4 29 v 0.95 TeXcolorgray
131 1082 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 128
1082 4 113 v 0 TeXcolorgray 128 1082 V 0.95 TeXcolorgray
156 1082 3969 113 v 0 TeXcolorgray 0.95 TeXcolorgray
4124 1082 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4149
1082 4 113 v 0 TeXcolorgray 4149 1082 V 156 1048 a
SDict begin H.S end
 156
1048 a 156 1048 a
SDict begin 13.6 H.A end
 156 1048 a 156 1048 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.1) cvn /DEST pdfmark
end
 156 1048 a -110
w Fe(1)70 b Fd(>)-14 b(>)g(>)58 b(e)9 b(s)g(t)g(_)g(p)g(a)g(l)g(i)g(n)g
(d)g(r)g(o)g(m)g(e)22 b(\()14 b(")i(t)11 b(o)g(t)g(o)17
b(")d(\))p 0.95 TeXcolorgray 131 1195 25 113 v 0 TeXcolorgray
0.95 TeXcolorgray 128 1195 4 113 v 0 TeXcolorgray 128
1195 V 0.95 TeXcolorgray 156 1195 3969 113 v 0 TeXcolorgray
0.95 TeXcolorgray 4124 1195 25 113 v 0 TeXcolorgray 0.95
TeXcolorgray 4149 1195 4 113 v 0 TeXcolorgray 4149 1195
V 156 1161 a
SDict begin H.S end
 156 1161 a 156 1161 a
SDict begin 13.6 H.A end
 156 1161 a 156 1161
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.2) cvn /DEST pdfmark
end
 156 1161 a -110 w Fe(2)95 b Fd(F)11 b(a)g(l)g(s)g(e)p
0.95 TeXcolorgray 131 1308 25 113 v 0 TeXcolorgray 0.95
TeXcolorgray 128 1308 4 113 v 0 TeXcolorgray 128 1308
V 0.95 TeXcolorgray 156 1308 3969 113 v 0 TeXcolorgray
0.95 TeXcolorgray 4124 1308 25 113 v 0 TeXcolorgray 0.95
TeXcolorgray 4149 1308 4 113 v 0 TeXcolorgray 4149 1308
V 156 1274 a
SDict begin H.S end
 156 1274 a 156 1274 a
SDict begin 13.6 H.A end
 156 1274 a 156 1274
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.3) cvn /DEST pdfmark
end
 156 1274 a -110 w Fe(3)70 b Fd(>)-14 b(>)g(>)58 b(e)9
b(s)g(t)g(_)g(p)g(a)g(l)g(i)g(n)g(d)g(r)g(o)g(m)g(e)22
b(\()14 b(")20 b(r)15 b(e)g(s)g(s)g(a)g(s)g(s)g(e)g(r)j(")d(\))p
0.95 TeXcolorgray 131 1421 25 113 v 0 TeXcolorgray 0.95
TeXcolorgray 128 1421 4 113 v 0 TeXcolorgray 128 1421
V 0.95 TeXcolorgray 156 1421 3969 113 v 0 TeXcolorgray
0.95 TeXcolorgray 4124 1421 25 113 v 0 TeXcolorgray 0.95
TeXcolorgray 4149 1421 4 113 v 0 TeXcolorgray 4149 1421
V 156 1387 a
SDict begin H.S end
 156 1387 a 156 1387 a
SDict begin 13.6 H.A end
 156 1387 a 156 1387
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.4) cvn /DEST pdfmark
end
 156 1387 a -110 w Fe(4)89 b Fd(T)5 b(r)g(u)g(e)p 0.95
TeXcolorgray 128 1449 4025 29 v 0 TeXcolorgray 0.95 TeXcolorgray
0 TeXcolorgray 128 1449 4 29 v 129 1449 29 4 v 156 1449
3969 4 v 4125 1449 29 4 v 4149 1449 4 29 v 0 TeXcolorgray
0 TeXcolorgray -128 1638 a Fj(q)33 b Fi(Exercice)j(2)d
Fl(:)f Fh(Insertion)i(dans)g(une)h(liste)g(d\351j\340)f(tri\351)-5
b(e)-128 1759 y Fl(P)m(our)26 b(ins\351rer)g(un)g(\351l\351men)m(t)f
(dans)h(une)g(liste)e Fh(d\351j\340)k(tri\351)-5 b(e)28
b(p)-5 b(ar)28 b(or)-5 b(dr)g(e)28 b(cr)-5 b(oissant)p
Fl(,)24 b(on)i(prop)s(ose)f(l'algorithme)d(suiv)-5 b(an)m(t)25
b(:)-128 1795 y
SDict begin H.S end
 -128 1795 a -128 1795 a
SDict begin 14.5 H.A end
 -128 1795 a -128
1795 a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 -128 1795 a 0 TeXcolorgray -8 1913 a Fl(1.)p 0
TeXcolorgray 48 w(Ajouter)33 b(l'\351l\351men)m(t)e(\340)i(la)e(\034n)i
(de)g(la)e(liste)-128 1950 y
SDict begin H.S end
 -128 1950 a -128 1950 a
SDict begin 14.5 H.A end

-128 1950 a -128 1950 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 -128 1950 a 0 TeXcolorgray -8
2068 a Fl(2.)p 0 TeXcolorgray 48 w(Ec)m(hanger)37 b(l'\351l\351men)m(t)
d(a)m(v)m(ec)j(son)f(v)m(oisin)f(de)h(gauc)m(he)g(tan)m(t)f(qu'il)g
(est)h(plus)f(p)s(etit)g(et)g(que)i(le)d(d\351but)j(de)e(liste)116
2188 y(n'est)f(pas)f(attein)m(t)-128 2343 y(Compl\351ter)f
(l'impl\351men)m(tation)d(suiv)-5 b(an)m(te)32 b(de)i(cette)f
(algorithme)-128 2412 y
SDict begin H.S end
 -128 2412 a -128 2412 a
SDict begin 14.5 H.A end
 -128
2412 a -128 2412 a
SDict begin [/View [/XYZ H.V]/Dest (lstlisting.-2) cvn /DEST pdfmark
end
 -128 2412 a 0.95 TeXcolorgray 128
2429 4025 29 v 0 TeXcolorgray 0.95 TeXcolorgray 0 TeXcolorgray
128 2429 4 29 v 128 2404 29 4 v 156 2404 3969 4 v 4125
2404 29 4 v 4149 2429 4 29 v 0.95 TeXcolorgray 131 2542
25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 128 2542 4
113 v 0 TeXcolorgray 128 2542 V 0.95 TeXcolorgray 156
2542 3969 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4124
2542 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4149 2542
4 113 v 0 TeXcolorgray 4149 2542 V 156 2508 a
SDict begin H.S end
 156 2508
a 156 2508 a
SDict begin 13.6 H.A end
 156 2508 a 156 2508 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.1) cvn /DEST pdfmark
end
 156 2508 a -110 w
Fe(1)89 b Fc(d)5 b(e)g(f)75 b Fd(i)15 b(n)g(s)g(e)g(r)g(t)g(i)g(o)g(n)
23 b(\()17 b(e)8 b(l)g(e)g(m)g(e)g(n)g(t)33 b(,)g(l)19
b(i)f(s)g(t)h(e)28 b(\))c(:)p 0.95 TeXcolorgray 131 2655
25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 128 2655 4
113 v 0 TeXcolorgray 128 2655 V 0.95 TeXcolorgray 156
2655 3969 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4124
2655 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4149 2655
4 113 v 0 TeXcolorgray 4149 2655 V 156 2621 a
SDict begin H.S end
 156 2621
a 156 2621 a
SDict begin 13.6 H.A end
 156 2621 a 156 2621 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.2) cvn /DEST pdfmark
end
 156 2621 a -110 w
Fe(2)324 b Fb(')22 b(')h(')e(I)10 b(n)g(s)16 b(\350)g(r)10
b(e)74 b(e)10 b(l)g(e)g(m)g(e)g(n)g(t)71 b(d)7 b(a)g(n)g(s)135
b(l)19 b(i)f(s)h(t)g(e)82 b(\()19 b(q)11 b(u)g(i)81 b(e)14
b(s)g(t)71 b(d)11 b(\351)20 b(j)d(\340)75 b(t)17 b(r)g(i)22
b(\351)14 b(e)h(\))31 b(')23 b(')f(')p 0.95 TeXcolorgray
131 2768 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 128
2768 4 113 v 0 TeXcolorgray 128 2768 V 0.95 TeXcolorgray
156 2768 3969 113 v 0 TeXcolorgray 0.95 TeXcolorgray
4124 2768 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4149
2768 4 113 v 0 TeXcolorgray 4149 2768 V 156 2734 a
SDict begin H.S end
 156
2734 a 156 2734 a
SDict begin 13.6 H.A end
 156 2734 a 156 2734 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.3) cvn /DEST pdfmark
end
 156 2734 a -110
w Fe(3)319 b Fd(l)19 b(i)f(s)g(t)h(e)43 b(.)26 b(.)f(.)g(.)h(.)f(.)g(.)
g(.)h(\()34 b(e)9 b(l)g(e)g(m)g(e)g(n)g(t)21 b(\))p 0.95
TeXcolorgray 131 2881 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray
128 2881 4 113 v 0 TeXcolorgray 128 2881 V 0.95 TeXcolorgray
156 2881 3969 113 v 0 TeXcolorgray 0.95 TeXcolorgray
4124 2881 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4149
2881 4 113 v 0 TeXcolorgray 4149 2881 V 156 2847 a
SDict begin H.S end
 156
2847 a 156 2847 a
SDict begin 13.6 H.A end
 156 2847 a 156 2847 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.4) cvn /DEST pdfmark
end
 156 2847 a -110
w Fe(4)309 b Fd(p)8 b(o)g(s)54 b(=)71 b(.)25 b(.)g(.)g(.)h(.)f(.)p
0.95 TeXcolorgray 131 2994 25 113 v 0 TeXcolorgray 0.95
TeXcolorgray 128 2994 4 113 v 0 TeXcolorgray 128 2994
V 0.95 TeXcolorgray 156 2994 3969 113 v 0 TeXcolorgray
0.95 TeXcolorgray 4124 2994 25 113 v 0 TeXcolorgray 0.95
TeXcolorgray 4149 2994 4 113 v 0 TeXcolorgray 4149 2994
V 156 2960 a
SDict begin H.S end
 156 2960 a 156 2960 a
SDict begin 13.6 H.A end
 156 2960 a 156 2960
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.5) cvn /DEST pdfmark
end
 156 2960 a -110 w Fe(5)307 b Fc(w)6 b(h)g(i)g(l)g(e)67
b Fd(p)6 b(o)g(s)27 b(>)14 b(.)g(.)g(.)76 b Fc(a)5 b(n)g(d)78
b Fd(l)19 b(i)f(s)g(t)h(e)33 b([)22 b(p)8 b(o)g(s)27
b(])38 b(<)19 b(.)g(.)g(.)f(.)h(.)g(:)p 0.95 TeXcolorgray
131 3107 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 128
3107 4 113 v 0 TeXcolorgray 128 3107 V 0.95 TeXcolorgray
156 3107 3969 113 v 0 TeXcolorgray 0.95 TeXcolorgray
4124 3107 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4149
3107 4 113 v 0 TeXcolorgray 4149 3107 V 156 3073 a
SDict begin H.S end
 156
3073 a 156 3073 a
SDict begin 13.6 H.A end
 156 3073 a 156 3073 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.6) cvn /DEST pdfmark
end
 156 3073 a -110
w Fe(6)536 b Fd(l)19 b(i)f(s)g(t)g(e)34 b([)22 b(p)8
b(o)g(s)22 b(])30 b(,)j(l)18 b(i)h(s)f(t)g(e)33 b([)21
b(p)6 b(o)g(s)19 b Fa(=)6 b Fd(1)g(])51 b(=)128 b(.)27
b(.)f(.)h(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)100 b(,)91 b(.)27
b(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)p 0.95 TeXcolorgray
131 3220 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 128
3220 4 113 v 0 TeXcolorgray 128 3220 V 0.95 TeXcolorgray
156 3220 3969 113 v 0 TeXcolorgray 0.95 TeXcolorgray
4124 3220 25 113 v 0 TeXcolorgray 0.95 TeXcolorgray 4149
3220 4 113 v 0 TeXcolorgray 4149 3220 V 156 3186 a
SDict begin H.S end
 156
3186 a 156 3186 a
SDict begin 13.6 H.A end
 156 3186 a 156 3186 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.7) cvn /DEST pdfmark
end
 156 3186 a -110
w Fe(7)526 b Fd(p)8 b(o)g(s)54 b(=)71 b(.)25 b(.)g(.)g(.)g(.)h(.)p
0.95 TeXcolorgray 128 3248 4025 29 v 0 TeXcolorgray 0.95
TeXcolorgray 0 TeXcolorgray 128 3248 4 29 v 129 3248
29 4 v 156 3248 3969 4 v 4125 3248 29 4 v 4149 3248 4
29 v 0 TeXcolorgray 0 TeXcolorgray -128 3390 a Ff(Exemple)-128
3459 y
SDict begin H.S end
 -128 3459 a -128 3459 a
SDict begin 14.5 H.A end
 -128 3459 a -128 3459
a
SDict begin [/View [/XYZ H.V]/Dest (lstlisting.-3) cvn /DEST pdfmark
end
 -128 3459 a 0.95 TeXcolorgray 128 3476 4025 29 v 0
TeXcolorgray 0.95 TeXcolorgray 0 TeXcolorgray 128 3476
4 29 v 128 3451 29 4 v 156 3451 3969 4 v 4125 3451 29
4 v 4149 3476 4 29 v 0.95 TeXcolorgray 131 3589 25 113
v 0 TeXcolorgray 0.95 TeXcolorgray 128 3589 4 113 v 0
TeXcolorgray 128 3589 V 0.95 TeXcolorgray 156 3589 3969
113 v 0 TeXcolorgray 0.95 TeXcolorgray 4124 3589 25 113
v 0 TeXcolorgray 0.95 TeXcolorgray 4149 3589 4 113 v
0 TeXcolorgray 4149 3589 V 156 3555 a
SDict begin H.S end
 156 3555 a 156
3555 a
SDict begin 13.6 H.A end
 156 3555 a 156 3555 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.1) cvn /DEST pdfmark
end
 156 3555 a -110 w Fe(1)287
b Fd(>)-14 b(>)g(>)67 b(l)19 b(i)f(s)g(t)g(e)65 b(=)60
b([)13 b(1)27 b(,)13 b(4)27 b(,)13 b(7)27 b(,)13 b(1)g(3)27
b(,)13 b(1)g(7)g(])p 0.95 TeXcolorgray 131 3702 25 113
v 0 TeXcolorgray 0.95 TeXcolorgray 128 3702 4 113 v 0
TeXcolorgray 128 3702 V 0.95 TeXcolorgray 156 3702 3969
113 v 0 TeXcolorgray 0.95 TeXcolorgray 4124 3702 25 113
v 0 TeXcolorgray 0.95 TeXcolorgray 4149 3702 4 113 v
0 TeXcolorgray 4149 3702 V 156 3668 a
SDict begin H.S end
 156 3668 a 156
3668 a
SDict begin 13.6 H.A end
 156 3668 a 156 3668 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.2) cvn /DEST pdfmark
end
 156 3668 a -110 w Fe(2)287
b Fd(>)-14 b(>)g(>)63 b(i)15 b(n)g(s)g(e)g(r)g(t)g(i)g(o)g(n)24
b(\()11 b(8)24 b(,)30 b(l)18 b(i)h(s)f(t)g(e)28 b(\))p
0.95 TeXcolorgray 131 3815 25 113 v 0 TeXcolorgray 0.95
TeXcolorgray 128 3815 4 113 v 0 TeXcolorgray 128 3815
V 0.95 TeXcolorgray 156 3815 3969 113 v 0 TeXcolorgray
0.95 TeXcolorgray 4124 3815 25 113 v 0 TeXcolorgray 0.95
TeXcolorgray 4149 3815 4 113 v 0 TeXcolorgray 4149 3815
V 156 3781 a
SDict begin H.S end
 156 3781 a 156 3781 a
SDict begin 13.6 H.A end
 156 3781 a 156 3781
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.3) cvn /DEST pdfmark
end
 156 3781 a -110 w Fe(3)287 b Fd(>)-14 b(>)g(>)67 b(l)19
b(i)f(s)g(t)g(e)p 0.95 TeXcolorgray 131 3928 25 113 v
0 TeXcolorgray 0.95 TeXcolorgray 128 3928 4 113 v 0 TeXcolorgray
128 3928 V 0.95 TeXcolorgray 156 3928 3969 113 v 0 TeXcolorgray
0.95 TeXcolorgray 4124 3928 25 113 v 0 TeXcolorgray 0.95
TeXcolorgray 4149 3928 4 113 v 0 TeXcolorgray 4149 3928
V 156 3894 a
SDict begin H.S end
 156 3894 a 156 3894 a
SDict begin 13.6 H.A end
 156 3894 a 156 3894
a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.4) cvn /DEST pdfmark
end
 156 3894 a -110 w Fe(4)314 b Fd([)13 b(1)27 b(,)13
b(4)27 b(,)13 b(7)26 b(,)13 b(8)27 b(,)13 b(1)g(3)27
b(,)13 b(1)g(7)g(])p 0.95 TeXcolorgray 128 3956 4025
29 v 0 TeXcolorgray 0.95 TeXcolorgray 0 TeXcolorgray
128 3956 4 29 v 129 3956 29 4 v 156 3956 3969 4 v 4125
3956 29 4 v 4149 3956 4 29 v 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
